<!-- Generated by Intellisense Code Hints for Unity  - - -->
<doc>
  <assembly>
    <name>UnityEngine</name>
  </assembly>
  <members>
    <member name="T:UnityEngine.AndroidJavaException" />
    <member name="T:UnityEngine.AndroidJavaProxy">
      <summary>
        <para>This class can be used to implement any java interface. Any java vm method invocation matching the interface on the proxy object will automatically be passed to the c# implementation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJavaProxy.#ctor(System.String)">
      <param name="javaInterface">Java interface to be implemented by the proxy.</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaProxy.#ctor(UnityEngine.AndroidJavaClass)">
      <param name="javaInterface">Java interface to be implemented by the proxy.</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaProxy.Invoke(System.String,System.Object[])">
      <summary>
        <para>Called by the java vm whenever a method is invoked on the java proxy interface. You can override this to run special code on method invokation, or you can leave the implementation as is, and leave the default behavior which is to look for c# methods matching the signature of the java method.</para>
      </summary>
      <param name="methodName">Name of the invoked java method.</param>
      <param name="args">Arguments passed from the java vm - converted into AndroidJavaObject, AndroidJavaClass or a primitive.</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaProxy.Invoke(System.String,UnityEngine.AndroidJavaObject[])">
      <summary>
        <para>Called by the java vm whenever a method is invoked on the java proxy interface. You can override this to run special code on method invokation, or you can leave the implementation as is, and leave the default behavior which is to look for c# methods matching the signature of the java method.</para>
      </summary>
      <param name="methodName">Name of the invoked java method.</param>
      <param name="javaArgs">Arguments passed from the java vm - all objects are represented by AndroidJavaObject, int for instance is represented by a java.lang.Integer object.</param>
    </member>
    <member name="F:UnityEngine.AndroidJavaProxy.javaInterface">
      <summary>
        <para>Java interface implemented by the proxy.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AndroidJavaObject">
      <summary>
        <para>AndroidJavaObject is the Unity representation of a generic instance of java.lang.Object.</para>
        <para>It can be used as type-less interface to an instance of any Java class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.#ctor(System.String,System.Object[])">
      <summary>
        <para>Construct an AndroidJavaObject based on the name of the class.</para>
        <para>This essentially means locate the class type, allocate an object and run the specified constructor.</para>
      </summary>
      <param name="className">Specifies the Java class name (e.g. "<c>java.lang.String</c>" or "<c>java/lang/String</c>").</param>
      <param name="args">An array of parameters passed to the constructor.</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.Dispose">
      <summary>
        <para>IDisposable callback.</para>
        <para>Used in conjunction with using() { }</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.Call(System.String,System.Object[])">
      <summary>
        <para>Calls a Java method on an object (non-static).</para>
        <para>To call a method with return type 'void', use the regular version.</para>
      </summary>
      <param name="methodName">Specifies which method to call.</param>
      <param name="args">An array of parameters passed to the method.</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.CallStatic(System.String,System.Object[])">
      <summary>
        <para>Call a static Java method on a class.</para>
        <para>To call a static method with return type 'void', use the regular version.</para>
      </summary>
      <param name="methodName">Specifies which method to call.</param>
      <param name="args">An array of parameters passed to the method.</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.Get``1(System.String)">
      <summary>
        <para>Get the value of a field in an object (non-static).</para>
        <para>The generic parameter determines the field type.</para>
      </summary>
      <param name="fieldName">The name of the field (e.g. <i>int counter;</i> would have fieldName = "counter").</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.Set``1(System.String,``0)">
      <summary>
        <para>Set the value of a field in an object (non-static).</para>
        <para>The generic parameter determines the field type.</para>
      </summary>
      <param name="fieldName">The name of the field (e.g. <i>int counter;</i> would have fieldName = "counter").</param>
      <param name="val">The value to assign to the field. It has to match the field type.</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.GetStatic``1(System.String)">
      <summary>
        <para>Get the value of a static field in an object type.</para>
        <para>The generic parameter determines the field type.</para>
      </summary>
      <param name="fieldName">The name of the field (e.g. &amp;lt;i&amp;gt;int counter;&amp;lt;/i&amp;gt; would have fieldName = "counter").</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.SetStatic``1(System.String,``0)">
      <summary>
        <para>Set the value of a static field in an object type.</para>
        <para>The generic parameter determines the field type.</para>
      </summary>
      <param name="fieldName">The name of the field (e.g. <i>int counter;</i> would have fieldName = "counter").</param>
      <param name="val">The value to assign to the field. It has to match the field type.</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.GetRawObject">
      <summary>
        <para>Retrieve the <i>raw</i> jobject pointer to the Java object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.GetRawClass">
      <summary>
        <para>Retrieve the <i>raw</i> jclass pointer to the Java class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.Call``1(System.String,System.Object[])">
      <summary>
        <para>Call a Java method on an object.</para>
        <para>To call a Java method with a non-void return type, use the generic version.</para>
      </summary>
      <param name="methodName">Specifies which method to call.</param>
      <param name="args">An array of parameters passed to the method.</param>
    </member>
    <member name="M:UnityEngine.AndroidJavaObject.CallStatic``1(System.String,System.Object[])">
      <summary>
        <para>Call a static Java method on a class.</para>
        <para>To call a static method with a non-void return type, use the generic version.</para>
      </summary>
      <param name="methodName">Specifies which method to call.</param>
      <param name="args">An array of parameters passed to the method.</param>
    </member>
    <member name="T:UnityEngine.AndroidJavaClass">
      <summary>
        <para>AndroidJavaClass is the Unity representation of a generic instance of java.lang.Class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJavaClass.#ctor(System.String)">
      <summary>
        <para>Construct an AndroidJavaClass from the class name.</para>
        <para>This essentially means locate the class type and allocate a java.lang.Class object of that particular type.</para>
      </summary>
      <param name="className">Specifies the Java class name (e.g. <c>java.lang.String</c>).</param>
    </member>
    <member name="T:AOT.MonoPInvokeCallbackAttribute" />
    <member name="M:AOT.MonoPInvokeCallbackAttribute.#ctor(System.Type)" />
    <member name="T:UnityEngine.ThreadSafeAttribute" />
    <member name="M:UnityEngine.ThreadSafeAttribute.#ctor" />
    <member name="T:UnityEngine.AssemblyIsEditorAssembly">
      <summary>
        <para>Assembly level attribute. Any classes in an assembly with this attribute will be considered to be Editor Classes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssemblyIsEditorAssembly.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.GameCenter.GameCenterPlatform">
      <summary>
        <para>iOS GameCenter implementation for network services.</para>
        <para>An application bundle ID must be registered on iTunes Connect
before it can access GameCenter. This ID must be properly set in
the iOS player properties in Unity. When debugging you can use the GameCenter
sandbox (a text displaying this is shown when logging on). You
must log on in the application to get into sandbox mode, logging
on in the GameCenter application will always use the production version.When using the GameCenterPlatform class in C# you need to include the 
UnityEngine.SocialPlatforms.GameCenter namespace.Some things to be aware of when using the generic API:Authenticate()
If the user is not logged in, a standard GameKit UI is shown 
where he can log on or create a new user. It is recommended
this is done as early as possible.Achievement descriptions and Leaderboards
The achivements descriptions and leaderboard configurations can be configured in the 
iTunes Connect portal. Achievements get unique identifiers and the
leaderboards use category names as identifiers.GameCenter Sandbox
Development applications use the GameCenter Sandbox. This is a seperate GameCenter
than the live one, nothing is shared between them. It is recommended that you
create a seperate user for testing with the GameCenter Sandbox, you should not use
your real Apple ID for this. You can only log on to the sandbox through a development
application, make sure you are not logged into GameCenter using the GameCenter app before
testing begins. You should see *** Sandbox *** in the login dialog, if you don't see this
then you are logging on to the real one. Sometime it happens that the OS forgets that the
application is using the sandbox and you will be logged on to the real one. If the application
has not be submitted to Apple already then this will probably result in an error. To fix this
all that needs to be done is to delete the app and redeploy with Xcode. To make another apple 
ID a friend of a sandbox user it needs to be a sandbox user as well.If you start getting errors when accessing GameCenter stating that the
application is not recognized you'll need to delete the application complately and re-deploy.
Make sure you are not logged on when starting the newly installed application again.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.GameCenter.GameCenterPlatform.ResetAllAchievements(System.Action{System.Boolean})">
      <summary>
        <para>Reset all the achievements for the local user.</para>
        <para>Only affects the currently running game.
Javascript code example:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.GameCenter.GameCenterPlatform.ShowDefaultAchievementCompletionBanner(System.Boolean)">
      <summary>
        <para>Show the default iOS banner when achievements are completed.</para>
        <para>This only works on iOS 5.0+ and does nothing on older versions.
Javascript code example:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.GameCenter.GameCenterPlatform.ShowLeaderboardUI(System.String,UnityEngine.SocialPlatforms.TimeScope)">
      <summary>
        <para>Show the leaderboard UI with a specific leaderboard shown initially with a specific time scope selected.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FilterMode">
      <summary>
        <para>Filtering mode for textures. Corresponds to the settings in a <see href="http://docs.unity3d.com/ScriptReference/../Manual/Textures.html">texture inspector</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FilterMode.Point">
      <summary>
        <para>Point filtering - texture pixels become blocky up close.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FilterMode.Bilinear">
      <summary>
        <para>Bilinear filtering - texture samples are averaged.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FilterMode.Trilinear">
      <summary>
        <para>Trilinear filtering - texture samples are averaged and also blended between mipmap levels.</para>
        <para>RenderTextures do not support mipmaps, so this setting reverts to Bilinear for those.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextureWrapMode">
      <summary>
        <para>Wrap mode for textures.</para>
        <para>Corresponds to the settings in a texture inspector.
You can either Tile the texture (Repeat) or map a single texture on the object (Clamp)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureWrapMode.Repeat">
      <summary>
        <para>Tiles the texture, creating a repeating pattern.</para>
        <para>When UVs are outside of the 0...1 range, the integer part will be ignored, thus creating a repeating pattern.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureWrapMode.Clamp">
      <summary>
        <para>Clamps the texture to the last pixel at the border.</para>
        <para>This is useful for preventing wrapping artifacts when mapping an image onto an object and you don't want the texture to tile.
UV coordinates will be clamped to the range 0...1. When UVs are larger than 1 or smaller than 0, the last pixel at the border will be used.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NPOTSupport">
      <summary>
        <para>NPOT <see cref="Texture2D">textures</see> support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NPOTSupport.None">
      <summary>
        <para>NPOT textures are not supported. Will be upscaled/padded at loading time.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NPOTSupport.Restricted">
      <summary>
        <para>Limited NPOT support: no mip-maps and clamp <see cref="TextureWrapMode">wrap mode</see> will be forced.</para>
        <para>If NPOT Texture do have mip-maps it will be upscaled/padded at loading time.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NPOTSupport.Full">
      <summary>
        <para>Full NPOT support.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextureFormat">
      <summary>
        <para>Format of a <see cref="Texture2D">texture</see>. Used when creating textures from scripts.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.Alpha8">
      <summary>
        <para>Alpha-only texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ARGB4444">
      <summary>
        <para>A 16 bits/pixel texture format. Texture stores color with an alpha channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGB24">
      <summary>
        <para>A color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ARGB32">
      <summary>
        <para>Color with an alpha channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGB565">
      <summary>
        <para>A 16 bit color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.DXT1">
      <summary>
        <para>Compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.DXT5">
      <summary>
        <para>Compressed color with alpha channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.RGBA4444" />
    <member name="F:UnityEngine.TextureFormat.BGRA32">
      <summary>
        <para>Format returned by iPhone camera.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.PVRTC_RGB2">
      <summary>
        <para>PowerVR (iOS) 2 bits/pixel compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.PVRTC_RGBA2">
      <summary>
        <para>PowerVR (iOS) 2 bits/pixel compressed with alpha channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.PVRTC_RGB4">
      <summary>
        <para>PowerVR (iOS) 4 bits/pixel compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.PVRTC_RGBA4">
      <summary>
        <para>PowerVR (iOS) 4 bits/pixel compressed with alpha channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC_RGB4">
      <summary>
        <para>ETC (GLES2.0) 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ATC_RGB4">
      <summary>
        <para>ATC (ATITC) 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ATC_RGBA8">
      <summary>
        <para>ATC (ATITC) 8 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ATF_RGB_DXT1">
      <summary>
        <para>Flash-specific RGB DXT1 compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ATF_RGBA_JPG">
      <summary>
        <para>Flash-specific RGBA JPG-compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ATF_RGB_JPG">
      <summary>
        <para>Flash-specific RGB JPG-compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.EAC_R">
      <summary>
        <para>ETC2 / EAC (GL ES 3.0) 4 bits/pixel compressed unsigned single-channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.EAC_R_SIGNED">
      <summary>
        <para>ETC2 / EAC (GL ES 3.0) 4 bits/pixel compressed signed single-channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.EAC_RG">
      <summary>
        <para>ETC2 / EAC (GL ES 3.0) 8 bits/pixel compressed unsigned dual-channel (RG) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.EAC_RG_SIGNED">
      <summary>
        <para>ETC2 / EAC (GL ES 3.0) 8 bits/pixel compressed signed dual-channel (RG) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC2_RGB">
      <summary>
        <para>ETC2 (GL ES 3.0) 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC2_RGBA1">
      <summary>
        <para>ETC2 (GL ES 3.0) 4 bits/pixel RGB+1-bit alpha texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ETC2_RGBA8">
      <summary>
        <para>ETC2 (GL ES 3.0) 8 bits/pixel compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_4x4">
      <summary>
        <para>ASTC (4x4 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_5x5">
      <summary>
        <para>ASTC (5x5 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_6x6">
      <summary>
        <para>ASTC (6x6 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_8x8">
      <summary>
        <para>ASTC (8x8 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_10x10">
      <summary>
        <para>ASTC (10x10 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGB_12x12">
      <summary>
        <para>ASTC (12x12 pixel block in 128 bits) compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_4x4">
      <summary>
        <para>ASTC (4x4 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_5x5">
      <summary>
        <para>ASTC (5x5 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_6x6">
      <summary>
        <para>ASTC (6x6 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_8x8">
      <summary>
        <para>ASTC (8x8 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_10x10">
      <summary>
        <para>ASTC (10x10 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureFormat.ASTC_RGBA_12x12">
      <summary>
        <para>ASTC (12x12 pixel block in 128 bits) compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CubemapFace">
      <summary>
        <para>
          <see cref="Cubemap">Cubemap</see> face.</para>
        <para>Used by Cubemap.GetPixel and Cubemap.SetPixel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.PositiveX">
      <summary>
        <para>Right facing side (+x).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.NegativeX">
      <summary>
        <para>Left facing side (-x).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.PositiveY">
      <summary>
        <para>Upwards facing side (+y).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.NegativeY">
      <summary>
        <para>Downward facing side (-y).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.PositiveZ">
      <summary>
        <para>Forward facing side (+z).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CubemapFace.NegativeZ">
      <summary>
        <para>Backward facing side (-z).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderTextureFormat">
      <summary>
        <para>Format of a <see cref="RenderTexture">RenderTexture</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGB32">
      <summary>
        <para>Color render texture format, 8 bits per channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.Depth">
      <summary>
        <para>A depth render texture format.</para>
        <para>Depth format is used to render high precision "depth" value into a render texture. Which format
is actually used depends on the platform. On OpenGL it is the native "depth component" format
(usually 24 or 16 bits), on Direct3D9 it is the 32 bit floating point ("R32F") format. When writing
shaders that use or render into a depth texture, care must be taken to ensure that they work both
on OpenGL and on Direct3D, see depth textures documentation.Note that not all graphics cards support depth textures. Use SystemInfo.SupportsRenderTextureFormat
to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGBHalf">
      <summary>
        <para>Color render texture format, 16 bit floating point per channel.</para>
        <para>Note that not all graphics cards support floating point render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGB565">
      <summary>
        <para>Color render texture format.</para>
        <para>5 bits for Red channel, 6 bits for Green channel, 5 bits for Blue channelNote that not all graphics cards support 16 bit textures. Use SystemInfo.SupportsRenderTextureFormat
to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGB4444">
      <summary>
        <para>Color render texture format, 4 bit per channel.</para>
        <para>Note that not all graphics cards support 16 bit textures. Use SystemInfo.SupportsRenderTextureFormat
to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGB1555">
      <summary>
        <para>Color render texture format, 1 bit for Alpha channel, 5 bits for Red, Green and Blue channels.</para>
        <para>Note that not all graphics cards support 16 bit textures. Use SystemInfo.SupportsRenderTextureFormat
to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.Default">
      <summary>
        <para>Default color render texture format: will be chosen accordingly to Frame Buffer format and Platform.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.DefaultHDR">
      <summary>
        <para>Default HDR color render texture format: will be chosen accordingly to Frame Buffer format and Platform.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGBFloat">
      <summary>
        <para>Color render texture format, 32 bit floating point per channel.</para>
        <para>Note that not all graphics cards support floating point render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGFloat">
      <summary>
        <para>Two color (RG) render texture format, 32 bit floating point per channel.</para>
        <para>Note that not all graphics cards support floating point render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGHalf">
      <summary>
        <para>Two color (RG) render texture format, 16 bit floating point per channel.</para>
        <para>Note that not all graphics cards support floating point render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RFloat">
      <summary>
        <para>Scalar (R) render texture format, 32 bit floating point.</para>
        <para>Note that not all graphics cards support floating point render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RHalf">
      <summary>
        <para>Scalar (R) render texture format, 16 bit floating point.</para>
        <para>Note that not all graphics cards support floating point render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.R8">
      <summary>
        <para>Scalar (R) render texture format, 8 bit fixed point.</para>
        <para>Note that not all graphics cards support floating point render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.ARGBInt">
      <summary>
        <para>Four channel (ARGB) render texture format, 32 bit signed integer per channel.</para>
        <para>Note that not all graphics cards support integer render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RGInt">
      <summary>
        <para>Two channel (RG) render texture format, 32 bit signed integer per channel.</para>
        <para>Note that not all graphics cards support integer render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureFormat.RInt">
      <summary>
        <para>Scalar (R) render texture format, 32 bit signed integer.</para>
        <para>Note that not all graphics cards support integer render textures.
Use SystemInfo.SupportsRenderTextureFormat to check for support.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderTextureReadWrite">
      <summary>
        <para>Read write mode of a <see cref="RenderTexture">RenderTexture</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureReadWrite.Default">
      <summary>
        <para>The correct color space for the current position in the rendering pipeline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureReadWrite.Linear">
      <summary>
        <para>No sRGB reads or writes to this render texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderTextureReadWrite.sRGB">
      <summary>
        <para>sRGB reads and writes to this render texture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.BlendMode">
      <summary>
        <para>Blend mode for controlling the blending.</para>
        <para>The blend mode is set separately for source and destination, and it controls the blend factor of each component going into the blend eqquation. It is also possible to set the blend mode for color and alpha components separately. Note: the blend modes are ignored if logical blend operations are in use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.Zero">
      <summary>
        <para>Blend factor is  (0, 0, 0, 0).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.One">
      <summary>
        <para>Blend factor is (1, 1, 1, 1).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.DstColor">
      <summary>
        <para>Blend factor is (Rd, Gd, Bd, Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.SrcColor">
      <summary>
        <para>Blend factor is (Rs, Gs, Bs, As).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.OneMinusDstColor">
      <summary>
        <para>Blend factor is (1 - Rd, 1 - Gd, 1 - Bd, 1 - Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.SrcAlpha">
      <summary>
        <para>Blend factor is (As, As, As, As).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.OneMinusSrcColor">
      <summary>
        <para>Blend factor is (1 - Rs, 1 - Gs, 1 - Bs, 1 - As).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.DstAlpha">
      <summary>
        <para>Blend factor is (Ad, Ad, Ad, Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.OneMinusDstAlpha">
      <summary>
        <para>Blend factor is (1 - Ad, 1 - Ad, 1 - Ad, 1 - Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.SrcAlphaSaturate">
      <summary>
        <para>Blend factor is (f, f, f, 1); where f = min(As, 1 - Ad).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendMode.OneMinusSrcAlpha">
      <summary>
        <para>Blend factor is (1 - As, 1 - As, 1 - As, 1 - As).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.BlendOp">
      <summary>
        <para>Blend operation.</para>
        <para>The blend operation that is used to combine the pixel shader output with the render target. Note that the logical operations are only supported in Gamma (non-sRGB) colorspace, on DX11.1 hardware running on DirectX 11.1 runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Add">
      <summary>
        <para>Add (s + d).</para>
        <para>Add source and destination together, with specified blend modes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Subtract">
      <summary>
        <para>Subtract.</para>
        <para>Subtract the source from the destination.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.ReverseSubtract">
      <summary>
        <para>Reverse subtract.</para>
        <para>Subtract the destination from the source.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Min">
      <summary>
        <para>Min.</para>
        <para>Select the smaller value from source and destination.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.Max">
      <summary>
        <para>Max.</para>
        <para>Select the larger value of in source and destination.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalClear">
      <summary>
        <para>Logical Clear (0).</para>
        <para>Clears all bits in the target to 0. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalSet">
      <summary>
        <para>Logical SET (1) (D3D11.1 only).</para>
        <para>Performs logical SET (1) operation, effectively setting all bits in the render target. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalCopy">
      <summary>
        <para>Logical Copy (s) (D3D11.1 only).</para>
        <para>This operation copies the source bits to target, effectively disabling blending. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalCopyInverted">
      <summary>
        <para>Logical inverted Copy (!s) (D3D11.1 only).</para>
        <para>This operation inverts the source bits before blitting to target.This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalNoop">
      <summary>
        <para>Logical No-op (d) (D3D11.1 only).</para>
        <para>Performs logical no-op (dest) operation, effectively leaving the render target unchanged. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalInvert">
      <summary>
        <para>Logical Inverse (!d) (D3D11.1 only).</para>
        <para>This operation inverts the bits in the destination, ignoring source. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalAnd">
      <summary>
        <para>Logical AND (s &amp;amp; d) (D3D11.1 only).</para>
        <para>Performs logical AND (src &amp;amp; dest) operation. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalNand">
      <summary>
        <para>Logical NAND !(s &amp;amp; d). D3D11.1 only.</para>
        <para>Performs logical NAND !(src &amp;amp; dest) operation. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalOr">
      <summary>
        <para>Logical OR (s | d) (D3D11.1 only).</para>
        <para>Performs logical OR (src | dest) operation. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalNor">
      <summary>
        <para>Logical NOR !(s | d) (D3D11.1 only).</para>
        <para>Performs logical NOR !(src | dest) operation. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalXor">
      <summary>
        <para>Logical XOR (s XOR d) (D3D11.1 only).</para>
        <para>Performs logical XOR (src XOR dest) operation. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalEquivalence">
      <summary>
        <para>Logical Equivalence !(s XOR d) (D3D11.1 only).</para>
        <para>This operation performs !(s XOR d). This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalAndReverse">
      <summary>
        <para>Logical reverse AND (s &amp;amp; !d) (D3D11.1 only).</para>
        <para>Performs logical reverse AND (src &amp;amp; !dest) operation. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalAndInverted">
      <summary>
        <para>Logical inverted AND (!s &amp;amp; d) (D3D11.1 only).</para>
        <para>Performs logical inverted AND (!src &amp;amp; dest) operation. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalOrReverse">
      <summary>
        <para>Logical reverse OR (s | !d) (D3D11.1 only).</para>
        <para>Performs logical reverse OR (src | !dest) operation. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.BlendOp.LogicalOrInverted">
      <summary>
        <para>Logical inverted OR (!s | d) (D3D11.1 only).</para>
        <para>Performs logical inverted OR (!src | dest) operation. This mode is currently only available with D3D11 renderer on DX11.1 class hardware and DX runtime.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CompareFunction">
      <summary>
        <para>Depth or stencil comparison function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Disabled">
      <summary>
        <para>Depth or stencil test is disabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Never">
      <summary>
        <para>Never pass depth or stencil test.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Less">
      <summary>
        <para>Pass depth or stencil test when new value is less than old one.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Equal">
      <summary>
        <para>Pass depth or stencil test when values are equal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.LessEqual">
      <summary>
        <para>Pass depth or stencil test when new value is less or equal than old one.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Greater">
      <summary>
        <para>Pass depth or stencil test when new value is greater than old one.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.NotEqual">
      <summary>
        <para>Pass depth or stencil test when values are different.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.GreaterEqual">
      <summary>
        <para>Pass depth or stencil test when new value is greater or equal than old one.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CompareFunction.Always">
      <summary>
        <para>Always pass depth or stencil test.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.CullMode">
      <summary>
        <para>Backface culling mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullMode.Off">
      <summary>
        <para>Disable culling.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullMode.Front">
      <summary>
        <para>Cull front-facing geometry.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.CullMode.Back">
      <summary>
        <para>Cull back-facing geometry.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.ColorWriteMask">
      <summary>
        <para>Specifies which color components will get written into the target framebuffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.Alpha">
      <summary>
        <para>Write alpha component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.Blue">
      <summary>
        <para>Write blue component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.Green">
      <summary>
        <para>Write green component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.Red">
      <summary>
        <para>Write red component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.ColorWriteMask.All">
      <summary>
        <para>Write all components (R, G, B and Alpha).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rendering.StencilOp">
      <summary>
        <para>Specifies the operation that's performed on the stencil buffer when rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.Keep">
      <summary>
        <para>Keeps the current stencil value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.Zero">
      <summary>
        <para>Sets the stencil buffer value to zero.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.Replace">
      <summary>
        <para>Replace the stencil buffer value with reference value (specified in the shader).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.IncrementSaturate">
      <summary>
        <para>Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.DecrementSaturate">
      <summary>
        <para>Decrements the current stencil buffer value. Clamps to 0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.Invert">
      <summary>
        <para>Bitwise inverts the current stencil buffer value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.IncrementWrap">
      <summary>
        <para>Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Rendering.StencilOp.DecrementWrap">
      <summary>
        <para>Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable unsigned value when decrementing a stencil buffer value of zero.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ImplementedInActionScriptAttribute" />
    <member name="T:UnityEngine.SocialPlatforms.Impl.LocalUser" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.#ctor" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.Authenticate(System.Action{System.Boolean})" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.LoadFriends(System.Action{System.Boolean})" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.SetFriends(UnityEngine.SocialPlatforms.IUserProfile[])" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.SetAuthenticated(System.Boolean)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.LocalUser.SetUnderage(System.Boolean)" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.LocalUser.friends" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.LocalUser.authenticated" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.LocalUser.underage" />
    <member name="T:UnityEngine.SocialPlatforms.Impl.UserProfile" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.#ctor" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.#ctor(System.String,System.String,System.Boolean)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.#ctor(System.String,System.String,System.Boolean,UnityEngine.SocialPlatforms.UserState,UnityEngine.Texture2D)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.ToString" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetUserName(System.String)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetUserID(System.String)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetImage(UnityEngine.Texture2D)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetIsFriend(System.Boolean)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.UserProfile.SetState(UnityEngine.SocialPlatforms.UserState)" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.userName" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.id" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.isFriend" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.state" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.UserProfile.image" />
    <member name="T:UnityEngine.SocialPlatforms.Impl.Achievement" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.#ctor(System.String,System.Double,System.Boolean,System.Boolean,System.DateTime)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.#ctor(System.String,System.Double)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.#ctor" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.ToString" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.ReportProgress(System.Action{System.Boolean})" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.SetCompleted(System.Boolean)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.SetHidden(System.Boolean)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Achievement.SetLastReportedDate(System.DateTime)" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.id" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.percentCompleted" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.completed" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.hidden" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Achievement.lastReportedDate" />
    <member name="T:UnityEngine.SocialPlatforms.Impl.AchievementDescription" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.AchievementDescription.#ctor(System.String,System.String,UnityEngine.Texture2D,System.String,System.String,System.Boolean,System.Int32)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.AchievementDescription.ToString" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.AchievementDescription.SetImage(UnityEngine.Texture2D)" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.id" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.title" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.image" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.achievedDescription" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.unachievedDescription" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.hidden" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.AchievementDescription.points" />
    <member name="T:UnityEngine.SocialPlatforms.Impl.Score" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Score.#ctor" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Score.#ctor(System.String,System.Int64)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Score.#ctor(System.String,System.Int64,System.String,System.DateTime,System.String,System.Int32)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Score.ToString" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Score.ReportScore(System.Action{System.Boolean})" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Score.SetDate(System.DateTime)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Score.SetFormattedValue(System.String)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Score.SetUserID(System.String)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Score.SetRank(System.Int32)" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Score.leaderboardID" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Score.value" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Score.date" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Score.formattedValue" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Score.userID" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Score.rank" />
    <member name="T:UnityEngine.SocialPlatforms.Impl.Leaderboard" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.#ctor" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.SetUserFilter(System.String[])" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.ToString" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.LoadScores(System.Action{System.Boolean})" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.SetLocalUserScore(UnityEngine.SocialPlatforms.IScore)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.SetScores(UnityEngine.SocialPlatforms.IScore[])" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.SetTitle(System.String)" />
    <member name="M:UnityEngine.SocialPlatforms.Impl.Leaderboard.GetUserFilter" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.loading" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.id" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.userScope" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.range" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.timeScope" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.localUserScore" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.scores" />
    <member name="P:UnityEngine.SocialPlatforms.Impl.Leaderboard.title" />
    <member name="T:UnityEngine.SocialPlatforms.Local" />
    <member name="M:UnityEngine.SocialPlatforms.Local.#ctor" />
    <member name="M:UnityEngine.SocialPlatforms.Local.LoadUsers(System.String[],System.Action{UnityEngine.SocialPlatforms.IUserProfile[]})" />
    <member name="M:UnityEngine.SocialPlatforms.Local.ReportProgress(System.String,System.Double,System.Action{System.Boolean})" />
    <member name="M:UnityEngine.SocialPlatforms.Local.LoadAchievementDescriptions(System.Action{UnityEngine.SocialPlatforms.IAchievementDescription[]})" />
    <member name="M:UnityEngine.SocialPlatforms.Local.LoadAchievements(System.Action{UnityEngine.SocialPlatforms.IAchievement[]})" />
    <member name="M:UnityEngine.SocialPlatforms.Local.ReportScore(System.Int64,System.String,System.Action{System.Boolean})" />
    <member name="M:UnityEngine.SocialPlatforms.Local.LoadScores(System.String,System.Action{UnityEngine.SocialPlatforms.IScore[]})" />
    <member name="M:UnityEngine.SocialPlatforms.Local.ShowLeaderboardUI">
      <summary>
        <para>Show a default/system view of the games leaderboards.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.Local.CreateLeaderboard" />
    <member name="M:UnityEngine.SocialPlatforms.Local.CreateAchievement" />
    <member name="P:UnityEngine.SocialPlatforms.Local.localUser" />
    <member name="T:UnityEngine.Social">
      <summary>
        <para>Generic access to the Social API.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.LoadUsers(System.String[],System.Action{UnityEngine.SocialPlatforms.IUserProfile[]})">
      <summary>
        <para>Load the user profiles accociated with the given array of user IDs.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.ReportProgress(System.String,System.Double,System.Action{System.Boolean})">
      <summary>
        <para>Reports the progress of an achievement.</para>
        <para>The achievement ID number must match an achievement description associated with this application. Reporting a progress of 0.0 usually means the achievement can be shown if it was hidden before. Depending on the platform, partial progress cannot always be reported, in which case 100.0 is the only other value which can be used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.LoadAchievementDescriptions(System.Action{UnityEngine.SocialPlatforms.IAchievementDescription[]})">
      <summary>
        <para>Loads the achievement descriptions accociated with this application.</para>
        <para>This is usually set up outside Unity on some external service provided by the implementation provider. For example, when using GameCenter you need to set up the achievements using iTunes Connect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.LoadAchievements(System.Action{UnityEngine.SocialPlatforms.IAchievement[]})">
      <summary>
        <para>Load the achievements the logged in user has already achieved or reported progress on.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.ReportScore(System.Int64,System.String,System.Action{System.Boolean})">
      <summary>
        <para>Report a score to a specific leaderboard.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.LoadScores(System.String,System.Action{UnityEngine.SocialPlatforms.IScore[]})">
      <summary>
        <para>Load a default set of scores from the given leaderboard.</para>
        <para>This uses default leaderboard parameters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.CreateLeaderboard">
      <summary>
        <para>Create an ILeaderboard instance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.CreateAchievement">
      <summary>
        <para>Create an IAchievement instance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.ShowAchievementsUI">
      <summary>
        <para>Show a default/system view of the games achievements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Social.ShowLeaderboardUI">
      <summary>
        <para>Show a default/system view of the games leaderboards.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Social.Active">
      <summary>
        <para>This is the currently active social platform.</para>
        <para>If not explicitly set, a default is picked depending on the target platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Social.localUser">
      <summary>
        <para>The local user (potentially not logged in).</para>
        <para>Until the user logs in or authenticates himself the profile data will be invalid and no other Social API functionality will work.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.ISocialPlatform">
      <summary>
        <para>The generic Social API interface which implementations must inherit.</para>
        <para>See Social for details on usage.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadUsers(System.String[],System.Action{UnityEngine.SocialPlatforms.IUserProfile[]})">
      <summary>
        <para>See <see cref="Social.LoadUsers">Social.LoadUsers</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.ReportProgress(System.String,System.Double,System.Action{System.Boolean})">
      <summary>
        <para>See <see cref="Social.ReportProgress">Social.ReportProgress</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadAchievementDescriptions(System.Action{UnityEngine.SocialPlatforms.IAchievementDescription[]})">
      <summary>
        <para>See <see cref="Social.LoadAchievementDescriptions">Social.LoadAchievementDescriptions</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadAchievements(System.Action{UnityEngine.SocialPlatforms.IAchievement[]})">
      <summary>
        <para>See <see cref="Social.LoadAchievements">Social.LoadAchievements</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.CreateAchievement">
      <summary>
        <para>See <see cref="Social.CreateAchievement">Social.CreateAchievement</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.ReportScore(System.Int64,System.String,System.Action{System.Boolean})">
      <summary>
        <para>See <see cref="Social.ReportScore">Social.ReportScore</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadScores(System.String,System.Action{UnityEngine.SocialPlatforms.IScore[]})">
      <summary>
        <para>See <see cref="Social.LoadScores">Social.LoadScores</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.CreateLeaderboard">
      <summary>
        <para>See <see cref="Social.CreateLeaderboard">Social.CreateLeaderboard</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.ShowAchievementsUI">
      <summary>
        <para>See <see cref="Social.ShowAchievementsUI">Social.ShowAchievementsUI</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.ShowLeaderboardUI">
      <summary>
        <para>See <see cref="Social.ShowLeaderboardUI">Social.ShowLeaderboardUI</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ISocialPlatform.LoadScores(UnityEngine.SocialPlatforms.ILeaderboard,System.Action{System.Boolean})">
      <summary>
        <para>See <see cref="Social.LoadScores">Social.LoadScores</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ISocialPlatform.localUser">
      <summary>
        <para>See Social.localUser.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.ILocalUser">
      <summary>
        <para>Represents the local or currently logged in user.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ILocalUser.Authenticate(System.Action{System.Boolean})">
      <summary>
        <para>Authenticate the local user to the current active Social API implementation and fetch his profile data.</para>
        <para>This should be done before any other calls into the API. Depending on the platform this might trigger a blocking dialog for providing login details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ILocalUser.LoadFriends(System.Action{System.Boolean})">
      <summary>
        <para>Fetches the friends list of the logged in user. The friends list on the <see cref="ISocialPlatform.localUser">Social.localUser</see> instance is populated if this call succeeds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILocalUser.friends">
      <summary>
        <para>The users friends list.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILocalUser.authenticated">
      <summary>
        <para>Checks if the current user has been authenticated.</para>
        <para>If not then he will need to log on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILocalUser.underage">
      <summary>
        <para>Is the user underage?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.UserState">
      <summary>
        <para>User presence state.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SocialPlatforms.UserState.Online">
      <summary>
        <para>The user is online.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SocialPlatforms.UserState.OnlineAndAway">
      <summary>
        <para>The user is online but away from his computer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SocialPlatforms.UserState.OnlineAndBusy">
      <summary>
        <para>The user is only but set his status to busy.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SocialPlatforms.UserState.Offline">
      <summary>
        <para>The user is offline.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SocialPlatforms.UserState.Playing">
      <summary>
        <para>The user is playing a game.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.IUserProfile">
      <summary>
        <para>Represents generic user instances, like friends of the local user.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IUserProfile.userName">
      <summary>
        <para>This user's username or alias.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IUserProfile.id">
      <summary>
        <para>This users unique identifier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IUserProfile.isFriend">
      <summary>
        <para>Is this user a friend of the current logged in user?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IUserProfile.state">
      <summary>
        <para>Presence state of the user.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IUserProfile.image">
      <summary>
        <para>Avatar image of the user.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.IAchievement">
      <summary>
        <para>Information for a users achievement.</para>
        <para>This defines the relation between a particular achievement (described by
IAchievementDescription) and the local user, what progress he has, last date he reported progress and so on.Use Social.CreateAchievement to create an instance of this object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.IAchievement.ReportProgress(System.Action{System.Boolean})">
      <summary>
        <para>Send notification about progress on this achievement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievement.id">
      <summary>
        <para>The unique identifier of this achievement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievement.percentCompleted">
      <summary>
        <para>Progress for this achievement.</para>
        <para>Progress towards an achievement can be reported, when this reaches 100.0 it is considered complete.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievement.completed">
      <summary>
        <para>Set to true when percentCompleted is 100.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievement.hidden">
      <summary>
        <para>This achievement is currently hidden from the user.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievement.lastReportedDate">
      <summary>
        <para>Set by server when percentCompleted is updated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.IAchievementDescription">
      <summary>
        <para>Static data describing an achievement.</para>
        <para>Retreive the achievement descriptions by using Social.LoadAchievementDescriptions.
GameCenter: These are stored server side and should be fetched when the user has authenticated. These are set in the iTunes Connect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.id">
      <summary>
        <para>Unique identifier for this achievement description.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.title">
      <summary>
        <para>Human readable title.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.image">
      <summary>
        <para>Image representation of the achievement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.achievedDescription">
      <summary>
        <para>Description when the achivement is completed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.unachievedDescription">
      <summary>
        <para>Description when the achivement has not been completed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.hidden">
      <summary>
        <para>Hidden achievement are not shown in the list until the percentCompleted has been touched (even if it's 0.0).</para>
        <para>Can be used for achievements which are enabled when an addon is bought.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IAchievementDescription.points">
      <summary>
        <para>Point value of this achievement.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.IScore">
      <summary>
        <para>A game score.</para>
        <para>It can be received from a ILeaderboard instance or using the Social.LoadScores call which uses the default leaderboard filters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.IScore.ReportScore(System.Action{System.Boolean})">
      <summary>
        <para>Report this score instance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IScore.leaderboardID">
      <summary>
        <para>The ID of the leaderboard this score belongs to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IScore.value">
      <summary>
        <para>The score value achieved.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IScore.date">
      <summary>
        <para>The date the score was achieved.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IScore.formattedValue">
      <summary>
        <para>The correctly formatted value of the score, like X points or X kills.</para>
        <para>You should not use the value parameter directly but this string instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IScore.userID">
      <summary>
        <para>The user who owns this score.</para>
        <para>You can load the users information using Social.LoadUsers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.IScore.rank">
      <summary>
        <para>The rank or position of the score in the leaderboard.</para>
        <para>Only valid when the score is retreived from a server.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.UserScope">
      <summary>
        <para>The scope of the users searched through when querying the leaderboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SocialPlatforms.UserScope.Global" />
    <member name="F:UnityEngine.SocialPlatforms.UserScope.FriendsOnly" />
    <member name="T:UnityEngine.SocialPlatforms.TimeScope">
      <summary>
        <para>The scope of time searched through when querying the leaderboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SocialPlatforms.TimeScope.Today" />
    <member name="F:UnityEngine.SocialPlatforms.TimeScope.Week" />
    <member name="F:UnityEngine.SocialPlatforms.TimeScope.AllTime" />
    <member name="T:UnityEngine.SocialPlatforms.Range">
      <summary>
        <para>The score range a leaderboard query should include.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.Range.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Constructor for a score range, the range starts from a specific value and contains a maxium score count.</para>
      </summary>
      <param name="fromValue">The minimum allowed value.</param>
      <param name="valueCount">The number of possible values.</param>
    </member>
    <member name="F:UnityEngine.SocialPlatforms.Range.from">
      <summary>
        <para>The rank of the first score which is returned.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SocialPlatforms.Range.count">
      <summary>
        <para>The total amount of scores retreived.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SocialPlatforms.ILeaderboard">
      <summary>
        <para>The leaderboard contains the scores of all players for a particular game.</para>
        <para>Each game can have multiple leaderboards with different scores. A leaderboard object can be customized to perform a particular query. The leaderboard ID defines which leaderboard is being queried and there are filters to narrow down the results,  UserScope,  TimeScope,   Range and SetUserFilter.
Use Social.CreateLeaderboard to create an instance of this object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ILeaderboard.SetUserFilter(System.String[])">
      <summary>
        <para>Only search for these user IDs.</para>
        <para>This will ignore conflicting filters like the UserScope.</para>
      </summary>
      <param name="userIDs">List of user ids.</param>
    </member>
    <member name="M:UnityEngine.SocialPlatforms.ILeaderboard.LoadScores(System.Action{System.Boolean})">
      <summary>
        <para>Load scores according to the filters set on this leaderboard.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.loading">
      <summary>
        <para>The leaderboad is in the process of loading scores.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.id">
      <summary>
        <para>Unique identifier for this leaderboard.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.userScope">
      <summary>
        <para>The users scope searched by this leaderboard.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.range">
      <summary>
        <para>The rank range this leaderboard returns.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.timeScope">
      <summary>
        <para>The time period/scope searched by this leaderboard.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.localUserScore">
      <summary>
        <para>The leaderboard score of the logged in user.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.maxRange">
      <summary>
        <para>The total amount of scores the leaderboard contains.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.scores">
      <summary>
        <para>The leaderboard scores returned by a query.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SocialPlatforms.ILeaderboard.title">
      <summary>
        <para>The human readable title of this leaderboard.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PropertyAttribute">
      <summary>
        <para>Base class to derive custom property attributes from. Use this to create custom attributes for script variables.</para>
        <para>A custom attributes can be hooked up with a custom PropertyDrawer class to control how a script variable with that attribute is shown in the Inspector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PropertyAttribute.order">
      <summary>
        <para>Optional field to specify the order that multiple DecorationDrawers should be drawn in.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ContextMenuItemAttribute">
      <summary>
        <para>Use this attribute to add a context menu to a field that calls a  named method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ContextMenuItemAttribute.#ctor(System.String,System.String)">
      <summary>
        <para>Use this attribute to add a context menu to a field that calls a  named method.</para>
      </summary>
      <param name="name">The name of the context menu item.</param>
      <param name="function">The name of the function that should be called.</param>
    </member>
    <member name="F:UnityEngine.ContextMenuItemAttribute.name">
      <summary>
        <para>The name of the context menu item.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ContextMenuItemAttribute.function">
      <summary>
        <para>The name of the function that should be called.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TooltipAttribute">
      <summary>
        <para>Specify a tooltip for a field.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TooltipAttribute.#ctor(System.String)">
      <summary>
        <para>Specify a tooltip for a field.</para>
      </summary>
      <param name="tooltip">The tooltip text.</param>
    </member>
    <member name="F:UnityEngine.TooltipAttribute.tooltip">
      <summary>
        <para>The tooltip text.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpaceAttribute">
      <summary>
        <para>Use this <see cref="PropertyAttribute">PropertyAttribute</see> to add some spacing in the Inspector.</para>
        <para>The spacing is done using a DecoratorDrawer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SpaceAttribute.#ctor(System.Single)">
      <summary>
        <para>Use this <see cref="DecoratorDrawer">DecoratorDrawer</see> to add some spacing in the Inspector.</para>
      </summary>
      <param name="height">The spacing in pixels.</param>
    </member>
    <member name="F:UnityEngine.SpaceAttribute.height">
      <summary>
        <para>The spacing in pixels.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HeaderAttribute">
      <summary>
        <para>Use this <see cref="PropertyAttribute">PropertyAttribute</see> to add a header above some fields in the Inspector.</para>
        <para>The header is done using a DecoratorDrawer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HeaderAttribute.#ctor(System.String)">
      <summary>
        <para>Add a header above some fields in the Inspector.</para>
      </summary>
      <param name="header">The header text.</param>
    </member>
    <member name="F:UnityEngine.HeaderAttribute.header">
      <summary>
        <para>The header text.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RangeAttribute">
      <summary>
        <para>Attribute used to make a float or int variable in a script be restricted to a specific range.</para>
        <para>When this attribute is used, the float or int will be shown as a slider in the Inspector instead of the default number field.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RangeAttribute.#ctor(System.Single,System.Single)">
      <summary>
        <para>Attribute used to make a float or int variable in a script be restricted to a specific range.</para>
        <para>When this attribute is used, the float or int will be shown as a slider in the Inspector instead of the default number field.</para>
      </summary>
      <param name="min">The minimum allowed value.</param>
      <param name="max">The maximum allowed value.</param>
    </member>
    <member name="F:UnityEngine.RangeAttribute.min" />
    <member name="F:UnityEngine.RangeAttribute.max" />
    <member name="T:UnityEngine.MultilineAttribute">
      <summary>
        <para>Attribute to make a string be edited with a multi-line textfield.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MultilineAttribute.#ctor">
      <summary>
        <para>Attribute used to make a string value be shown in a multiline textarea.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MultilineAttribute.#ctor(System.Int32)">
      <summary>
        <para>Attribute used to make a string value be shown in a multiline textarea.</para>
      </summary>
      <param name="lines">How many lines of text to make room for. Default is 3.</param>
    </member>
    <member name="F:UnityEngine.MultilineAttribute.lines" />
    <member name="T:UnityEngine.TextAreaAttribute">
      <summary>
        <para>Attribute to make a string be edited with a height-flexible and scrollable text area.</para>
        <para>You can specify the minimum and maximum lines for the Texxtrea, and the field will expand according to the size of the text. A scrollbar will appear if the text is bigger than the area available.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextAreaAttribute.#ctor">
      <summary>
        <para>Attribute to make a string be edited with a height-flexible and scrollable text area.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextAreaAttribute.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Attribute to make a string be edited with a height-flexible and scrollable text area.</para>
      </summary>
      <param name="minLines">The minimum amount of lines the text area will use.</param>
      <param name="maxLines">The maximum amount of lines the text area can show before it starts using a scrollbar.</param>
    </member>
    <member name="F:UnityEngine.TextAreaAttribute.minLines">
      <summary>
        <para>The minimum amount of lines the text area will use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAreaAttribute.maxLines">
      <summary>
        <para>The maximum amount of lines the text area can show before it starts using a scrollbar.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Security">
      <summary>
        <para>Webplayer security related class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Security.#ctor" />
    <member name="M:UnityEngine.Security.LoadAndVerifyAssembly(System.Byte[],System.String)" />
    <member name="M:UnityEngine.Security.LoadAndVerifyAssembly(System.Byte[])" />
    <member name="M:UnityEngine.Security.PrefetchSocketPolicy(System.String,System.Int32)">
      <summary>
        <para>Prefetch the webplayer socket security policy from a non-default port number.</para>
        <para>Socket connections attempted in a webplayer need to be validated by a socket policy. 
When the policy is hosted on a port different than the default port number (843) it needs to 
be explicitly fetched with this API call before any socket connections are attempted.
The timeout argument is in milliseconds.The return value indicates if a policy was successfully retrieved or not.See more about the webplayer security sandbox in the manual.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Security.PrefetchSocketPolicy(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Prefetch the webplayer socket security policy from a non-default port number.</para>
        <para>Socket connections attempted in a webplayer need to be validated by a socket policy. 
When the policy is hosted on a port different than the default port number (843) it needs to 
be explicitly fetched with this API call before any socket connections are attempted.
The timeout argument is in milliseconds.The return value indicates if a policy was successfully retrieved or not.See more about the webplayer security sandbox in the manual.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Security.GetChainOfTrustValue(System.String)" />
    <member name="T:UnityEngine.Types" />
    <member name="M:UnityEngine.Types.GetType(System.String,System.String)" />
    <member name="T:UnityEngine.SelectionBaseAttribute">
      <summary>
        <para>Add this attribute to a script class to mark its GameObject as a selection base object for Scene View picking.</para>
        <para>In the Unity Scene View, when clicking to select objects, Unity will try to figure out the best object to select for you. If you click on an object that is part of a prefab, the root of the prefab is selected, because a prefab root is treated as a selection base. You can make other objects be treated as selection base too. You need to create a script class with the SelectionBase attribute, and then you need to add that script to the GameObject.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.StackTraceUtility" />
    <member name="M:UnityEngine.StackTraceUtility.#ctor" />
    <member name="M:UnityEngine.StackTraceUtility.ExtractStackTrace" />
    <member name="M:UnityEngine.StackTraceUtility.ExtractStringFromException(System.Object)" />
    <member name="T:UnityEngine.UnityException" />
    <member name="M:UnityEngine.UnityException.#ctor" />
    <member name="M:UnityEngine.UnityException.#ctor(System.String)" />
    <member name="M:UnityEngine.UnityException.#ctor(System.String,System.Exception)" />
    <member name="T:UnityEngine.MissingComponentException" />
    <member name="M:UnityEngine.MissingComponentException.#ctor" />
    <member name="M:UnityEngine.MissingComponentException.#ctor(System.String)" />
    <member name="M:UnityEngine.MissingComponentException.#ctor(System.String,System.Exception)" />
    <member name="T:UnityEngine.UnassignedReferenceException" />
    <member name="M:UnityEngine.UnassignedReferenceException.#ctor" />
    <member name="M:UnityEngine.UnassignedReferenceException.#ctor(System.String)" />
    <member name="M:UnityEngine.UnassignedReferenceException.#ctor(System.String,System.Exception)" />
    <member name="T:UnityEngine.MissingReferenceException" />
    <member name="M:UnityEngine.MissingReferenceException.#ctor" />
    <member name="M:UnityEngine.MissingReferenceException.#ctor(System.String)" />
    <member name="M:UnityEngine.MissingReferenceException.#ctor(System.String,System.Exception)" />
    <member name="T:UnityEngine.TextEditor" />
    <member name="M:UnityEngine.TextEditor.#ctor" />
    <member name="M:UnityEngine.TextEditor.OnFocus" />
    <member name="M:UnityEngine.TextEditor.OnLostFocus" />
    <member name="M:UnityEngine.TextEditor.HandleKeyEvent(UnityEngine.Event)" />
    <member name="M:UnityEngine.TextEditor.DeleteLineBack" />
    <member name="M:UnityEngine.TextEditor.DeleteWordBack" />
    <member name="M:UnityEngine.TextEditor.DeleteWordForward" />
    <member name="M:UnityEngine.TextEditor.Delete" />
    <member name="M:UnityEngine.TextEditor.CanPaste" />
    <member name="M:UnityEngine.TextEditor.Backspace" />
    <member name="M:UnityEngine.TextEditor.SelectAll" />
    <member name="M:UnityEngine.TextEditor.SelectNone" />
    <member name="M:UnityEngine.TextEditor.DeleteSelection" />
    <member name="M:UnityEngine.TextEditor.ReplaceSelection(System.String)" />
    <member name="M:UnityEngine.TextEditor.Insert(System.Char)" />
    <member name="M:UnityEngine.TextEditor.MoveSelectionToAltCursor" />
    <member name="M:UnityEngine.TextEditor.MoveRight" />
    <member name="M:UnityEngine.TextEditor.MoveLeft" />
    <member name="M:UnityEngine.TextEditor.MoveUp" />
    <member name="M:UnityEngine.TextEditor.MoveDown" />
    <member name="M:UnityEngine.TextEditor.MoveLineStart" />
    <member name="M:UnityEngine.TextEditor.MoveLineEnd" />
    <member name="M:UnityEngine.TextEditor.MoveGraphicalLineStart" />
    <member name="M:UnityEngine.TextEditor.MoveGraphicalLineEnd" />
    <member name="M:UnityEngine.TextEditor.MoveTextStart" />
    <member name="M:UnityEngine.TextEditor.MoveTextEnd" />
    <member name="M:UnityEngine.TextEditor.MoveParagraphForward" />
    <member name="M:UnityEngine.TextEditor.MoveParagraphBackward" />
    <member name="M:UnityEngine.TextEditor.MoveCursorToPosition(UnityEngine.Vector2)" />
    <member name="M:UnityEngine.TextEditor.MoveAltCursorToPosition(UnityEngine.Vector2)" />
    <member name="M:UnityEngine.TextEditor.IsOverSelection(UnityEngine.Vector2)" />
    <member name="M:UnityEngine.TextEditor.SelectToPosition(UnityEngine.Vector2)" />
    <member name="M:UnityEngine.TextEditor.SelectLeft" />
    <member name="M:UnityEngine.TextEditor.SelectRight" />
    <member name="M:UnityEngine.TextEditor.SelectUp" />
    <member name="M:UnityEngine.TextEditor.SelectDown" />
    <member name="M:UnityEngine.TextEditor.SelectTextEnd" />
    <member name="M:UnityEngine.TextEditor.SelectTextStart" />
    <member name="M:UnityEngine.TextEditor.MouseDragSelectsWholeWords(System.Boolean)" />
    <member name="M:UnityEngine.TextEditor.DblClickSnap(UnityEngine.TextEditor.DblClickSnapping)" />
    <member name="M:UnityEngine.TextEditor.MoveWordRight" />
    <member name="M:UnityEngine.TextEditor.MoveToStartOfNextWord" />
    <member name="M:UnityEngine.TextEditor.MoveToEndOfPreviousWord" />
    <member name="M:UnityEngine.TextEditor.SelectToStartOfNextWord" />
    <member name="M:UnityEngine.TextEditor.SelectToEndOfPreviousWord" />
    <member name="M:UnityEngine.TextEditor.FindStartOfNextWord(System.Int32)" />
    <member name="M:UnityEngine.TextEditor.MoveWordLeft" />
    <member name="M:UnityEngine.TextEditor.SelectWordRight" />
    <member name="M:UnityEngine.TextEditor.SelectWordLeft" />
    <member name="M:UnityEngine.TextEditor.ExpandSelectGraphicalLineStart" />
    <member name="M:UnityEngine.TextEditor.ExpandSelectGraphicalLineEnd" />
    <member name="M:UnityEngine.TextEditor.SelectGraphicalLineStart" />
    <member name="M:UnityEngine.TextEditor.SelectGraphicalLineEnd" />
    <member name="M:UnityEngine.TextEditor.SelectParagraphForward" />
    <member name="M:UnityEngine.TextEditor.SelectParagraphBackward" />
    <member name="M:UnityEngine.TextEditor.SelectCurrentWord" />
    <member name="M:UnityEngine.TextEditor.SelectCurrentParagraph" />
    <member name="M:UnityEngine.TextEditor.UpdateScrollOffsetIfNeeded" />
    <member name="M:UnityEngine.TextEditor.DrawCursor(System.String)" />
    <member name="M:UnityEngine.TextEditor.SaveBackup" />
    <member name="M:UnityEngine.TextEditor.Undo" />
    <member name="M:UnityEngine.TextEditor.Cut" />
    <member name="M:UnityEngine.TextEditor.Copy" />
    <member name="M:UnityEngine.TextEditor.Paste" />
    <member name="M:UnityEngine.TextEditor.ClampPos" />
    <member name="F:UnityEngine.TextEditor.pos" />
    <member name="F:UnityEngine.TextEditor.selectPos" />
    <member name="F:UnityEngine.TextEditor.controlID" />
    <member name="F:UnityEngine.TextEditor.content" />
    <member name="F:UnityEngine.TextEditor.style" />
    <member name="F:UnityEngine.TextEditor.position" />
    <member name="F:UnityEngine.TextEditor.multiline" />
    <member name="F:UnityEngine.TextEditor.hasHorizontalCursorPos" />
    <member name="F:UnityEngine.TextEditor.isPasswordField" />
    <member name="F:UnityEngine.TextEditor.scrollOffset" />
    <member name="F:UnityEngine.TextEditor.graphicalCursorPos" />
    <member name="F:UnityEngine.TextEditor.graphicalSelectCursorPos" />
    <member name="P:UnityEngine.TextEditor.hasSelection" />
    <member name="P:UnityEngine.TextEditor.SelectedText" />
    <member name="T:UnityEngine.TextEditor+DblClickSnapping" />
    <member name="F:UnityEngine.TextEditor+DblClickSnapping.WORDS" />
    <member name="F:UnityEngine.TextEditor+DblClickSnapping.PARAGRAPHS" />
    <member name="T:UnityEngine.TextGenerationSettings">
      <summary>
        <para>A struct that stores the settings for TextGeneration.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.font">
      <summary>
        <para>Font to use for generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.color">
      <summary>
        <para>The base color for the text generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.fontSize">
      <summary>
        <para>Font size.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.lineSpacing">
      <summary>
        <para>The line spacing multiplier.</para>
        <para>This is multiplied with the line spacing defined in the font.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.richText">
      <summary>
        <para>Allow rich text markup in generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.fontStyle">
      <summary>
        <para>Font style.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.textAnchor">
      <summary>
        <para>How is the generated text anchored.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.resizeTextForBestFit">
      <summary>
        <para>Should the text be resized to fit the configured bounds?</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.resizeTextMinSize">
      <summary>
        <para>Minimum size for resized text.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.resizeTextMaxSize">
      <summary>
        <para>Maximum size for resized text.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.updateBounds">
      <summary>
        <para>Should the text generator update the bounds from the generated text.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.verticalOverflow">
      <summary>
        <para>What happens to text when it reaches the bottom generation bounds.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.horizontalOverflow">
      <summary>
        <para>What happens to text when it reaches the horizontal generation bounds.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.generationExtents">
      <summary>
        <para>Extents that the generator will attempt to fit the text in.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.pivot">
      <summary>
        <para>Generated vertices are offset by the pivot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextGenerationSettings.generateOutOfBounds">
      <summary>
        <para>Continue to generate characters even if the text runs out of bounds.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextGenerator">
      <summary>
        <para>Class that can be used to generate text for rendering.</para>
        <para>Caches vertices, character info, and line info for memory friendlyness.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextGenerator.#ctor">
      <summary>
        <para>Create a TextGenerator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextGenerator.#ctor(System.Int32)">
      <summary>
        <para>Create a TextGenerator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextGenerator.Invalidate">
      <summary>
        <para>Mark the text generator as invalid. This will force a full text generation the next time Populate is called.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetCharacters(System.Collections.Generic.List{UnityEngine.UICharInfo})">
      <summary>
        <para>Populate the given List with UICharInfo.</para>
      </summary>
      <param name="characters">List to populate.</param>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetLines(System.Collections.Generic.List{UnityEngine.UILineInfo})">
      <summary>
        <para>Populate the given list with UILineInfo.</para>
      </summary>
      <param name="lines">List to populate.</param>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetVertices(System.Collections.Generic.List{UnityEngine.UIVertex})">
      <summary>
        <para>Populate the given list with generated Vertices.</para>
      </summary>
      <param name="vertices">List to populate.</param>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetPreferredWidth(System.String,UnityEngine.TextGenerationSettings)">
      <summary>
        <para>Given a string and settings, returns the preferred width for a container that would hold this text.</para>
      </summary>
      <param name="str">Generation text.</param>
      <param name="settings">Settings for generation.</param>
      <returns>
        <para>Preferred width.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetPreferredHeight(System.String,UnityEngine.TextGenerationSettings)">
      <summary>
        <para>Given a string and settings, returns the preferred height for a container that would hold this text.</para>
      </summary>
      <param name="str">Generation text.</param>
      <param name="settings">Settings for generation.</param>
      <returns>
        <para>Preferred height.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TextGenerator.Populate(System.String,UnityEngine.TextGenerationSettings)">
      <summary>
        <para>Will generate the vertices and other data for the given string with the given settings.</para>
        <para>Will only regenrate if the string AND settings are differernt from the last execution.</para>
      </summary>
      <param name="str">String to generate.</param>
      <param name="settings">Settings.</param>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetVerticesArray">
      <summary>
        <para>Returns the current UILineInfo.</para>
      </summary>
      <returns>
        <para>Vertices.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetCharactersArray">
      <summary>
        <para>Returns the current UICharInfo.</para>
      </summary>
      <returns>
        <para>Character information.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.TextGenerator.GetLinesArray">
      <summary>
        <para>Returns the current UILineInfo.</para>
      </summary>
      <returns>
        <para>Line information.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.TextGenerator.verts">
      <summary>
        <para>Array of generated vertices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.characters">
      <summary>
        <para>Array of generated characters.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.lines">
      <summary>
        <para>Information about each generated text line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.rectExtents">
      <summary>
        <para>Extents of the generated text in rect format.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.vertexCount">
      <summary>
        <para>Number of vertices generated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.characterCount">
      <summary>
        <para>The number of characters that have been generated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.characterCountVisible">
      <summary>
        <para>The number of characters that have been generated and are included in the visible lines.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.lineCount">
      <summary>
        <para>Number of text lines generated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextGenerator.fontSizeUsedForBestFit">
      <summary>
        <para>The size of the font that was found if using best fit mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TrackedReference" />
    <member name="M:UnityEngine.TrackedReference.Equals(System.Object)" />
    <member name="M:UnityEngine.TrackedReference.GetHashCode" />
    <member name="T:UnityEngine.Events.PersistentListenerMode">
      <summary>
        <para>THe mode that a listener is operating in.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.EventDefined">
      <summary>
        <para>The listener will use the function binding specified by the even.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Void">
      <summary>
        <para>The listener will bind to zero argument functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Object">
      <summary>
        <para>The listener will bind to one argument Object functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Int">
      <summary>
        <para>The listener will bind to one argument int functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Float">
      <summary>
        <para>The listener will bind to one argument float functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.String">
      <summary>
        <para>The listener will bind to one argument string functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.PersistentListenerMode.Bool">
      <summary>
        <para>The listener will bind to one argument bool functions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEventCallState">
      <summary>
        <para>Controls the scope of UnityEvent callbacks.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.UnityEventCallState.Off">
      <summary>
        <para>Callback is not issued.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.UnityEventCallState.EditorAndRuntime">
      <summary>
        <para>Callback is always issued.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Events.UnityEventCallState.RuntimeOnly">
      <summary>
        <para>Callback is only issued in the Runtime and Editor playmode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEventBase">
      <summary>
        <para>Abstract base class for UnityEvents.</para>
        <para>This class provides the base functionality for the UnityEvents.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.GetPersistentEventCount">
      <summary>
        <para>Get the number of registered persistent listeners.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.GetPersistentTarget(System.Int32)">
      <summary>
        <para>Get the target component of the listener at index index.</para>
      </summary>
      <param name="index">Index of the listener to query.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.GetPersistentMethodName(System.Int32)">
      <summary>
        <para>Get the target method name of the listener at index index.</para>
      </summary>
      <param name="index">Index of the listener to query.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.SetPersistentListenerState(System.Int32,UnityEngine.Events.UnityEventCallState)">
      <summary>
        <para>Modify the execution state of a persistent listener.</para>
      </summary>
      <param name="index">Index of the listener to query.</param>
      <param name="state">State to set.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.RemoveAllListeners">
      <summary>
        <para>Remove all listeners from the event.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEventBase.GetValidMethodInfo(System.Object,System.String,System.Type[])">
      <summary>
        <para>Given an object, function name, and a list of argument types; find the method that matches.</para>
      </summary>
      <param name="obj">Object to search for the method.</param>
      <param name="functionName">Function name to search for.</param>
      <param name="argumentTypes">Argument types for the function.</param>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent">
      <summary>
        <para>A zero argument persistent callback that can be saved with the scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEvent.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Events.UnityEvent.AddListener(UnityEngine.Events.UnityAction)">
      <summary>
        <para>Add a non persistent listener to the UnityEvent.</para>
        <para>Use this to add a runtime callback.</para>
      </summary>
      <param name="call">Callback function.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEvent.RemoveListener(UnityEngine.Events.UnityAction)">
      <summary>
        <para>Remove a non persistent listener from the UnityEvent.</para>
        <para>Use this to remove a runtime callback.</para>
      </summary>
      <param name="call">Callback function.</param>
    </member>
    <member name="M:UnityEngine.Events.UnityEvent.Invoke">
      <summary>
        <para>Invoke all registered callbacks (runtime and peristent).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent`1">
      <summary>
        <para>One argument version of <see cref="Events.UnityEvent">UnityEvent</see>.</para>
        <para>If you wish to use a generic UnityEvent type you must override the class type.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent`2">
      <summary>
        <para>Two argument version of <see cref="Events.UnityEvent">UnityEvent</see>.</para>
        <para>If you wish to use a generic UnityEvent type you must override the class type.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent`3">
      <summary>
        <para>Three argument version of <see cref="Events.UnityEvent">UnityEvent</see>.</para>
        <para>If you wish to use a generic UnityEvent type you must override the class type.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityEvent`4">
      <summary>
        <para>Four argument version of <see cref="Events.UnityEvent">UnityEvent</see>.</para>
        <para>If you wish to use a generic UnityEvent type you must override the class type.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WWW">
      <summary>
        <para>Simple access to web pages.</para>
        <para>This is a small utility module for retrieving the contents of URLs.You start a download in the background by calling WWW(url) which returns a new WWW object.You can inspect the isDone property to see if the download has completed or yield
the download object to automatically wait until it is (without blocking the rest of the game).Use it if you want to get some data from a web server for integration with a game
such as highscore lists or calling home for some reason. There is also functionality
to create textures from images downloaded from the web and to stream &amp;amp; load new web
player data files.The WWW class can be used to send both GET and POST requests to the server. The WWW class will use GET
by default and POST if you supply a postData parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWW.#ctor(System.String)">
      <summary>
        <para>Creates a WWW request with the given URL.</para>
        <para>This function creates and sends a GET request.
The stream will automatically start downloading the response.After the stream is created you have to wait for it to complete, then you can access the downloaded data.
As a convenience the stream can be yielded, so you can very easily tell Unity to wait for the download to complete.Note: URL must be '%' escaped.</para>
      </summary>
      <param name="url">The url to download. Must be '%' escaped.</param>
      <returns>
        <para>A new WWW object. When it has been downloaded, the results can be fetched from the returned object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WWW.#ctor(System.String,UnityEngine.WWWForm)">
      <summary>
        <para>Creates a WWW request with the given URL.</para>
        <para>This function creates and sends a POST request with form data contained in a WWWForm
parameter. This is the same as calling new WWW(url,form.data, form.headers).
The stream will automatically start downloading the response.After the stream is created you have to wait for it to complete, then you can access the downloaded data.
As a convenience the stream can be yielded, so you can very easily tell Unity to wait for the download to complete.Note: URL must be '%' escaped.</para>
      </summary>
      <param name="url">The url to download. Must be '%' escaped.</param>
      <param name="form">A <see cref="WWWForm">WWWForm</see> instance containing the form data to post.</param>
      <returns>
        <para>A new WWW object. When it has been downloaded, the results can be fetched from the returned object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WWW.#ctor(System.String,System.Byte[])">
      <summary>
        <para>Creates a WWW request with the given URL.</para>
        <para>This function creates and sends a POST request with raw post data contained in postData.
The stream will automatically start downloading the response.
Use this version if you need to post raw post data in a custom format to the server.After the stream is created you have to wait for it to complete, then you can access the downloaded data.
As a convenience the stream can be yielded, so you can very easily tell Unity to wait for the download to complete.Note: URL must be '%' escaped.</para>
      </summary>
      <param name="url">The url to download. Must be '%' escaped.</param>
      <param name="postData">A byte array of data to be posted to the url.</param>
      <returns>
        <para>A new WWW object. When it has been downloaded, the results can be fetched from the returned object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WWW.#ctor(System.String,System.Byte[],System.Collections.Generic.Dictionary{System.String,System.String})">
      <summary>
        <para>Creates a WWW request with the given URL.</para>
      </summary>
      <param name="url">The url to download. Must be '%' escaped.</param>
      <param name="postData">A byte array of data to be posted to the url.</param>
      <param name="headers">A dictionary that contains the header keys and values to pass to the server.</param>
      <returns>
        <para>A new WWW object. When it has been downloaded, the results can be fetched from the returned object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WWW.EscapeURL(System.String)">
      <summary>
        <para>Escapes characters in a string to ensure they are URL-friendly.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. It is recommended that you use this function on any text supplied by a user before passing the text as a URL parameter. This will ensure that a malicious user can't manipulate the contents of the URL to attack the webserver.</para>
      </summary>
      <param name="s">A string with characters to be escaped.</param>
    </member>
    <member name="M:UnityEngine.WWW.EscapeURL(System.String,System.Text.Encoding)">
      <summary>
        <para>Escapes characters in a string to ensure they are URL-friendly.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. It is recommended that you use this function on any text supplied by a user before passing the text as a URL parameter. This will ensure that a malicious user can't manipulate the contents of the URL to attack the webserver.</para>
      </summary>
      <param name="s">A string with characters to be escaped.</param>
      <param name="e">The text encoding to use.</param>
    </member>
    <member name="M:UnityEngine.WWW.UnEscapeURL(System.String)">
      <summary>
        <para>Converts URL-friendly escape sequences back to normal text.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. This function takes a string containing these escape sequences and converts them back to normal text.</para>
      </summary>
      <param name="s">A string containing escaped characters.</param>
    </member>
    <member name="M:UnityEngine.WWW.UnEscapeURL(System.String,System.Text.Encoding)">
      <summary>
        <para>Converts URL-friendly escape sequences back to normal text.</para>
        <para>Certain text characters have special meanings when present in URLs. If you need to include those characters in URL parameters then you must represent them with escape sequences. This function takes a string containing these escape sequences and converts them back to normal text.</para>
      </summary>
      <param name="s">A string containing escaped characters.</param>
      <param name="e">The text encoding to use.</param>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClip(System.Boolean)">
      <summary>
        <para>Returns an <see cref="AudioClip">AudioClip</see> generated from the downloaded data (Read Only).</para>
        <para>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV. Note that the XM, IT, MOD or S3M format can also be streamed in, but realtime playback of these is not supported, because all the data must be present before playback can begin, so for these tracker formats AudioClip.isReadyToPlay must switch to true before the clip may be assigned to and AudioSource and played back.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip
the .audioClip property defaults to 3D.</param>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClip(System.Boolean,System.Boolean)">
      <summary>
        <para>Returns an <see cref="AudioClip">AudioClip</see> generated from the downloaded data (Read Only).</para>
        <para>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV. Note that the XM, IT, MOD or S3M format can also be streamed in, but realtime playback of these is not supported, because all the data must be present before playback can begin, so for these tracker formats AudioClip.isReadyToPlay must switch to true before the clip may be assigned to and AudioSource and played back.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip
the .audioClip property defaults to 3D.</param>
      <param name="stream">Sets whether the clip should be completely downloaded before it's ready to play (false) or the stream can be played even if only part of the clip is downloaded (true).
The latter will disable seeking on the clip (with .time and/or .timeSamples).
Note that streaming variable bit rate (VBR) audio is not supported and the playback might finish untimely.</param>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClip(System.Boolean,System.Boolean,UnityEngine.AudioType)">
      <summary>
        <para>Returns an <see cref="AudioClip">AudioClip</see> generated from the downloaded data (Read Only).</para>
        <para>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV. Note that the XM, IT, MOD or S3M format can also be streamed in, but realtime playback of these is not supported, because all the data must be present before playback can begin, so for these tracker formats AudioClip.isReadyToPlay must switch to true before the clip may be assigned to and AudioSource and played back.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip
the .audioClip property defaults to 3D.</param>
      <param name="stream">Sets whether the clip should be completely downloaded before it's ready to play (false) or the stream can be played even if only part of the clip is downloaded (true).
The latter will disable seeking on the clip (with .time and/or .timeSamples).
Note that streaming variable bit rate (VBR) audio is not supported and the playback might finish untimely.</param>
      <param name="audioType">The AudioType of the content your downloading. If this is not set Unity will try to determine the type from URL.</param>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClipCompressed">
      <summary>
        <para>Returns an <see cref="AudioClip">AudioClip</see> generated from the downloaded data that is compressed in memory (Read Only).</para>
        <para>By default GetAudioClip will load the file into memory decompressed. This version will load the data compressed and decompress it as it plays. The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClipCompressed(System.Boolean)">
      <summary>
        <para>Returns an <see cref="AudioClip">AudioClip</see> generated from the downloaded data that is compressed in memory (Read Only).</para>
        <para>By default GetAudioClip will load the file into memory decompressed. This version will load the data compressed and decompress it as it plays. The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip
the .audioClip property defaults to 3D.</param>
    </member>
    <member name="M:UnityEngine.WWW.GetAudioClipCompressed(System.Boolean,UnityEngine.AudioType)">
      <summary>
        <para>Returns an <see cref="AudioClip">AudioClip</see> generated from the downloaded data that is compressed in memory (Read Only).</para>
        <para>By default GetAudioClip will load the file into memory decompressed. This version will load the data compressed and decompress it as it plays. The data must be an audio clip in Ogg(Web/Standalones), MP3(phones) or WAV.</para>
      </summary>
      <param name="threeD">Use this to specify whether the clip should be a 2D or 3D clip
the .audioClip property defaults to 3D.</param>
      <param name="audioType">The AudioType of the content your downloading. If this is not set Unity will try to determine the type from URL.</param>
    </member>
    <member name="M:UnityEngine.WWW.LoadImageIntoTexture(UnityEngine.Texture2D)">
      <summary>
        <para>Replaces the contents of an existing <see cref="Texture2D">Texture2D</see> with an image from the downloaded data.</para>
        <para>The data must be an image in JPG or PNG format. If the data is not a valid
image, the generated texture will be a small image of a question mark.
It is recommended to use power-of-two size for each dimension of the image;
arbitrary sizes will also work but can load slightly slower and take up
a bit more memory.For PNG files, gamma correction is applied to the texture if PNG file contains
gamma information. Display gamma for correction is assumed to be 2.0. If file
does not contain gamma information, no color correction will be performed.This function replaces texture contents with downloaded image data, so texture
size and format might change. JPG files are loaded into RGB24 format,
PNG files are loaded into ARGB32 format. If texture format before
calling LoadImage is DXT1 or DXT5,
then the loaded image will be DXT-compressed (into DXT1 for JPG images and DXT5 for PNG images).If the data has not finished downloading the texture will be left untouched.
Use isDone or yield to see if the data is available.</para>
      </summary>
      <param name="tex">An existing texture object to be overwritten with the image data.</param>
    </member>
    <member name="M:UnityEngine.WWW.GetTextureFromURL(System.String)" />
    <member name="M:UnityEngine.WWW.LoadUnityWeb">
      <summary>
        <para>Loads the new web player data file.</para>
        <para>The first level of the loaded .unity3d file will automatically be loaded.
All objects, scripts and static variables from the previous .unity3d file will be unloaded.
You can move information between the two sessions using PlayerPrefs class.This function is only supported in the web player.If the object has not finished downloading the unity3d file will not be loaded.
Use isDone or yield to see if the data is available.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWW.LoadFromCacheOrDownload(System.String,System.Int32)">
      <summary>
        <para>Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.</para>
        <para>LoadFromCacheOrDownload() must be used in place of "new WWW (url)" in order to utilize caching functionality.Cached AssetBundles are uniquely identified solely by the filename and version number; all domain and path information in url is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. For WebPlayer applications that use the shared cache, Caching adds unique identifying information to identically-named AssetBundles in order to prevent name collisions between applications.If the cache folder does not have any space for caching additional files, LoadFromCacheOrDownload will iteratively delete the least-recently-used AssetBundles from the Cache until sufficient space is available to store the new AssetBundle. If making space is not possible (because the hard disk is full, or all files in the cache are currently in use), LoadFromCacheOrDownload() will bypass Caching and stream the file into memory like a normal "new WWW()" call.Only up to one AssetBundle download can finish per frame.This function can only be used to access AssetBundles. No other types or content are cacheable.Note: URL must be '%' escaped.</para>
      </summary>
      <param name="url">The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.</param>
      <param name="version">Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same <c>version</c> parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBunlde from <c>url</c>.</param>
      <returns>
        <para>A WWW instance, which can be used to access the data once the load/download operation is completed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.WWW.LoadFromCacheOrDownload(System.String,System.Int32,System.UInt32)">
      <summary>
        <para>Loads an AssetBundle with the specified version number from the cache. If the AssetBundle is not currently cached, it will automatically be downloaded and stored in the cache for future retrieval from local storage.</para>
        <para>LoadFromCacheOrDownload() must be used in place of "new WWW (url)" in order to utilize caching functionality.Cached AssetBundles are uniquely identified solely by the filename and version number; all domain and path information in url is ignored by Caching. Since cached AssetBundles are identified by filename instead of the full URL, you can change the directory from where the asset bundle is downloaded at any time. This is useful for pushing out new versions of the game and ensuring that files are not cached incorrectly by the browser or by a CDN. For WebPlayer applications that use the shared cache, Caching adds unique identifying information to identically-named AssetBundles in order to prevent name collisions between applications.If the cache folder does not have any space for caching additional files, LoadFromCacheOrDownload will iteratively delete the least-recently-used AssetBundles from the Cache until sufficient space is available to store the new AssetBundle. If making space is not possible (because the hard disk is full, or all files in the cache are currently in use), LoadFromCacheOrDownload() will bypass Caching and stream the file into memory like a normal "new WWW()" call.Only up to one AssetBundle download can finish per frame.This function can only be used to access AssetBundles. No other types or content are cacheable.Note: URL must be '%' escaped.</para>
      </summary>
      <param name="url">The URL to download the AssetBundle from, if it is not present in the cache. Must be '%' escaped.</param>
      <param name="version">Version of the AssetBundle. The file will only be loaded from the disk cache if it has previously been downloaded with the same <c>version</c> parameter. By incrementing the version number requested by your application, you can force Caching to download a new copy of the AssetBunlde from <c>url</c>.</param>
      <param name="crc">An optional CRC-32 Checksum of the uncompressed contents. If this is non-zero, then the content will be compared against the checksum before loading it, and give an error if it does not match. You can use this to avoid data corruption from bad downloads or users tampering with the cached files on disk. If the CRC does not match, Unity will try to redownload the data, and if the CRC on the server does not match it will fail with an error. Look at the error string returned to see the correct CRC value to use for an AssetBundle.</param>
      <returns>
        <para>A WWW instance, which can be used to access the data once the load/download operation is completed.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.WWW.responseHeaders" />
    <member name="P:UnityEngine.WWW.text">
      <summary>
        <para>Returns the contents of the fetched web page as a string (Read Only).</para>
        <para>If the object has not finished downloading the data, it will return an empty string.
Use isDone or yield to see if the data is available.This function expects the web page contents in UTF-8 or ASCII character set. The returned
string might be not correct for other characters or binary data. Use bytes property to
get raw byte array in these cases.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.bytes">
      <summary>
        <para>Returns the contents of the fetched web page as a byte array (Read Only).</para>
        <para>If the object has not finished downloading the data, it will return an empty byte array.
Use isDone or yield to see if the data is available.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.error">
      <summary>
        <para>Returns an error message if there was an error during the download (Read Only).</para>
        <para>If there was no error, error will return null or an empty string (this is because some platforms don't allow nulls for string values). We recommend that you use String.IsNullOrEmpty to check for the presence of an error so that both cases are covered.If the object has not finished downloading the data, it will block until the download has finished.
Use isDone or yield to see if the data is available.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.texture">
      <summary>
        <para>Returns a <see cref="Texture2D">Texture2D</see> generated from the downloaded data (Read Only).</para>
        <para>The data must be an image in JPG or PNG format. If the data is not a valid
image, the generated texture will be a small image of a question mark.
It is recommended to use power-of-two size for each dimension of the image;
arbitrary sizes will also work but can load slightly slower and take up
a bit more memory. Each invocation of texture property allocates a new Texture2D. If you
continously download textures you must use LoadImageIntoTexture or Destroy
the previously created texture.For PNG files, gamma correction is applied to the texture if PNG file contains
gamma information. Display gamma for correction is assumed to be 2.0. If file
does not contain gamma information, no color correction will be performed.JPG files are loaded into RGB24 format, PNG files are loaded into
ARGB32 format. If you want to DXT-compress the downloaded image,
use LoadImageIntoTexture instead.If the object has not finished downloading the data a dummy image will be returned.
Use isDone or yield to see if the data is available.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.textureNonReadable">
      <summary>
        <para>Returns a non-readable <see cref="Texture2D">Texture2D</see> generated from the downloaded data (Read Only).</para>
        <para>Same as texture, but marks texture as non-readable, effectively freeing system memory.SA TextureImporter.isReadable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.audioClip">
      <summary>
        <para>Returns a <see cref="AudioClip">AudioClip</see> generated from the downloaded data (Read Only).</para>
        <para>The data must be an audio clip in Ogg(Web/Standalones), MP3(phones,Flash), WAV, XM, IT, MOD or S3M format.
The clip will be downloaded completely before it's ready to play.
Use the overloaded GetAudioClip (bool threeD, bool stream) to stream the audio, instead of downloading the entire clip.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.movie">
      <summary>
        <para>Returns a <see cref="MovieTexture">MovieTexture</see> generated from the downloaded data (Read Only).</para>
        <para>The data must be a movie in Ogg Theora format.Even if the movie is not yet completely downloaded, this returns immediately,
allowing you to start playing the partial movie as it downloads.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.isDone">
      <summary>
        <para>Is the download already finished? (Read Only)</para>
        <para>You should not write loops that spin until download is done; use coroutines instead.
An empty loop that waits for isDone will block in the web player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.progress">
      <summary>
        <para>How far has the download progressed (Read Only).</para>
        <para>This is a value between zero and one; 0 means nothing is downloaded, 1 means download
complete./progress/ will remain at 0.0 while sending the request to the server. For monitoring
progress when uploading files to a web server, see WWW.uploadProgress.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.uploadProgress">
      <summary>
        <para>How far has the upload progressed (Read Only).</para>
        <para>This is a value between zero and one; 0 means nothing is sent yet, 1 means upload
complete./uploadProgress/ is currently not fully implemented in the Web Player. If used in a Web Player it will report 0.5 during the upload and 1.0 when the upload is complete.Since all sending of data to the server is done before receiving data,  uploadProgress will always be 1.0 when progress is larger than 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.bytesDownloaded">
      <summary>
        <para>The number of bytes downloaded by this WWW query (read only).</para>
        <para>Returns the number of bytes downloaded when fetching content from a WWW source.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.url">
      <summary>
        <para>The URL of this WWW request (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.assetBundle">
      <summary>
        <para>Streams an AssetBundle that can contain any kind of asset from the project folder.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWW.threadPriority">
      <summary>
        <para>Priority of <see cref="AssetBundle">AssetBundle</see> decompression thread.</para>
        <para>You can control decompression speed vs. impact on frame rate tradeoff when downloading Asset Bundles in the background.
When using lower priority, decompression will take longer, but will not have such a big impact on frame rates.
Default value is ThreadPriority.Normal.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iPhone">
      <summary>
        <para>Interface into iPhone specific functionality.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iPhone.SetNoBackupFlag(System.String)">
      <summary>
        <para>Set file flag to be excluded from iCloud/iTunes backup.</para>
        <para>As a side-effect, if it was located in Caches folder, it won't be deleted by OS.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.iPhone.ResetNoBackupFlag(System.String)">
      <summary>
        <para>Reset "no backup" file flag: file will be synced with iCloud/iTunes backup and can be deleted by OS in low storage situations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iPhone.generation">
      <summary>
        <para>The generation of the device. (Read Only)</para>
        <para>See iPhoneGeneration enumeration for possible return values.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iPhone.vendorIdentifier">
      <summary>
        <para>Vendor ID.</para>
        <para>UIDevice identifierForVendor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iPhone.advertisingIdentifier">
      <summary>
        <para>Advertising ID.</para>
        <para>ASIdentifierManager advertisingIdentifier.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.iPhone.advertisingTrackingEnabled" />
    <member name="T:UnityEngine.iPhone+NSError" />
    <member name="P:UnityEngine.iPhone+NSError.code" />
    <member name="P:UnityEngine.iPhone+NSError.description" />
    <member name="P:UnityEngine.iPhone+NSError.reason" />
    <member name="T:UnityEngine.iPhone+NSNotification" />
    <member name="P:UnityEngine.iPhone+NSNotification.name" />
    <member name="T:UnityEngine.ADBannerView">
      <summary>
        <para>ADBannerView is a wrapper around the ADBannerView class found in the Apple iAd framework and is only available on iOS.</para>
        <para>It provides a view that displays banner advertisements to the user.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ADBannerView.#ctor(UnityEngine.ADBannerView.Type,UnityEngine.ADBannerView.Layout)">
      <summary>
        <para>Creates a banner view with given type and auto-layout params.</para>
        <para>Please check if given type is available by calling ADBannerView.IsAvailable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ADBannerView.IsAvailable(UnityEngine.ADBannerView.Type)">
      <summary>
        <para>Checks if the banner type is available (e.g. MediumRect is available only starting with ios6).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ADBannerView.loaded">
      <summary>
        <para>Checks if banner contents are loaded.</para>
        <para>You should hide banner if it is not loaded to avoid showing blank view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ADBannerView.visible">
      <summary>
        <para>Banner visibility. Initially banner is not visible.</para>
        <para>Please note that if you hide banner, ads might not be reloaded with time, so if you no longer need banner it is better to delete it completely.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ADBannerView.layout">
      <summary>
        <para>Banner layout.</para>
        <para>You can set manual layout to move banner around yourself.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ADBannerView.position">
      <summary>
        <para>The position of the banner view.</para>
        <para>It uses unity GUI coords and convention, so it is top-left corner coords. If you change it, banner will become manually layed-out automatically.
Please note that for Traditional Banner x component is ignored.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ADBannerView.size">
      <summary>
        <para>The size of the banner view.</para>
        <para>It uses unity GUI coords.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ADBannerView+Layout">
      <summary>
        <para>Specifies how banner should be layed out on screen.</para>
        <para>Please note that Traditional Banner and Rect Banner (introduced in ios6) use different enum values.
If you use "wrong" enum value for current ad type:
for Traditional Banner Top* and Center* will be considered Top, and Bottom* will be considered Bottom*
for Rect Banner Top will be considered TopLeft and Bottom - BottomLeft.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.Top">
      <summary>
        <para>Traditional Banner: align to screen top.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.Bottom">
      <summary>
        <para>Traditional Banner: align to screen bottom.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.TopLeft">
      <summary>
        <para>Rect Banner: place in top-left corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.TopRight">
      <summary>
        <para>Rect Banner: place in top-right corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.TopCenter">
      <summary>
        <para>Rect Banner: align to screen top, placing at the center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.BottomLeft">
      <summary>
        <para>Rect Banner: place in bottom-left corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.BottomRight">
      <summary>
        <para>Rect Banner: place in bottom-right corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.BottomCenter">
      <summary>
        <para>Rect Banner: align to screen bottom, placing at the center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.CenterLeft">
      <summary>
        <para>Rect Banner: align to screen left, placing at the center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.CenterRight">
      <summary>
        <para>Rect Banner: align to screen right, placing at the center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.Center">
      <summary>
        <para>Rect Banner: place exactly at screen center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Layout.Manual">
      <summary>
        <para>Completely manual positioning.</para>
        <para>Please use ADBannerView.position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ADBannerView+Type">
      <summary>
        <para>The type of the banner view.</para>
        <para>Please check availability of banner type with ADBannerView.IsAvailable. Traditional banner is always available, though.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Type.Banner">
      <summary>
        <para>Traditional Banner (it takes full screen width).</para>
        <para>iOS type: ADAdTypeBanner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ADBannerView+Type.MediumRect">
      <summary>
        <para>Rect Banner (300x250).</para>
        <para>iOS type: ADAdTypeMediumRectangle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ADInterstitialAd">
      <summary>
        <para>ADInterstitialAd is a wrapper around the ADInterstitialAd class found in the Apple iAd framework and is only available on iPad.</para>
        <para>It provides full-screen advertisements that your iPad application can display to the user.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ADInterstitialAd.#ctor(System.Boolean)">
      <summary>
        <para>Creates an interstitial ad.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ADInterstitialAd.#ctor">
      <summary>
        <para>Creates an interstitial ad.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ADInterstitialAd.Show">
      <summary>
        <para>Shows full-screen advertisement to user.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ADInterstitialAd.ReloadAd">
      <summary>
        <para>Reload advertisement.</para>
        <para>Call it when you are done with current one (if you want more ads downloaded).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ADInterstitialAd.isAvailable">
      <summary>
        <para>Checks if InterstitialAd is available (it is iPad-only and was added in iOS 4.3).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ADInterstitialAd.loaded">
      <summary>
        <para>Has the interstitial ad object downloaded an advertisement? (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Serialization.FormerlySerializedAsAttribute">
      <summary>
        <para>Use this attribute to rename a field without losing its serialized value.</para>
        <para>Suppose you have a class like this:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Serialization.FormerlySerializedAsAttribute.#ctor(System.String)">
      <param name="oldName">The name of the field before renaming.</param>
    </member>
    <member name="P:UnityEngine.Serialization.FormerlySerializedAsAttribute.oldName">
      <summary>
        <para>The name of the field before the rename.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ForceMode">
      <summary>
        <para>Option for how to apply a force using Rigidbody.AddForce.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ForceMode.Force">
      <summary>
        <para>Add a continuous force to the rigidbody, using its mass.</para>
        <para>Apply the force in each FixedUpdate over a duration of time. This mode depends on the mass of rigidbody so more force must be applied to push or twist higher-mass objects the same amount as lower-mass objects.
This mode is useful for setting up realistic physics where it takes more force to move heavier objects.
In this mode, the unit of the force parameter is applied to the rigidbody as mass*distance/time^2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ForceMode.Acceleration">
      <summary>
        <para>Add a continuous acceleration to the rigidbody, ignoring its mass.</para>
        <para>Apply the acceleration in each FixedUpdate over a duration of time. In contrast to ForceMode.Force, Acceleration will move every rigidbody the same way regardless of differences in mass.
This mode is useful if you just want to control the acceleration of an object directly.
In this mode, the unit of the force parameter is applied to the rigidbody as distance/time^2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ForceMode.Impulse">
      <summary>
        <para>Add an instant force impulse to the rigidbody, using its mass.</para>
        <para>Apply the impulse force instantly with a single function call. This mode depends on the mass of rigidbody so more force must be applied to push or twist higher-mass objects the same amount as lower-mass objects.
This mode is useful for applying forces that happen instantly, such as forces from explosions or collisions.
In this mode, the unit of the force parameter is applied to the rigidbody as mass*distance/time.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ForceMode.VelocityChange">
      <summary>
        <para>Add an instant velocity change to the rigidbody, ignoring its mass.</para>
        <para>Apply the velocity change instantly with a single function call. In contrast to ForceMode.Impulse, VelocityChange will change the velocity of every rigidbody the same way regardless of differences in mass.
This mode is useful for something like a fleet of differently-sized space ships that you want to control without accounting for differences in mass.
In this mode, the unit of the force parameter is applied to the rigidbody as distance/time.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Physics">
      <summary>
        <para>Global physics properties and helper methods.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Casts a ray against all colliders in the scene.</para>
      </summary>
      <param name="origin">The starting point of the ray in world coordinates.</param>
      <param name="direction">The direction of the ray.</param>
      <param name="distance">The length of the ray.</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Casts a ray against all colliders in the scene.</para>
      </summary>
      <param name="origin">The starting point of the ray in world coordinates.</param>
      <param name="direction">The direction of the ray.</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32)">
      <summary>
        <para>Casts a ray against all colliders in the scene.</para>
      </summary>
      <param name="origin">The starting point of the ray in world coordinates.</param>
      <param name="direction">The direction of the ray.</param>
      <param name="distance">The length of the ray.</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a ray.</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single)">
      <summary>
        <para>Casts a ray against all colliders in the scene and returns detailed information on what was hit.</para>
      </summary>
      <param name="origin">The starting point of the ray in world coordinates.</param>
      <param name="direction">The direction of the ray.</param>
      <param name="distance">The length of the ray.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@)">
      <summary>
        <para>Casts a ray against all colliders in the scene and returns detailed information on what was hit.</para>
      </summary>
      <param name="origin">The starting point of the ray in world coordinates.</param>
      <param name="direction">The direction of the ray.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single,System.Int32)">
      <summary>
        <para>Casts a ray against all colliders in the scene and returns detailed information on what was hit.</para>
      </summary>
      <param name="origin">The starting point of the ray in world coordinates.</param>
      <param name="direction">The direction of the ray.</param>
      <param name="distance">The length of the ray.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a ray.</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,System.Single)">
      <summary>
        <para>Same as above using /ray.origin/ and /ray.direction/ instead of <c>origin</c> and <c>direction</c>.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray.</param>
      <param name="distance">The length of the ray.</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray)">
      <summary>
        <para>Same as above using /ray.origin/ and /ray.direction/ instead of <c>origin</c> and <c>direction</c>.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray.</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,System.Single,System.Int32)">
      <summary>
        <para>Same as above using /ray.origin/ and /ray.direction/ instead of <c>origin</c> and <c>direction</c>.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray.</param>
      <param name="distance">The length of the ray.</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a ray.</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,UnityEngine.RaycastHit@,System.Single)">
      <summary>
        <para>Same as above using /ray.origin/ and /ray.direction/ instead of <c>origin</c> and <c>direction</c>.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray.</param>
      <param name="distance">The length of the ray.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,UnityEngine.RaycastHit@)">
      <summary>
        <para>Same as above using /ray.origin/ and /ray.direction/ instead of <c>origin</c> and <c>direction</c>.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.Raycast(UnityEngine.Ray,UnityEngine.RaycastHit@,System.Single,System.Int32)">
      <summary>
        <para>Same as above using /ray.origin/ and /ray.direction/ instead of <c>origin</c> and <c>direction</c>.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray.</param>
      <param name="distance">The length of the ray.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a ray.</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Ray,System.Single)">
      <summary>
        <para>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Ray)">
      <summary>
        <para>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Ray,System.Single,System.Int32)">
      <summary>
        <para>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32)">
      <summary>
        <para>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.RaycastAll(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Casts a ray through the scene and returns all hits. Note that order is not guaranteed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.Linecast(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns true if there is any collider intersecting the line between <c>start</c> and <c>end</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.Linecast(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
      <summary>
        <para>Returns true if there is any collider intersecting the line between <c>start</c> and <c>end</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.Linecast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@)">
      <summary>
        <para>Returns true if there is any collider intersecting the line between <c>start</c> and <c>end</c>.</para>
        <para>If true is returned, hitInfo will contain more information about where the collider was hit (</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.Linecast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Int32)">
      <summary>
        <para>Returns true if there is any collider intersecting the line between <c>start</c> and <c>end</c>.</para>
        <para>If true is returned, hitInfo will contain more information about where the collider was hit (</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.OverlapSphere(UnityEngine.Vector3,System.Single,System.Int32)">
      <summary>
        <para>Returns an array with all colliders touching or inside the sphere.</para>
        <para>NOTE: Currently this only checks against the bounding volumes of the colliders not against the actual colliders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.OverlapSphere(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Returns an array with all colliders touching or inside the sphere.</para>
        <para>NOTE: Currently this only checks against the bounding volumes of the colliders not against the actual colliders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule.
Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Note: If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a CapsuleCast will hit the collider at it's new position.</para>
      </summary>
      <param name="point1">The start of the capsule.</param>
      <param name="point2">The end of the capsule.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="direction">The direction into which to sweep the capsule.</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
      <summary>
        <para>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule.
Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Note: If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a CapsuleCast will hit the collider at it's new position.</para>
      </summary>
      <param name="point1">The start of the capsule.</param>
      <param name="point2">The end of the capsule.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="direction">The direction into which to sweep the capsule.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Int32)">
      <summary>
        <para>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule.
Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Note: If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a CapsuleCast will hit the collider at it's new position.</para>
      </summary>
      <param name="point1">The start of the capsule.</param>
      <param name="point2">The end of the capsule.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="direction">The direction into which to sweep the capsule.</param>
      <param name="distance">The length of the sweep.</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a capsule.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single)">
      <summary>
        <para>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule.
Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Note: If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a CapsuleCast will hit the collider at it's new position.</para>
      </summary>
      <param name="point1">The start of the capsule.</param>
      <param name="point2">The end of the capsule.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="direction">The direction into which to sweep the capsule.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@)">
      <summary>
        <para>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule.
Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Note: If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a CapsuleCast will hit the collider at it's new position.</para>
      </summary>
      <param name="point1">The start of the capsule.</param>
      <param name="point2">The end of the capsule.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="direction">The direction into which to sweep the capsule.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.CapsuleCast(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single,System.Int32)">
      <summary>
        <para>Casts a capsule against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule.
Hits are returned for the first collider which would collide against this capsule if the capsule was moved along direction.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Note: If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a CapsuleCast will hit the collider at it's new position.</para>
      </summary>
      <param name="point1">The start of the capsule.</param>
      <param name="point2">The end of the capsule.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="direction">The direction into which to sweep the capsule.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="distance">The length of the sweep.</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a capsule.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single)">
      <summary>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Think of the sphere cast like a thick raycast.Note: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a SphereCast will hit the collider at it's new position.</para>
      </summary>
      <param name="origin">The center of the sphere at the start of the sweep.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="direction">The direction into which to sweep the sphere.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@)">
      <summary>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Think of the sphere cast like a thick raycast.Note: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a SphereCast will hit the collider at it's new position.</para>
      </summary>
      <param name="origin">The center of the sphere at the start of the sweep.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="direction">The direction into which to sweep the sphere.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single,System.Int32)">
      <summary>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Think of the sphere cast like a thick raycast.Note: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a SphereCast will hit the collider at it's new position.</para>
      </summary>
      <param name="origin">The center of the sphere at the start of the sweep.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="direction">The direction into which to sweep the sphere.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="distance">The length of the sweep.</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a capsule.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,System.Single)">
      <summary>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Think of the sphere cast like a thick raycast.Note: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a SphereCast will hit the collider at it's new position.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single)">
      <summary>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Think of the sphere cast like a thick raycast.Note: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a SphereCast will hit the collider at it's new position.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
      <param name="radius">The radius of the sphere.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,System.Single,System.Int32)">
      <summary>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Think of the sphere cast like a thick raycast.Note: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a SphereCast will hit the collider at it's new position.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="distance">The length of the sweep.</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a capsule.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,UnityEngine.RaycastHit@,System.Single)">
      <summary>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Think of the sphere cast like a thick raycast.Note: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a SphereCast will hit the collider at it's new position.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,UnityEngine.RaycastHit@)">
      <summary>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Think of the sphere cast like a thick raycast.Note: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a SphereCast will hit the collider at it's new position.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCast(UnityEngine.Ray,System.Single,UnityEngine.RaycastHit@,System.Single,System.Int32)">
      <summary>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on what was hit.</para>
        <para>This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.
Think of the sphere cast like a thick raycast.Note: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a SphereCast will hit the collider at it's new position.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="distance">The length of the sweep.</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a capsule.</param>
      <returns>
        <para>True when the capsule sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.CapsuleCastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Int32)">
      <summary>
        <para>Like <see cref="Physics.CapsuleCast">Physics.CapsuleCast</see>, but this function will return all hits the capsule sweep intersects.</para>
        <para>Casts a capsule against all colliders in the scene and returns detailed information on each collider which was hit.
The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule.
Hits are returned all colliders which would collide against this capsule if the capsule was moved along direction.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.Notes: The capsule cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a capsule cast will hit the collider at it's new position.</para>
      </summary>
      <param name="point1">The start of the capsule.</param>
      <param name="point2">The end of the capsule.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="direction">The direction into which to sweep the capsule.</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>An array of all colliders hit in the sweep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.CapsuleCastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Like <see cref="Physics.CapsuleCast">Physics.CapsuleCast</see>, but this function will return all hits the capsule sweep intersects.</para>
        <para>Casts a capsule against all colliders in the scene and returns detailed information on each collider which was hit.
The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule.
Hits are returned all colliders which would collide against this capsule if the capsule was moved along direction.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.Notes: The capsule cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a capsule cast will hit the collider at it's new position.</para>
      </summary>
      <param name="point1">The start of the capsule.</param>
      <param name="point2">The end of the capsule.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="direction">The direction into which to sweep the capsule.</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>An array of all colliders hit in the sweep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.CapsuleCastAll(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
      <summary>
        <para>Like <see cref="Physics.CapsuleCast">Physics.CapsuleCast</see>, but this function will return all hits the capsule sweep intersects.</para>
        <para>Casts a capsule against all colliders in the scene and returns detailed information on each collider which was hit.
The capsule is defined by the two spheres with radius around point1 and point2, which form the two ends of the capsule.
Hits are returned all colliders which would collide against this capsule if the capsule was moved along direction.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.Notes: The capsule cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a capsule cast will hit the collider at it's new position.</para>
      </summary>
      <param name="point1">The start of the capsule.</param>
      <param name="point2">The end of the capsule.</param>
      <param name="radius">The radius of the capsule.</param>
      <param name="direction">The direction into which to sweep the capsule.</param>
      <returns>
        <para>An array of all colliders hit in the sweep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Like <see cref="Physics.SphereCast">Physics.SphereCast</see>, but this function will return all hits the sphere sweep intersects.</para>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on each collider which was hit.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.Notes: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a sphere cast will hit the collider at it's new position.</para>
      </summary>
      <param name="origin">The center of the sphere at the start of the sweep.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="direction">The direction into which to sweep the sphere.</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>An array of all colliders hit in the sweep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Vector3,System.Single,UnityEngine.Vector3)">
      <summary>
        <para>Like <see cref="Physics.SphereCast">Physics.SphereCast</see>, but this function will return all hits the sphere sweep intersects.</para>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on each collider which was hit.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.Notes: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a sphere cast will hit the collider at it's new position.</para>
      </summary>
      <param name="origin">The center of the sphere at the start of the sweep.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="direction">The direction into which to sweep the sphere.</param>
      <returns>
        <para>An array of all colliders hit in the sweep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Vector3,System.Single,UnityEngine.Vector3,System.Single,System.Int32)">
      <summary>
        <para>Like <see cref="Physics.SphereCast">Physics.SphereCast</see>, but this function will return all hits the sphere sweep intersects.</para>
        <para>Casts a sphere against all colliders in the scene and returns detailed information on each collider which was hit.
This is useful when a Raycast does not give enough precision, because you want to find out if an object of a specific size,
such as a character, will be able to move somewhere without colliding with anything on the way.Notes: The sphere cast does not work against colliders configured as triggers.
If you move colliders from scripting or by animation, there needs to be at
least one FixedUpdate executed so that the physics library can update it's data
structures, before a sphere cast will hit the collider at it's new position.</para>
      </summary>
      <param name="origin">The center of the sphere at the start of the sweep.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="direction">The direction into which to sweep the sphere.</param>
      <param name="distance">The length of the sweep.</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a capsule.</param>
      <returns>
        <para>An array of all colliders hit in the sweep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Ray,System.Single,System.Single)">
      <summary>
        <para>Like <see cref="Physics.SphereCast">Physics.SphereCast</see>, but this function will return all hits the sphere sweep intersects.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>An array of all colliders hit in the sweep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Ray,System.Single)">
      <summary>
        <para>Like <see cref="Physics.SphereCast">Physics.SphereCast</see>, but this function will return all hits the sphere sweep intersects.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
      <param name="radius">The radius of the sphere.</param>
      <returns>
        <para>An array of all colliders hit in the sweep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.SphereCastAll(UnityEngine.Ray,System.Single,System.Single,System.Int32)">
      <summary>
        <para>Like <see cref="Physics.SphereCast">Physics.SphereCast</see>, but this function will return all hits the sphere sweep intersects.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray into which the sphere sweep is cast.</param>
      <param name="radius">The radius of the sphere.</param>
      <param name="distance">The length of the sweep.</param>
      <param name="layerMask">A <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer mask</see> that is used to selectively ignore colliders when casting a capsule.</param>
      <returns>
        <para>An array of all colliders hit in the sweep.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics.CheckSphere(UnityEngine.Vector3,System.Single,System.Int32)">
      <summary>
        <para>Returns true if there are any colliders overlapping the sphere defined by <c>position</c> and <c>radius</c> in world coordinates.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.CheckSphere(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Returns true if there are any colliders overlapping the sphere defined by <c>position</c> and <c>radius</c> in world coordinates.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.CheckCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Int32)">
      <summary>
        <para>Returns true if there are any colliders overlapping the capsule defined by the axis going from <c>start</c> and <c>end</c> and having <c>radius</c> in world coordinates.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.CheckCapsule(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Returns true if there are any colliders overlapping the capsule defined by the axis going from <c>start</c> and <c>end</c> and having <c>radius</c> in world coordinates.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.IgnoreCollision(UnityEngine.Collider,UnityEngine.Collider,System.Boolean)">
      <summary>
        <para>Makes the collision detection system ignore all collisions between <c>collider1</c> and <c>collider2</c>.</para>
        <para>This is most useful for making eg. projectiles not collide with the object shooting them.IgnoreCollision has a few limitations:
1) It is not persistent. This means ignore collision state will not be stored in the editor when saving a scene.
2) You can only apply the ignore collision to colliders in active game objects.
When deactivating the collider or attached rigidbody the IgnoreCollision state will be lost and you have to call Physics.IgnoreCollision again.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.IgnoreCollision(UnityEngine.Collider,UnityEngine.Collider)">
      <summary>
        <para>Makes the collision detection system ignore all collisions between <c>collider1</c> and <c>collider2</c>.</para>
        <para>This is most useful for making eg. projectiles not collide with the object shooting them.IgnoreCollision has a few limitations:
1) It is not persistent. This means ignore collision state will not be stored in the editor when saving a scene.
2) You can only apply the ignore collision to colliders in active game objects.
When deactivating the collider or attached rigidbody the IgnoreCollision state will be lost and you have to call Physics.IgnoreCollision again.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.IgnoreLayerCollision(System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Makes the collision detection system ignore all collisions between any collider in <c>layer1</c> and any collider in <c>layer2</c>.</para>
        <para>You can set the default values for your project for any layer combinations in the Physics inspector.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.IgnoreLayerCollision(System.Int32,System.Int32)">
      <summary>
        <para>Makes the collision detection system ignore all collisions between any collider in <c>layer1</c> and any collider in <c>layer2</c>.</para>
        <para>You can set the default values for your project for any layer combinations in the Physics inspector.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics.GetIgnoreLayerCollision(System.Int32,System.Int32)">
      <summary>
        <para>Are collisions between <c>layer1</c> and <c>layer2</c> being ignored?</para>
        <para>Returns the value set by Physics.IgnoreLayerCollision or in the Physics inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Physics.IgnoreRaycastLayer">
      <summary>
        <para>Layer mask constant to select ignore raycast layer.</para>
        <para>This can be used in the layermask field of Physics.Raycast and other methods to select the "ignore raycast" layer (which does not receive raycasts by default).
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Physics.DefaultRaycastLayers">
      <summary>
        <para>Layer mask constant to select default raycast layers.</para>
        <para>This can be used in the layermask field of Physics.Raycast and other methods to select the default raycast layers. The default layers are all layers execpt for the ignore raycast layer.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Physics.AllLayers">
      <summary>
        <para>Layer mask constant to select all layers.</para>
        <para>This can be used in the layermask field of Physics.Raycast and other methods to select all layers.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics.gravity">
      <summary>
        <para>The gravity applied to all rigid bodies in the scene.</para>
        <para>Gravity can be turned off for an individual rigidbody using its useGravity property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics.minPenetrationForPenalty">
      <summary>
        <para>The minimum contact penetration value in order to apply a penalty force (default 0.05). Must be positive.</para>
        <para>This value is usually changed in Edit-&amp;gt;Project Settings-&amp;gt;Physics inspector instead of from scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics.bounceThreshold">
      <summary>
        <para>Two colliding objects with a relative velocity below this will not bounce (default 2). Must be positive.</para>
        <para>This value is usually changed in Edit-&amp;gt;Project Settings-&amp;gt;Physics inspector instead of from scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics.sleepVelocity">
      <summary>
        <para>The default linear velocity, below which objects start going to sleep (default 0.15). Must be positive.</para>
        <para>See the Physics Overview in the manual for more information about Rigidbody sleeping.
This value can be overridden per rigidbody using Rigidbody.sleepVelocity. This value is usually changed in Edit-&amp;gt;Project Settings-&amp;gt;Physics inspector instead of from scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics.sleepAngularVelocity">
      <summary>
        <para>The default angular velocity, below which objects start sleeping (default 0.14). Must be positive.</para>
        <para>See the Physics Overview in the manual for more information about Rigidbody sleeping.
This can be overridden per rigidbody using Rigidbody.sleepAngularVelocity. This value is usually changed in Edit-&amp;gt;Project Settings-&amp;gt;Physics inspector instead of from scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics.maxAngularVelocity">
      <summary>
        <para>The default maximum angular velocity permitted for any rigid bodies (default 7). Must be positive.</para>
        <para>The angular velocity of rigidbodies is clamped to maxAngularVelocity to avoid numerical instability with fast rotating bodies.
Because this may prevent intentional fast rotations on objects such as wheels, you can override this value per rigidbody using Rigidbody.maxAngularVelocity.This value is usually changed in Edit-&amp;gt;Project Settings-&amp;gt;Physics inspector instead of from scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics.solverIterationCount">
      <summary>
        <para>The default solver iteration count permitted for any rigid bodies (default 7). Must be positive.</para>
        <para>The solverIterationCount determines how accurately joints and contacts are resolved. 
If you are having trouble with connected bodies oscillating and behaving erratically setting 
a higher solver iteration count may improve their stability (but is slower).
Usually a value of 7 works very well for almost all situations.This value is usually changed in Edit-&amp;gt;Project Settings-&amp;gt;Physics inspector instead of from scripts.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RigidbodyConstraints">
      <summary>
        <para>Use these flags to constrain motion of Rigidbodies.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.None">
      <summary>
        <para>No constraints.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.FreezePositionX">
      <summary>
        <para>Freeze motion along the X-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.FreezePositionY">
      <summary>
        <para>Freeze motion along the Y-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.FreezePositionZ">
      <summary>
        <para>Freeze motion along the Z-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.FreezeRotationX">
      <summary>
        <para>Freeze rotation along the X-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.FreezeRotationY">
      <summary>
        <para>Freeze rotation along the Y-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.FreezeRotationZ">
      <summary>
        <para>Freeze rotation along the Z-axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.FreezePosition">
      <summary>
        <para>Freeze motion along all axes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.FreezeRotation">
      <summary>
        <para>Freeze rotation along all axes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyConstraints.FreezeAll">
      <summary>
        <para>Freeze rotation and motion along all axes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rigidbody">
      <summary>
        <para>Control of an object's position through physics simulation.</para>
        <para>Adding a Rigidbody component to an object will put its motion under the control of Unity's physics engine. Even without adding any code, a Rigidbody object will be pulled downward by gravity and will react to collisions with incoming objects if the right Collider component is also present. The Rigidbody also has a scripting API that lets you apply forces to the object and control it in a physically realistic way. For example, a car's behaviour can be specified in terms of the forces applied by the wheels. Given this information, the physics engine can handle most other aspects of the car's motion, so it will accelerate realistically and respond correctly to collisions.In a script, the FixedUpdate function is recommended as the place to apply forces and change Rigidbody settings (as opposed to Update, which is used for most other frame update tasks). The reason for this is that physics updates are carried out in measured time steps that don't coincide with the frame update. FixedUpdate is called immediately before each physics update and so any changes made there will be processed directly.A common problem when starting out with Rigidbodies is that the game physics appears to run in "slow motion". This is actually due to the scale used for your models. The default gravity settings assume that one world unit corresponds to one metre of distance. With non-physical games, it doesn't make much difference if your models are all 100 units long but when using physics, they will be treated as very large objects. If a large scale is used for objects that are supposed to be small, they will appear to fall very slowly - the physics engine thinks they are very large objects falling over very large distances. With this in mind, be sure to keep your objects more or less at their scale in real life (so a car should be about 4 units = 4 metres, for example).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.#ctor" />
    <member name="M:UnityEngine.Rigidbody.SweepTest(UnityEngine.Vector3,UnityEngine.RaycastHit@,System.Single)">
      <summary>
        <para>Tests if a rigidbody would collide with anything, if it was moved through the scene.</para>
        <para>This is similar to doing a Physics.Raycast for all points contained in any of a Rigidbody's colliders and returning the closest of all hits (if any) reported. This is useful for AI code, when you need to know if an object would fit somewhere without colliding with anything.Note that this function only works when a primitive collider type (sphere, cube or capsule) is attached to the rigidbody object - mesh colliders will not work, although they can be detected in the scene by the sweep.</para>
      </summary>
      <param name="direction">The direction into which to sweep the rigidbody.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="distance">The length of the sweep.</param>
      <returns>
        <para>True when the rigidbody sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody.SweepTest(UnityEngine.Vector3,UnityEngine.RaycastHit@)">
      <summary>
        <para>Tests if a rigidbody would collide with anything, if it was moved through the scene.</para>
        <para>This is similar to doing a Physics.Raycast for all points contained in any of a Rigidbody's colliders and returning the closest of all hits (if any) reported. This is useful for AI code, when you need to know if an object would fit somewhere without colliding with anything.Note that this function only works when a primitive collider type (sphere, cube or capsule) is attached to the rigidbody object - mesh colliders will not work, although they can be detected in the scene by the sweep.</para>
      </summary>
      <param name="direction">The direction into which to sweep the rigidbody.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <returns>
        <para>True when the rigidbody sweep intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Rigidbody.SweepTestAll(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Like <see cref="Rigidbody.SweepTest">Rigidbody.SweepTest</see>, but returns all hits.</para>
        <para>The sweep may return multiple hits against the same collider if more then one of the rigidbody's attached colliders would hit it.Note that this function only works when a primitive collider type (sphere, cube or capsule) is attached to the rigidbody object - mesh colliders will not work, although they can be detected in the scene by the sweep.</para>
      </summary>
      <param name="direction">Direction to sweep the Rigidbody object.</param>
      <param name="distance">Length of the sweep.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody.SweepTestAll(UnityEngine.Vector3)">
      <summary>
        <para>Like <see cref="Rigidbody.SweepTest">Rigidbody.SweepTest</see>, but returns all hits.</para>
        <para>The sweep may return multiple hits against the same collider if more then one of the rigidbody's attached colliders would hit it.Note that this function only works when a primitive collider type (sphere, cube or capsule) is attached to the rigidbody object - mesh colliders will not work, although they can be detected in the scene by the sweep.</para>
      </summary>
      <param name="direction">Direction to sweep the Rigidbody object.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody.SetDensity(System.Single)">
      <summary>
        <para>Sets the mass based on the attached colliders assuming a constant density.</para>
        <para>This is useful to set the mass to a value which scales with the size of the colliders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddForce(UnityEngine.Vector3,UnityEngine.ForceMode)">
      <summary>
        <para>Adds a force to the rigidbody. As a result the rigidbody will start moving.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddForce(UnityEngine.Vector3)">
      <summary>
        <para>Adds a force to the rigidbody. As a result the rigidbody will start moving.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddForce(System.Single,System.Single,System.Single)">
      <summary>
        <para>Adds a force to the rigidbody.  As a result the rigidbody will start moving.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddForce(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
      <summary>
        <para>Adds a force to the rigidbody.  As a result the rigidbody will start moving.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddRelativeForce(UnityEngine.Vector3,UnityEngine.ForceMode)">
      <summary>
        <para>Adds a force to the rigidbody relative to its coordinate system.</para>
        <para>As a result the rigidbody will start moving.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddRelativeForce(UnityEngine.Vector3)">
      <summary>
        <para>Adds a force to the rigidbody relative to its coordinate system.</para>
        <para>As a result the rigidbody will start moving.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddRelativeForce(System.Single,System.Single,System.Single)">
      <summary>
        <para>Adds a force to the rigidbody relative to its coordinate system.</para>
        <para>As a result the rigidbody will start moving.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddRelativeForce(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
      <summary>
        <para>Adds a force to the rigidbody relative to its coordinate system.</para>
        <para>As a result the rigidbody will start moving.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddTorque(UnityEngine.Vector3,UnityEngine.ForceMode)">
      <summary>
        <para>Adds a torque to the rigidbody.</para>
        <para>As a result the rigidbody will start spinning around the torque axis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddTorque(UnityEngine.Vector3)">
      <summary>
        <para>Adds a torque to the rigidbody.</para>
        <para>As a result the rigidbody will start spinning around the torque axis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddTorque(System.Single,System.Single,System.Single)">
      <summary>
        <para>Adds a torque to the rigidbody.</para>
        <para>As a result the rigidbody will start spinning around the torque axis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddTorque(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
      <summary>
        <para>Adds a torque to the rigidbody.</para>
        <para>As a result the rigidbody will start spinning around the torque axis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddRelativeTorque(UnityEngine.Vector3,UnityEngine.ForceMode)">
      <summary>
        <para>Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.</para>
        <para>As a result the rigidbody will start spinning around the torque axis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddRelativeTorque(UnityEngine.Vector3)">
      <summary>
        <para>Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.</para>
        <para>As a result the rigidbody will start spinning around the torque axis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddRelativeTorque(System.Single,System.Single,System.Single)">
      <summary>
        <para>Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.</para>
        <para>As a result the rigidbody will start spinning around the torque axis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddRelativeTorque(System.Single,System.Single,System.Single,UnityEngine.ForceMode)">
      <summary>
        <para>Adds a torque to the rigidbody relative to the rigidbodie's own coordinate system.</para>
        <para>As a result the rigidbody will start spinning around the torque axis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddForceAtPosition(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.ForceMode)">
      <summary>
        <para>Applies <c>force</c> at <c>position</c>. As a result this will apply a torque and force on the object.</para>
        <para>For realistic effects position should be approximately in the range of the surface of the rigidbody.
This is most commonly used for explosions. When applying explosions it is best to apply forces over several frames instead of just one.
Note that when position is far away from the center of the rigidbody the applied torque will be unrealistically large.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddForceAtPosition(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Applies <c>force</c> at <c>position</c>. As a result this will apply a torque and force on the object.</para>
        <para>For realistic effects position should be approximately in the range of the surface of the rigidbody.
This is most commonly used for explosions. When applying explosions it is best to apply forces over several frames instead of just one.
Note that when position is far away from the center of the rigidbody the applied torque will be unrealistically large.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddExplosionForce(System.Single,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.ForceMode)">
      <summary>
        <para>Applies a force to the rigidbody that simulates explosion effects. The explosion force will fall off linearly with distance to the rigidbody.</para>
        <para>The function also plays nicely with ragdolls.If radius is 0, the full force will be applied no matter how far away position is from the rigidbody.
explosionRadius applies the force as if it was applied from beneath the object.
This is useful since explosions that throw things up instead of pushing things to the side look cooler.
A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position.
explosionRadius	is the position from which the explosion force is to be applied.
explosionRadius is the radius of the explosion. Rigidbodies further away than explosionRadius will not be affected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddExplosionForce(System.Single,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Applies a force to the rigidbody that simulates explosion effects. The explosion force will fall off linearly with distance to the rigidbody.</para>
        <para>The function also plays nicely with ragdolls.If radius is 0, the full force will be applied no matter how far away position is from the rigidbody.
explosionRadius applies the force as if it was applied from beneath the object.
This is useful since explosions that throw things up instead of pushing things to the side look cooler.
A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position.
explosionRadius	is the position from which the explosion force is to be applied.
explosionRadius is the radius of the explosion. Rigidbodies further away than explosionRadius will not be affected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.AddExplosionForce(System.Single,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Applies a force to the rigidbody that simulates explosion effects. The explosion force will fall off linearly with distance to the rigidbody.</para>
        <para>The function also plays nicely with ragdolls.If radius is 0, the full force will be applied no matter how far away position is from the rigidbody.
explosionRadius applies the force as if it was applied from beneath the object.
This is useful since explosions that throw things up instead of pushing things to the side look cooler.
A value of 2 will apply a force as if it is applied from 2 meters below while not changing the actual explosion position.
explosionRadius	is the position from which the explosion force is to be applied.
explosionRadius is the radius of the explosion. Rigidbodies further away than explosionRadius will not be affected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.ClosestPointOnBounds(UnityEngine.Vector3)">
      <summary>
        <para>The closest point to the bounding box of the attached colliders.</para>
        <para>This can be used to calculate hit points when applying explosion damage.
Or calculating explosion forces that act on a point on the surface of the rigidbody.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.GetRelativePointVelocity(UnityEngine.Vector3)">
      <summary>
        <para>The velocity relative to the rigidbody at the point <c>relativePoint</c>.</para>
        <para>GetRelativePointVelocity will take the angularVelocity of the rigidbody into account when calculating the velocity.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.GetPointVelocity(UnityEngine.Vector3)">
      <summary>
        <para>The velocity of the rigidbody at the point <c>worldPoint</c> in global space.</para>
        <para>GetPointVelocity will take the angularVelocity of the rigidbody into account when calculating the velocity.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.MovePosition(UnityEngine.Vector3)">
      <summary>
        <para>Moves the rigidbody to <c>position</c>.</para>
        <para>Changing the position of a Rigidbody object by setting its transform.position value will cause it to "teleport" directly to the new position (ie, it doesn't move through any intermediate positions along the way). Any other Rigidbodies lying between the old position and the new one will be unaffected by the movement. Also, any colliders at the target position will react immediately with the moved rigidbody on the next update.If you use MovePosition instead, the physics engine will trace a straight line path between the object's old position and the new one and behave as though it rapidly moved along that path between updates. Objects lying along the path will be pushed aside if necessary. This often gives a more acceptable result than changing transform.position. However, if the movements are small and frequent then the two techniques behave very similarly.</para>
      </summary>
      <param name="position">The new position for the Rigidbody object.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody.MoveRotation(UnityEngine.Quaternion)">
      <summary>
        <para>Rotates the rigidbody to <c>rotation</c>.</para>
        <para>For kinematic rigidbodies it applies friction based on the motion of the rigidbody.
This lets you simulate moving / rotating platforms with rigidbodies sitting on top of the elevator.
If you want other rigidbodies to interact with the kinematic rigidbody you need to move it in the FixedUpdate function.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.Sleep">
      <summary>
        <para>Forces a rigidbody to sleep at least one frame.</para>
        <para>A common use is to call this from Awake in order to make a rigidbody sleep at startup.
See the Physics Overview in the manual for more information about Rigidbody sleeping.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.IsSleeping">
      <summary>
        <para>Is the rigidbody sleeping?</para>
        <para>See the Physics Overview in the manual for more information about Rigidbody sleeping.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody.WakeUp">
      <summary>
        <para>Forces a rigidbody to wake up.</para>
        <para>See the Physics Overview in the manual for more information about Rigidbody sleeping.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.velocity">
      <summary>
        <para>The velocity vector of the rigidbody.</para>
        <para>In most cases you should not modify the velocity directly, as this can result in unrealistic behaviour.
Don't set the velocity of an object every physics step, this will lead to unrealistic physics simulation.
A typical example where you would change the velocity is when jumping in a first person shooter, because you want an immediate change in velocity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.angularVelocity">
      <summary>
        <para>The angular velocity vector of the rigidbody.</para>
        <para>In most cases you should not modify it directly, as this can result in unrealistic behaviour.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.drag">
      <summary>
        <para>The drag of the object.</para>
        <para>Drag can be used to slow down an object.
The higher the drag the more the object slows down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.angularDrag">
      <summary>
        <para>The angular drag of the object.</para>
        <para>Angular drag can be used to slow down the rotation of an object.
The higher the drag the more the rotation slows down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.mass">
      <summary>
        <para>The mass of the rigidbody.</para>
        <para>You should strive to keep mass close to 0.1 and never more than 10.
Large masses make physics simulation unstable.Higher mass objects push lower mass objects more when colliding. Think of a big truck, hitting a small car.A common mistake is to assume that heavy objects fall faster than light ones.
This is not true as the speed is dependent on gravity and drag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.useGravity">
      <summary>
        <para>Controls whether gravity affects this rigidbody.</para>
        <para>If set to false the rigidbody will behave as in outer space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.isKinematic">
      <summary>
        <para>Controls whether physics affects the rigidbody.</para>
        <para>If isKinematic is enabled, Forces, collisions or joints will not affect the rigidbody anymore.
The rigidbody will be under full control of animation or script control by changing transform.position.
Kinematic bodies also affect the motion of other rigidbodies through collisions or joints.
Eg. can connect a kinematic rigidbody to a normal rigidbody with a joint 
and the rigidbody will be constrained with the motion of the kinematic body.
Kinematic rigidbodies are also particularly useful for making characters which are normally driven by an animation,
but on certain events can be quickly turned into a ragdoll by setting isKinematic to false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.freezeRotation">
      <summary>
        <para>Controls whether physics will change the rotation of the object.</para>
        <para>If freezeRotation is enabled, the rotation is not modified by the physics simulation.
This is useful for creating first person shooters,
because the player needs full control of the rotation using the mouse.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.constraints">
      <summary>
        <para>Controls which degrees of freedom are allowed for the simulation of this Rigidbody.</para>
        <para>By default this is set to RigidbodyConstraints.None, allowing rotation and movement along all axes.
In some cases, you may want to constrain a Rigidbody to only move or rotate along some axes, for 
example when developing 2D games. You can use the bitwise OR operator to combine multiple
constraints.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.collisionDetectionMode">
      <summary>
        <para>The Rigidbody's collision detection mode.</para>
        <para>Use this to set up a Rigidbody's for continuous collision detection, which is used to prevent fast moving objects
from passing through other objects without detecting collisions. For best results, set this value to CollisionDetectionMode.ContinuousDynamic for
fast moving objects, and for other objects which these need to collide with, set it to CollisionDetectionMode.Continuous.
This has a big impact on physics performance, so just leave it set to the default value of 
CollisionDetectionMode.Discrete, if you don't have any issues with collisions of fast objects.
Continuous Collision Detection is only supported for Rigidbodies with Sphere-, Capusle- or BoxColliders.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.centerOfMass">
      <summary>
        <para>The center of mass relative to the transform's origin.</para>
        <para>If you don't set the center of mass from a script it will be calculated automatically from all colliders attached to the rigidbody.
Setting the center of mass is often useful when simulating cars to make them more stable.
A car with a lower center of mass is less likely to topple over.Note: centerOfMass is relative to the transform's position and rotation, but will not reflect the transform's scale!</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.worldCenterOfMass">
      <summary>
        <para>The center of mass of the rigidbody in world space (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.inertiaTensorRotation">
      <summary>
        <para>The rotation of the inertia tensor.</para>
        <para>If you don't set intertia tensor rotation from a script it will be calculated automatically from all colliders attached to the rigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.inertiaTensor">
      <summary>
        <para>The diagonal inertia tensor of mass relative to the center of mass.</para>
        <para>The inertia tensor is rotated by the inertiaTensorRotation.
If you don't set intertia tensor from a script it will be calculated automatically from all colliders attached to the rigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.detectCollisions">
      <summary>
        <para>Should collision detection be enabled? (By default always enabled).</para>
        <para>Disabling collision detections is useful when you have a ragdoll which is setup to be kinematic and you want to avoid
heavy collision detection calculations on that rigidbody.
/detectCollisions/ is not serialized. This means it doesn't show up in the Inspector
and when Instantiating the rigidbody or saving it in a scene, it will not be saved.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.useConeFriction">
      <summary>
        <para>Force cone friction to be used for this rigidbody.</para>
        <para>This insures that all contacts involving the actor will use cone friction. This will however have a negative impact on 
performance. By default this is off and a much faster and almost as good approximation called pyramid friction method is used.
In most cases it is recommended to leave this value off.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.position">
      <summary>
        <para>The position of the rigidbody.</para>
        <para>This is similar to setting transform.position, however the position will only be applied to the transform at the end of the physics step.
If you want to continously move a rigidbody or kinematic rigidbody use MovePosition and MoveRotation instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.rotation">
      <summary>
        <para>The rotation of the rigdibody.</para>
        <para>This is similar to setting transform.rotation, however the rotation will only be applied to the transform at the end of the physics step.
If you want to continously move a rigidbody or kinematic rigidbody use MovePosition and MoveRotation instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.interpolation">
      <summary>
        <para>Interpolation allows you to smooth out the effect of running physics at a fixed frame rate.</para>
        <para>By default interpolation is turned off. Commonly rigidbody interpolation is used on the player's character.
Physics is running at discrete timesteps, while graphics is renderered at variable frame rates.
This can lead to jittery looking objects, because physics and graphics are not completely in sync.
The effect is subtle but often visible on the player character, especially if a camera follows the main character.
It is recommended to turn on interpolation for the main character but disable it for everything else.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.solverIterationCount">
      <summary>
        <para>Allows you to override the solver iteration count per rigidbody.</para>
        <para>The solverIterationCount determines how accuratly joints and contacts are resolved. 
If you are having trouble with jointed bodies oscillating and behaving erratically setting 
a higher solver iteration count may improve their stability.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.sleepVelocity">
      <summary>
        <para>The linear velocity below which objects start going to sleep. (Default 0.14) range { 0, infinity }.</para>
        <para>See the Physics Overview in the manual for more information about Rigidbody sleeping.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.sleepAngularVelocity">
      <summary>
        <para>The angular velocity below which objects start going to sleep.  (Default 0.14) range { 0, infinity }.</para>
        <para>See the Physics Overview in the manual for more information about Rigidbody sleeping.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody.maxAngularVelocity">
      <summary>
        <para>The maximimum angular velocity of the rigidbody. (Default 7) range { 0, infinity }.</para>
        <para>The angular velocity of rigidbodies is clamped to maxAngularVelocity to avoid numerical instability with fast rotating bodies.
Because this may prevent intentional fast rotations on objects such as wheels, you can override this value per rigidbody.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RigidbodyInterpolation">
      <summary>
        <para>
          <see cref="Rigidbody">Rigidbody</see> interpolation mode.</para>
        <para>For the main characters or vehicles that are followed by the camera it is recommended to
use interpolation. For any other rigidbodies it is recommended not to use interpolation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyInterpolation.None">
      <summary>
        <para>No Interpolation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyInterpolation.Interpolate">
      <summary>
        <para>Interpolation will always lag a little bit behind but can be smoother than extrapolation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyInterpolation.Extrapolate">
      <summary>
        <para>Extrapolation will predict the position of the rigidbody based on the current velocity.</para>
        <para>If you have fast moving objects this can lead to rigidbodies passing 
through colliders for one frame and then snapping back.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointMotor">
      <summary>
        <para>The JointMotor is used to motorize a joint.</para>
        <para>For example the HingeJoint can be told to rotate at a given speed and force.
The joint will then attempt to reach the velocity with the given maximum force.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointMotor.targetVelocity">
      <summary>
        <para>The motor will apply a force up to <c>force</c> to achieve <c>targetVelocity</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointMotor.force">
      <summary>
        <para>The motor will apply a force.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointMotor.freeSpin">
      <summary>
        <para>If <c>freeSpin</c> is enabled the motor will only accelerate but never slow down.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointSpring">
      <summary>
        <para>JointSpring is used add a spring force to <see cref="HingeJoint">HingeJoint</see> and <see cref="PhysicMaterial">PhysicMaterial</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointSpring.spring">
      <summary>
        <para>The spring forces used to reach the target position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointSpring.damper">
      <summary>
        <para>The damper force uses to dampen the spring.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointSpring.targetPosition">
      <summary>
        <para>The target position the joint attempts to reach.</para>
        <para>In the case of a HingeJoint the target position is the target angle in degrees.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointLimits">
      <summary>
        <para>JointLimits is used by the <see cref="HingeJoint">HingeJoint</see> to limit the joints angle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointLimits.min">
      <summary>
        <para>The lower limit of the joint.</para>
        <para>When the joint angle or position is below it, the joint will excert forces to constrain it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointLimits.minBounce">
      <summary>
        <para>The bounciness of the joint when hitting the lower limit of the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointLimits.max">
      <summary>
        <para>The upper limit of the joint.</para>
        <para>When the joint angle or position is above it, the joint will excert forces to constrain it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointLimits.maxBounce">
      <summary>
        <para>The bounciness of the joint when hitting the upper limit of the joint.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Joint">
      <summary>
        <para>Joint is the base class for all joints.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint.connectedBody">
      <summary>
        <para>A reference to another rigidbody this joint connects to.</para>
        <para>If not set, the joint connects the object to the world.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint.axis">
      <summary>
        <para>The Direction of the axis around which the body is constrained.</para>
        <para>The Axis is defined in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint.anchor">
      <summary>
        <para>The Position of the anchor around which the joints motion is constrained.</para>
        <para>The Position is defined in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint.connectedAnchor">
      <summary>
        <para>Position of the anchor relative to the connected Rigidbody.</para>
        <para>If /Joint.autoConfigureConnectedAnchor/ is not enabled, then this will be used to set the position of the anchor on the connected rigidbody. The position is given in local coordinates of the connected rigidbody, or in world coordinates if there is no connected rigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint.autoConfigureConnectedAnchor">
      <summary>
        <para>Should the <c>connectedAnchor</c> be calculated automatically?</para>
        <para>If this is enabled, then the connectedAnchor property will be calculated automatically to match the global position of the anchor property. This is the default behavior. If this is disabled, you can configure the position of the connected anchor using the connectedAnchor property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint.breakForce">
      <summary>
        <para>The force that needs to be applied for this joint to break.</para>
        <para>The force might come from collisions with other objects, forces applied with rigidbody.AddTorque or from other joints.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint.breakTorque">
      <summary>
        <para>The torque that needs to be applied for this joint to break.</para>
        <para>The torque might come from collisions with other objects, forces applied with rigidbody.AddTorque or from other joints.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint.enableCollision">
      <summary>
        <para>Enable collision between bodies connected with the joint.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HingeJoint">
      <summary>
        <para>The HingeJoint groups together 2 rigid bodies, constraining them to move like connected by a hinge.</para>
        <para>This joint is great for, well, doors, but can also be used to model chains, etc...The HingeJoint has a motor which can be used to make the hinge spin around the joints axis.
A spring which attempts to reach for a target angle by spinning around the joints axis.
And a limit which constrains the joint angle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint.motor">
      <summary>
        <para>The motor will apply a force up to a maximum force to achieve the target velocity in degrees per second.</para>
        <para>The motor tries to reach /motor.targetVelocity/ angular velocity in degrees per second.
The motor will only be able to reach /motor.targetVelocity/, if /motor.force/ is sufficiently large.
If the joint is spinning faster than /motor.targetVelocity/ the motor will break.
A negative /motor.targetVelocity/ will make the motor spin in the opposite direction.The /motor.force/ is the maximum torque the motor can exert. If it is zero the motor is disabled.The motor will brake when it is spinning faster than /motor.targetVelocity/ only, if /motor.freeSpin/ is false.
If /motor.freeSpin/ is true the motor will not brake.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint.limits">
      <summary>
        <para>Limit of angular rotation on the hinge joint.</para>
        <para>The joint will be limited so that the angle is always between /limits.min/ and /limits.max/.
The joint angle is in degrees relative to the rest angle. The rest angle between the bodies is always zero at the beginning of the simulation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint.spring">
      <summary>
        <para>The spring attempts to reach a target angle by adding spring and damping forces.</para>
        <para>The /spring.spring/ force attempts to reach the target angle. A larger value makes the spring reach the target position faster.The /spring.damper/ force dampens the angular velocity. A larger value makes the spring reach the goal slower.The spring reaches for the /spring.targetPosition/ angle in degrees relative to the rest angle. The rest angle between the bodies is always zero at the beginning of the simulation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint.useMotor">
      <summary>
        <para>Enables the joint's motor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint.useLimits">
      <summary>
        <para>Enables the joint's limits.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint.useSpring">
      <summary>
        <para>Enables the joint's spring.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint.velocity">
      <summary>
        <para>The angular velocity of the joint in degrees per second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint.angle">
      <summary>
        <para>The current angle in degrees of the joint relative to its rest position. (Read Only)</para>
        <para>The rest angle between the bodies is always zero at the beginning of the simulation.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpringJoint">
      <summary>
        <para>The spring joint ties together 2 rigid bodies, spring forces will be automatically applied to keep the object at the given distance.</para>
        <para>The Spring attempts to maintain the distance it has when it starts out.
So if your joint's start at a rest position where the two rigidbodies are far apart, then the joint will attempt to maintain that distance.
The minDistance and maxDistance properties add on top of this implicit distance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SpringJoint.#ctor" />
    <member name="P:UnityEngine.SpringJoint.spring">
      <summary>
        <para>The spring force used to keep the two objects together.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpringJoint.damper">
      <summary>
        <para>The damper force used to dampen the spring force.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpringJoint.minDistance">
      <summary>
        <para>The minimum distance between the bodies relative to their initial distance.</para>
        <para>The distanced that will be maintained, will be kept between minDistance and maxDistance.
Both values are relative to the distance between the center of masses when the scene was first loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpringJoint.maxDistance">
      <summary>
        <para>The maximum distance between the bodies relative to their initial distance.</para>
        <para>The distanced that will be maintained, will be kept between minDistance and maxDistance.
Both values are relative to the distance between the center of masses when the scene was first loaded.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FixedJoint">
      <summary>
        <para>The Fixed joint groups together 2 rigidbodies, making them stick together in their bound position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SoftJointLimit">
      <summary>
        <para>The limits defined by the <see cref="CharacterJoint">CharacterJoint</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SoftJointLimit.limit">
      <summary>
        <para>The limit position/angle of the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SoftJointLimit.spring">
      <summary>
        <para>If greater than zero, the limit is soft. The spring will pull the joint back.</para>
        <para>{ 0, infinity }.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SoftJointLimit.damper">
      <summary>
        <para>If spring is greater than zero, the limit is soft.</para>
        <para>This is the damping of spring.
{ 0, infinity }.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SoftJointLimit.bounciness">
      <summary>
        <para>When the joint hits the limit, it can be made to bounce off it.</para>
        <para>Bounciness determines how much to bounce off an limit.
range { 0, 1 }.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointDriveMode">
      <summary>
        <para>The <see cref="ConfigurableJoint">ConfigurableJoint</see> attempts to attain position / velocity targets based on this flag.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointDriveMode.None">
      <summary>
        <para>Don't apply any forces to reach the target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointDriveMode.Position">
      <summary>
        <para>Try to reach the specified target position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointDriveMode.Velocity">
      <summary>
        <para>Try to reach the specified target velocity.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointDriveMode.PositionAndVelocity">
      <summary>
        <para>Try to reach the specified target position and velocity.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointProjectionMode">
      <summary>
        <para>Determines how to snap physics joints back to its constrained position when it drifts off too much.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointProjectionMode.None">
      <summary>
        <para>Don't snap at all.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointProjectionMode.PositionAndRotation">
      <summary>
        <para>Snap both position and rotation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointProjectionMode.PositionOnly">
      <summary>
        <para>Snap Position only.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointDrive">
      <summary>
        <para>How the joint's movement will behave along its local X axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointDrive.mode">
      <summary>
        <para>Whether the drive should attempt to reach position, velocity, both or nothing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointDrive.positionSpring">
      <summary>
        <para>Strength of a rubber-band pull toward the defined direction. Only used if <c>mode</c> includes Position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointDrive.positionDamper">
      <summary>
        <para>Resistance strength against the Position Spring. Only used if <c>mode</c> includes Position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointDrive.maximumForce">
      <summary>
        <para>Amount of force applied to push the object toward the defined direction.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CharacterJoint">
      <summary>
        <para>Character Joints are mainly used for Ragdoll effects. They are an extended ball-socket joint which allows you to limit the joint on each axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterJoint.swingAxis">
      <summary>
        <para>The secondary axis around which the joint can rotate.</para>
        <para>CharacterJoint.swing1Limit are the limits of the rotation allowed around this axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterJoint.lowTwistLimit">
      <summary>
        <para>The lower limit around the primary axis of the character joint.</para>
        <para>The limit is relative to the angle the two rigidbodies started the simulation out with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterJoint.highTwistLimit">
      <summary>
        <para>The upper limit around the primary axis of the character joint.</para>
        <para>The limit is relative to the angle the two rigidbodies started the simulation out with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterJoint.swing1Limit">
      <summary>
        <para>The limit around the primary axis of the character joint.</para>
        <para>The limit is symmetric. Thus a value of eg. 30 will limit the rotation between -30 and 30.
The limit is relative to the angle the two rigidbodies started the simulation out with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterJoint.swing2Limit">
      <summary>
        <para>The limit around the primary axis of the character joint.</para>
        <para>The limit is symmetric. Thus a value of eg. 30 will limit the rotation between -30 and 30.
The limit is relative to the angle the two rigidbodies started the simulation out with.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ConfigurableJointMotion">
      <summary>
        <para>Constrains movement for a <see cref="ConfigurableJoint">ConfigurableJoint</see> along the 6 axes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConfigurableJointMotion.Locked">
      <summary>
        <para>Motion along the axis will be locked.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConfigurableJointMotion.Limited">
      <summary>
        <para>Motion along the axis will be limited by the respective limit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConfigurableJointMotion.Free">
      <summary>
        <para>Motion along the axis will be completely free and completely unconstrained.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RotationDriveMode">
      <summary>
        <para>Control <see cref="ConfigurableJoint">ConfigurableJoint</see>'s rotation with either X &amp;amp; YZ or Slerp Drive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RotationDriveMode.XYAndZ">
      <summary>
        <para>Use XY &amp;amp; Z Drive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RotationDriveMode.Slerp">
      <summary>
        <para>Use Slerp drive.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ConfigurableJoint">
      <summary>
        <para>The configurable joint is an extremely flexible joint giving you complete control over rotation and linear motion.</para>
        <para>You can build all other joints with it and much more but it is also more complicated to setup.
It gives you control over motors, drives and joint limits for each rotation axis and and linear degree of freedom.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.secondaryAxis">
      <summary>
        <para>The joint's secondary axis.</para>
        <para>Together, secondary and primary axes define the joint's coordinate space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.xMotion">
      <summary>
        <para>Allow movement along the X axis to be Free, completely Locked, or Limited according to Linear Limit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.yMotion">
      <summary>
        <para>Allow movement along the Y axis to be Free, completely Locked, or Limited according to Linear Limit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.zMotion">
      <summary>
        <para>Allow movement along the Z axis to be Free, completely Locked, or Limited according to Linear Limit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.angularXMotion">
      <summary>
        <para>Allow rotation around the X axis to be Free, completely Locked, or Limited according to Low and High Angular XLimit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.angularYMotion">
      <summary>
        <para>Allow rotation around the Y axis to be Free, completely Locked, or Limited according to Angular YLimit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.angularZMotion">
      <summary>
        <para>Allow rotation around the Z axis to be Free, completely Locked, or Limited according to Angular ZLimit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.linearLimit">
      <summary>
        <para>Boundary defining movement restriction, based on distance from the joint's origin.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.lowAngularXLimit">
      <summary>
        <para>Boundary defining lower rotation restriction, based on delta from original rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.highAngularXLimit">
      <summary>
        <para>Boundary defining upper rotation restriction, based on delta from original rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.angularYLimit">
      <summary>
        <para>Boundary defining rotation restriction, based on delta from original rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.angularZLimit">
      <summary>
        <para>Boundary defining rotation restriction, based on delta from original rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.targetPosition">
      <summary>
        <para>The desired position that the joint should move into.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.targetVelocity">
      <summary>
        <para>The desired velocity that the joint should move along.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.xDrive">
      <summary>
        <para>Definition of how the joint's movement will behave along its local X axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.yDrive">
      <summary>
        <para>Definition of how the joint's movement will behave along its local Y axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.zDrive">
      <summary>
        <para>Definition of how the joint's movement will behave along its local Z axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.targetRotation">
      <summary>
        <para>This is a <see cref="Quaternion">Quaternion</see>. It defines the desired rotation that the joint should rotate into.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.targetAngularVelocity">
      <summary>
        <para>This is a <see cref="Vector3">Vector3</see>. It defines the desired angular velocity that the joint should rotate into.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.rotationDriveMode">
      <summary>
        <para>Control the object's rotation with either X &amp;amp; YZ or Slerp Drive by itself.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.angularXDrive">
      <summary>
        <para>Definition of how the joint's rotation will behave around its local X axis. Only used if Rotation Drive Mode is Swing &amp;amp; Twist.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.angularYZDrive">
      <summary>
        <para>Definition of how the joint's rotation will behave around its local Y and Z axes. Only used if Rotation Drive Mode is Swing &amp;amp; Twist.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.slerpDrive">
      <summary>
        <para>Definition of how the joint's rotation will behave around all local axes. Only used if Rotation Drive Mode is Slerp Only.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.projectionMode">
      <summary>
        <para>Properties to track to snap the object back to its constrained position when it drifts off too much.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.projectionDistance">
      <summary>
        <para>Distance from the Connected Body that must be exceeded before the object snaps back to an acceptable position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.projectionAngle">
      <summary>
        <para>Difference in angle from the Connected Body that must be exceeded before the object snaps back to an acceptable position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.configuredInWorldSpace">
      <summary>
        <para>If enabled, all Target values will be calculated in world space instead of the object's local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConfigurableJoint.swapBodies">
      <summary>
        <para>If enabled, the two connected rigidbodies will be swapped, as if the joint was attached to the other body.</para>
        <para>Prior to Unity 3.4, this was wrongfully applied to all ConfigurableJoints with the configuredInWorldSpace/
property set. If you want to restore the behaviour of older Unity versions and you are using	
/configuredInWorldSpace/, enable this property.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ConstantForce">
      <summary>
        <para>A force applied constantly.</para>
        <para>This is a small physics utility class used to apply a continous force to an object.Rigidbody.AddForce applies a force to the Rigidbody only for one frame, thus you have to keep calling the function.
ConstantForce on the other hand will apply the force every frame until you change the force or torque to a new value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConstantForce.force">
      <summary>
        <para>The force applied to the rigidbody every frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConstantForce.relativeForce">
      <summary>
        <para>The force - relative to the rigid bodies coordinate system - applied every frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConstantForce.torque">
      <summary>
        <para>The torque applied to the rigidbody every frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ConstantForce.relativeTorque">
      <summary>
        <para>The torque - relative to the rigid bodies coordinate system - applied every frame.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CollisionDetectionMode">
      <summary>
        <para>The collision detection mode constants used for <see cref="Rigidbody-collisionDetectionMode">Rigidbody.collisionDetectionMode</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionDetectionMode.Discrete">
      <summary>
        <para>Continuous collision detection is off for this Rigidbody.</para>
        <para>This is the default collision detection mode, and it is the fastest mode. Collisions for this collider will
only be checked at the content's Time.fixedDeltaTime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionDetectionMode.Continuous">
      <summary>
        <para>Continuous collision detection is on for colliding with static mesh geometry.</para>
        <para>Collisions will be detected for any static mesh geometry in the path of this Rigidbody, even if the collision occurs
between two FixedUpdate steps. Static mesh geometry is any MeshCollider which does not have a Rigidbody attached.
This also prevent Rigidbodies set to ContinuousDynamic mode from passing through this Rigidbody.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionDetectionMode.ContinuousDynamic">
      <summary>
        <para>Continuous collision detection is on for colliding with static and dynamic geometry.</para>
        <para>Prevent this Rigidbody from passing through static mesh geometry, and through other 
Rigidbodies which have continuous collision detection enabled, when it is moving fast.
This is the slowest collision detection mode, and should only be used for selected fast moving objects.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Collider">
      <summary>
        <para>A base class of all colliders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Collider.ClosestPointOnBounds(UnityEngine.Vector3)">
      <summary>
        <para>The closest point to the bounding box of the attached collider.</para>
        <para>This can be used to calculate hit points when applying explosion damage.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Collider.Raycast(UnityEngine.Ray,UnityEngine.RaycastHit@,System.Single)">
      <summary>
        <para>Casts a <see cref="Ray">Ray</see> that ignores all Colliders except this one.</para>
      </summary>
      <param name="ray">The starting point and direction of the ray.</param>
      <param name="hitInfo">If true is returned, <c>hitInfo</c> will contain more information about where the collider was hit (See Also: <see cref="RaycastHit">RaycastHit</see>).</param>
      <param name="distance">The length of the ray.</param>
      <returns>
        <para>True when the ray intersects any collider, otherwise false.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Collider.enabled">
      <summary>
        <para>Enabled Colliders will collide with other colliders, disabled Colliders won't.</para>
        <para>This is shown as the small checkbox in the inspector of the Colliders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider.attachedRigidbody">
      <summary>
        <para>The rigidbody the collider is attached to.</para>
        <para>Returns null if the collider is attached to no rigidbody.Colliders are automatically connected to the rigidbody attached 
to the same game object or attached to any parent game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider.isTrigger">
      <summary>
        <para>Is the collider a trigger?</para>
        <para>A trigger doesn't collide with rigid bodies.
Instead it sends OnTriggerEnter, OnTriggerExit and OnTriggerStay message
when a rigidbody enters or exits the trigger.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider.material">
      <summary>
        <para>The material used by the collider.</para>
        <para>If material is shared by colliders,
it will duplicate the material and assign it to the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider.sharedMaterial">
      <summary>
        <para>The shared physic material of this collider.</para>
        <para>Modifying this material will change the surface properties of all colliders using the material.
In most cases you want to modify Collider.material instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider.bounds">
      <summary>
        <para>The world space bounding volume of the collider.</para>
        <para>Note that this will be an empty bounding box if the collider is disabled or the game object 
is inactive.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BoxCollider">
      <summary>
        <para>A box-shaped primitive collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoxCollider.center">
      <summary>
        <para>The center of the box, measured in the object's local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoxCollider.size">
      <summary>
        <para>The size of the box, measured in the object's local space.</para>
        <para>The box size will be scaled by the transform's scale.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SphereCollider">
      <summary>
        <para>A sphere-shaped primitive collider.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SphereCollider.#ctor" />
    <member name="P:UnityEngine.SphereCollider.center">
      <summary>
        <para>The center of the sphere, measured in the object's local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SphereCollider.radius">
      <summary>
        <para>The radius of the sphere, measured in the object's local space.</para>
        <para>The sphere radius will be scaled by the transform's scale.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MeshCollider">
      <summary>
        <para>A mesh collider allows you to do <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-MeshCollider.html">collision detection</see> between meshes and primitives.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshCollider.sharedMesh">
      <summary>
        <para>The mesh object used for collision detection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshCollider.convex">
      <summary>
        <para>Use a convex collider from the mesh.</para>
        <para>This means that if you have this set to true, your mesh collider wont have Holes or entrances.
Convex meshes can collide with other convex colliders and non-convex meshes.
Thus convex mesh colliders are suitable on rigidibodies,
if you really need more detailed colliders than what the primitive colliders provide you with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshCollider.smoothSphereCollisions">
      <summary>
        <para>Uses interpolated normals for sphere collisions instead of flat polygonal normals.</para>
        <para>This smoothes out bumps for sphere's rolling over smooth surfaces.
The downside is that rolling over steep corners can behave really strangely and appears like it is pulling the sphere in some direction.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CapsuleCollider">
      <summary>
        <para>A capsule-shaped primitive collider.</para>
        <para>Capsules are cylinders with a half-sphere at each end.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CapsuleCollider.center">
      <summary>
        <para>The center of the capsule, measured in the object's local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CapsuleCollider.radius">
      <summary>
        <para>The radius of the sphere, measured in the object's local space.</para>
        <para>The capsule's radius will be scaled by the transform's scale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CapsuleCollider.height">
      <summary>
        <para>The height of the capsule meased in the object's local space.</para>
        <para>The capsule's height will be scaled by the transform's scale.
Note that the height is the actual height including the half-spheres at each end.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CapsuleCollider.direction">
      <summary>
        <para>The direction of the capsule.</para>
        <para>0 -&amp;gt; Capsule height is along the x-axis.
1 -&amp;gt; Capsule height is along the y-axis.
2 -&amp;gt; Capsule height is along the z-axis.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WheelFrictionCurve">
      <summary>
        <para>WheelFrictionCurve is used by the <see cref="WheelCollider">WheelCollider</see> to describe friction properties of the wheel tire.</para>
        <para>The curve takes a measure of tire slip as an input and gives a force as output. The curve is approximated by
a two-piece spline. The first section goes from (0,0) to (extremumSlip,extremumValue), at which
point the curve's tangent is zero. The second section goes from (extremumSlip,extremumValue)
to (asymptoteSlip,asymptoteValue), where curve's tangent is again zero:Wheel collider computes friction separately from the rest of physics engine, using a slip based
friction model. It separates the overall friction force into a "forwards" component (in the
direction of rolling, and responsible for acceleration and braking) and "sideways" component
(orthogonal to rolling, responsible for keeping the car oriented). Tire friction is described
separately in these directions using WheelCollider.forwardFriction and WheelCollider.sidewaysFriction.
In both directions it is first determined how much the tire is slipping (what is the speed difference between
the rubber and the road). Then this slip value is used to find out tire force exerted on the contact.The property of real tires is that for low slip they can exert high forces as the rubber compensates
for the slip by stretching. Later when the slip gets really high, the forces are reduced as the tire
starts to slide or spin. Thus tire friction curves have a shape like in the image above.Because the friction for the tires is computed separately, the PhysicMaterial of the ground
does not affect the wheels. Simulation of different road materials is done by changing
the forwardFriction and sidewaysFriction of the wheel,
based on what material the wheel is hitting. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelFrictionCurve.extremumSlip">
      <summary>
        <para>Extremum point slip (default 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelFrictionCurve.extremumValue">
      <summary>
        <para>Force at the extremum slip (default 20000).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelFrictionCurve.asymptoteSlip">
      <summary>
        <para>Asymptote point slip (default 2).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelFrictionCurve.asymptoteValue">
      <summary>
        <para>Force at the asymptote slip (default 10000).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelFrictionCurve.stiffness">
      <summary>
        <para>Multiplier for the <see cref="WheelFrictionCurve-extremumValue">extremumValue</see> and <see cref="WheelFrictionCurve-asymptoteValue">asymptoteValue</see> values (default 1).</para>
        <para>Changes the stiffness of the friction. Setting this to zero
will completely disable all friction from the wheel.Usually you modify stiffness to simulate various ground materials (e.g. lower the stiffness
when driving on grass). </para>
      </summary>
    </member>
    <member name="T:UnityEngine.WheelHit">
      <summary>
        <para>Contact information for the wheel, reported by <see cref="WheelCollider">WheelCollider</see>.</para>
        <para>Friction for the WheelCollider is computed separately from the rest of the physics, using
a slip based tire friction model. This allows for more realistic behaviour, but makes
wheel colliders ignore standard PhysicMaterial settings.The way to simulate different ground materials is to query WheelCollider for its collision
information (see WheelCollider.GetGroundHit). Usually you get the other collider the wheel
is hitting, and modify wheel's forwardFriction and sidewaysFriction
based on ground's material.The other members of WheelHit structure are usually queried for information purposes or special
effects. E.g. a "slipping tire" sound can be played if forwardSlip or sidewaysSlip
exceed some threshold.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelHit.collider">
      <summary>
        <para>The other <see cref="Collider">Collider</see> the wheel is hitting.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelHit.point">
      <summary>
        <para>The point of contact between the wheel and the ground.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelHit.normal">
      <summary>
        <para>The normal at the point of contact.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelHit.forwardDir">
      <summary>
        <para>The direction the wheel is pointing in.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelHit.sidewaysDir">
      <summary>
        <para>The sideways direction of the wheel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelHit.force">
      <summary>
        <para>The magnitude of the force being applied for the contact.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelHit.forwardSlip">
      <summary>
        <para>Tire slip in the rolling direction. Acceleration slip is negative, braking slip is positive.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelHit.sidewaysSlip">
      <summary>
        <para>Tire slip in the sideways direction.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WheelCollider">
      <summary>
        <para>A special collider for vehicle wheels.</para>
        <para>Wheel collider is used to model vehicle wheels. It simulates a spring and damper suspension setup, 
and uses a slip based tire friction model to calculate wheel contact forces.Wheel's collision detection is performed by casting a ray from center downwards the local
y-axis. The wheel has a radius and can extend downwards by suspensionDistance
amount.The wheel is controlled with motorTorque, brakeTorque and steerAngle properties.Wheel collider computes friction separately from the rest of physics engine, using a slip based
friction model. This allows for more realistic behaviour, but makes
wheel colliders ignore standard PhysicMaterial settings. Simulation of different road materials
is done by changing the forwardFriction and sidewaysFriction
based on what material the wheel is hitting. </para>
      </summary>
    </member>
    <member name="M:UnityEngine.WheelCollider.#ctor" />
    <member name="M:UnityEngine.WheelCollider.GetGroundHit(UnityEngine.WheelHit@)">
      <summary>
        <para>Gets ground collision data for the wheel.</para>
        <para>If the wheel collides with something, returns true and fills the hit structure. If the wheel
is not colliding, returns false and leaves hit structure unchanged.The reported hit is always the closest one. Because the tire friction model does not automatically
respond to other PhysicMaterials, any simulation of different ground materials must be done
manually by adjusting forwardFriction and sidewaysFriction based on collider's
material returned here.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.center">
      <summary>
        <para>The center of the wheel, measured in the object's local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.radius">
      <summary>
        <para>The radius of the wheel, measured in local space.</para>
        <para>The radius will be scaled by the transform's scale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.suspensionDistance">
      <summary>
        <para>Maximum extension distance of wheel suspension, measured in local space.</para>
        <para>Suspension always extends downwards the local y-axis.
Suspension travel will be scaled by the transform's scale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.suspensionSpring">
      <summary>
        <para>The parameters of wheel's suspension. The suspension attempts to reach a target position.</para>
        <para>By adding spring and damping forces.The /suspensionSpring.spring/ force attempts to reach the target position. A larger value makes the suspension reach the target position faster.The /suspensionSpring.damper/ force dampens the suspension velocity. A larger value makes the suspension reach the goal slower.The suspension tries to reach /suspensionSpring.targetPosition/, which is the rest length of
the suspension along the suspensionDistance. Zero value maps to full extension along the
suspension travel, a value of one maps to fully compressed suspension.
Default value is zero, which matches the behavior of regular car's suspension.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.mass">
      <summary>
        <para>The mass of the wheel. Must be larger than zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.forwardFriction">
      <summary>
        <para>Properties of tire friction in the direction the wheel is pointing in.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.sidewaysFriction">
      <summary>
        <para>Properties of tire friction in the sideways direction.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.motorTorque">
      <summary>
        <para>Motor torque on the wheel axle. Positive or negative depending on direction.</para>
        <para>To simulate brakes, do not use negative motor torque - use brakeTorque instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.brakeTorque">
      <summary>
        <para>Brake torque. Must be positive.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.steerAngle">
      <summary>
        <para>Steering angle in degrees, always around the local y-axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.isGrounded">
      <summary>
        <para>Indicates whether the wheel currently collides with something (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelCollider.rpm">
      <summary>
        <para>Current wheel axle rotation speed, in rotations per minute (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RaycastHit">
      <summary>
        <para>Structure used to get information back from a raycast.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.point">
      <summary>
        <para>The impact point in world space where the ray hit the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.normal">
      <summary>
        <para>The normal of the surface the ray hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.barycentricCoordinate">
      <summary>
        <para>The barycentric coordinate of the triangle we hit.</para>
        <para>This lets you interpolate any of the vertex data along the 3 axes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.distance">
      <summary>
        <para>The distance from the ray's origin to the impact point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.triangleIndex">
      <summary>
        <para>The index of the triangle that was hit.</para>
        <para>Triangle index is only valid if the collider that was hit is a MeshCollider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.textureCoord">
      <summary>
        <para>The uv texture coordinate at the impact point.</para>
        <para>This can be used for 3D texture painting or drawing bullet marks.
If the collider is no mesh collider, zero Vector2 will be returned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.textureCoord2">
      <summary>
        <para>The secondary uv texture coordinate at the impact point.</para>
        <para>This can be used for 3D texture painting or drawing bullet marks.
If the collider is not a mesh collider, Vector2.zero will be returned.
If the mesh contains no secondary uv set, the uv of the primary uv set will be returned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.lightmapCoord">
      <summary>
        <para>The uv lightmap coordinate at the impact point.</para>
        <para>This can be used for sampling the lightmap and setting the sampled color value as the material color of a moving object
to make it roughly match the baked lighting.
This is simply the textureCoord2 transformed by lightmapTilingOffset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.collider">
      <summary>
        <para>The <see cref="Collider">Collider</see> that was hit.</para>
        <para>This property is null if the ray hit nothing and not-null if it hit a Collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.rigidbody">
      <summary>
        <para>The <see cref="Rigidbody">Rigidbody</see> of the collider that was hit. If the collider is not attached to a rigidbody then it is <c>null</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit.transform">
      <summary>
        <para>The <see cref="Transform">Transform</see> of the rigidbody or collider that was hit.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PhysicMaterialCombine">
      <summary>
        <para>Describes how physic materials of colliding objects are combined.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PhysicMaterialCombine.Average">
      <summary>
        <para>Averages the friction/bounce of the two colliding materials.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PhysicMaterialCombine.Minimum">
      <summary>
        <para>Uses the smaller friction/bounce of the two colliding materials.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PhysicMaterialCombine.Multiply">
      <summary>
        <para>Multiplies the friction/bounce of the two colliding materials.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PhysicMaterialCombine.Maximum">
      <summary>
        <para>Uses the larger friction/bounce of the two colliding materials.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PhysicMaterial">
      <summary>
        <para>Physics material describes how to handle colliding objects (friction, bounciness).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PhysicMaterial.#ctor">
      <summary>
        <para>Creates a new material.</para>
        <para>It is usually easier to just use collider.material and modify the attached material directly.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PhysicMaterial.#ctor(System.String)">
      <summary>
        <para>Creates a new material named <c>name</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicMaterial.dynamicFriction">
      <summary>
        <para>The friction used when already moving.  This value has to be between 0 and 1.</para>
        <para>A value of 0 feels like ice, 1 feels like rubber.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicMaterial.staticFriction">
      <summary>
        <para>The friction coefficient used when an object is lying on a surface.</para>
        <para>Must be &amp;gt;= 0.  Natural materials will usually have a friction coefficient between 0 (no friction at all, like slippy ice) and 1 (full friction, like rubber). Values larger then 1 are possible, and may be realistic for sticky materials.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicMaterial.bounciness">
      <summary>
        <para>How bouncy is the surface? A value of 0 will not bounce. A value of 1 will bounce without any loss of energy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicMaterial.frictionDirection2">
      <summary>
        <para>The direction of anisotropy. Anisotropic friction is enabled if the vector is not zero.</para>
        <para>DynamicFriction2 and staticFriction2 will be applied along frictionDirection2.
The direction of anisotropy is relative to the colliders local coordinate system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicMaterial.dynamicFriction2">
      <summary>
        <para>If anisotropic friction is enabled, dynamicFriction2 will be applied along frictionDirection2.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicMaterial.staticFriction2">
      <summary>
        <para>If anisotropic friction is enabled, staticFriction2 will be applied along frictionDirection2.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicMaterial.frictionCombine">
      <summary>
        <para>Determines how the friction is combined.</para>
        <para>Traditionally friction properties are dependent on the combination of the two materials in contact.
This is however impractical in a game. Instead you can use the combine mode to tune how the friction values of two materials are combined.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicMaterial.bounceCombine">
      <summary>
        <para>Determines how the bounciness is combined.</para>
        <para>Traditionally bounciness properties are dependent on the combination of the two materials in contact.
This is however impractical in a game. Instead you can use the combine mode to tune how the bounciness values of two materials are combined.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ContactPoint">
      <summary>
        <para>Describes a contact point where the collision occurs.</para>
        <para>Contact points are stored in Collision structure.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint.point">
      <summary>
        <para>The point of contact.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint.normal">
      <summary>
        <para>Normal of the contact point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint.thisCollider">
      <summary>
        <para>The first collider in contact.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint.otherCollider">
      <summary>
        <para>The other collider in contact.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Collision">
      <summary>
        <para>Describes collision.</para>
        <para>Collision information is passed to Collider.OnCollisionEnter, Collider.OnCollisionStay and Collider.OnCollisionExit events.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision.relativeVelocity">
      <summary>
        <para>The relative linear velocity of the two colliding objects (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision.rigidbody">
      <summary>
        <para>The <see cref="Rigidbody">Rigidbody</see> we hit (Read Only). This is <c>null</c> if the object we hit is a collider with no rigidbody attached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision.collider">
      <summary>
        <para>The <see cref="Collider">Collider</see> we hit (Read Only).</para>
        <para>To find all colliders that were hit in detail you have to iterate the contact points (contacts property).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision.transform">
      <summary>
        <para>The <see cref="Transform">Transform</see> of the object we hit (Read Only).</para>
        <para>If we collided against a collider with a Rigidbody, the transform will be the transform attached to the rigidbody.
If we collided against a collider without a rigidbody, the transform will be the transform attached to the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision.gameObject">
      <summary>
        <para>The <see cref="GameObject">GameObject</see> whose collider we are colliding with. (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision.contacts">
      <summary>
        <para>The contact points generated by the physics engine.</para>
        <para>Every contact contains a contact point, normal and the two colliders that collided (see ContactPoint).
From inside OnCollisionStay or OnCollisionEnter you can
always be sure that contacts has at least one element.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CollisionFlags">
      <summary>
        <para>CollisionFlags is a bitmask returned by CharacterController.Move.</para>
        <para>It gives you a broad overview of where your character collided with any other objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionFlags.None">
      <summary>
        <para>CollisionFlags is a bitmask returned by CharacterController.Move.</para>
        <para>It gives you a broad overview of where your character collided with any other objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionFlags.Sides">
      <summary>
        <para>CollisionFlags is a bitmask returned by CharacterController.Move.</para>
        <para>It gives you a broad overview of where your character collided with any other objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionFlags.Above">
      <summary>
        <para>CollisionFlags is a bitmask returned by CharacterController.Move.</para>
        <para>It gives you a broad overview of where your character collided with any other objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionFlags.Below">
      <summary>
        <para>CollisionFlags is a bitmask returned by CharacterController.Move.</para>
        <para>It gives you a broad overview of where your character collided with any other objects.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ControllerColliderHit">
      <summary>
        <para>ControllerColliderHit is used by CharacterController.OnControllerColliderHit to give detailed information about the collision and how to deal with it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ControllerColliderHit.controller">
      <summary>
        <para>The controller that hit the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ControllerColliderHit.collider">
      <summary>
        <para>The collider that was hit by the controller.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ControllerColliderHit.rigidbody">
      <summary>
        <para>The rigidbody that was hit by the controller.</para>
        <para>Null if we didn't touch a rigidbody but a static collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ControllerColliderHit.gameObject">
      <summary>
        <para>The game object that was hit by the controller.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ControllerColliderHit.transform">
      <summary>
        <para>The transform that was hit by the controller.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ControllerColliderHit.point">
      <summary>
        <para>The impact point in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ControllerColliderHit.normal">
      <summary>
        <para>The normal of the surface we collided with in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ControllerColliderHit.moveDirection">
      <summary>
        <para>Approximately the direction from the center of the capsule to the point we touch.</para>
        <para>This can be used to find a reasonable direction to apply forces to touched rigidbodies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ControllerColliderHit.moveLength">
      <summary>
        <para>How far the character has travelled until it hit the collider.</para>
        <para>Note that this can is different from what you pass to CharacterController.Move,
because all movement is constrained by collisions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CharacterController">
      <summary>
        <para>A CharacterController allows you to easily do movement constrained by collisions without having to deal with a rigidbody.</para>
        <para>A CharacterController is not affected by forces and will only move when you call the Move funtion.
It will then carry out the movement but be constrained by collisions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CharacterController.SimpleMove(UnityEngine.Vector3)">
      <summary>
        <para>Moves the character with <c>speed</c>.</para>
        <para>Velocity along the y-axis is ignored.
Speed is in meters/s. Gravity is automatically applied.
Returns if the character is grounded.
It is recommended that you make only one call to Move or SimpleMove per frame.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CharacterController.Move(UnityEngine.Vector3)">
      <summary>
        <para>A more complex move function taking absolute movement deltas.</para>
        <para>Attempts to move the controller by motion, the motion will only be constrained by collisions.
It will slide along colliders.
CollisionFlags is the summary of collisions that occurred during the Move.
This function does not apply any gravity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterController.isGrounded">
      <summary>
        <para>Was the CharacterController touching the ground during the last move?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterController.velocity">
      <summary>
        <para>The current relative velocity of the Character (see notes).</para>
        <para>This allows you to track how fast the character is actually walking for example
when he is stuck at a wall this value will be the zero vector.Note: The velocity returned is simply the difference in distance for the current timestep
before and after a call to CharacterController.Move or CharacterController.SimpleMove. 
The velocity is relative because it won't track movements to the transform that happen 
outside of the CharacterController (e.g. character parented under another moving Transform, 
such as a moving vehicle).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterController.collisionFlags">
      <summary>
        <para>What part of the capsule collided with the environment during the last CharacterController.Move call.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterController.radius">
      <summary>
        <para>The radius of the character's capsule.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterController.height">
      <summary>
        <para>The height of the character's capsule.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterController.center">
      <summary>
        <para>The center of the character's capsule relative to the transform's position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterController.slopeLimit">
      <summary>
        <para>The character controllers slope limit in degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterController.stepOffset">
      <summary>
        <para>The character controllers step offset in meters.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CharacterController.detectCollisions">
      <summary>
        <para>Determines whether other rigidbodies or character controllers collide with this character controller (by default this is always enabled).</para>
        <para>This method does not affect collisions detected during the character controller's movement but rather decides whether an
incoming collider will be blocked by the controller's collider. For example, a box collider in the scene will block the movement of the controller,
but the box may still fall through the controller if detectCollisions is false.
This property is useful to disable the character controller temporarily. For example, you might want to mount a character into a car and 
disable collision detection until it exits the car again.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Cloth">
      <summary>
        <para>Base class used to simulate cloth physics - shared by both <see cref="InteractiveCloth">InteractiveCloth</see> and <see cref="SkinnedCloth">SkinnedCloth</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.bendingStiffness">
      <summary>
        <para>Bending stiffness of the cloth.</para>
        <para>Must be between zero and one. Setting the value to zero disables bending stiffness simulation.
In many cases, when you want a cloth to be more stiff, actually reducing the number of vertices
will get you better results - and performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.stretchingStiffness">
      <summary>
        <para>Stretching stiffness of the cloth.</para>
        <para>Must be greater than zero and smaller or equal to one.
In many cases, when you want a cloth to be more stiff, actually reducing the number of vertices
will get you better results - and performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.damping">
      <summary>
        <para>Damp cloth motion.</para>
        <para>Set this to damp the motions of a cloth instance. Must be between zero and one.
Setting this to zero will disable cloth damping.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.thickness">
      <summary>
        <para>The thickness of the cloth surface.</para>
        <para>This is the distance kept between any cloth vertex and and other collider (or other cloth vertex if self-collision is enabled). 
Any object closer then this distance will collide with the cloth. If this value is too low, you may see the edges of objects
intersecting the cloth surface. If this value is too high, you may see noticable distance between the cloth surface and colliding
objects or stiffness in cloth motion if self-collision is enabled.
Must be larger then zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.externalAcceleration">
      <summary>
        <para>A constant, external acceleration applied to the cloth.</para>
        <para>Use this to simulate constant forces on the cloth, such as wind waving a flag.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.randomAcceleration">
      <summary>
        <para>A random, external acceleration applied to the cloth.</para>
        <para>Use this to simulate randomly changing forces on the cloth, such as wind turbulences waving a flag.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.useGravity">
      <summary>
        <para>Should gravity affect the cloth simulation?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.selfCollision">
      <summary>
        <para>Will the cloth collide with itself?</para>
        <para>Enable this only where needed, as it has a big impact on cloth performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.enabled">
      <summary>
        <para>Is this cloth enabled?</para>
        <para>This is the same as the checkbox next to the component label in the inspector.
A disabled cloth component will not update it's physics simulation, so you can use this to suspend the simulation of cloth
objects when they are not needed, as cloth simulation is a very CPU-intensive task.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.vertices">
      <summary>
        <para>The current vertex positions of the cloth object.</para>
        <para>This gives you read access to the vertex positions of the cloth object, so you can analyse it's current simulation state.
Note that the vertex indices may not necessarily correspond to the indices of the source mesh - especially when triangle stripping
or UV seams are used in the source mesh (ie, multiple indices for the same vertex), cloth vertices will be different, as the cloth
simulation only uses a single index for each vertex.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cloth.normals">
      <summary>
        <para>The current normals of the cloth object.</para>
        <para>This gives you read access to the normals of the cloth object, so you can analyse it's current simulation state.
Note that the normal indices may not necessarily correspond to the indices of the source mesh - especially when triangle stripping
or UV seams are used in the source mesh (ie, multiple indices for the same vertex), cloth vertices will be different, as the cloth
simulation only uses a single index for each vertex.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.InteractiveCloth">
      <summary>
        <para>The InteractiveCloth component is used to simulate objects with cloth physics.</para>
        <para>This is used together with the ClothRenderer component to visualize cloth objects in the scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.InteractiveCloth.AddForceAtPosition(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEngine.ForceMode)">
      <summary>
        <para>Adds force <c>force</c> to all vertices of the cloth mesh which are with <c>radius</c> distance of <c>position</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.InteractiveCloth.AddForceAtPosition(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Adds force <c>force</c> to all vertices of the cloth mesh which are with <c>radius</c> distance of <c>position</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.InteractiveCloth.AttachToCollider(UnityEngine.Collider,System.Boolean,System.Boolean)">
      <summary>
        <para>Attaches a <c>collider</c> to the cloth object.</para>
        <para>Only has an effect if some vertices of the cloth are intersecting the collider. 
These vertices will then become static in their position with respect to the collider.
If tearable is true, attachments can tear of, depending on the value of attachmentTearFactor.
If twoWayInteraction is true, the cloth will apply forces back to the attached rigidbody, depending on the value of attachmentResponse.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.InteractiveCloth.AttachToCollider(UnityEngine.Collider,System.Boolean)">
      <summary>
        <para>Attaches a <c>collider</c> to the cloth object.</para>
        <para>Only has an effect if some vertices of the cloth are intersecting the collider. 
These vertices will then become static in their position with respect to the collider.
If tearable is true, attachments can tear of, depending on the value of attachmentTearFactor.
If twoWayInteraction is true, the cloth will apply forces back to the attached rigidbody, depending on the value of attachmentResponse.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.InteractiveCloth.AttachToCollider(UnityEngine.Collider)">
      <summary>
        <para>Attaches a <c>collider</c> to the cloth object.</para>
        <para>Only has an effect if some vertices of the cloth are intersecting the collider. 
These vertices will then become static in their position with respect to the collider.
If tearable is true, attachments can tear of, depending on the value of attachmentTearFactor.
If twoWayInteraction is true, the cloth will apply forces back to the attached rigidbody, depending on the value of attachmentResponse.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.InteractiveCloth.DetachFromCollider(UnityEngine.Collider)">
      <summary>
        <para>Detaches a <c>collider</c> from the cloth object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.InteractiveCloth.mesh">
      <summary>
        <para>The mesh used as base for the cloth object.</para>
        <para>Changing this property causes the cloth simulation to reset.
For best performance, pick a mesh which does not have UV or color seams (ie, duplicated vertices with the same 
position but two or more texture coordinates or color values),
as this requires some additional vertex mapping to be performed when rendering the results of the cloth simulation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.InteractiveCloth.friction">
      <summary>
        <para>The friction of the cloth.</para>
        <para>Must be between zero and one.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.InteractiveCloth.density">
      <summary>
        <para>The density of the cloth.</para>
        <para>This sets the mass of the cloth per area. Must be greater than zero.
Changing this property causes the cloth simulation to reset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.InteractiveCloth.pressure">
      <summary>
        <para>The pressure inside the cloth.</para>
        <para>Pressure simulation only gives reasonable results for closed mesh shapes. 
Pressure simulation is disabled when this value is set to zero. When it is set to values greater then
zero, the cloth is simulated to be a closed shape containing air. A value of 1 sets the air pressure to
be the same as the atmosphere outside the cloth mesh. Values smaller then one make the cloth shape contract,
values larger then one make it expand.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.InteractiveCloth.collisionResponse">
      <summary>
        <para>How much force will be applied to colliding rigidbodies?</para>
        <para>If this is greater then zero, interaction of the cloth with colliding rigidbodies is enabled.
The higher this value is, the greater the forces applied to rigidbodies are. 
It is recommended to start out with small values (like 0.2) for best results.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.InteractiveCloth.tearFactor">
      <summary>
        <para>How far cloth vertices need to be stretched, before the cloth will tear.</para>
        <para>If this is set to zero, tearing is disabled. For values greater than zero, 
larger values make the cloth stretch further without tearing.
This property can be changed dynamically, but turning it on or off completely 
(by setting it to zero or non-zero), will cause the cloth simulation to reset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.InteractiveCloth.attachmentTearFactor">
      <summary>
        <para>How far attached rigid bodies need to be stretched, before they will tear off.</para>
        <para>Must be larger then zero. Larger values make the cloth stretch further without tearing.
Only has an affect for rigid bodies which have been attached with the tearable parameter set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.InteractiveCloth.attachmentResponse">
      <summary>
        <para>How much force will be applied to attached rigidbodies?</para>
        <para>The higher this value is, the greater the forces applied to attached rigidbodies are. 
It is recommended to start out with small values (like 0.2) for best results.
Only has an affect for rigid bodies which have been attached with the twoWayInteraction parameter set.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.InteractiveCloth.isTeared">
      <summary>
        <para>Did the cloth tear? (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ClothSkinningCoefficient">
      <summary>
        <para>The ClothSkinningCoefficient struct is used to set up how a <see cref="SkinnedCloth">SkinnedCloth</see> component is allowed to move with respect to the <see cref="SkinnedMeshRenderer">SkinnedMeshRenderer</see> it is attached to.</para>
        <para>This is set using the SkinnedCloth.coefficients property on the SkinnedCloth component, which is a
per-vertex array of ClothSkinningCoefficient structs. Typically, you will not set these values from code,
but instead, set them up in the editor which shows up when you look at the SkinnedCloth component in the inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ClothSkinningCoefficient.maxDistance">
      <summary>
        <para>Distance a vertex is allowed to travel from the skinned mesh vertex position.</para>
        <para>The SkinnedCloth component makes sure
that the cloth vertices stay within maxDistance from the skinned mesh vertex positions. 
If maxDistance is zero, the vertex is not simulated but set to the skinned mesh vertex position.
This behavior is useful for attaching the cloth vertex to the skin of an animated character.	
Default: 0.2
Range: [0, inf).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ClothSkinningCoefficient.maxDistanceBias">
      <summary>
        <para>Distorts the sphere defined by the maxDistance based on skinned mesh normals.</para>
        <para>The feature is disabled
for a value of 0.0 (default). In this case the max distance sphere is undistorted.
Decreasing the maxDistanceBias towards -1.0 reduces the distance the vertex is allowed to
travel in the tangential direction. For -1.0 the vertex has to stay on the normal through
the skinned mesh vertex position and within maxDistance to the skinned mesh vertex position.
Increasing maxDistanceBias towards 1.0 reduces the discance the vertex is allowed to travel
in the normal direction. At 1.0 the vertex can only move inside the tangental plane within 
maxDistance from the skinned mesh vertex position.
Default: 0.0
Range: [-1.0, 1.0].</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ClothSkinningCoefficient.collisionSphereRadius">
      <summary>
        <para>Definition of a sphere a vertex is not allowed to enter. This allows collision against the animated cloth.</para>
        <para>The pair (collisionSphereRadius, collisionSphereDistance) define a sphere for each cloth vertex. The sphere's
center is located at the position 
constrainPosition - constrainNormal * (collisionSphereRadius + collisionSphereDistance) and its radius
is collisionSphereRadius, where constrainPosition and constrainNormal are the vertex positions and normals
generated by the SkinnedMeshRenderer. The SkinnedCloth makes sure that the cloth vertex does not enter this sphere.
As a typical usecase, set collisionSphereDistance to zero and collisionSphereRadius to a large value
w.r.t. the triangle size. In this setup, the cloth collides against the skinned mesh.
Default: 0.5
Range: [0,inf).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ClothSkinningCoefficient.collisionSphereDistance">
      <summary>
        <para>Definition of a sphere a vertex is not allowed to enter. This allows collision against the animated cloth.</para>
        <para>The pair (collisionSphereRadius, collisionSphereDistance) define a sphere for each cloth vertex. The sphere's
center is located at the position 
constrainPosition - constrainNormal * (collisionSphereRadius + collisionSphereDistance) and its radius
is collisionSphereRadius, where constrainPosition and constrainNormal are the vertex positions and normals
generated by the SkinnedMeshRenderer. The SkinnedCloth makes sure that the cloth vertex does not enter this sphere.
As a typical usecase, set collisionSphereDistance to zero and collisionSphereRadius to a large value
w.r.t. the triangle size. In this setup, the cloth collides against the skinned mesh.
Default: 0.0
Range: [0,inf).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SkinnedCloth">
      <summary>
        <para>The SkinnedCloth component works together with the <see cref="SkinnedMeshRenderer">SkinnedMeshRenderer</see> to simulate clothing on a character.</para>
        <para>See the SkinnedCloth component reference for an extensive description on how it works.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SkinnedCloth.#ctor" />
    <member name="M:UnityEngine.SkinnedCloth.SetEnabledFading(System.Boolean,System.Single)">
      <summary>
        <para>Fade the cloth simulation in or out, and enabled or disable the SkinnedCloth.</para>
        <para>This function lets you enable or disabe the SkinnedCloth component, by setting the enabled parameter.
Unlike setting the /Cloth.enabled/ property directly, this will delay the action, and smoothly
interpolate the mesh between the normal skinned mesh and the cloth simulation over a time of
/interpolationTime/ seconds. This helps you to turn on and off clothing simulation on characters without
letting users notice the transition. Turning on and off clothing simulation is useful for managing the performance
of your game, as cloth simulation is rather expensive.
Calling this function repeatedly with the same parameters has no additional effect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SkinnedCloth.SetEnabledFading(System.Boolean)">
      <summary>
        <para>Fade the cloth simulation in or out, and enabled or disable the SkinnedCloth.</para>
        <para>This function lets you enable or disabe the SkinnedCloth component, by setting the enabled parameter.
Unlike setting the /Cloth.enabled/ property directly, this will delay the action, and smoothly
interpolate the mesh between the normal skinned mesh and the cloth simulation over a time of
/interpolationTime/ seconds. This helps you to turn on and off clothing simulation on characters without
letting users notice the transition. Turning on and off clothing simulation is useful for managing the performance
of your game, as cloth simulation is rather expensive.
Calling this function repeatedly with the same parameters has no additional effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedCloth.coefficients">
      <summary>
        <para>The cloth skinning coefficients used to set up how the cloth interacts with the skinned mesh.</para>
        <para>See the SkinnedCloth component reference for a description how these are used, and how to set them up in the Unity editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedCloth.worldVelocityScale">
      <summary>
        <para>How much world-space movement of the character will affect cloth vertices.</para>
        <para>The higher this value is, the more the cloth will move as a reaction to world space movement of the GameObject.
Basically, this defines the air friction of the SkinnedCloth.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedCloth.worldAccelerationScale">
      <summary>
        <para>How much world-space acceleration of the character will affect cloth vertices.</para>
        <para>The higher this value is, the more the cloth will move as a reaction to world space acceleration of the GameObject.
If the cloth appears lifeless, try increasing this value. If it appears to get unstable when the character accelerates, try decreasing the value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ClothRenderer">
      <summary>
        <para>The ClothRenderer component is used together with the <see cref="InteractiveCloth">InteractiveCloth</see> component, to visualize a cloth object in the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ClothRenderer.pauseWhenNotVisible">
      <summary>
        <para>Should the cloth simulation be paused when the ClothRenderer is not visible?</para>
        <para>If this is enabled then the cloth will only be simulated if it is visible to any camera.
This can improve performance of the physics simulation by avoiding updates for cloths that won't be seen.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TerrainCollider">
      <summary>
        <para>A heightmap based collider.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainCollider.#ctor" />
    <member name="P:UnityEngine.TerrainCollider.terrainData">
      <summary>
        <para>The terrain that stores the heightmap.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Physics2D">
      <summary>
        <para>Global settings and helpers for 2D physics.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a box against colliders in the scene, returning the first collider to contact with it.</para>
        <para>A BoxCast is conceptually like dragging a box through the scene in a particular direction.  Any object making contact with the box can be detected and reported.This function returns a RaycastHit2D object with a reference to the collider that is hit by the box (the collider property of the result will be NULL if nothing was hit). The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).The returned RaycastHit2D returns both the point and normal of the contact where the box would touch the collider.  It also returns the centroid where the box would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="size">The size of the shape.</param>
      <param name="angle">The angle of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a box against colliders in the scene, returning all colliders that contact with it.</para>
        <para>A BoxCast is conceptually like dragging a box through the scene in a particular direction.  Any object making contact with the box can be detected and reported.This function is similar to the BoxCast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the box is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).The returned RaycastHit2D returns both the point and normal of the contact where the box would touch the collider.  It also returns the centroid where the box would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="size">The size of the shape.</param>
      <param name="angle">The angle of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Casts a box against colliders in the scene, returning all colliders that contact with it.</para>
        <para>A BoxCast is conceptually like dragging a box through the scene in a particular direction.  Any object making contact with the box can be detected and reported.This function is similar to the BoxCast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the box is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).The returned RaycastHit2D returns both the point and normal of the contact where the box would touch the collider.  It also returns the centroid where the box would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="size">The size of the shape.</param>
      <param name="angle">The angle of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a box into the scene, returning colliders that contact with it into the provided results array.</para>
        <para>This function is similar to the BoxCastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the box (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when performed frequently.The returned RaycastHit2D returns both the point and normal of the contact where the box would touch the collider.  It also returns the centroid where the box would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="size">The size of the shape.</param>
      <param name="angle">The angle of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single)">
      <summary>
        <para>Casts a box into the scene, returning colliders that contact with it into the provided results array.</para>
        <para>This function is similar to the BoxCastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the box (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when performed frequently.The returned RaycastHit2D returns both the point and normal of the contact where the box would touch the collider.  It also returns the centroid where the box would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="size">The size of the shape.</param>
      <param name="angle">The angle of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersection(UnityEngine.Ray,System.Single)">
      <summary>
        <para>Cast a 3D ray against the colliders in the scene returning the first collider along the ray.</para>
        <para>This is useful for finding colliders intersecting an arbitrary 3D ray.Note that this function will allocate memory for the returned RaycastHit2D object. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently.Additionally that this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersection(UnityEngine.Ray)">
      <summary>
        <para>Cast a 3D ray against the colliders in the scene returning the first collider along the ray.</para>
        <para>This is useful for finding colliders intersecting an arbitrary 3D ray.Note that this function will allocate memory for the returned RaycastHit2D object. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently.Additionally that this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersection(UnityEngine.Ray,System.Single,System.Int32)">
      <summary>
        <para>Cast a 3D ray against the colliders in the scene returning the first collider along the ray.</para>
        <para>This is useful for finding colliders intersecting an arbitrary 3D ray.Note that this function will allocate memory for the returned RaycastHit2D object. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently.Additionally that this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect colliders only on certain layers.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersectionAll(UnityEngine.Ray,System.Single,System.Int32)">
      <summary>
        <para>Cast a 3D ray against the colliders in the scene returning all the colliders along the ray.</para>
        <para>This is useful for finding colliders intersecting an arbitrary 3D ray.Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently.Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect colliders only on certain layers.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersectionAll(UnityEngine.Ray,System.Single)">
      <summary>
        <para>Cast a 3D ray against the colliders in the scene returning all the colliders along the ray.</para>
        <para>This is useful for finding colliders intersecting an arbitrary 3D ray.Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently.Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersectionAll(UnityEngine.Ray)">
      <summary>
        <para>Cast a 3D ray against the colliders in the scene returning all the colliders along the ray.</para>
        <para>This is useful for finding colliders intersecting an arbitrary 3D ray.Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently.Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersectionNonAlloc(UnityEngine.Ray,UnityEngine.RaycastHit2D[],System.Single,System.Int32)">
      <summary>
        <para>Cast a 3D ray against the colliders in the scene returning the colliders along the ray.</para>
        <para>This is useful for finding colliders intersecting an arbitrary 3D ray.This function is similar to the GetRayIntersectionAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the ray (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when such calls are performed frequently. The colliders will be placed in the returned array in order of distance from the start of the ray.Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently.Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect colliders only on certain layers.</param>
      <param name="results">Array to receive results.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersectionNonAlloc(UnityEngine.Ray,UnityEngine.RaycastHit2D[],System.Single)">
      <summary>
        <para>Cast a 3D ray against the colliders in the scene returning the colliders along the ray.</para>
        <para>This is useful for finding colliders intersecting an arbitrary 3D ray.This function is similar to the GetRayIntersectionAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the ray (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when such calls are performed frequently. The colliders will be placed in the returned array in order of distance from the start of the ray.Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently.Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="results">Array to receive results.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.GetRayIntersectionNonAlloc(UnityEngine.Ray,UnityEngine.RaycastHit2D[])">
      <summary>
        <para>Cast a 3D ray against the colliders in the scene returning the colliders along the ray.</para>
        <para>This is useful for finding colliders intersecting an arbitrary 3D ray.This function is similar to the GetRayIntersectionAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the ray (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when such calls are performed frequently. The colliders will be placed in the returned array in order of distance from the start of the ray.Note that this function will allocate memory for the returned RaycastHit2D array. You can use GetRayIntersectionNonAlloc to avoid this overhead if you need to make such calls frequently.Additionally this function is a 3D intersection test therefore any collision normals returned in the RaycastHit2D will be zero.</para>
      </summary>
      <param name="ray">The 3D ray defining origin and direction to test.</param>
      <param name="results">Array to receive results.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPoint(UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Check if a collider overlaps a point in space.</para>
        <para>The optional layerMask allows the test to check only for objects on specific layers.Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider overlaps the point then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders over the point.Note that this function will allocate memory for the returned Collider2D object. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPoint(UnityEngine.Vector2,System.Int32,System.Single)">
      <summary>
        <para>Check if a collider overlaps a point in space.</para>
        <para>The optional layerMask allows the test to check only for objects on specific layers.Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider overlaps the point then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders over the point.Note that this function will allocate memory for the returned Collider2D object. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="point">A point in world space.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPointAll(UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all colliders that overlap a point in space.</para>
        <para>This function is similar to OverlapPoint except that all colliders that overlap the point are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders over the point.Note that this function will allocate memory for the returned Collider2D array. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <param name="point">A point in space.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPointAll(UnityEngine.Vector2,System.Int32,System.Single)">
      <summary>
        <para>Get a list of all colliders that overlap a point in space.</para>
        <para>This function is similar to OverlapPoint except that all colliders that overlap the point are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders over the point.Note that this function will allocate memory for the returned Collider2D array. You can use OverlapPointNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="point">A point in space.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPointNonAlloc(UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all colliders that overlap a point in space.</para>
        <para>This function is similar to OverlapPointAll except that the results are returned in the supplied array. The integer return value is the number of objects that overlap the point (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <param name="point">A point in space.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapPointNonAlloc(UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single)">
      <summary>
        <para>Get a list of all colliders that overlap a point in space.</para>
        <para>This function is similar to OverlapPointAll except that the results are returned in the supplied array. The integer return value is the number of objects that overlap the point (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="point">A point in space.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircle(UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Check if a collider falls within a circular area.</para>
        <para>The circle is defined by its centre coordinate in world space and by its radius. The optional layerMask allows the test to check only for objects on specific layers.Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the circle then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the circle.Note that this function will allocate memory for the returned Collider2D object. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="point">Centre of the circle.</param>
      <param name="radius">Radius of the circle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircle(UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Check if a collider falls within a circular area.</para>
        <para>The circle is defined by its centre coordinate in world space and by its radius. The optional layerMask allows the test to check only for objects on specific layers.Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the circle then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the circle.Note that this function will allocate memory for the returned Collider2D object. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="point">Centre of the circle.</param>
      <param name="radius">Radius of the circle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircleAll(UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all colliders that fall within a circular area.</para>
        <para>This function is similar to OverlapCircle except that all colliders that fall within the circle are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the circle.Note that this function will allocate memory for the returned Collider2D array. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <param name="point">Center of the circle.</param>
      <param name="radius">Radius of the circle.</param>
      <param name="layerMask">Filter to check objects only on specified layers.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircleAll(UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Get a list of all colliders that fall within a circular area.</para>
        <para>This function is similar to OverlapCircle except that all colliders that fall within the circle are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the circle.Note that this function will allocate memory for the returned Collider2D array. You can use OverlapCircleNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="point">Center of the circle.</param>
      <param name="radius">Radius of the circle.</param>
      <param name="layerMask">Filter to check objects only on specified layers.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircleNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all colliders that fall within a circular area.</para>
        <para>This function is similar to OverlapCircleAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the circle (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <param name="point">Center of the circle.</param>
      <param name="radius">Radius of the circle.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapCircleNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Collider2D[],System.Int32,System.Single)">
      <summary>
        <para>Get a list of all colliders that fall within a circular area.</para>
        <para>This function is similar to OverlapCircleAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the circle (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="point">Center of the circle.</param>
      <param name="radius">Radius of the circle.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Check if a collider falls within a rectangular area.</para>
        <para>The rectangle is defined by two diagonally opposite corner coordinates in world space. You can think of these as top-left and bottom-right but the test will still work if the ordering of the points is reversed. The optional layerMask allows the test to check only for objects on specific layers.Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the area then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the area.Note that this function will allocate memory for the returned Collider2D object. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite corner of the rectangle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapArea(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single)">
      <summary>
        <para>Check if a collider falls within a rectangular area.</para>
        <para>The rectangle is defined by two diagonally opposite corner coordinates in world space. You can think of these as top-left and bottom-right but the test will still work if the ordering of the points is reversed. The optional layerMask allows the test to check only for objects on specific layers.Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate. If more than one collider falls within the area then the one returned will be the one with the lowest Z coordinate value. Null is returned if there are no colliders in the area.Note that this function will allocate memory for the returned Collider2D object. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite corner of the rectangle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all colliders that fall within a rectangular area.</para>
        <para>This function is similar to OverlapArea except that all colliders that fall within the area are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the area.Note that this function will allocate memory for the returned Collider2D array. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite corner of the rectangle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapAreaAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single)">
      <summary>
        <para>Get a list of all colliders that fall within a rectangular area.</para>
        <para>This function is similar to OverlapArea except that all colliders that fall within the area are returned. The colliders in the returned array are sorted in order of increasing Z coordinate. An empty array is returned if there are no colliders within the area.Note that this function will allocate memory for the returned Collider2D array. You can use OverlapAreaNonAlloc to avoid this overhead if you need to make the check frequently.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite corner of the rectangle.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapAreaNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Get a list of all colliders that fall within a specified area.</para>
        <para>This function is similar to OverlapAreaAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the area (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite corner of the rectangle.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specified layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.OverlapAreaNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Collider2D[],System.Int32,System.Single)">
      <summary>
        <para>Get a list of all colliders that fall within a specified area.</para>
        <para>This function is similar to OverlapAreaAll except that the results are returned in the supplied array. The integer return value is the number of objects that fall within the area (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when the check is performed frequently.</para>
      </summary>
      <param name="pointA">One corner of the rectangle.</param>
      <param name="pointB">Diagonally opposite corner of the rectangle.</param>
      <param name="results">Array to receive results.</param>
      <param name="layerMask">Filter to check objects only on specified layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.IgnoreCollision(UnityEngine.Collider2D,UnityEngine.Collider2D,System.Boolean)">
      <summary>
        <para>Makes the collision detection system ignore all collisions/triggers between <c>collider1</c> and <c>collider2</c>.</para>
        <para>Ignoring collisions refers to any type of interaction between the selected colliders i.e. no collision or trigger interaction will occur.  Collision layers are first checked to see the two layers can interact and if not then no interactions take place.  Following that, ignoring specific colliders interactions will occur.IgnoreCollision has a few limitations:
1) It is not persistent. This means that the ignore collision state will not be stored in the editor when saving a scene.
2) You can only apply the ignore collision to colliders in active game objects.
When deactivating the collider the IgnoreCollision state will be lost and you have to call Physics2D.IgnoreCollision again.
</para>
      </summary>
      <param name="collider1">The first collider to compare to <c>collider2</c>.</param>
      <param name="collider2">The second collider to compare to <c>collider1</c>.</param>
      <param name="ignore">Whether collisions/triggers between <c>collider1</c> and <c>collider2</c> should be ignored or not.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.IgnoreCollision(UnityEngine.Collider2D,UnityEngine.Collider2D)">
      <summary>
        <para>Makes the collision detection system ignore all collisions/triggers between <c>collider1</c> and <c>collider2</c>.</para>
        <para>Ignoring collisions refers to any type of interaction between the selected colliders i.e. no collision or trigger interaction will occur.  Collision layers are first checked to see the two layers can interact and if not then no interactions take place.  Following that, ignoring specific colliders interactions will occur.IgnoreCollision has a few limitations:
1) It is not persistent. This means that the ignore collision state will not be stored in the editor when saving a scene.
2) You can only apply the ignore collision to colliders in active game objects.
When deactivating the collider the IgnoreCollision state will be lost and you have to call Physics2D.IgnoreCollision again.
</para>
      </summary>
      <param name="collider1">The first collider to compare to <c>collider2</c>.</param>
      <param name="collider2">The second collider to compare to <c>collider1</c>.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.GetIgnoreCollision(UnityEngine.Collider2D,UnityEngine.Collider2D)">
      <summary>
        <para>Checks whether the collision detection system will ignore all collisions/triggers between <c>collider1</c> and <c>collider2</c> or not.</para>
      </summary>
      <param name="collider1">The first collider to compare to <c>collider2</c>.</param>
      <param name="collider2">The second collider to compare to <c>collider1</c>.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.IgnoreLayerCollision(System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Choose whether to detect or ignore collisions between a specified pair of layers.</para>
      </summary>
      <param name="layer1">ID of the first layer.</param>
      <param name="layer2">ID of the second layer.</param>
      <param name="ignore">Should collisions between these layers be ignored?</param>
    </member>
    <member name="M:UnityEngine.Physics2D.IgnoreLayerCollision(System.Int32,System.Int32)">
      <summary>
        <para>Choose whether to detect or ignore collisions between a specified pair of layers.</para>
      </summary>
      <param name="layer1">ID of the first layer.</param>
      <param name="layer2">ID of the second layer.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.GetIgnoreLayerCollision(System.Int32,System.Int32)">
      <summary>
        <para>Should collisions between the specified layers be ignored?</para>
      </summary>
      <param name="layer1">ID of first layer.</param>
      <param name="layer2">ID of second layer.</param>
    </member>
    <member name="M:UnityEngine.Physics2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single)">
      <summary>
        <para>Casts a line against colliders in the scene.</para>
        <para>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that raycasting specifies the line using an origin and directtion.

This function returns a RaycastHit2D object when the line contacts a Collider in the scene. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). The direction of the line is assumed to extend from the start point to the end point. Only the first collider encountered in that direction will be reported. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate.

Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay.

Note that this function will allocate memory for the returned RaycastHit2D object. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently.

Additionally, this will also detect Collider(s) at the start of the line.  In this case the line is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.

</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.Linecast(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a line against colliders in the scene.</para>
        <para>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that raycasting specifies the line using an origin and directtion.

This function returns a RaycastHit2D object when the line contacts a Collider in the scene. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example). The direction of the line is assumed to extend from the start point to the end point. Only the first collider encountered in that direction will be reported. Although the Z axis is not relevant for rendering or collisions in 2D, you can use the minDepth and maxDepth parameters to filter objects based on their Z coordinate.

Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay.

Note that this function will allocate memory for the returned RaycastHit2D object. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently.

Additionally, this will also detect Collider(s) at the start of the line.  In this case the line is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.

</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.LinecastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a line against colliders in the scene.</para>
        <para>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported.This function is similar to the Linecast function except that all colliders that are in contact with the line are reported. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line.Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay.Note that this function will allocate memory for the returned RaycastHit2D array. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently.Additionally, this will also detect Collider(s) at the start of the line.  In this case the line is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.LinecastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Int32,System.Single)">
      <summary>
        <para>Casts a line against colliders in the scene.</para>
        <para>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported.This function is similar to the Linecast function except that all colliders that are in contact with the line are reported. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line.Linecasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay.Note that this function will allocate memory for the returned RaycastHit2D array. You can use LinecastNonAlloc to avoid this overhead if you need to make linecasts frequently.Additionally, this will also detect Collider(s) at the start of the line.  In this case the line is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.LinecastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a line against colliders in the scene.</para>
        <para>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that the raycast specifies the line using an origin and directtion.This function is similar to the LinecastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when linecasts are performed frequently. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line.Additionally, this will also detect Collider(s) at the start of the line.  In this case the line is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="results">Returned array of objects that intersect the line.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.LinecastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Int32,System.Single)">
      <summary>
        <para>Casts a line against colliders in the scene.</para>
        <para>A linecast is an imaginary line between two points in world space. Any object making contact with the beam can be detected and reported. This differs from the similar raycast in that the raycast specifies the line using an origin and directtion.This function is similar to the LinecastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when linecasts are performed frequently. The line is assumed to run from its start point to its end point; colliders will be placed in the returned array in order of distance from the start of the line.Additionally, this will also detect Collider(s) at the start of the line.  In this case the line is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the line vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="start">The start point of the line in world space.</param>
      <param name="end">The end point of the line in world space.</param>
      <param name="results">Returned array of objects that intersect the line.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Casts a ray against colliders in the scene.</para>
        <para>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported.This function returns a RaycastHit object with a reference to the collider that is hit by the ray (the collider property of the result will be NULL if nothing was hit). The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay.Additionally, this will also detect Collider(s) at the start of the ray.  In this case the ray is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">Vector representing the direction of the ray.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.Raycast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a ray against colliders in the scene.</para>
        <para>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported.This function returns a RaycastHit object with a reference to the collider that is hit by the ray (the collider property of the result will be NULL if nothing was hit). The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay.Additionally, this will also detect Collider(s) at the start of the ray.  In this case the ray is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">Vector representing the direction of the ray.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.RaycastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a ray against colliders in the scene, returning all colliders that contact with it.</para>
        <para>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported.This function is similar to the Raycast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the ray is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay.Additionally, this will also detect Collider(s) at the start of the ray.  In this case the ray is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">Vector representing the direction of the ray.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.RaycastAll(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Casts a ray against colliders in the scene, returning all colliders that contact with it.</para>
        <para>A raycast is conceptually like a laser beam that is fired from a point in space along a particular direction. Any object making contact with the beam can be detected and reported.This function is similar to the Raycast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the ray is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).Raycasts are useful for determining lines of sight, targets hit by gunfire and for many other purposes in gameplay.Additionally, this will also detect Collider(s) at the start of the ray.  In this case the ray is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">Vector representing the direction of the ray.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.RaycastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a ray into the scene.</para>
        <para>This function is similar to the RaycastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when raycasts are performed frequently.Additionally, this will also detect Collider(s) at the start of the ray.  In this case the ray is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">Vector representing the direction of the ray.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.RaycastNonAlloc(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single)">
      <summary>
        <para>Casts a ray into the scene.</para>
        <para>This function is similar to the RaycastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the line (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when raycasts are performed frequently.Additionally, this will also detect Collider(s) at the start of the ray.  In this case the ray is starting inside the Collider and doesn't intersect the Collider surface.  This means that the collision normal cannot be calculated in which case the collision normal returned is set to the inverse of the ray vector being tested.  This can easily be detected because such results are always at a RaycastHit2D fraction of zero.</para>
      </summary>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="origin">The point in 2D space where the ray originates.</param>
      <param name="direction">Vector representing the direction of the ray.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the ray.</param>
      <param name="layerMask">Filter to check objects only on specific layers.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Casts a circle against colliders in the scene, returning the first collider to contact with it.</para>
        <para>A CircleCast is conceptually like dragging a circle through the scene in a particular direction.  Any object making contact with the box can be detected and reported.This function returns a RaycastHit2D object with a reference to the collider that is hit by the box (the collider property of the result will be NULL if nothing was hit). The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).The returned RaycastHit2D returns both the point and normal of the contact where the circle would touch the collider.  It also returns the centroid where the circle would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="radius">The radius of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCast(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a circle against colliders in the scene, returning the first collider to contact with it.</para>
        <para>A CircleCast is conceptually like dragging a circle through the scene in a particular direction.  Any object making contact with the box can be detected and reported.This function returns a RaycastHit2D object with a reference to the collider that is hit by the box (the collider property of the result will be NULL if nothing was hit). The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).The returned RaycastHit2D returns both the point and normal of the contact where the circle would touch the collider.  It also returns the centroid where the circle would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="radius">The radius of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCastAll(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a circle against colliders in the scene, returning all colliders that contact with it.</para>
        <para>A CircleCast is conceptually like dragging a circle through the scene in a particular direction.  Any object making contact with the box can be detected and reported.This function is similar to the CircleCast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the circle is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).The returned RaycastHit2D returns both the point and normal of the contact where the circle would touch the collider.  It also returns the centroid where the circle would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="radius">The radius of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCastAll(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Casts a circle against colliders in the scene, returning all colliders that contact with it.</para>
        <para>A CircleCast is conceptually like dragging a circle through the scene in a particular direction.  Any object making contact with the box can be detected and reported.This function is similar to the CircleCast function but instead of detecting just the first collider that is hit, an array of all colliders along the path of the circle is returned. The colliders in the array are sorted in order of distance from the origin point. The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).The returned RaycastHit2D returns both the point and normal of the contact where the circle would touch the collider.  It also returns the centroid where the circle would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="radius">The radius of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCastNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single,System.Single)">
      <summary>
        <para>Casts a circle into the scene, returning colliders that contact with it into the provided results array.</para>
        <para>This function is similar to the CircleCastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the circle (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when performed frequently.The returned RaycastHit2D returns both the point and normal of the contact where the circle would touch the collider.  It also returns the centroid where the circle would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="radius">The radius of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <param name="maxDepth">Only include objects with a Z coordinate (depth) less than this value.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.CircleCastNonAlloc(UnityEngine.Vector2,System.Single,UnityEngine.Vector2,UnityEngine.RaycastHit2D[],System.Single,System.Int32,System.Single)">
      <summary>
        <para>Casts a circle into the scene, returning colliders that contact with it into the provided results array.</para>
        <para>This function is similar to the CircleCastAll function except that the results are returned in the supplied array. The integer return value is the number of objects that intersect the circle (possibly zero) but the results array will not be resized if it doesn't contain enough elements to report all the results. The significance of this is that no memory is allocated for the results and so garbage collection performance is improved when performed frequently.The returned RaycastHit2D returns both the point and normal of the contact where the circle would touch the collider.  It also returns the centroid where the circle would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="radius">The radius of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="results">Array to receive results.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The number of results returned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Physics2D.BoxCast(UnityEngine.Vector2,UnityEngine.Vector2,System.Single,UnityEngine.Vector2,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Casts a box against colliders in the scene, returning the first collider to contact with it.</para>
        <para>A BoxCast is conceptually like dragging a box through the scene in a particular direction.  Any object making contact with the box can be detected and reported.This function returns a RaycastHit2D object with a reference to the collider that is hit by the box (the collider property of the result will be NULL if nothing was hit). The layerMask can be used to detect objects selectively only on certain layers (this allows you to apply the detection only to enemy characters, for example).The returned RaycastHit2D returns both the point and normal of the contact where the box would touch the collider.  It also returns the centroid where the box would be positioned for it to contact at that point.</para>
      </summary>
      <param name="origin">The point in 2D space where the shape originates.</param>
      <param name="size">The size of the shape.</param>
      <param name="angle">The angle of the shape.</param>
      <param name="direction">Vector representing the direction of the shape.</param>
      <param name="distance">Maximum distance over which to cast the shape.</param>
      <param name="layerMask">Filter to detect Colliders only on certain layers.</param>
      <param name="minDepth">Only include objects with a Z coordinate (depth) greater than this value.</param>
      <returns>
        <para>The cast results returned.</para>
      </returns>
    </member>
    <member name="F:UnityEngine.Physics2D.IgnoreRaycastLayer">
      <summary>
        <para>Layer mask constant for the default layer that ignores raycasts.</para>
        <para>The value of the mask is the bitwise complement of the DefaultRaycastLayers mask.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Physics2D.DefaultRaycastLayers">
      <summary>
        <para>Layer mask constant that includes all layers participating in raycasts by default.</para>
        <para>The value of the mask is the bitwise complement of the IgnoreRaycastLayer mask.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Physics2D.AllLayers">
      <summary>
        <para>Layer mask constant that includes all layers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.velocityIterations">
      <summary>
        <para>The number of iterations of the physics solver when considering objects' velocities.</para>
        <para>A higher number of interations will improve accuracy at the expense of processing overhead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.positionIterations">
      <summary>
        <para>The number of iterations of the physics solver when considering objects' positions.</para>
        <para>A higher number of interations will improve accuracy at the expense of processing overhead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.gravity">
      <summary>
        <para>Acceleration due to gravity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.raycastsHitTriggers">
      <summary>
        <para>Do raycasts detect Colliders configured as triggers?</para>
        <para>A Collider can be set up to act as a trigger which will detect other Colliders entering its volume but won't physically collide with them. Often, it is desirable to avoid detecting trigger Colliders with raycasts because they don't represent solid objects. This property lets you choose whether or not raycasts should detect triggers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.raycastsStartInColliders">
      <summary>
        <para>Whether ray/line casts that start inside a collider(s) detect that collider(s) or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.changeStopsCallbacks">
      <summary>
        <para>Whether or not to stop reporting collision callbacks immediately if any of the objects involved in the collision are deleted/moved.</para>
        <para>During a collision callback, if either a Collider2D or Rigidbody2D that is taking part in that particular callback is deleted or moved then this property controls whether callbacks will continue for this contact or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.velocityThreshold">
      <summary>
        <para>Any collisions with a relative linear velocity below this threshold will be treated as inelastic.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.maxLinearCorrection">
      <summary>
        <para>The maximum linear position correction used when solving constraints.  This helps to prevent overshoot.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.maxAngularCorrection">
      <summary>
        <para>The maximum angular position correction used when solving constraints.  This helps to prevent overshoot.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.maxTranslationSpeed">
      <summary>
        <para>The maximum linear speed of a rigid-body per physics update.  Increasing this can cause numerical problems.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.maxRotationSpeed">
      <summary>
        <para>The maximum angular speed of a rigid-body per physics update.  Increasing this can cause numerical problems.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.minPenetrationForPenalty">
      <summary>
        <para>The minimum contact penetration radius allowed before any separation impulse force is applied.  Extreme caution should be used when modifying this value as making this smaller means that polygons will have an insufficient buffer for continuous collision and making it larger may create artefacts for vertex collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.baumgarteScale">
      <summary>
        <para>The scale factor that controls how fast overlaps are resolved.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.baumgarteTOIScale">
      <summary>
        <para>The scale factor that controls how fast TOI overlaps are resolved.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.timeToSleep">
      <summary>
        <para>The time in seconds that a rigid-body must be still before it will go to sleep.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.linearSleepTolerance">
      <summary>
        <para>A rigid-body cannot sleep if its linear velocity is above this tolerance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Physics2D.angularSleepTolerance">
      <summary>
        <para>A rigid-body cannot sleep if its angular velocity is above this tolerance.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RaycastHit2D">
      <summary>
        <para>Information returned about an object detected by a raycast in 2D physics.</para>
        <para>A raycast is used to detect objects that lie along the path of a ray and is conceptually like firing a laser beam into the scene and observing which objects are hit by it. The RaycastHit2D class is used by Physics2D.Raycast and other functions to return information about the objects detected by raycasts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RaycastHit2D.CompareTo(UnityEngine.RaycastHit2D)" />
    <member name="P:UnityEngine.RaycastHit2D.centroid">
      <summary>
        <para>The centroid of the primitive used to perform the cast.</para>
        <para>When the RaycastHit2D is returned from line or ray casting, the centroid is identical to the return point property however when using cast methods that use a geometry shape (as opposed to a simple point) such as circle or box casting, the centroid is the center of the respective shape when it is in contact with the returned point.The centroid is useful in determining the position the cast shape should be for it to collider at the contact point.  Note that the point takes into account any rotation specified for the shape when it was cast.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.point">
      <summary>
        <para>The point in world space where the ray hit the collider's surface.</para>
        <para>The exact point of contact can be useful for positioning graphic effects (such as explosion or blood splatters) and for determining which specific part of an object was hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.normal">
      <summary>
        <para>The normal vector of the surface hit by the ray.</para>
        <para>The normal vector of a surface is the vector that points outward perpenidularly at a given point on that surface. This vector can be useful in raycasting as a way to determine reflections or ricochets from projectiles or to align a character so that it stands upright on the surface.Note that if a hit occurs starting inside a collider then the collision normal will be simply the opposite direction of the line/ray query.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.distance">
      <summary>
        <para>The distance from the ray's origin to the impact point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.fraction">
      <summary>
        <para>Fraction of the distance along the ray that the hit occurred.</para>
        <para>If the ray's direction vector is normalised then this value is simply the distance between the origin and the hit point. If the direction is not normalised then this distance is expressed as a "fraction" (which could be greater than 1) of the vector's magnitude.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.collider">
      <summary>
        <para>The collider hit by the ray.</para>
        <para>This can be useful if the hit object has more than one collider - this property can be used to determine the specific collider rather than just the object.Note that some functions that return a single RaycastHit2D will leave the collider as NULL which indicates nothing hit.  RaycastHit2D implements an implicit conversion operator converting to bool which checks this property allowing it to be used as a simple condition check for whether a hit occurred or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.rigidbody">
      <summary>
        <para>The Rigidbody2D attached to the object that was hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RaycastHit2D.transform">
      <summary>
        <para>The Transform of the object that was hit.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RigidbodyInterpolation2D">
      <summary>
        <para>Interpolation mode for Rigidbody2D objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyInterpolation2D.None">
      <summary>
        <para>Do not apply any smoothing to the object's movement.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyInterpolation2D.Interpolate">
      <summary>
        <para>Smooth movement based on the object's positions in previous frames.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodyInterpolation2D.Extrapolate">
      <summary>
        <para>Smooth an object's movement based on an estimate of its position in the next frame.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RigidbodySleepMode2D">
      <summary>
        <para>Settings for a Rigidbody2D's initial sleep state.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodySleepMode2D.NeverSleep">
      <summary>
        <para>Rigidbody2D never automatically sleeps.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodySleepMode2D.StartAwake">
      <summary>
        <para>Rigidbody2D is initially awake.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RigidbodySleepMode2D.StartAsleep">
      <summary>
        <para>Rigidbody2D is initially asleep.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CollisionDetectionMode2D">
      <summary>
        <para>Options for the detection mode used by a Rigidbody2D.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionDetectionMode2D.None">
      <summary>
        <para>No collision detection is used on the Rigidbody2D.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CollisionDetectionMode2D.Continuous">
      <summary>
        <para>The Rigidbody2D estimates its position between physics updates.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ForceMode2D">
      <summary>
        <para>Option for how to apply a force using Rigidbody2D.AddForce.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ForceMode2D.Force">
      <summary>
        <para>Add a force to the Rigidbody2D, using its mass.</para>
        <para>Apply the force in each FixedUpdate over a duration of time. This mode depends on the mass of rigidbody so more force must be applied to move higher-mass objects the same amount as lower-mass objects.This mode is useful for setting up realistic physics where it takes more force to move heavier objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ForceMode2D.Impulse">
      <summary>
        <para>Add an instant force impulse to the rigidbody2D, using its mass.</para>
        <para>Apply the impulse force instantly. This mode depends on the mass of rigidbody so more force must be applied to move higher-mass objects the same amount as lower-mass objects.This mode is useful for applying forces that happen instantly, such as forces from explosions or collisions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rigidbody2D">
      <summary>
        <para>Rigidbody physics component for 2D sprites.</para>
        <para>The Rigidbody2D class essentially provides the same functionality in 2D that the Rigidbody class provides in 3D. Adding a Rigidbody2D component to a sprite puts in under the control of the physics engine. By itself, this means that the sprite will be affected by gravity and can be controlled from scripts using forces. By adding the appropriate collider component, the sprite will also respond to collisions with other sprites. This behaviour comes entirely from Unity's physics system; very little code is required to get impressive and authentic physical behaviour and allows for "emergent" gameplay that was not explicitly coded into the game.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.MovePosition(UnityEngine.Vector2)">
      <summary>
        <para>Moves the rigidbody to <c>position</c>.</para>
        <para>Moves the rigidbody to the specified position by calculating the appropriate linear velocity required to move the rigidbody to that position during the next physics update.  During the move, neither gravity or linear drag will affect the body.  This causes the object to rapidly move from the existing position, through the world, to the specified position.Because this feature allows a rigidbody to be moved rapidly to the specified position through the world, any colliders attached to the rigidbody will react as expected i.e. they will produce collisions and/or triggers.  This also means that if the colliders produce a collision then it will affect the rigidbody movement and potentially stop it from reaching the specified position during the next physics update.  If the rigidbody is kinematic then any collisions won't affect the rigidbody itself and will only affect any other dynamic colliders.2D rigidbodies have a fixed limit on how fast they can move therefore attempting to move large distances over short time-scales can result in the rigidbody not reaching the specified position during the next physics update.  It is recommended that you use this for relatively small distance movements only.It is important to understand that the actual position change will only occur during the next physics update therefore calling this method repeatedly without waiting for the next physics update will result in the last call being used.  For this reason, it is recommended that it is called during the FixedUpdate callback.</para>
      </summary>
      <param name="position">The new position for the Rigidbody object.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.MoveRotation(System.Single)">
      <summary>
        <para>Rotates the rigidbody to <c>angle</c>.</para>
        <para>Rotates the rigidbody to the specified angle by calculating the appropriate angular velocity required to rotate the rigidbody to that angle during the next physics update.  During the move, angular drag won't affect the body.  This causes the object to rapidly move from the existing angle to the specified angle.Because this feature allows a rigidbody to be rotated rapidly to the specified angle, any colliders attached to the rigidbody will react as expected i.e. they will produce collisions and/or triggers.  This also means that if the colliders produce a collision then it will affect the rigidbody movement and potentially stop it from reaching the specified angle during the next physics update.  If the rigidbody is kinematic then any collisions won't affect the rigidbody itself and will only affect any other dynamic colliders.2D rigidbodies have a fixed limit on how fast they can rotate therefore attempting to rotate large angles over short time-scales can result in the rigidbody not reaching the specified angle during the next physics update.  It is recommended that you use this for relatively small rotational movements only.It is important to understand that the actual rotation change will only occur during the next physics update therefore calling this method repeatedly without waiting for the next physics update will result in the last call being used.  For this reason, it is recommended that it is called during the FixedUpdate callback.</para>
      </summary>
      <param name="angle">The new rotation angle for the Rigidbody object.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.IsSleeping">
      <summary>
        <para>Is the rigidbody "sleeping"?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.IsAwake">
      <summary>
        <para>Is the rigidbody "awake"?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.Sleep">
      <summary>
        <para>Make the rigidbody "sleep".</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.WakeUp">
      <summary>
        <para>Disables the "sleeping" state of a rigidbody.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddForce(UnityEngine.Vector2,UnityEngine.ForceMode2D)">
      <summary>
        <para>Apply a force to the rigidbody.</para>
        <para>The force is specified as two separate components in the X and Y directions (there is no Z direction in 2D physics). The object will be accelerated by the force according to the law force = mass x acceleration - the larger the mass, the greater the force required to accelerate to a given speed.</para>
      </summary>
      <param name="force">Components of the force in the X and Y axes.</param>
      <param name="mode">The method used to apply the specified force.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddForce(UnityEngine.Vector2)">
      <summary>
        <para>Apply a force to the rigidbody.</para>
        <para>The force is specified as two separate components in the X and Y directions (there is no Z direction in 2D physics). The object will be accelerated by the force according to the law force = mass x acceleration - the larger the mass, the greater the force required to accelerate to a given speed.</para>
      </summary>
      <param name="force">Components of the force in the X and Y axes.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddRelativeForce(UnityEngine.Vector2,UnityEngine.ForceMode2D)">
      <summary>
        <para>Adds a force to the rigidbody2D relative to its coordinate system.</para>
        <para>The force is specified as two separate components in the X and Y directions (there is no Z direction in 2D physics). The object will be accelerated by the force according to the law force = mass x acceleration - the larger the mass, the greater the force required to accelerate to a given speed.</para>
      </summary>
      <param name="relativeForce">Components of the force in the X and Y axes.</param>
      <param name="mode">The method used to apply the specified force.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddRelativeForce(UnityEngine.Vector2)">
      <summary>
        <para>Adds a force to the rigidbody2D relative to its coordinate system.</para>
        <para>The force is specified as two separate components in the X and Y directions (there is no Z direction in 2D physics). The object will be accelerated by the force according to the law force = mass x acceleration - the larger the mass, the greater the force required to accelerate to a given speed.</para>
      </summary>
      <param name="relativeForce">Components of the force in the X and Y axes.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddForceAtPosition(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.ForceMode2D)">
      <summary>
        <para>Apply a force at a given position in space.</para>
        <para>The AddForce function applies a force that acts straight through the rigidbody's centre of mass and so produces only positional movement and no rotation. AddForceAtPosition can apply the force at any position in world space and will typically also apply a torque to the object which will set it rotating. Note that for the purposes of this function, the rigidbody is just a coordinate space of infinite size, so there is no reason why the force needs to be applied within the confines of the object's graphic or colliders.</para>
      </summary>
      <param name="force">Components of the force in the X and Y axes.</param>
      <param name="position">Position in world space to apply the force.</param>
      <param name="mode">The method used to apply the specified force.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.AddForceAtPosition(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Apply a force at a given position in space.</para>
        <para>The AddForce function applies a force that acts straight through the rigidbody's centre of mass and so produces only positional movement and no rotation. AddForceAtPosition can apply the force at any position in world space and will typically also apply a torque to the object which will set it rotating. Note that for the purposes of this function, the rigidbody is just a coordinate space of infinite size, so there is no reason why the force needs to be applied within the confines of the object's graphic or colliders.</para>
      </summary>
      <param name="force">Components of the force in the X and Y axes.</param>
      <param name="position">Position in world space to apply the force.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetPoint(UnityEngine.Vector2)">
      <summary>
        <para>Get a local space point given the point <c>point</c> in rigidBody global space.</para>
      </summary>
      <param name="point">The global space point to transform into local space.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetRelativePoint(UnityEngine.Vector2)">
      <summary>
        <para>Get a global space point given the point <c>relativePoint</c> in rigidBody local space.</para>
      </summary>
      <param name="relativePoint">The local space point to transform into global space.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetVector(UnityEngine.Vector2)">
      <summary>
        <para>Get a local space vector given the vector <c>vector</c> in rigidBody global space.</para>
      </summary>
      <param name="vector">The global space vector to transform into a local space vector.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetRelativeVector(UnityEngine.Vector2)">
      <summary>
        <para>Get a global space vector given the vector <c>relativeVector</c> in rigidBody local space.</para>
      </summary>
      <param name="relativeVector">The local space vector to transform into a global space vector.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetPointVelocity(UnityEngine.Vector2)">
      <summary>
        <para>The velocity of the rigidbody at the point <c>Point</c> in global space.</para>
        <para>GetPointVelocity will take the angularVelocity of the rigidbody into account when calculating the velocity.</para>
      </summary>
      <param name="point">The global space point to calculate velocity for.</param>
    </member>
    <member name="M:UnityEngine.Rigidbody2D.GetRelativePointVelocity(UnityEngine.Vector2)">
      <summary>
        <para>The velocity of the rigidbody at the point <c>Point</c> in local space.</para>
        <para>GetRelativePointVelocity will take the angularVelocity of the rigidbody into account when calculating the velocity.</para>
      </summary>
      <param name="relativePoint">The local space point to calculate velocity for.</param>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.position">
      <summary>
        <para>The position of the rigidbody.</para>
        <para>This is the position of the X and Y axis only.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.rotation">
      <summary>
        <para>The rotation of the rigdibody.</para>
        <para>This is the rotation around the Z axis only.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.velocity">
      <summary>
        <para>Linear velocity of the rigidbody.</para>
        <para>The velocity is specified as a vector with components in the X and Y directions (there is no Z direction in 2D physics). The value is not usually set directly but rather by using forces. The velocity can also gradually decay due to the effect of drag if this is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.angularVelocity">
      <summary>
        <para>Angular velocity in degrees per second.</para>
        <para>Unlike a 3D Rigidbody, a Rigidbody2D can only rotate around one axis (perpendicular to the plane) so the angular velocity is just a float value rather than a vector. Typically, the value of this property is not set directly but rather by applying torques to the rigidbody. The angular velocity will also decrease automatically under the effect of angular drag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.mass">
      <summary>
        <para>Mass of the rigidbody.</para>
        <para>The mass is given in arbitrary units but the basic physical principles of mass apply. From Newton's classic equation force = mass x accelelation, it is apparent that the larger an object's mass, the more force it requires to accelerate it to a given velocity. Also, mass affects momentum, which is significant during collisions; an object with large mass will be moved less by a collision than an object with lower mass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.centerOfMass">
      <summary>
        <para>The center of mass of the rigidBody in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.worldCenterOfMass">
      <summary>
        <para>Gets the center of mass of the rigidBody in global space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.inertia">
      <summary>
        <para>The rigidBody rotational inertia.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.drag">
      <summary>
        <para>Coefficient of drag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.angularDrag">
      <summary>
        <para>Coefficient of angular drag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.gravityScale">
      <summary>
        <para>The degree to which this object is affected by gravity.</para>
        <para>In 2D physics, the gravity is a global setting in the Physics2D class but you can also control the proportion of that gravity applied to each object individually using gravityScale. For example, it may be easier to implement a flying character by turning off its gravity rather than simulating the forces that keep it aloft.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.isKinematic">
      <summary>
        <para>Should this rigidbody be taken out of physics control?</para>
        <para>If this property is set to true then the rigidbody will stop reacting to collisions and applied forces. This can be useful when an object should usually be controlled "kinematically" (ie, non-physically) but then sometimes needs physics for realism. For example, a human character is usually not implemented using physics but may sometimes be thrown through the air and collide with objects as the result of an impact or explosion.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.fixedAngle">
      <summary>
        <para>Should the rigidbody be prevented from rotating?</para>
        <para>If this property is set to true, the rigidbody will not rotate in response to collisions and torques. This is useful when you want an object to have restricted rectilinear movement but still be controlled by physics in other aspects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.simulated">
      <summary>
        <para>Indicates whether the rigid body should be simulated or not by the physics system.</para>
        <para>When not simulated, any attached Collider2D or Joint2D also do not participate in the physics simulation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.interpolation">
      <summary>
        <para>Physics interpolation used between updates.</para>
        <para>Interpolation is used to estimate the position of the Rigidbody between physics updates. It can be useful to switch this on when the graphics update is much more frequent than the physics update because the object can appear to move along in jerky "hops" rather than having smooth motion. With interpolate mode, motion is smoothed based on the object's positions in previous frames. Extrapolate mode smooths motion based on an estimate of its position in the next frame. The choice of mode depends of the dynamics of the object during gameplay.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.sleepMode">
      <summary>
        <para>The sleep state that the rigidbody will initially be in.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rigidbody2D.collisionDetectionMode">
      <summary>
        <para>The method used by the physics engine to check if two objects have collided.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Collider2D">
      <summary>
        <para>Parent class for collider types used with 2D gameplay.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Collider2D.OverlapPoint(UnityEngine.Vector2)">
      <summary>
        <para>Check if a collider overlaps a point in space.</para>
        <para>This will always return false when used on an EdgeCollider2D.</para>
      </summary>
      <param name="point">A point in world space.</param>
    </member>
    <member name="P:UnityEngine.Collider2D.isTrigger">
      <summary>
        <para>Is this collider configured as a trigger?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.attachedRigidbody">
      <summary>
        <para>The Rigidbody2D attached to the Collider2D's GameObject.</para>
        <para>This property will be null if no Rigidbody2D is attached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.shapeCount">
      <summary>
        <para>The number of separate shaped regions in the collider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.bounds">
      <summary>
        <para>The world space bounding area of the collider.</para>
        <para>Note that this will be an empty bounding box if the collider is disabled or the game object 
is inactive.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collider2D.sharedMaterial">
      <summary>
        <para>The PhysicsMaterial2D that is applied to this collider.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CircleCollider2D">
      <summary>
        <para>Collider for 2D physics representing an circle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CircleCollider2D.center">
      <summary>
        <para>Center point of the circle in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CircleCollider2D.radius">
      <summary>
        <para>Radius of the circle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BoxCollider2D">
      <summary>
        <para>Collider for 2D physics representing an axis-aligned rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoxCollider2D.center">
      <summary>
        <para>The center point of the rectangle in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoxCollider2D.size">
      <summary>
        <para>The width and height of the rectangle.</para>
        <para>The X coordinate of the vector represents the width while the Y represents the height. These values are specified relative to a center point, so the distance from the center to the left edge is actually width/2.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EdgeCollider2D">
      <summary>
        <para>Collider for 2D physics representing an arbitrary set of connected edges (lines) defined by its vertices.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.EdgeCollider2D.Reset">
      <summary>
        <para>Reset to a single edge consisting of two points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.edgeCount">
      <summary>
        <para>Gets the number of edges.</para>
        <para>This is one less than the number of points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.pointCount">
      <summary>
        <para>Gets the number of points.</para>
        <para>This cannot be less than two which will form a single edge.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.EdgeCollider2D.points">
      <summary>
        <para>Get or set the points defining multiple continuous edges.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PolygonCollider2D">
      <summary>
        <para>Collider for 2D physics representing an arbitrary polygon defined by its vertices.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.GetPath(System.Int32)">
      <summary>
        <para>Get a path from the polygon by its index.</para>
        <para>A path is cyclic sequence of line segments between points that define the outline of the polygon. Since the polygon can have holes and discontinuous parts, its shape is not necessarily defined by a single path.The returned value is an ordered array of the points in the path.</para>
      </summary>
      <param name="index">The index of the path to retrieve.</param>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.SetPath(System.Int32,UnityEngine.Vector2[])">
      <summary>
        <para>Define a path by its constituent points.</para>
        <para>A path is cyclic sequence of line segments between points that define the outline of the polygon. Since the polygon can have holes and discontinuous parts, its shape is not necessarily defined by a single path.</para>
      </summary>
      <param name="index">Index of the path to set.</param>
      <param name="points">Points that define the path.</param>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.GetTotalPointCount">
      <summary>
        <para>Return the total number of points in the polygon in all paths.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.CreatePrimitive(System.Int32,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Creates as regular primitive polygon with the specified number of sides.</para>
      </summary>
      <param name="sides">The number of sides in the polygon.  This must be greater than two.</param>
      <param name="scale">The X/Y scale of the polygon.  These must be greater than zero.</param>
      <param name="offset">The X/Y offset of the polygon.</param>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.CreatePrimitive(System.Int32,UnityEngine.Vector2)">
      <summary>
        <para>Creates as regular primitive polygon with the specified number of sides.</para>
      </summary>
      <param name="sides">The number of sides in the polygon.  This must be greater than two.</param>
      <param name="scale">The X/Y scale of the polygon.  These must be greater than zero.</param>
    </member>
    <member name="M:UnityEngine.PolygonCollider2D.CreatePrimitive(System.Int32)">
      <summary>
        <para>Creates as regular primitive polygon with the specified number of sides.</para>
      </summary>
      <param name="sides">The number of sides in the polygon.  This must be greater than two.</param>
    </member>
    <member name="P:UnityEngine.PolygonCollider2D.points">
      <summary>
        <para>Corner points that define the collider's shape in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PolygonCollider2D.pathCount">
      <summary>
        <para>The number of paths in the polygon.</para>
        <para>A path is cyclic sequence of line segments between points that define the outline of the polygon. Since the polygon can have holes and discontinuous parts, its shape is not necessarily defined by a single path.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ContactPoint2D">
      <summary>
        <para>Details about a specific point of contact involved in a 2D physics collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.point">
      <summary>
        <para>The point of contact between the two colliders in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.normal">
      <summary>
        <para>Surface normal at the contact point.</para>
        <para>This is the normal vector (ie, the vector perpendicular to the surface) of the incoming Collider2D at the contact point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.collider">
      <summary>
        <para>The collider attached to the object receiving the collision message.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ContactPoint2D.otherCollider">
      <summary>
        <para>The incoming collider involved in the collision at this contact point.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Collision2D">
      <summary>
        <para>Information returned by a collision in 2D physics.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Collision2D.#ctor" />
    <member name="P:UnityEngine.Collision2D.rigidbody">
      <summary>
        <para>The incoming Rigidbody2D involved in the collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.collider">
      <summary>
        <para>The incoming Collider2D involved in the collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.transform">
      <summary>
        <para>The Transform of the incoming object involved in the collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.gameObject">
      <summary>
        <para>The incoming GameObject involved in the collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.contacts">
      <summary>
        <para>The specific points of contact with the incoming Collider2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Collision2D.relativeVelocity">
      <summary>
        <para>The relative linear velocity of the two colliding objects (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointLimitState2D">
      <summary>
        <para>Represents the state of a joint limit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointLimitState2D.Inactive">
      <summary>
        <para>Represents a state where the joint limit is inactive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointLimitState2D.LowerLimit">
      <summary>
        <para>Represents a state where the joint limit is at the specified lower limit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointLimitState2D.UpperLimit">
      <summary>
        <para>Represents a state where the joint limit is at the specified upper limit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.JointLimitState2D.EqualLimits">
      <summary>
        <para>Represents a state where the joint limit is at the specified lower and upper limits (they are identical).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointAngleLimits2D">
      <summary>
        <para>Angular limits on the rotation of a Rigidbody2D object around a HingeJoint2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointAngleLimits2D.min">
      <summary>
        <para>Lower angular limit of rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointAngleLimits2D.max">
      <summary>
        <para>Upper angular limit of rotation.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointTranslationLimits2D">
      <summary>
        <para>Motion limits of a Rigidbody2D object along a SliderJoint2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointTranslationLimits2D.min">
      <summary>
        <para>Minimum distance the Rigidbody2D object can move from the Slider Joint's anchor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointTranslationLimits2D.max">
      <summary>
        <para>Maximum distance the Rigidbody2D object can move from the Slider Joint's anchor.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointMotor2D">
      <summary>
        <para>Parameters for the optional motor force applied to a Joint2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointMotor2D.motorSpeed">
      <summary>
        <para>The desired speed for the Rigidbody2D to reach as it moves with the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointMotor2D.maxMotorTorque">
      <summary>
        <para>The maximum force that can be applied to the Rigidbody2D at the joint to attain the target speed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.JointSuspension2D">
      <summary>
        <para>Joint suspension is used to define how suspension works on a <see cref="WheelJoint2D">WheelJoint2D</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointSuspension2D.dampingRatio">
      <summary>
        <para>The amount by which the suspension spring force is reduced in proportion to the movement speed.</para>
        <para>The suspension spring will oscillate with a certain frequency as forces are added and removed from it.  The higher the damping ratio, the quicker the oscillation will die down to zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointSuspension2D.frequency">
      <summary>
        <para>The frequency at which the suspension spring oscillates.</para>
        <para>The suspension spring will oscillate with a certain frequency as forces are added and removed from it.  A damping ratio can be set to cause this oscillation to die down over time.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.JointSuspension2D.angle">
      <summary>
        <para>The world angle along which the suspension will move.   This provides 2D constrained motion similar to a SliderJoint2D.  This is typically how suspension works in the real world.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Joint2D">
      <summary>
        <para>Parent class for joints to connect Rigidbody2D objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.connectedBody">
      <summary>
        <para>The Rigidbody2D object to which the other end of the joint is attached (ie, the object without the joint component).</para>
        <para>If this property is set to null then the joint attaches to a fixed point in space rather than another Rigidbody2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Joint2D.collideConnected">
      <summary>
        <para>Can the joint collide with the other Rigidbody2D object to which it is attached?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnchoredJoint2D">
      <summary>
        <para>Parent class for all joints that have anchor points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnchoredJoint2D.anchor">
      <summary>
        <para>The joint's anchor point on the object that has the joint component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnchoredJoint2D.connectedAnchor">
      <summary>
        <para>The joint's anchor point on the second object (ie, the one which doesn't have the joint component).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpringJoint2D">
      <summary>
        <para>Joint that attempts to keep two Rigidbody2D objects a set distance apart by applying a force between them.</para>
        <para>Note that unlike DistanceJoint2D, the length of the joint can stretch and oscillate.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SpringJoint2D.GetReactionForce(System.Single)">
      <summary>
        <para>Gets the reaction force of the joint given the specified <c>timestep</c>.</para>
      </summary>
      <param name="timeStep">The time to calculate the reaction force for.</param>
    </member>
    <member name="M:UnityEngine.SpringJoint2D.GetReactionTorque(System.Single)">
      <summary>
        <para>Gets the reaction torque of the joint given the specified <c>timestep</c>.</para>
      </summary>
      <param name="timeStep">The time to calculate the reaction torque for.</param>
    </member>
    <member name="P:UnityEngine.SpringJoint2D.distance">
      <summary>
        <para>The distance the spring will try to keep between the two objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpringJoint2D.dampingRatio">
      <summary>
        <para>The amount by which the spring force is reduced in proportion to the movement speed.</para>
        <para>The spring will oscillate with a certain frequency as it attempts to reestablish the desired distance between the objects. The higher the damping ratio, the quicker the oscillation will die down to zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpringJoint2D.frequency">
      <summary>
        <para>The frequency at which the spring oscillates around the distance distance between the objects.</para>
        <para>The spring will oscillate with a certain frequency as it attempts to reestablish the desired distance between the objects. A damping ratio can be set to cause this oscillation to die down over time.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DistanceJoint2D">
      <summary>
        <para>Joint that keeps two Rigidbody2D objects a fixed distance apart.</para>
        <para>Note that unlike the SpringJoint2D component, the distance separating the objects is truly fixed and does not allow for any stretching.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.DistanceJoint2D.GetReactionForce(System.Single)">
      <summary>
        <para>Gets the reaction force of the joint given the specified <c>timestep</c>.</para>
      </summary>
      <param name="timeStep">The time to calculate the reaction force for.</param>
    </member>
    <member name="M:UnityEngine.DistanceJoint2D.GetReactionTorque(System.Single)">
      <summary>
        <para>Gets the reaction torque of the joint given the specified <c>timestep</c>.</para>
      </summary>
      <param name="timeStep">The time to calculate the reaction torque for.</param>
    </member>
    <member name="P:UnityEngine.DistanceJoint2D.distance">
      <summary>
        <para>The distance separating the two ends of the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DistanceJoint2D.maxDistanceOnly">
      <summary>
        <para>Whether to maintain a maximum distance only or not.  If not then the absolute distance will be maintained instead.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HingeJoint2D">
      <summary>
        <para>Joint that allows a Rigidbody2D object to rotate around a point in space or a point on another object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HingeJoint2D.GetReactionForce(System.Single)">
      <summary>
        <para>Gets the reaction force of the joint given the specified <c>timestep</c>.</para>
      </summary>
      <param name="timeStep">The time to calculate the reaction force for.</param>
    </member>
    <member name="M:UnityEngine.HingeJoint2D.GetReactionTorque(System.Single)">
      <summary>
        <para>Gets the reaction torque of the joint given the specified <c>timestep</c>.</para>
      </summary>
      <param name="timeStep">The time to calculate the reaction torque for.</param>
    </member>
    <member name="M:UnityEngine.HingeJoint2D.GetMotorTorque(System.Single)">
      <summary>
        <para>Gets the motor torque of the joint given the specified <c>timestep</c>.</para>
      </summary>
      <param name="timeStep">The time to calculate the motor torque for.</param>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.useMotor">
      <summary>
        <para>Should the joint be rotated automatically by a motor torque?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.useLimits">
      <summary>
        <para>Should limits be placed on the range of rotation?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.motor">
      <summary>
        <para>Parameters for the motor force applied to the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.limits">
      <summary>
        <para>Limit of angular rotation on the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.limitState">
      <summary>
        <para>Gets the state of the joint limit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.referenceAngle">
      <summary>
        <para>The angle referenced between the two bodies used as the constraint for the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.jointAngle">
      <summary>
        <para>The current joint angle with respect to the reference angle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HingeJoint2D.jointSpeed">
      <summary>
        <para>The current joint speed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SliderJoint2D">
      <summary>
        <para>Joint that restricts the motion of a Rigidbody2D object to a single line.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SliderJoint2D.GetMotorForce(System.Single)">
      <summary>
        <para>Gets the motor force of the joint given the specified <c>timestep</c>.</para>
      </summary>
      <param name="timeStep">The time to calculate the motor force for.</param>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.angle">
      <summary>
        <para>The angle of the line in space.</para>
        <para>The line along which the joint can slide is specified by its world angle and optionally by endpoint limits along its length.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.useMotor">
      <summary>
        <para>Should a motor force be applied automatically to the Rigidbody2D?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.useLimits">
      <summary>
        <para>Should motion limits be used?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.motor">
      <summary>
        <para>Parameters for a motor force that is applied automatically to the Rigibody2D along the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.limits">
      <summary>
        <para>Restrictions on how far the joint can slide in each direction along the line.</para>
        <para>The line along which the joint can slide is specified by its angle (relative to the coordinate system) and optionally by endpoint limits along its length.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.limitState">
      <summary>
        <para>Gets the state of the joint limit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.referenceAngle">
      <summary>
        <para>The angle referenced between the two bodies used as the constraint for the joint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.jointTranslation">
      <summary>
        <para>The current joint translation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SliderJoint2D.jointSpeed">
      <summary>
        <para>The current joint speed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WheelJoint2D">
      <summary>
        <para>The wheel joint allows the simulation of wheels by providing a constraining suspension motion with an optional motor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WheelJoint2D.GetMotorTorque(System.Single)">
      <summary>
        <para>Gets the motor torque of the joint given the specified <c>timestep</c>.</para>
      </summary>
      <param name="timeStep">The time to calculate the motor torque for.</param>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.suspension">
      <summary>
        <para>Set the joint suspension configuration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.useMotor">
      <summary>
        <para>Should a motor force be applied automatically to the Rigidbody2D?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.motor">
      <summary>
        <para>Parameters for a motor force that is applied automatically to the Rigibody2D along the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.jointTranslation">
      <summary>
        <para>The current joint translation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WheelJoint2D.jointSpeed">
      <summary>
        <para>The current joint speed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PhysicsMaterial2D">
      <summary>
        <para>Asset type that defines the surface properties of a Collider2D.</para>
        <para>Note: the 3D equivalent of this class is spelt as "PhysicMaterial" with no S, but this class is spelt "PhysicsMaterial" with an S.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PhysicsMaterial2D.#ctor" />
    <member name="M:UnityEngine.PhysicsMaterial2D.#ctor(System.String)" />
    <member name="P:UnityEngine.PhysicsMaterial2D.bounciness">
      <summary>
        <para>The degree of elasticity during collisions.</para>
        <para>A value of zero indicates no elasticity (ie, no bounce at all) while a value of one indicates perfect elasticity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.PhysicsMaterial2D.friction">
      <summary>
        <para>Coefficient of friction.</para>
        <para>A value of zero indicates a surface with no friction while a value of 1 indicates maximum friction (eg, rubber).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ObstacleAvoidanceType">
      <summary>
        <para>Level of obstacle avoidance.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ObstacleAvoidanceType.NoObstacleAvoidance">
      <summary>
        <para>Disable avoidance.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ObstacleAvoidanceType.LowQualityObstacleAvoidance">
      <summary>
        <para>Enable simple avoidance. Low performance impact.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ObstacleAvoidanceType.MedQualityObstacleAvoidance">
      <summary>
        <para>Medium avoidance. Medium performance impact.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ObstacleAvoidanceType.GoodQualityObstacleAvoidance">
      <summary>
        <para>Good avoidance. High performance impact.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ObstacleAvoidanceType.HighQualityObstacleAvoidance">
      <summary>
        <para>Enable highest precision. Highest performance impact.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NavMeshAgent">
      <summary>
        <para>Navigation mesh agent.</para>
        <para>This component is attached to a mobile character in the game to allow it to navigate the scene using the NavMesh. See the Navigation section of the manual for further details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.SetDestination(UnityEngine.Vector3)">
      <summary>
        <para>Sets or updates the destination thus triggering the calculation for a new path.</para>
        <para>Note that the path may not become available until after a few frames later.
While the path is being computed, pathPending will be true.
If a valid path becomes available then the agent will resume movement.</para>
      </summary>
      <param name="target">The target point to navigate to.</param>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.ActivateCurrentOffMeshLink(System.Boolean)">
      <summary>
        <para>Enables or disables the current off-mesh link.</para>
        <para>This function activates or deactivates the off-mesh link
where the agent is currently waiting. This is useful for
granting access to newly discovered areas of the game world or
simulating the creation or removal of an obstacle to an area.</para>
      </summary>
      <param name="activated">Is the link activated?</param>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.CompleteOffMeshLink">
      <summary>
        <para>Follow the current OffMeshLink.</para>
        <para>When the autoTraverseOffMeshLink property is switched off
an agent will pause at an off-mesh link until this function is called
to let it pass. This can be used to allow characters access selectively
(eg, to simulate openable doors or obstacles that only certain characters
 can pass, etc).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.Warp(UnityEngine.Vector3)">
      <summary>
        <para>Warps agent to the provided position.</para>
        <para>Returns true if successful, otherwise returns false.</para>
      </summary>
      <param name="newPosition">New position to warp the agent to.</param>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.Move(UnityEngine.Vector3)">
      <summary>
        <para>Apply relative movement to current position.</para>
        <para>If the agent has a path it will be adjusted.</para>
      </summary>
      <param name="offset">The relative movement vector.</param>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.Stop(System.Boolean)">
      <summary>
        <para>Stop movement of this agent along its current path.</para>
      </summary>
      <param name="stopUpdates">If true, the <see cref="GameObject">GameObject</see> is stopped immediately and not affected by the avoidance system.
If false, the <see cref="NavMeshAgent">NavMeshAgent</see> controls the deceleration.</param>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.Stop">
      <summary>
        <para>Stop movement of this agent along its current path.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.Resume">
      <summary>
        <para>Resumes the movement along the current path after a pause.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.ResetPath">
      <summary>
        <para>Clears the current path.</para>
        <para>When the path is cleared, the agent will not start looking for a new path until SetDestination is called.Note that if the agent is on an OffMeshLink when this function is called, it will complete the link immediately.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.SetPath(UnityEngine.NavMeshPath)">
      <summary>
        <para>Assign a new path to this agent.</para>
        <para>If the path is succesfully assigned the agent will resume movement toward the new target.
If the path cannot be assigned the path will be cleared (see ResetPath).</para>
      </summary>
      <param name="path">New path to follow.</param>
      <returns>
        <para>True if the path is succesfully assigned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.FindClosestEdge(UnityEngine.NavMeshHit@)">
      <summary>
        <para>Locate the closest NavMesh edge.</para>
        <para>The returned NavMeshHit object contains the position
and details of the nearest point on the nearest edge of the
Navmesh. Since an edge typically corresponds to a wall or
other large object, this could be used to make a character
take cover as close to the wall as possible.</para>
      </summary>
      <param name="hit">Holds the properties of the resulting location.</param>
      <returns>
        <para>True if a nearest edge is found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.Raycast(UnityEngine.Vector3,UnityEngine.NavMeshHit@)">
      <summary>
        <para>Trace a straight path towards a target postion in the NavMesh without moving the agent.</para>
        <para>This function follows the path of a "ray" between the agent's
position and the specified target position. If an obstruction is 
encountered along the line then a true value is returned and
the position and other details of the obstructing object are stored
in the hit parameter. This can be used to check if there is a clear
shot or line of sight between a character and a target object.
This function is preferable to the similar Physics.Raycast
because the line tracing is performed in a simpler way using the navmesh
 and has a lower processing overhead.</para>
      </summary>
      <param name="targetPosition">The desired end position of movement.</param>
      <param name="hit">Properties of the obstacle detected by the ray (if any).</param>
      <returns>
        <para>True if there is an obstacle between the agent and the target position, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.CalculatePath(UnityEngine.Vector3,UnityEngine.NavMeshPath)">
      <summary>
        <para>Calculate a path to a specified point and store the resulting path.</para>
        <para>This function can be used to plan a path ahead of time to avoid a delay
in gameplay when the path is needed. Another use is to check if a target
 position is reachable before moving the agent.</para>
      </summary>
      <param name="targetPosition">The final position of the path requested.</param>
      <param name="path">The resulting path.</param>
      <returns>
        <para>True if a path is found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.SamplePathPosition(System.Int32,System.Single,UnityEngine.NavMeshHit@)">
      <summary>
        <para>Sample a position along the current path.</para>
        <para>This function looks ahead a specified distance along the current path. Details of the mesh
 at that position are then returned in a NavMeshHit object. This could be used, for example,
 to check the type of surface that lies ahead before the character gets there - a character could
 raise his gun above his head if he is about to wade through water, say.</para>
      </summary>
      <param name="passableMask">A mask specifying which NavMesh layers can be passed when tracing the path.</param>
      <param name="maxDistance">Terminate scanning the path at this distance.</param>
      <param name="hit">Holds the properties of the resulting location.</param>
      <returns>
        <para>True if terminated before reaching the position at maxDistance, false otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.SetLayerCost(System.Int32,System.Single)">
      <summary>
        <para>Sets the cost for traversing over geometry of the layer type.</para>
        <para>If you enable or disable the agent then the cost will be reset to the default layer cost.</para>
      </summary>
      <param name="layer">Layer index.</param>
      <param name="cost">New cost for the specified layer.</param>
    </member>
    <member name="M:UnityEngine.NavMeshAgent.GetLayerCost(System.Int32)">
      <summary>
        <para>Gets the cost for crossing ground of a particular type.</para>
        <para>The cost of a path is the amount of "difficulty" involved in following it - the shortest path may not be the quickest if it passes over difficult ground, such as mud, snow, etc. Different types of ground are denoted by navmesh layers in Unity. The cost of a particular layer is given in cost units per distance unit. Note that the cost of a path applies to the pathfinding only and does not automatically affect the movement speed of the agent when following the path. Indeed, the path's cost may denote other factors such as danger (safe but long path through a minefield) or visibility (long path that keeps a character in the shadows).</para>
      </summary>
      <param name="layer">Layer index.</param>
      <returns>
        <para>Current cost of specified layer.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.destination">
      <summary>
        <para>Destination point for the agent to navigate towards.</para>
        <para>When the value of this property is set, the effect is much the same as using the SetDestination function - a path will be plotted to the newly set destination and by default, the agent will start to move toward it. The destination point can also be read while the agent is moving.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.stoppingDistance">
      <summary>
        <para>Stop within this distance from the target position.</para>
        <para>It is seldom possible to land exactly at the target point, so this property can be used to set an acceptable radius within which the agent should stop. A larger stopping distance will give the agent more room for manoeuvre at the end of the path and might avoid sudden braking, turning or other unconvincing AI behaviour.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.velocity">
      <summary>
        <para>The current velocity of the <see cref="NavMeshAgent">NavMeshAgent</see> component.</para>
        <para>Setting the velocity is not constrained by the maximum acceleration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.nextPosition">
      <summary>
        <para>The next position on the path.</para>
        <para>A path consists of waypoints that are aimed for in succession by the agent as it navigates. This property contains the position of the waypoint the agent is currently heading for. When this point is reached, the target will be advanced to the next waypoint, and so on until the agent lands at the destination point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.steeringTarget">
      <summary>
        <para>The current steering target - usually the next corner or end point of the current path. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.desiredVelocity">
      <summary>
        <para>The desired velocity of the agent including any potential contribution from avoidance. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.remainingDistance">
      <summary>
        <para>The distance between the agent's position and the destination on the current path. (Read Only)</para>
        <para>If the remaining distance is unknown then this will have a value of infinity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.baseOffset">
      <summary>
        <para>The relative vertical displacement of the owning <see cref="GameObject">GameObject</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.isOnOffMeshLink">
      <summary>
        <para>Is the agent currently positioned on an OffMeshLink? (Read Only)</para>
        <para>This property is used when autoTraverseOffMeshLink is false and the script is making its own decision about letting the agent cross the link.See CompleteOffMeshLInk for an example that uses this property to allow only certain agents to cross a link.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.currentOffMeshLinkData">
      <summary>
        <para>The current <see cref="OffMeshLinkData">OffMeshLinkData</see>.</para>
        <para>In the case that this agent is not on an OffMeshLink the OffMeshLinkData is marked as invalid. See also isOnOffMeshLink</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.nextOffMeshLinkData">
      <summary>
        <para>The next <see cref="OffMeshLinkData">OffMeshLinkData</see> on the current path.</para>
        <para>In the case that the current path does not contain an OffMeshLink the OffMeshLinkData is marked as invalid.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.autoTraverseOffMeshLink">
      <summary>
        <para>Should the agent move via OffMeshLinks automatically?</para>
        <para>Off-mesh links are used to connect disjoint regions of the NavMesh. Usually, a character should be able to pass through or traverse a link automatically, which will happen if this property is set to true. However, it can also be set to false in cases where a link represents a door or other obstacle that a character needs "permission" to cross.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.autoBraking">
      <summary>
        <para>Should the agent brake automatically to avoid overshooting the destination point?</para>
        <para>If the agent needs to land close to the destination point then it will typically need to brake to avoid overshooting or endless "orbiting" around the target zone. If this property is set to true, the agent will brake automatically as it nears the destination.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.autoRepath">
      <summary>
        <para>Should the agent attempt to acquire a new path if the existing path becomes invalid?</para>
        <para>A new path calculation is also attempted aquired if the agent reaches the end of a partial and stale path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.hasPath">
      <summary>
        <para>Does the agent currently have a path? (Read Only)</para>
        <para>This property will be true if the agent has a path calculated to the desired destination and false otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.pathPending">
      <summary>
        <para>Is a path in the process of being computed but not yet ready? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.isPathStale">
      <summary>
        <para>Is the current path stale. (Read Only)</para>
        <para>When true, the path may no longer be valid or optimal.
This flag will be set if: there are any changes to the walkableMask, if any OffMeshLink is enabled or disabled, or if the costs for the NavMeshLayers have been changed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.pathStatus">
      <summary>
        <para>The status of the current path (complete, partial or invalid).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.path">
      <summary>
        <para>Property to get and set the current path.</para>
        <para>This property can be useful for GUI, debugging and other purposes to get the points of the path calculated by the navigation system. Additionally, a path created from user code can be set for the agent to follow in the usual way. An example of this might be a patrol route designed for coverage rather than optimal distance between two points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.walkableMask">
      <summary>
        <para>Specifies which NavMesh layers are passable (bitfield). Changing <c>walkableMask</c> will make the path stale (see <see cref="NavMeshAgent-isPathStale">isPathStale</see>).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.speed">
      <summary>
        <para>Maximum movement speed when following a path.</para>
        <para>An agent will typically need to speed up and slow down as it follows a path (eg, it will slow down to make a tight turn). The speed is often limited by the length of a path segment and the time taken to accelerate and brake, but the speed will not exceed the value set by this property even on a long, straight path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.angularSpeed">
      <summary>
        <para>Maximum turning speed in (deg/s) while following a path.</para>
        <para>This is the maximum rate at which the agent can turn as it rounds the "corner" defined by a waypoint. The actual turning circle is also influenced by the speed of the agent on approach and also the maximum acceleration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.acceleration">
      <summary>
        <para>The maximum acceleration of an agent as it follows a path, given in units / sec^2.</para>
        <para>An agent does not follow precisely the line segments of the path calculated by the navigation system but rather uses the waypoints along the path as intermediate destinations. This value is the maximum amount by which the agent can accelerate while moving towards the next waypoint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.updatePosition">
      <summary>
        <para>Should the agent update the transform position?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.updateRotation">
      <summary>
        <para>Should the agent update the transform orientation?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.radius">
      <summary>
        <para>The avoidance radius for the agent.</para>
        <para>This is the agent's "personal space" within which obstacles and other agents should not pass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.height">
      <summary>
        <para>The height of the agent for purposes of passing under obstacles, etc.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.obstacleAvoidanceType">
      <summary>
        <para>The level of quality of avoidance.</para>
        <para>This property lets you trade off the precision of obstacle avoidance againt the processor load required to achieve it. The exact quality/performance values will depend heavily on the complexity of the scene but as a general rule, faster performance can be achieved at the cost of quality and vice versa.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshAgent.avoidancePriority">
      <summary>
        <para>The avoidance priority level.</para>
        <para>When the agent is performing avoidance, agents of lower priority are ignored.
The valid range is from 0 to 99 where:
Most important = 0. Least important = 99. Default = 50.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.OffMeshLinkType">
      <summary>
        <para>Link type specifier.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.OffMeshLinkType.LinkTypeManual">
      <summary>
        <para>Manually specified type of link.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.OffMeshLinkType.LinkTypeDropDown">
      <summary>
        <para>Vertical drop.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.OffMeshLinkType.LinkTypeJumpAcross">
      <summary>
        <para>Horizontal jump.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.OffMeshLinkData">
      <summary>
        <para>State of OffMeshLink.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLinkData.valid">
      <summary>
        <para>Is link valid (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLinkData.activated">
      <summary>
        <para>Is link active (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLinkData.linkType">
      <summary>
        <para>Link type specifier (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLinkData.startPos">
      <summary>
        <para>Link start world position (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLinkData.endPos">
      <summary>
        <para>Link end world position (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLinkData.offMeshLink">
      <summary>
        <para>The <see cref="OffMeshLink">OffMeshLink</see> if the link type is a manually placed Offmeshlink (Read Only).</para>
        <para>Automatically generated Jump and drop links will return null.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NavMeshHit">
      <summary>
        <para>Result information for NavMesh queries.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshHit.position">
      <summary>
        <para>Position of hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshHit.normal">
      <summary>
        <para>Normal at the point of hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshHit.distance">
      <summary>
        <para>Distance to the point of hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshHit.mask">
      <summary>
        <para>Mask specifying NavMeshLayers at point of hit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshHit.hit">
      <summary>
        <para>Flag set when hit.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NavMeshTriangulation">
      <summary>
        <para>Contains data describing a triangulation of a navmesh.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NavMeshTriangulation.vertices">
      <summary>
        <para>Vertices for the navmesh triangulation.</para>
        <para>Vertices are referenced by the indices.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NavMeshTriangulation.indices">
      <summary>
        <para>Triangle indices for the navmesh triangulation.</para>
        <para>Contains 3 integers for each triangle. These integers refer to the vertices array.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NavMeshTriangulation.layers">
      <summary>
        <para>NavMeshLayer values for the navmesh triangulation.</para>
        <para>Contains one element for each triangle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NavMesh">
      <summary>
        <para>Navigation mesh.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMesh.Raycast(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.NavMeshHit@,System.Int32)">
      <summary>
        <para>Trace a line between two points on the NavMesh.</para>
        <para>This function follows the path of a "ray" between the specified source
and target positions on the navmesh. If an obstruction is 
encountered along the line then a true value is returned and
the position and other details of the obstructing object are stored
in the hit parameter. This can be used to check if there is a clear
shot or line of sight between a character and a target object.
This function is preferable to the similar Physics.Raycast
because the line tracing is performed in a simpler way using the navmesh
 and has a lower processing overhead.</para>
      </summary>
      <param name="sourcePosition">The origin of the ray.</param>
      <param name="targetPosition">The end of the ray.</param>
      <param name="hit">Holds the properties of the ray cast resulting location.</param>
      <param name="passableMask">A mask specifying which NavMesh layers can be passed when tracing the ray.</param>
      <returns>
        <para>True if the ray is terminated before reaching target position. Otherwise returns false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.NavMesh.CalculatePath(UnityEngine.Vector3,UnityEngine.Vector3,System.Int32,UnityEngine.NavMeshPath)">
      <summary>
        <para>Calculate a path between two points and store the resulting path.</para>
        <para>This function can be used to plan a path ahead of time to avoid a delay
in gameplay when the path is needed. Another use is to check if a target
 position is reachable before moving the agent.</para>
      </summary>
      <param name="sourcePosition">The initial postion of the path requested.</param>
      <param name="targetPosition">The final position of the path requested.</param>
      <param name="passableMask">A mask specifying which NavMesh layers can be passed when calculating a path.</param>
      <param name="path">The resulting path.</param>
      <returns>
        <para>True if a path is found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.NavMesh.FindClosestEdge(UnityEngine.Vector3,UnityEngine.NavMeshHit@,System.Int32)">
      <summary>
        <para>Locate the closest NavMesh edge from a point on the NavMesh.</para>
        <para>The returned NavMeshHit object contains the position
and details of the nearest point on the nearest edge of the
navmesh. Since an edge typically corresponds to a wall or
other large object, this could be used to make a character
take cover as close to the wall as possible.</para>
      </summary>
      <param name="sourcePosition">The origin of the distance query.</param>
      <param name="hit">Holds the properties of the resulting location.</param>
      <param name="passableMask">A mask specifying which NavMesh layers can be passed when finding the nearest edge.</param>
      <returns>
        <para>True if a nearest edge is found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.NavMesh.SamplePosition(UnityEngine.Vector3,UnityEngine.NavMeshHit@,System.Single,System.Int32)">
      <summary>
        <para>Sample the NavMesh closest to the point specified.</para>
      </summary>
      <param name="sourcePosition">The origin of the sample query.</param>
      <param name="hit">Holds the properties of the resulting location.</param>
      <param name="maxDistance">Sample within this distance from sourcePosition.</param>
      <param name="allowedMask">A mask specifying which NavMesh layers are allowed when finding the nearest point.</param>
      <returns>
        <para>True if a nearest point is found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.NavMesh.SetLayerCost(System.Int32,System.Single)">
      <summary>
        <para>Sets the cost for traversing over geometry of the layer type on all agents.</para>
        <para>This will replace any custom layer costs on all agents.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMesh.GetLayerCost(System.Int32)">
      <summary>
        <para>Gets the cost for traversing over geometry of the layer type on all agents.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMesh.GetNavMeshLayerFromName(System.String)">
      <summary>
        <para>Returns the layer index for a named layer.</para>
        <para>If the named layer does not exist returns -1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMesh.CalculateTriangulation">
      <summary>
        <para>Triangulation of the current navmesh.</para>
        <para>Calculates and returns a simple triangulation of the current navmesh - containing the vertices, triangle
indices and navmesh layers.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.OffMeshLink">
      <summary>
        <para>Link allowing movement outside the planar navigation mesh.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.OffMeshLink.#ctor" />
    <member name="M:UnityEngine.OffMeshLink.UpdatePositions">
      <summary>
        <para>Explicitly update the link endpoints.</para>
        <para>Updates the OffMeshLink endpoints to match the transforms specified by the start and end transforms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLink.activated">
      <summary>
        <para>Is link active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLink.occupied">
      <summary>
        <para>Is link occupied. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLink.costOverride">
      <summary>
        <para>Modify pathfinding cost for the link.</para>
        <para>When the costOverride value is non-negative the cost of moving over the OffMeshLink
is equivalent to the costOverride value times the Euclidean distance
between OffMeshLink end points.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLink.biDirectional">
      <summary>
        <para>Can link be traversed in both directions.</para>
        <para>When false the link can only be traversed from start to end.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLink.navMeshLayer">
      <summary>
        <para>NavMeshLayer for this OffMeshLink component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLink.autoUpdatePositions">
      <summary>
        <para>Automatically update endpoints.</para>
        <para>The OffMeshLink component will try to match endpoint transforms specified by startTransform and endTransform . See also UpdatePositions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLink.startTransform">
      <summary>
        <para>The transform representing link start position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OffMeshLink.endTransform">
      <summary>
        <para>The transform representing link end position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NavMeshPathStatus">
      <summary>
        <para>Status of path.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NavMeshPathStatus.PathComplete">
      <summary>
        <para>The path terminates at the destination.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NavMeshPathStatus.PathPartial">
      <summary>
        <para>The path cannot reach the destination.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NavMeshPathStatus.PathInvalid">
      <summary>
        <para>The path is invalid.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NavMeshPath">
      <summary>
        <para>A path as calculated by the navigation system.</para>
        <para>The path is represented as a list of waypoints stored in the corners array. These points are not set directly from user scripts but a NavMeshPath with points correctly assigned is returned by the NavMesh.CalculatePath function and the NavMeshAgent.path property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMeshPath.#ctor">
      <summary>
        <para>NavMeshPath constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NavMeshPath.ClearCorners">
      <summary>
        <para>Erase all corner points from path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshPath.corners">
      <summary>
        <para>Corner points of the path. (Read Only)</para>
        <para>Also known as "waypoints", the corners define the places along a path where it changes direction (ie, the path consists of a number of straight-line moves between corners).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshPath.status">
      <summary>
        <para>Status of the path. (Read Only)</para>
        <para>This reports whether the path reaches to the target, partway to the target or is completely invalid.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NavMeshObstacle">
      <summary>
        <para>An obstacle for NavMeshAgents to avoid.</para>
        <para>A NavMeshObstacle is cylindrical in shape and can move around the surface of the NavMesh with a specified velocity. By default, the obstacle will only affect the agent's avoidance behaviour rather than the pathfinding. This means that the agent will ignore the obstacle when plotting a path but will sidestep around it while moving along the path. If carving is enabled, the obstacle will create a temporary "hole" in the NavMesh. The hole will be recognised by the pathfinding, so paths will be plotted to avoid the obstacle. This means that if, say, an obstacle blocks a narrow gap, the pathfinding will seek an alternative route to the target. Without carving, the agent will head for the gap but won't be able to pass until the obstacle is clear.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshObstacle.height">
      <summary>
        <para>Height of the obstacle's cylinder shape.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshObstacle.radius">
      <summary>
        <para>Radius of the obstacle's cylinder shape.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshObstacle.velocity">
      <summary>
        <para>Velocity at which the obstacle moves around the NavMesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshObstacle.carving">
      <summary>
        <para>Should this obstacle make a cut-out in the navmesh.</para>
        <para>When enabled, this changes the navmesh by cutting out a hole. The shape of the hole is based on the bounding volume of the NavMeshObstacle and the navmesh bake settings for radius and height.When the obstacle moves, the carved hole will also move but to reduce CPU overhead the hole is only recalculated when the obstacle is a certain distance from its previous position.- the carvingMoveThreshold property sets this distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NavMeshObstacle.carvingMoveThreshold">
      <summary>
        <para>Threshold distance for updating a moving carved hole (when carving is enabled).</para>
        <para>If the NavMeshObstacle has moved a distance shorter than the threshold since last carving then the navmesh will not be updated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioSpeakerMode">
      <summary>
        <para>These are speaker types defined for use with <see cref="AudioSettings-speakerMode">AudioSettings.speakerMode</see>.</para>
        <para>Your project's default speaker mode can be set in the Audiomanager through Edit-&amp;gt;Project Settings-&amp;gt;Audio.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Raw">
      <summary>
        <para>Channel count is unaffected.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Mono">
      <summary>
        <para>Channel count is set to 1. The speakers are monaural.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Stereo">
      <summary>
        <para>Channel count is set to 2. The speakers are stereo. This is the editor default.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Quad">
      <summary>
        <para>Channel count is set to 4. 4 speaker setup. This includes front left, front right, rear left, rear right.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Surround">
      <summary>
        <para>Channel count is set to 5. 5 speaker setup. This includes front left, front right, center, rear left, rear right.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Mode5point1">
      <summary>
        <para>Channel count is set to 6. 5.1 speaker setup. This includes front left, front right, center, rear left, rear right and a subwoofer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Mode7point1">
      <summary>
        <para>Channel count is set to 8. 7.1 speaker setup. This includes front left, front right, center, rear left, rear right, side left, side right and a subwoofer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioSpeakerMode.Prologic">
      <summary>
        <para>Channel count is set to 2. Stereo output, but data is encoded in a way that is picked up by a Prologic/Prologic2 decoder and split into a 5.1 speaker setup.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioSettings">
      <summary>
        <para>Controls the global audio settings from script.</para>
        <para>Setup speaker output and format.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSettings.SetDSPBufferSize(System.Int32,System.Int32)">
      <summary>
        <para>Get or set the mixer's buffer size in samples.</para>
        <para>Note that setting a new buffersize will reset the audio system (all audio will stop).
For mobiles (iOS devices and Android) the is also settable from the menu 'Audio Settings-&amp;gt;Mobile DSP Buffer size'.
The software mixer mixes to a ringbuffer. The size of this ringbuffer is determined here. It mixes a block of sound data every 'bufferlength' number of samples, and there are 'numbuffers' number of these blocks that make up the entire ringbuffer.
Adjusting these values can lead to extremely low latency performance (smaller values), or greater stability in sound output (larger values).
Warning! The 'buffersize' is generally best left alone. Making the granularity smaller will just increase CPU usage (cache misses and DSP network overhead).
Making it larger affects how often you hear commands update such as volume/pitch/pan changes.
Anything above 20ms will be noticable and sound parameter changes will be obvious instead of smooth.
Unity chooses the most optimal size by default for best stability, depending on the output type, and if the drivers are emulated or not (for example DirectSound is emulated using waveOut on NT).
It is not recommended changing this value unless you really need to. You may get worse performance than the default settings chosen by Unity.</para>
      </summary>
      <param name="bufferLength">Is the length of each buffer in the ringbuffer.</param>
      <param name="numBuffers">Is number of buffers.</param>
    </member>
    <member name="M:UnityEngine.AudioSettings.GetDSPBufferSize(System.Int32@,System.Int32@)">
      <summary>
        <para>Get or set the mixer's buffer size in samples.</para>
        <para>Note that setting a new buffersize will reset the audio system (all audio will stop).
For mobiles (iOS devices and Android) the is also settable from the menu 'Audio Settings-&amp;gt;Mobile DSP Buffer size'.
The software mixer mixes to a ringbuffer. The size of this ringbuffer is determined here. It mixes a block of sound data every 'bufferlength' number of samples, and there are 'numbuffers' number of these blocks that make up the entire ringbuffer.
Adjusting these values can lead to extremely low latency performance (smaller values), or greater stability in sound output (larger values).
Warning! The 'buffersize' is generally best left alone. Making the granularity smaller will just increase CPU usage (cache misses and DSP network overhead).
Making it larger affects how often you hear commands update such as volume/pitch/pan changes.
Anything above 20ms will be noticable and sound parameter changes will be obvious instead of smooth.
Unity chooses the most optimal size by default for best stability, depending on the output type, and if the drivers are emulated or not (for example DirectSound is emulated using waveOut on NT).
It is not recommended changing this value unless you really need to. You may get worse performance than the default settings chosen by Unity.</para>
      </summary>
      <param name="bufferLength">Is the length of each buffer in the ringbuffer.</param>
      <param name="numBuffers">Is number of buffers.</param>
    </member>
    <member name="P:UnityEngine.AudioSettings.driverCaps">
      <summary>
        <para>Returns the speaker mode capability of the current audio driver. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSettings.speakerMode">
      <summary>
        <para>Sets or gets the current speaker mode. Default is 2 channel stereo.</para>
        <para>Be aware that the audio system is restarted when a new speaker mode is set.
This means that playback on all AudioSources is stopped; any sounds that should be continuous (such as music) will need to be started again after the speaker mode is changed.
If a speaker mode is set beyond the drivers capability, the audio behaviour is undefined.
Use AudioSettings.driverCaps to get the capabilities of the current driver.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSettings.dspTime">
      <summary>
        <para>Returns the current time of the audio system.</para>
        <para>This is a value specified in seconds and based on the actual number of samples the audio system processes and is therefore much more precise than the time obtained via the Time.time property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSettings.outputSampleRate">
      <summary>
        <para>Get and set the mixer's current output rate.</para>
        <para>Note that setting a new samplerate will reset the audio system (all audio will stop).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioType">
      <summary>
        <para>Type of the imported(native) data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.UNKNOWN">
      <summary>
        <para>3rd party / unknown plugin format.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.ACC">
      <summary>
        <para>Acc - not supported.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.AIFF">
      <summary>
        <para>Aiff.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.IT">
      <summary>
        <para>Impulse tracker.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.MOD">
      <summary>
        <para>Protracker / Fasttracker MOD.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.MPEG">
      <summary>
        <para>MP2/MP3 MPEG.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.OGGVORBIS">
      <summary>
        <para>Ogg vorbis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.S3M">
      <summary>
        <para>ScreamTracker 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.WAV">
      <summary>
        <para>Microsoft WAV.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.XM">
      <summary>
        <para>FastTracker 2 XM.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.XMA">
      <summary>
        <para>Xbox360 XMA.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.VAG">
      <summary>
        <para>VAG.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioType.AUDIOQUEUE">
      <summary>
        <para>iPhone hardware decoder, supports AAC, ALAC and MP3. Extracodecdata is a pointer to an FMOD_AUDIOQUEUE_EXTRACODECDATA structure.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioClip">
      <summary>
        <para>A container for audio data.</para>
        <para>An AudioClip stores the audio file either compressed as ogg vorbis or uncompressed.
AudioClips are referenced and used by AudioSources to play sounds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioClip.GetData(System.Single[],System.Int32)">
      <summary>
        <para>Fills an array with sample data from the clip.</para>
        <para>The samples are floats ranging from -1.0f to 1.0f. The sample count is determined by the length of the float array.
Use offsetSamples to start the read from a random position in the clip. If the read length from the offset is longer than the clip length, the read will wrap around
and read the remaining samples from the start of the clip.Note that with compressed audio files, the sample data can only be retrieved when the Load Type is set to Decompress on Load in the audio importer. If this is not the case then the array will be returned with zeroes for all the sample values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioClip.SetData(System.Single[],System.Int32)">
      <summary>
        <para>Set sample data in a clip.</para>
        <para>The samples should be floats ranging from 0.0f to 1.0f (exceeding these limits will lead to artifacts and undefined behaviour).
The sample count is determined by the length of the float array.
Use offsetSamples to write into a random position in the clip. If the length from the offset is longer than the clip length, the write will wrap around
and write the remaining samples from the start of the clip.Note that for compressed audio, the sample data can only be set when the Load Type is set to Decompress on Load in the audio importer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioClip.Create(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Creates a user AudioClip with a name and with the given length in samples, channels and frequency.</para>
        <para>Set your own audio data with SetData.
Use the PCMReaderCallback and PCMSetPositionCallback delegates to get a callback whenever the clip reads data and changes the position.
If stream is true, Unity will on demand read in small chunks of data. If it's false, all the samples will be read during the creation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioClip.Create(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,UnityEngine.AudioClip.PCMReaderCallback)">
      <summary>
        <para>Creates a user AudioClip with a name and with the given length in samples, channels and frequency.</para>
        <para>Set your own audio data with SetData.
Use the PCMReaderCallback and PCMSetPositionCallback delegates to get a callback whenever the clip reads data and changes the position.
If stream is true, Unity will on demand read in small chunks of data. If it's false, all the samples will be read during the creation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioClip.Create(System.String,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,UnityEngine.AudioClip.PCMReaderCallback,UnityEngine.AudioClip.PCMSetPositionCallback)">
      <summary>
        <para>Creates a user AudioClip with a name and with the given length in samples, channels and frequency.</para>
        <para>Set your own audio data with SetData.
Use the PCMReaderCallback and PCMSetPositionCallback delegates to get a callback whenever the clip reads data and changes the position.
If stream is true, Unity will on demand read in small chunks of data. If it's false, all the samples will be read during the creation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioClip.length">
      <summary>
        <para>The length of the audio clip in seconds. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioClip.samples">
      <summary>
        <para>The length of the audio clip in samples. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioClip.channels">
      <summary>
        <para>Channels in audio clip. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioClip.frequency">
      <summary>
        <para>Sample frequency. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioClip.isReadyToPlay">
      <summary>
        <para>Is a streamed audio clip ready to play? (Read Only)</para>
        <para>If the AudioClip is downloading from a web site, this returns if enough data has been downloaded so playback should be able to start without interruptions.
For AudioClips not associated with a web stream, this value always returns true.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioVelocityUpdateMode">
      <summary>
        <para>Describes when an <see cref="AudioSource">AudioSource</see> or <see cref="AudioListener">AudioListener</see> is updated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioVelocityUpdateMode.Auto">
      <summary>
        <para>Updates the source or listener in the fixed update loop if it is attached to a <see cref="Rigidbody">Rigidbody</see>, dynamic otherwise.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioVelocityUpdateMode.Fixed">
      <summary>
        <para>Updates the source or listener in the fixed update loop.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioVelocityUpdateMode.Dynamic">
      <summary>
        <para>Updates the source or listener in the dynamic update loop.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioListener">
      <summary>
        <para>Representation of a listener in 3D space.</para>
        <para>This class implements a microphone-like device. It records the sounds around it and plays that through the player's speakers.
You can only have one listener in a scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioListener.GetOutputData(System.Single[],System.Int32)">
      <summary>
        <para>Returns a block of the listener (master)'s output data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioListener.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      <summary>
        <para>Returns a block of the listener (master)'s spectrum data.</para>
        <para>Number of values (numSamples) must be a power of 2. (ie 128/256/512 etc). Min = 64. Max = 8192.
Use window to reduce leakage between frequency bins/bands.
Note, the more complex window type, the better the quality, but reduced speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioListener.volume">
      <summary>
        <para>Controls the game sound volume (0.0 to 1.0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioListener.pause">
      <summary>
        <para>The paused state of the audio system.</para>
        <para>If set to true, all AudioSources playing will be paused. This works in the same way as pausing the game in the editor. While the pause-state is true, the AudioSettings.dspTime will be frozen and further AudioSource play requests will start off paused. If you want certain sounds to still play during the pause, you need to set the ignoreListenerPause property on the AudioSource to true for these. This is typically menu item sounds or background music for the menu. Any scheduled play requests will be frozen in time, so that if you scheduled a sound to play after 3 seconds and paused the audio system 1 second after this, the scheduled sounds will start playing 2 seconds after unpausing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioListener.velocityUpdateMode">
      <summary>
        <para>This lets you set whether the Audio Listener should be updated in the fixed or dynamic update.</para>
        <para>Make sure this is set to update in the same update loop as the Audio Listener is moved in if you are experiencing problems with Doppler effect simulation.
The default setting will automatically set the listener to be updated in the fixed update loop if it is attached to a rigidbody, and dynamic otherwise.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FFTWindow">
      <summary>
        <para>Spectrum analysis windowing types.</para>
        <para>Use this to reduce leakage of signals across frequency bands.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Rectangular">
      <summary>
        <para>W[n] = 1.0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Triangle">
      <summary>
        <para>W[n] = TRI(2n/N).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Hamming">
      <summary>
        <para>W[n] = 0.54 - (0.46 * COS(n/N) ).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Hanning">
      <summary>
        <para>W[n] = 0.5 * (1.0 - COS(n/N) ).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.Blackman">
      <summary>
        <para>W[n] = 0.42 - (0.5 * COS(n/N) ) + (0.08 * COS(2.0 * n/N) ).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FFTWindow.BlackmanHarris">
      <summary>
        <para>W[n] = 0.35875 - (0.48829 * COS(1.0 * n/N)) + (0.14128 * COS(2.0 * n/N)) - (0.01168 * COS(3.0 * n/N)).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioRolloffMode">
      <summary>
        <para>Rolloff modes that a 3D sound can have in an audio source.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioRolloffMode.Logarithmic">
      <summary>
        <para>Use this mode when you want a real-world rolloff.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioRolloffMode.Linear">
      <summary>
        <para>Use this mode when you want to lower the volume of your sound over the distance.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioRolloffMode.Custom">
      <summary>
        <para>Use this when you want to use a custom rolloff.</para>
        <para>Note: Currently is not possible to modify the volume curve via scripting.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioSource">
      <summary>
        <para>A representation of audio sources in 3D.</para>
        <para>An AudioSource is attached to a GameObject for playing back sounds in a 3D environment.
In order to play 3D sounds you also need to have a AudioListener.
The audio listener is normally attached to the camera you want to use.
Whether sounds are played in 3D or 2D is determined by AudioImporter settings.You can play a single audio clip using Play, Pause and Stop.
You can also adjust its volume while playing using the volume property, or seek using time.
Multiple sounds can be played on one AudioSource using PlayOneShot.
You can play a clip at a static position in 3D space using PlayClipAtPoint.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSource.Play(System.UInt64)">
      <summary>
        <para>Plays the <see cref="AudioSource-clip">clip</see> with an optional certain delay.</para>
        <para>The delay parameter is deprecated, please use the newer PlayDelayed function instead which specifies the delay in seconds.Note: To obtain sample accuracy with an AudioClip with a different samplerate (than 44.1 khz) you have to do the math yourselves. Delaying an audiosource with an attached AudioClip with samplerate of,
say, 32 khz, with 16k samples(.5 sec) is done by Play(22050). ((44100/32000) * 16000 = 22050).Note: The AudioSource.PlayScheduled API will give you more accurate control over when the audio clip is played.</para>
      </summary>
      <param name="delay">Delay in number of samples, assuming a 44100Hz sample rate (meaning that Play(44100) will delay the playing by exactly 1 sec).</param>
    </member>
    <member name="M:UnityEngine.AudioSource.Play">
      <summary>
        <para>Plays the <see cref="AudioSource-clip">clip</see> with an optional certain delay.</para>
        <para>The delay parameter is deprecated, please use the newer PlayDelayed function instead which specifies the delay in seconds.Note: To obtain sample accuracy with an AudioClip with a different samplerate (than 44.1 khz) you have to do the math yourselves. Delaying an audiosource with an attached AudioClip with samplerate of,
say, 32 khz, with 16k samples(.5 sec) is done by Play(22050). ((44100/32000) * 16000 = 22050).Note: The AudioSource.PlayScheduled API will give you more accurate control over when the audio clip is played.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayDelayed(System.Single)">
      <summary>
        <para>Plays the <see cref="AudioSource-clip">clip</see> with a delay specified in seconds. Users are advised to use this function instead of the old Play(delay) function that took a delay specified in samples relative to a reference rate of 44.1 kHz as an argument.</para>
        <para>Note: This function replaces the Play(delay) function when called with the delay-argument. In that function the delay had to be specified as samples relative to a reference rate of 44100. This is inconvenient when the engine is running on a different sample rate and the source sound has an even different rate. Working with delays specified in seconds makes this independent of these.</para>
      </summary>
      <param name="delay">Delay time specified in seconds.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayScheduled(System.Double)">
      <summary>
        <para>Plays the <see cref="AudioSource-clip">clip</see> at a specific time on the absolute time-line that AudioSettings.dspTime reads from.</para>
        <para>This is the preferred way to stitch AudioClips in music players because it is independent of the frame rate and gives the audio system enough time to prepare the playback of the sound to fetch it from media where the opening and buffering takes a lot of time (streams) without causing sudden CPU spikes.</para>
      </summary>
      <param name="time">Time in seconds on the absolute time-line that AudioSettings.dspTime refers to for when the sound should start playing.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.SetScheduledStartTime(System.Double)">
      <summary>
        <para>Changes the time at which a sound that has already been scheduled to play will start.</para>
        <para>Notice that depending on the timing not all rescheduling requests can be fulfilled.One interesting use case for this is stinger sound effects that are initiated by game events, but that you also want to be synchronized to specific beats in music. Then this function can be used to defer the stinger until the next musical transition.Note: In general it is better to use PlayScheduled to cue up audio.  Only use SetScheduledStartTime if you have scheduled an audio clip to play in the future and you need to change the time at which it starts.  Calling SetScheduledStartTime will not cause an un-scheduled audio clip to play.</para>
      </summary>
      <param name="time">Time in seconds.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.SetScheduledEndTime(System.Double)">
      <summary>
        <para>Changes the time at which a sound that has already been scheduled to play will end. Notice that depending on the timing not all rescheduling requests can be fulfilled.</para>
        <para>Note that the time specified is still a time on the absolute time-line, meaning that the sound will stop when reaching that time, regardless of when it was started. So if you have a 5 second long sound and want it to play at time T and stop after 3 seconds (i.e. silencing the last 2 seconds of the sound), you need to specify the end time to be T+3. This function is useful in music systems to overcome the discontinuities in signals that frame-based lossy codecs cause.</para>
      </summary>
      <param name="time">Time in seconds.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.Stop">
      <summary>
        <para>Stops playing the <see cref="AudioSource-clip">clip</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSource.Pause">
      <summary>
        <para>Pauses playing the <see cref="AudioSource-clip">clip</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayOneShot(UnityEngine.AudioClip,System.Single)">
      <summary>
        <para>Plays an <see cref="AudioClip">AudioClip</see>, and scales the <see cref="AudioSource">AudioSource</see> volume by volumeScale.</para>
      </summary>
      <param name="clip">The clip being played.</param>
      <param name="volumeScale">The scale of the volume (0-1).</param>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayOneShot(UnityEngine.AudioClip)">
      <summary>
        <para>Plays an <see cref="AudioClip">AudioClip</see>, and scales the <see cref="AudioSource">AudioSource</see> volume by volumeScale.</para>
      </summary>
      <param name="clip">The clip being played.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayClipAtPoint(UnityEngine.AudioClip,UnityEngine.Vector3)">
      <summary>
        <para>Plays an AudioClip at a given position in world space.</para>
        <para>This function creates an audio source but automatically disposes of it once the clip has finished playing.</para>
      </summary>
      <param name="clip">Audio data to play.</param>
      <param name="position">Position in world space from which sound originates.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.PlayClipAtPoint(UnityEngine.AudioClip,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Plays an AudioClip at a given position in world space.</para>
        <para>This function creates an audio source but automatically disposes of it once the clip has finished playing.</para>
      </summary>
      <param name="clip">Audio data to play.</param>
      <param name="position">Position in world space from which sound originates.</param>
      <param name="volume">Playback volume.</param>
    </member>
    <member name="M:UnityEngine.AudioSource.GetOutputData(System.Single[],System.Int32)">
      <summary>
        <para>Returns a block of the currently playing source's output data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AudioSource.GetSpectrumData(System.Single[],System.Int32,UnityEngine.FFTWindow)">
      <summary>
        <para>Returns a block of the currently playing source's spectrum data.</para>
        <para>Number of values (numSamples) must be a power of 2. (ie 128/256/512 etc). Min = 64. Max = 8192.
Use window to reduce leakage between frequency bins/bands.
Note, the more complex window type, the better the quality, but reduced speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.volume">
      <summary>
        <para>The volume of the audio source (0.0 to 1.0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.pitch">
      <summary>
        <para>The pitch of the audio source.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.time">
      <summary>
        <para>Playback position in seconds.</para>
        <para>Use this to read current playback time or to seek to a new playback time.Be aware that: On a compressed audio track position does not necessary reflect the actual time in the track
Compressed audio is represented as a set of so-called packets. 
The length of a packet depends on the compression settings and can quite often be 2-3 seconds per packet.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.timeSamples">
      <summary>
        <para>Playback position in PCM samples.</para>
        <para>Use this to read current playback time or to seek to a new playback time in samples,
if you want more precise timing than what time variable allows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.clip">
      <summary>
        <para>The default <see cref="AudioClip">AudioClip</see> to play.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.isPlaying">
      <summary>
        <para>Is the <see cref="AudioSource-clip">clip</see> playing right now (Read Only)?</para>
        <para>Note: AudioSource.isPlaying will return false when AudioSource.Pause() is called. When you use
AudioSource.Play() again back, it will return true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.loop">
      <summary>
        <para>Is the audio clip looping?</para>
        <para>If you disable looping on a playing AudioSource the sound will stop after the end of the current loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.ignoreListenerVolume">
      <summary>
        <para>This makes the audio source not take into account the volume of the audio listener.</para>
        <para>Enable this when playing back music.
When playing back music you want a separate setting which is unaffected by the normal sound effects volume.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.playOnAwake">
      <summary>
        <para>If set to true, the audio source will automatically start playing on awake.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.ignoreListenerPause">
      <summary>
        <para>Allows AudioSource to play even though AudioListener.pause is set to true. This is useful for the menu element sounds or background music in pause menus.</para>
        <para>This property can only be set via the script and is not serialized.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.velocityUpdateMode">
      <summary>
        <para>Whether the Audio Source should be updated in the fixed or dynamic update.</para>
        <para>Make sure this is set to update in the same update loop as the Audio Source is moved in if you are experiencing problems with Doppler effect simulation for this source.
The default setting will automatically set the source to be updated in the fixed update loop if it is attached to a rigidbody, and dynamic otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.panLevel">
      <summary>
        <para>Sets how much the 3d engine has an effect on the channel.</para>
        <para>Useful for morphing an AudioSource from 3D(1.0f) to 2D(0.0f).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.bypassEffects">
      <summary>
        <para>Bypass effects (Applied from filter components or global listener filters).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.bypassListenerEffects" />
    <member name="P:UnityEngine.AudioSource.bypassReverbZones" />
    <member name="P:UnityEngine.AudioSource.dopplerLevel">
      <summary>
        <para>Sets the Doppler scale for this AudioSource.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.spread">
      <summary>
        <para>Sets the spread angle a 3d stereo or multichannel sound in speaker space.</para>
        <para>0 = all sound channels are located at the same speaker location and is 'mono'. 360 = all subchannels are located at the opposite speaker location to the speaker location that it should be according to 3D position. Default = 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.priority">
      <summary>
        <para>Sets the priority of the <see cref="AudioSource">AudioSource</see>.</para>
        <para>Unity is virtualizing AudioSources, when there's more AudioSources playing than available hardware channels.
The AudioSources with lowest priority (and audibility) is virtualized first.
Priority is an integer between 0 and 255. 0=highest priority, 255=lowest priority.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.mute">
      <summary>
        <para>Un- / Mutes the AudioSource. Mute sets the volume=0, Un-Mute restore the original volume.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.minDistance">
      <summary>
        <para>Within the Min distance the AudioSource will cease to grow louder in volume.</para>
        <para>Outside the min distance the volume starts to attenuate.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.maxDistance">
      <summary>
        <para>(Logarithmic rolloff) MaxDistance is the distance a sound stops attenuating at.</para>
        <para>(Linear rolloff) MaxDistance is the distance where the sound is completely inaudible.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.pan">
      <summary>
        <para>Sets a channels pan position linearly. Only works for 2D clips.</para>
        <para>-1.0 to 1.0. -1.0 is full left. 0.0 is center. 1.0 is full right.
Only sounds that are mono or stereo can be panned. Multichannel sounds (ie &amp;gt;2 channels) cannot be panned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioSource.rolloffMode">
      <summary>
        <para>Sets/Gets how the AudioSource attenuates over distance.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioReverbPreset">
      <summary>
        <para>Reverb presets used by the Reverb Zone class and the audio reverb filter.</para>
        <para>Component for audio sources.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Off">
      <summary>
        <para>No reverb preset selected.</para>
        <para>All the values are disabled and the sound is the default without
any modifications.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Generic">
      <summary>
        <para>Generic preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.PaddedCell">
      <summary>
        <para>Padded cell preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Room">
      <summary>
        <para>Room preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Bathroom">
      <summary>
        <para>Bathroom preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Livingroom">
      <summary>
        <para>Livingroom preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Stoneroom">
      <summary>
        <para>Stoneroom preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Auditorium">
      <summary>
        <para>Auditorium preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Concerthall">
      <summary>
        <para>Concert hall preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Cave">
      <summary>
        <para>Cave preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Arena">
      <summary>
        <para>Arena preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Hangar">
      <summary>
        <para>Hangar preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.CarpetedHallway">
      <summary>
        <para>Carpeted hallway preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Hallway">
      <summary>
        <para>Hallway preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.StoneCorridor">
      <summary>
        <para>Stone corridor preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Alley">
      <summary>
        <para>Alley preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Forest">
      <summary>
        <para>Forest preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.City">
      <summary>
        <para>City preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Mountains">
      <summary>
        <para>Mountains preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Quarry">
      <summary>
        <para>Quarry preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Plain">
      <summary>
        <para>Plain preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.ParkingLot">
      <summary>
        <para>Parking Lot preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.SewerPipe">
      <summary>
        <para>Sewer pipe preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Underwater">
      <summary>
        <para>Underwater presset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Drugged">
      <summary>
        <para>Drugged preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Dizzy">
      <summary>
        <para>Dizzy preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.Psychotic">
      <summary>
        <para>Psychotic preset.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AudioReverbPreset.User">
      <summary>
        <para>User defined preset.</para>
        <para>Select this preset if you want to change manually the values of
your preset.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioReverbZone">
      <summary>
        <para>Reverb Zones are used when you want to create location based ambient effects in the scene.</para>
        <para>As the Audio Listener moves into a Reverb Zone, the ambient effect associated with the zone is gradually applied.
At the max distance there is no effect and at the min distance the effect is fully applied.
For example you can gradually change your character's footsteps sounds and create the
feeling like you where entering into a cavern, going trough a room,
swimming underwater, etc.You can always mix reverb zones to have combined effects.
For more info check Reverb Zones in the manual.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.minDistance">
      <summary>
        <para>The distance from the centerpoint that the reverb will have full effect at. Default = 10.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.maxDistance">
      <summary>
        <para>The distance from the centerpoint that the reverb will not have any effect. Default = 15.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reverbPreset">
      <summary>
        <para>Set/Get reverb preset properties.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.room">
      <summary>
        <para>Room effect level (at mid frequencies).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.roomHF">
      <summary>
        <para>Relative room effect level at high frequencies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.roomLF">
      <summary>
        <para>Relative room effect level at low frequencies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.decayTime">
      <summary>
        <para>Reverberation decay time at mid frequencies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.decayHFRatio">
      <summary>
        <para>High-frequency to mid-frequency decay time ratio.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reflections">
      <summary>
        <para>Early reflections level relative to room effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reflectionsDelay">
      <summary>
        <para>Initial reflection delay time.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reverb">
      <summary>
        <para>Late reverberation level relative to room effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.reverbDelay">
      <summary>
        <para>Late reverberation delay time relative to initial reflection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.HFReference">
      <summary>
        <para>Reference high frequency (hz).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.LFReference">
      <summary>
        <para>Reference low frequency (hz).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.roomRolloffFactor">
      <summary>
        <para>Like rolloffscale in global settings, but for reverb room size effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.diffusion">
      <summary>
        <para>Value that controls the echo density in the late reverberation decay.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbZone.density">
      <summary>
        <para>Value that controls the modal density in the late reverberation decay.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioLowPassFilter">
      <summary>
        <para>The Audio Low Pass Filter filter passes low frequencies of an.</para>
        <para>AudioSource, or all sound reaching an AudioListener, and attenuates
frequencies higher than the Cutoff Frequency.Note: This filter is only available on the PRO.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioLowPassFilter.cutoffFrequency">
      <summary>
        <para>Lowpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioLowPassFilter.lowpassResonaceQ">
      <summary>
        <para>Determines how much the filter's self-resonance is dampened.</para>
        <para>Higher Lowpass Resonance Q indicates a lower rate of energy loss i.e. the oscillations die out more slowly.Lowpass resonance Q value goes from 1.0 to 10.0. Default = 1.0.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioHighPassFilter">
      <summary>
        <para>The Audio High Pass Filter passes high frequencies of an AudioSource and.</para>
        <para>Attenuates signals with frequencies lower than the Cutoff
Frequency.Note: This filter is only available on the PRO version.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioHighPassFilter.cutoffFrequency">
      <summary>
        <para>Highpass cutoff frequency in hz. 10.0 to 22000.0. Default = 5000.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioHighPassFilter.highpassResonaceQ">
      <summary>
        <para>Determines how much the filter's self-resonance isdampened.</para>
        <para>Higher Highpass resonance Q indicates a lower rate of
energy loss i.e. the oscillations die out more slowly.Highpass resonance Q value goes from 1.0 to 10.0. Default = 1.0.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioDistortionFilter">
      <summary>
        <para>The Audio Distortion Filter distorts the sound from an AudioSource or.</para>
        <para>Sounds reaching the AudioListener.Note: This filter is only available on the PRO version.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioDistortionFilter.distortionLevel">
      <summary>
        <para>Distortion value. 0.0 to 1.0. Default = 0.5.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioEchoFilter">
      <summary>
        <para>The Audio Echo Filter repeats a sound after a given Delay, attenuating.</para>
        <para>The repetitions based on the Decay Ratio.Note: This filter is only available on the PRO version.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioEchoFilter.delay">
      <summary>
        <para>Echo delay in ms. 10 to 5000. Default = 500.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioEchoFilter.decayRatio">
      <summary>
        <para>Echo decay per delay. 0 to 1. 1.0 = No decay, 0.0 = total decay (i.e. simple 1 line delay). Default = 0.5.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioEchoFilter.dryMix">
      <summary>
        <para>Volume of original signal to pass to output. 0.0 to 1.0. Default = 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioEchoFilter.wetMix">
      <summary>
        <para>Volume of echo signal to pass to output. 0.0 to 1.0. Default = 1.0.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioChorusFilter">
      <summary>
        <para>The Audio Chorus Filter takes an Audio Clip and processes it creating a chorus effect.</para>
        <para>The chorus effect modulates the original sound by a sinusoid low frequency
oscillator (LFO). The output sounds like there are multiple sources emitting
the same sound with slight variations - resembling a choir.Note: This filter is only available on the PRO version.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.dryMix">
      <summary>
        <para>Volume of original signal to pass to output. 0.0 to 1.0. Default = 0.5.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.wetMix1">
      <summary>
        <para>Volume of 1st chorus tap. 0.0 to 1.0. Default = 0.5.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.wetMix2">
      <summary>
        <para>Volume of 2nd chorus tap. This tap is 90 degrees out of phase of the first tap. 0.0 to 1.0. Default = 0.5.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.wetMix3">
      <summary>
        <para>Volume of 3rd chorus tap. This tap is 90 degrees out of phase of the second tap. 0.0 to 1.0. Default = 0.5.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.delay">
      <summary>
        <para>Chorus delay in ms. 0.1 to 100.0. Default = 40.0 ms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.rate">
      <summary>
        <para>Chorus modulation rate in hz. 0.0 to 20.0. Default = 0.8 hz.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioChorusFilter.depth">
      <summary>
        <para>Chorus modulation depth. 0.0 to 1.0. Default = 0.03.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioReverbFilter">
      <summary>
        <para>The Audio Reverb Filter takes an Audio Clip and distortionates it in a.</para>
        <para>Way to create a personalized reverb effect.Note: This filter is only available in the PRO version.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reverbPreset">
      <summary>
        <para>Set/Get reverb preset properties.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.dryLevel">
      <summary>
        <para>Mix level of dry signal in output in mB. Ranges from -10000.0 to 0.0. Default is 0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.room">
      <summary>
        <para>Room effect level at low frequencies in mB. Ranges from -10000.0 to 0.0. Default is 0.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.roomHF">
      <summary>
        <para>Room effect high-frequency level re. low frequency level in mB. Ranges from -10000.0 to 0.0. Default is 0.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.roomRolloff">
      <summary>
        <para>Rolloff factor for room effect. Ranges from 0.0 to 10.0. Default is 10.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.decayTime">
      <summary>
        <para>Reverberation decay time at low-frequencies in seconds. Ranges from 0.1 to 20.0. Default is 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.decayHFRatio">
      <summary>
        <para>Decay HF Ratio : High-frequency to low-frequency decay time ratio. Ranges from 0.1 to 2.0. Default is 0.5.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reflectionsLevel">
      <summary>
        <para>Early reflections level relative to room effect in mB. Ranges from -10000.0 to 1000.0. Default is -10000.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reflectionsDelay">
      <summary>
        <para>Late reverberation level relative to room effect in mB. Ranges from -10000.0 to 2000.0. Default is 0.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reverbLevel">
      <summary>
        <para>Late reverberation level relative to room effect in mB. Ranges from -10000.0 to 2000.0. Default is 0.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.reverbDelay">
      <summary>
        <para>Late reverberation delay time relative to first reflection in seconds. Ranges from 0.0 to 0.1. Default is 0.04.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.diffusion">
      <summary>
        <para>Reverberation diffusion (echo density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.density">
      <summary>
        <para>Reverberation density (modal density) in percent. Ranges from 0.0 to 100.0. Default is 100.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.hfReference">
      <summary>
        <para>Reference high frequency in Hz. Ranges from 20.0 to 20000.0. Default is 5000.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.roomLF">
      <summary>
        <para>Room effect low-frequency level in mB. Ranges from -10000.0 to 0.0. Default is 0.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AudioReverbFilter.lFReference">
      <summary>
        <para>Reference low-frequency in Hz. Ranges from 20.0 to 1000.0. Default is 250.0.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Microphone">
      <summary>
        <para>Use this class to record to an <see cref="AudioClip">AudioClip</see> using a connected microphone.</para>
        <para>You can get a list of connected microphone(s) from the devices property and then use the Start and End functions to start or end a recording session using one of the available devices.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Microphone.Start(System.String,System.Boolean,System.Int32,System.Int32)">
      <summary>
        <para>Start Recording with device.</para>
        <para>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the devices property. You can find the range of sample rates supported by a microphone using the GetDeviceCaps property.Note that if you want to use the Microphone class in the web player, you need to get the
user's permission to do so. Call Application.RequestUserAuthorization before calling
any Microphone methods.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
      <param name="loop">Indicates whether the recording should continue recording if lengthSec is reached, and wrap around and record from the beginning of the AudioClip.</param>
      <param name="lengthSec">Is the length of the AudioClip produced by the recording.</param>
      <param name="frequency">The sample rate of the AudioClip produced by the recording.</param>
      <returns>
        <para>The function returns null if the recording fails to start.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Microphone.End(System.String)">
      <summary>
        <para>Stops recording.</para>
        <para>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the devices property.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
    </member>
    <member name="M:UnityEngine.Microphone.IsRecording(System.String)">
      <summary>
        <para>Query if a device is currently recording.</para>
        <para>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the devices property.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
    </member>
    <member name="M:UnityEngine.Microphone.GetPosition(System.String)">
      <summary>
        <para>Get the position in samples of the recording.</para>
        <para>If you pass a null or empty string for the device name then the default microphone will be used. You can get a list of available microphone devices from the devices property.You can use this to control latency. If you want a 30ms latency, poll getRecordPosition() until 30ms (in samples) has gone and then start the audio.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
    </member>
    <member name="M:UnityEngine.Microphone.GetDeviceCaps(System.String,System.Int32@,System.Int32@)">
      <summary>
        <para>Get the frequency capabilities of a device.</para>
        <para>Passing null or an empty string for the device name will select the default device. You can use the devices property to get a list of all available microphones.When a value of zero is returned in the minFreq and maxFreq parameters, this indicates that the device supports any frequency.</para>
      </summary>
      <param name="deviceName">The name of the device.</param>
      <param name="minFreq">Returns the minimum sampling frequency of the device.</param>
      <param name="maxFreq">Returns the maximum sampling frequency of the device.</param>
    </member>
    <member name="P:UnityEngine.Microphone.devices">
      <summary>
        <para>A list of available microphone devices, identified by name.</para>
        <para>You can use the name with the Start and End functions to specify which microphone you wish to start/stop recording.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MovieTexture">
      <summary>
        <para>Movie Textures (Pro only) are textures onto which movies are played back.</para>
        <para>They can be used for cutscene movie sequences, or to render movies into the scene itself.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MovieTexture.Play">
      <summary>
        <para>Starts playing the movie.</para>
        <para>Note that a running MovieTexture will use a lot of CPU power, and it will continue running until it is manually stopped or a new level is loaded.Also note that MovieTextures does not behave exactly the same as for example audio clips. When you call the Play() method on a MovieTexture, it is the Asset that will start playing, and not a particular instance of the movie.
This means that if you have for example several planes in your scene, all having the same MovieTexture set as their materials texture, when you call Play() on one of them, every instance of the Movie will start playing.MovieTextures are a pro-only feature.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MovieTexture.Stop">
      <summary>
        <para>Stops playing the movie, and rewinds it to the beginning.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MovieTexture.Pause">
      <summary>
        <para>Pauses playing the movie.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MovieTexture.audioClip">
      <summary>
        <para>Returns the <see cref="AudioClip">AudioClip</see> belonging to the MovieTexture.</para>
        <para>Note that this is a special AudioClip which will always play its audio synchronized to the movie.
If you attach a Movie's audioClip to a source in the editor, it will start playing automatically when the movie is playing,
Otherwise you'll have to start it manually when you start the movie.
The clip can only be attached to one single AudioSource.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MovieTexture.loop">
      <summary>
        <para>Set this to true to make the movie loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MovieTexture.isPlaying">
      <summary>
        <para>Returns whether the movie is playing or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MovieTexture.isReadyToPlay">
      <summary>
        <para>If the movie is downloading from a web site, this returns if enough data has been downloaded so playback should be able to start without interruptions.</para>
        <para>For movies not associated with a web stream, this value always returns true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MovieTexture.duration">
      <summary>
        <para>The time, in seconds, that the movie takes to play back completely.</para>
        <para>Note that duration is only available once the movie has started.  Until then duration will return -1.  If you need to know the duration of a movie before it is played, consider extracting this information offline and creating a text asset.  You can then look up the duration given the movie name.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WebCamDevice">
      <summary>
        <para>A structure describing the webcam device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamDevice.name">
      <summary>
        <para>A human-readable name of the device. Varies across different systems.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamDevice.isFrontFacing">
      <summary>
        <para>True if camera faces the same direction a screen does, false otherwise.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WebCamTexture">
      <summary>
        <para>WebCam Textures are textures onto which the live video input is rendered.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Create a WebCamTexture.</para>
        <para>Use WebCamTexture.devices to get a list of the names of available camera devices. If no device name is supplied to the constructor or is passed as a null string, the first device found will be used.The requested width, height and framerate specified by the parameters may not be supported by the chosen camera. In such cases, the closest available values will be used.Note: if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.Note: if you want to use WebCamTexture to play the camera stream from device connected through Unity Remote, then you must initalize it through the constructor. Later it's not possible to change device using WebCamTexture.deviceName from regular devices to remote devices and vice versa.</para>
      </summary>
      <param name="deviceName">The name of the video input device to be used.</param>
      <param name="requestedWidth">The requested width of the texture.</param>
      <param name="requestedHeight">The requested height of the texture.</param>
      <param name="requestedFPS">The requested frame rate of the texture.</param>
    </member>
    <member name="M:UnityEngine.WebCamTexture.#ctor(System.String,System.Int32,System.Int32)">
      <summary>
        <para>Create a WebCamTexture.</para>
        <para>Use WebCamTexture.devices to get a list of the names of available camera devices. If no device name is supplied to the constructor or is passed as a null string, the first device found will be used.The requested width, height and framerate specified by the parameters may not be supported by the chosen camera. In such cases, the closest available values will be used.Note: if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.Note: if you want to use WebCamTexture to play the camera stream from device connected through Unity Remote, then you must initalize it through the constructor. Later it's not possible to change device using WebCamTexture.deviceName from regular devices to remote devices and vice versa.</para>
      </summary>
      <param name="deviceName">The name of the video input device to be used.</param>
      <param name="requestedWidth">The requested width of the texture.</param>
      <param name="requestedHeight">The requested height of the texture.</param>
    </member>
    <member name="M:UnityEngine.WebCamTexture.#ctor(System.String)">
      <summary>
        <para>Create a WebCamTexture.</para>
        <para>Use WebCamTexture.devices to get a list of the names of available camera devices. If no device name is supplied to the constructor or is passed as a null string, the first device found will be used.The requested width, height and framerate specified by the parameters may not be supported by the chosen camera. In such cases, the closest available values will be used.Note: if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.Note: if you want to use WebCamTexture to play the camera stream from device connected through Unity Remote, then you must initalize it through the constructor. Later it's not possible to change device using WebCamTexture.deviceName from regular devices to remote devices and vice versa.</para>
      </summary>
      <param name="deviceName">The name of the video input device to be used.</param>
    </member>
    <member name="M:UnityEngine.WebCamTexture.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Create a WebCamTexture.</para>
        <para>Use WebCamTexture.devices to get a list of the names of available camera devices. If no device name is supplied to the constructor or is passed as a null string, the first device found will be used.The requested width, height and framerate specified by the parameters may not be supported by the chosen camera. In such cases, the closest available values will be used.Note: if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.Note: if you want to use WebCamTexture to play the camera stream from device connected through Unity Remote, then you must initalize it through the constructor. Later it's not possible to change device using WebCamTexture.deviceName from regular devices to remote devices and vice versa.</para>
      </summary>
      <param name="requestedWidth">The requested width of the texture.</param>
      <param name="requestedHeight">The requested height of the texture.</param>
      <param name="requestedFPS">The requested frame rate of the texture.</param>
    </member>
    <member name="M:UnityEngine.WebCamTexture.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Create a WebCamTexture.</para>
        <para>Use WebCamTexture.devices to get a list of the names of available camera devices. If no device name is supplied to the constructor or is passed as a null string, the first device found will be used.The requested width, height and framerate specified by the parameters may not be supported by the chosen camera. In such cases, the closest available values will be used.Note: if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.Note: if you want to use WebCamTexture to play the camera stream from device connected through Unity Remote, then you must initalize it through the constructor. Later it's not possible to change device using WebCamTexture.deviceName from regular devices to remote devices and vice versa.</para>
      </summary>
      <param name="requestedWidth">The requested width of the texture.</param>
      <param name="requestedHeight">The requested height of the texture.</param>
    </member>
    <member name="M:UnityEngine.WebCamTexture.#ctor">
      <summary>
        <para>Create a WebCamTexture.</para>
        <para>Use WebCamTexture.devices to get a list of the names of available camera devices. If no device name is supplied to the constructor or is passed as a null string, the first device found will be used.The requested width, height and framerate specified by the parameters may not be supported by the chosen camera. In such cases, the closest available values will be used.Note: if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.Note: if you want to use WebCamTexture to play the camera stream from device connected through Unity Remote, then you must initalize it through the constructor. Later it's not possible to change device using WebCamTexture.deviceName from regular devices to remote devices and vice versa.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.Play">
      <summary>
        <para>Starts the camera.</para>
        <para>Note that if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.Pause">
      <summary>
        <para>Pauses the camera.</para>
        <para>Note that if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.Stop">
      <summary>
        <para>Stops the camera.</para>
        <para>Note that if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.MarkNonReadable">
      <summary>
        <para>Marks WebCamTexture as unreadable (no GetPixel* functions will be available (iOS only)).</para>
        <para>This might allow unity to do some optimizations. On the other hand, as we skip almost all processing of WebCam data, you need to check videoVerticallyMirrored property for possible mirroring.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixel(System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel color at coordinates (x, y).</para>
        <para>If the pixel coordinates are out of bounds (larger than width/height or small than 0),
they will be clamped or repeat based on the texture's wrap mode.If you are reading a large block of pixels from the texture, it may be faster
to use GetPixels which returns a whole block of pixel colors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixels">
      <summary>
        <para>Get a block of pixel colors.</para>
        <para>This function returns an array of pixel colors of the whole
mip level of the texture.The returned array is a flattened 2D array, where pixels are laid out left to right,
top to bottom (i.e. row after row). Array size is width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipWidth=max(1,width&amp;gt;&amp;gt;miplevel)
and similarly for height.Using GetPixels can be faster than calling GetPixel repeatedly, especially
for large textures. In addition, GetPixels can access individual mipmap levels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixels(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Get a block of pixel colors.</para>
        <para>This function is an extended version of GetPixels above; it does not return the whole
mip level but only blockWidth by blockHeight region starting at x,y.
The block must fit into the used mip level. The returned array is blockWidth*blockHeight size.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixels32(UnityEngine.Color32[])">
      <summary>
        <para>Returns the pixels data in raw format.</para>
        <para>This can be faster then calling GetPixels, as pixel data does not have to be converted to color structs,
so you may want to use it if you need to do continuous processing on the video feed.
You can optionally pass in an array of Color32s to use in colors to avoid allocating new memory each frame,
which is faster when you are continuously reading data from the camera.
The array needs to be initialized to a length matching width * height of the texture. If you don't pass an 
array, GetPixels32 will allocate one for you and return it.</para>
      </summary>
      <param name="colors">Optional array to receive pixel data.</param>
    </member>
    <member name="M:UnityEngine.WebCamTexture.GetPixels32">
      <summary>
        <para>Returns the pixels data in raw format.</para>
        <para>This can be faster then calling GetPixels, as pixel data does not have to be converted to color structs,
so you may want to use it if you need to do continuous processing on the video feed.
You can optionally pass in an array of Color32s to use in colors to avoid allocating new memory each frame,
which is faster when you are continuously reading data from the camera.
The array needs to be initialized to a length matching width * height of the texture. If you don't pass an 
array, GetPixels32 will allocate one for you and return it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.isPlaying">
      <summary>
        <para>Returns if the camera is currently playing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.deviceName">
      <summary>
        <para>Set this to specify the name of the device to use.</para>
        <para>This only has an effect when set while the camera is not running.Note: if you want to use WebCamTexture to get the camera stream from device connected through Unity Remote, then you must initalize it through the constructor. It's not possible to change device using WebCamTexture.deviceName from regular devices to remote devices and vice versa.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.requestedFPS">
      <summary>
        <para>Set the requested frame rate of the camera device (in frames per second).</para>
        <para>It will use a closest frame rate to the one requested which is supported by the camera.
The requested values only have an effect when set while the camera is not running.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.requestedWidth">
      <summary>
        <para>Set the requested width of the camera device.</para>
        <para>It will use a closest resolution to the one requested which is supported by the camera.
The requested values only have an effect when set while the camera is not running.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.requestedHeight">
      <summary>
        <para>Set the requested height of the camera device.</para>
        <para>It will use a closest resolution to the one requested which is supported by the camera.
The requested values only have an effect when set while the camera is not running.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.isReadable">
      <summary>
        <para>Returns if the WebCamTexture is non-readable. (iOS only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.devices">
      <summary>
        <para>Return a list of available devices.</para>
        <para>This queries the system for the list of devices connected and it can be slow.
You should cache this value by keeping a copy of the result if you want to use it repeatedly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.videoRotationAngle">
      <summary>
        <para>Returns an clockwise angle, which can be used to rotate a polygon so camera contents are shown in correct orientation.</para>
        <para>Note that if you want to use WebCamTextures in the web player, you need to get the user's
permission to do so. Call Application.RequestUserAuthorization before creating a
WebCamTexture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.videoVerticallyMirrored">
      <summary>
        <para>Returns if the texture image is vertically flipped.</para>
        <para>Please note, that this will query platform-specific part, which might be not ready before actual video feed started; so it is not enough to call it once after play.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WebCamTexture.didUpdateThisFrame">
      <summary>
        <para>Did the video buffer update this frame?</para>
        <para>Use this to check if the video buffer has changed since the last frame. When setting a low frame rate,
it is likely that the video updates slower then the game, so it does not make sense to do expensive video
processing in each Update call, so check this value before doing any processing.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationClipPair">
      <summary>
        <para>This class define a pair of clip used by See Also: AnimationSet.</para>
        <para>Each original clip from the controller can be overriden with another clip.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationClipPair.originalClip">
      <summary>
        <para>The original clip from the controller.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationClipPair.overrideClip">
      <summary>
        <para>The override animation clip.</para>
        <para>Can be null if no override is define.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorOverrideController">
      <summary>
        <para>Interface to control AnimatorOverrideController.</para>
        <para>AnimatorOverrideController are used to override clips from a controller to specialize some animations for a given avatar.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorOverrideController.PerformOverrideClipListCleanup" />
    <member name="P:UnityEngine.AnimatorOverrideController.runtimeAnimatorController">
      <summary>
        <para>The Controller that the AnimatorOverrideController overrides.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorOverrideController.clips">
      <summary>
        <para>Returns the list of orignal clip from the controller and their override clip.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WrapMode">
      <summary>
        <para>Determines how time is treated outside of the keyframed range of an <see cref="AnimationClip">AnimationClip</see> or <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>The WrapMode that the animation system uses for a specific animation is determined this way:
You can set the WrapMode of an AnimationClip in the import settings of the clip. This is the recommended way to control the WrapMode.
When an AnimationState is created, it inherits its WrapMode from the AnimationClip it is created from, but you can also change it from code.
If the WrapMode of an AnimationState is set to Default, the animation system will use the WrapMode from the Animation component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.Once">
      <summary>
        <para>When time reaches the end of the animation clip, the clip will automatically stop playing and time will be reset to beginning of the clip.</para>
        <para>Note that when playing backwards and when the time reaches the beginning the clip will automatically stop playing, but the time won't be 
reset to the end - it will be kept at the beginning.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.Loop">
      <summary>
        <para>When time reaches the end of the animation clip, time will continue at the beginning.</para>
        <para>When playing backwards it will do the opposite - it will jump to the end of the clip and continue from there.
The animation will never automatically stop playing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.PingPong">
      <summary>
        <para>When time reaches the end of the animation clip, time will ping pong back between beginning and end.</para>
        <para>It has same behaviour when playing backwards - when time reaches the beginning of the animation clip, time will ping pong back 
between beginning and end. The animation will never automatically stop playing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.Default">
      <summary>
        <para>Reads the default repeat mode set higher up.</para>
        <para>If you haven't changed wrapMode on AnimationClip or on Animation, then WrapMode.Default resolves to WrapMode.Once.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.WrapMode.ClampForever">
      <summary>
        <para>Plays back the animation. When it reaches the end, it will keep playing the last frame and never stop playing.</para>
        <para>When playing backwards it will reach the first frame and will keep playing that.
This is useful for additive animations, which should never be stopped when they reach the maximum.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationEvent">
      <summary>
        <para>AnimationEvent lets you call a script function similar to SendMessage as part of playing back an animation.</para>
        <para>Animation events support functions that take zero or one parameter.
The parameter can be a float, an int, a string, an object reference, or an AnimationEvent.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationEvent.#ctor">
      <summary>
        <para>Creates a new animation event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.stringParameter">
      <summary>
        <para>String parameter that is stored in the event and will be sent to the function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.floatParameter">
      <summary>
        <para>Float parameter that is stored in the event and will be sent to the function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.intParameter">
      <summary>
        <para>Int parameter that is stored in the event and will be sent to the function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.objectReferenceParameter">
      <summary>
        <para>Object reference parameter that is stored in the event and will be sent to the function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.functionName">
      <summary>
        <para>The name of the function that will be called.</para>
        <para>This is the same as calling gameObject.SendMessage(animationEvent.functionName, animationEvent).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.time">
      <summary>
        <para>The time at which the event will be fired off.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.messageOptions">
      <summary>
        <para>Function call options.</para>
        <para>If options are set to SendMessageOptions.RequireReceiver (default), an error is printed when the message is not picked up by any component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationEvent.animationState">
      <summary>
        <para>The animation state that fired this event (Read Only).</para>
        <para>Returns null when the method is called outside of an animation event callback.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationClip">
      <summary>
        <para>Stores keyframe based animations.</para>
        <para>AnimationClip is used by Animation to play back animations.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationClip.#ctor">
      <summary>
        <para>Creates a new animation clip.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationClip.SetCurve(System.String,System.Type,System.String,UnityEngine.AnimationCurve)">
      <summary>
        <para>Assigns the curve to animate a specific property.</para>
        <para>If curve is null the curve will be removed. If a curve already exists
for that property, it will be replaced.Common names are: "localPosition.x", "localPosition.y", "localPosition.z",
"localRotation.x", "localRotation.y", "localRotation.z", "localRotation.w""localScale.x", "localScale.y", "localScale.z".</para>
      </summary>
      <param name="type">The class type of the component that is animated.</param>
      <param name="propertyName">The name or path to the property being animated.</param>
      <param name="curve">The animation curve.</param>
      <param name="relativePath">Path to the game object this curve applies to. <c>relativePath</c> is formatted similar to a pathname, e.g. "root<c>relativePath</c>leftArm".
If <c>relativePath</c> is empty it refers to the game object the animation clip is attached to.</param>
    </member>
    <member name="M:UnityEngine.AnimationClip.EnsureQuaternionContinuity">
      <summary>
        <para>In order to insure better interpolation of quaternions, call this function after you are finished setting animation curves.</para>
        <para>The functions realigns quaternion keys to ensure shortest interpolation path.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationClip.ClearCurves">
      <summary>
        <para>Clears all curves from the clip.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationClip.AddEvent(UnityEngine.AnimationEvent)">
      <summary>
        <para>Adds an animation event to the clip.</para>
        <para>Note that events added with AddEvent will only persist until play mode
is exited of player is quit. If you want to add an event to a clip persistently,
use AnimationUtility.SetAnimationEvents from the Unity editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.length">
      <summary>
        <para>Animation length in seconds. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.frameRate">
      <summary>
        <para>Frame rate at which keyframes are sampled. (Read Only)</para>
        <para>This is the frame rate that was used in the
animation program you used to create the animation or model.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.wrapMode">
      <summary>
        <para>Sets the default wrap mode used in the animation state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationClip.localBounds">
      <summary>
        <para>AABB of this Animation Clip in local space of Animation component that it is attached too.</para>
        <para>It is precomputed on import for imported models/animations based on the meshes that this animation clip affects. 
This bounding box is specific to the mesh(es) that this clip is attached to during import, i.e. this means
that it is calculated based on the file that is part of and on the "Model" file if you're using
Model@Animation notation.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Keyframe">
      <summary>
        <para>A single keyframe that can be injected into an animation curve.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Keyframe.#ctor(System.Single,System.Single)">
      <summary>
        <para>Create a keyframe.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Keyframe.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Create a keyframe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.time">
      <summary>
        <para>The time of the keyframe.</para>
        <para>In a 2D graph you could think of this as the x-value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.value">
      <summary>
        <para>The value of the curve at keyframe.</para>
        <para>In a 2D graph you could think of this as the y-value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.inTangent">
      <summary>
        <para>Describes the tangent when approaching this point from the previous point in the curve.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.outTangent">
      <summary>
        <para>Describes the tangent when leaving this point towards the next point in the curve.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Keyframe.tangentMode" />
    <member name="T:UnityEngine.AnimationCurve">
      <summary>
        <para>A collection of curves form an <see cref="AnimationClip">AnimationClip</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.#ctor(UnityEngine.Keyframe[])">
      <summary>
        <para>Creates an animation curve from arbitrary number of keyframes.</para>
        <para>This creates a curve from variable number of Keyframe parameters. If you want to create curve
from an array of keyframes, create an empty curve and assign keys property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.#ctor">
      <summary>
        <para>Creates an empty animation curve.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.Evaluate(System.Single)">
      <summary>
        <para>Evaluate the curve at <c>time</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.AddKey(System.Single,System.Single)">
      <summary>
        <para>Add a new key to the curve.</para>
        <para>Smooth tangents are automatically computed for the key.
Returns the index of the added key.
If no key could be added because there is already another keyframe at the same time -1 will be returned.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.AddKey(UnityEngine.Keyframe)">
      <summary>
        <para>Add a new key to the curve.</para>
        <para>Returns the index of the added key.
If no key could be added because there is already another keyframe at the same time -1 will be returned.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.MoveKey(System.Int32,UnityEngine.Keyframe)">
      <summary>
        <para>Removes the keyframe at <c>index</c> and inserts key.</para>
        <para>If a keyframe already exists at /key.time/ the time of the old keyframe's position
/key[index].time/ will be used instead.
This is the desired behaviour for dragging keyframes in a curve editor.
Returns the index of the keyframe after moving it.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.RemoveKey(System.Int32)">
      <summary>
        <para>Removes a key.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.SmoothTangents(System.Int32,System.Single)">
      <summary>
        <para>Smooth the in and out tangents of the keyframe at <c>index</c>.</para>
        <para>A weight of 0 evens out tangents.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.Linear(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>A straight Line starting at <c>timeStart</c>, <c>valueStart</c> and ending at <c>timeEnd</c>, <c>valueEnd</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationCurve.EaseInOut(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>An ease-in and out curve starting at <c>timeStart</c>, <c>valueStart</c> and ending at <c>timeEnd</c>, <c>valueEnd</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationCurve.keys">
      <summary>
        <para>All keys defined in the animation curve.</para>
        <para>This lets you clear, add or remove any keys from the array.
If keys are not sorted by time, they will be automatically sorted on assignment.Note that the array is "by value", i.e. getting keys returns a copy of all keys
and setting keys copies them into the curve.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationCurve.length">
      <summary>
        <para>The number of keys in the curve. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationCurve.preWrapMode">
      <summary>
        <para>The behaviour of the animation before the first keyframe.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationCurve.postWrapMode">
      <summary>
        <para>The behaviour of the animation after the last keyframe.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayMode">
      <summary>
        <para>Used by Animation.Play function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PlayMode.StopSameLayer">
      <summary>
        <para>Will stop all animations that were started in the same layer. This is the default when playing animations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PlayMode.StopAll">
      <summary>
        <para>Will stop all animations that were started with this component before playing.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.QueueMode">
      <summary>
        <para>Used by Animation.Play function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.QueueMode.CompleteOthers">
      <summary>
        <para>Will start playing after all other animations have stopped playing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.QueueMode.PlayNow">
      <summary>
        <para>Starts playing immediately. This can be used if you just want to quickly create a duplicate animation.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationBlendMode">
      <summary>
        <para>Used by Animation.Play function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationBlendMode.Blend">
      <summary>
        <para>Animations will be blended.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationBlendMode.Additive">
      <summary>
        <para>Animations will be added.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationCullingType">
      <summary>
        <para>This enum controlls culling of Animation component.</para>
        <para>When culling is enabled, Unity might stop animating if it thinks that the results of the animation won't be visible to the user.
This could save you some performance if you have things animating outside of the viewport, whose animation is only important
when the user can actually see the thing that is being animated. When Animation component is culled it
won't do anything: it won't update animation states, execute events or sample animations.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationCullingType.AlwaysAnimate">
      <summary>
        <para>Animation culling is disabled - object is animated even when offscreen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationCullingType.BasedOnRenderers">
      <summary>
        <para>Animation is disabled when renderers are not visible.</para>
        <para>This culling method is more suitable when you have renderers attached after import - it will take 
renderers (like mesh renderers, particle renderers and so on) attached to this gameObject or children 
of this game object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationCullingType.BasedOnClipBounds">
      <summary>
        <para>Animation is disabled when <see cref="Animation-localBounds">Animation.localBounds</see> are not visible.</para>
        <para>When this type of culling is used Animation.localBounds will be based on bounds of attached clips
which are precalculated on import. This culling method works better 
than BasedOnRenderers, because animation can push itself into the camera frustum.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimationCullingType.BasedOnUserBounds">
      <summary>
        <para>Animation is disabled when <see cref="Animation-localBounds">Animation.localBounds</see> are not visible.</para>
        <para>Animation.localBounds can be set by user, when culling is set to BasedOnUserBounds.
This culling method works better than BasedOnRenderers, because animation can push itself into the camera frustum.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Animation">
      <summary>
        <para>The animation component is used to play back animations.</para>
        <para>You can assign animation clips to the animation component and control playback from your script.
The animation system in Unity is weight based and supports:
Animation Blending, Additive animations, Animation Mixing, Layers and full control over all aspects of animation playback.For an overview of animation scripting in Unity please read this introduction.To play a simple animation use Animation.Play
To cross-fade between animations use Animation.CrossFade
To change how animations wrap (Loop, Once, PingPong) change the WrapMode of the respective AnimationClips in their import settings, or use AnimationState.wrapMode to change it at runtime.AnimationState can be used to change the layer of an animation, modify playback speed, and for direct control over blending and mixing.Animation also supports enumerators so you can loop through all AnimationStates like this:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Stop">
      <summary>
        <para>Stops all playing animations that were started with this Animation.</para>
        <para>Stopping an animation also Rewinds it to the Start.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Stop(System.String)">
      <summary>
        <para>Stops an animation named <c>name</c>.</para>
        <para>Stopping an animation also Rewinds it to the Start.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Rewind(System.String)">
      <summary>
        <para>Rewinds the animation named <c>name</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Rewind">
      <summary>
        <para>Rewinds all animations.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Sample">
      <summary>
        <para>Samples animations at the current state.</para>
        <para>This is useful when you explicitly want to set up some animation state, and sample it once.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.IsPlaying(System.String)">
      <summary>
        <para>Is the animation named <c>name</c> playing?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Play">
      <summary>
        <para>Plays animation without any blending.</para>
        <para>Play() will start animation with name animation, or play the default animation.
The animation will be played abruptly without any blending.If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped.
If mode is PlayMode.StopAll then all animations currently playing will be stopped.If the animation is already playing, other animations will be stopped but the animation
will not rewind to the beginning.If the animation is not set to be looping it will be stopped and rewinded after playing.Play() will return false if animation can't be played (no animation clip or no default animation).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Play(UnityEngine.PlayMode)">
      <summary>
        <para>Plays animation without any blending.</para>
        <para>Play() will start animation with name animation, or play the default animation.
The animation will be played abruptly without any blending.If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped.
If mode is PlayMode.StopAll then all animations currently playing will be stopped.If the animation is already playing, other animations will be stopped but the animation
will not rewind to the beginning.If the animation is not set to be looping it will be stopped and rewinded after playing.Play() will return false if animation can't be played (no animation clip or no default animation).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Play(System.String,UnityEngine.PlayMode)">
      <summary>
        <para>Plays animation without any blending.</para>
        <para>Play() will start animation with name animation, or play the default animation.
The animation will be played abruptly without any blending.If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped.
If mode is PlayMode.StopAll then all animations currently playing will be stopped.If the animation is already playing, other animations will be stopped but the animation
will not rewind to the beginning.If the animation is not set to be looping it will be stopped and rewinded after playing.Play() will return false if animation can't be played (no animation clip or no default animation).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Play(System.String)">
      <summary>
        <para>Plays animation without any blending.</para>
        <para>Play() will start animation with name animation, or play the default animation.
The animation will be played abruptly without any blending.If mode is PlayMode.StopSameLayer then all animations in the same layer will be stopped.
If mode is PlayMode.StopAll then all animations currently playing will be stopped.If the animation is already playing, other animations will be stopped but the animation
will not rewind to the beginning.If the animation is not set to be looping it will be stopped and rewinded after playing.Play() will return false if animation can't be played (no animation clip or no default animation).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.CrossFade(System.String,System.Single,UnityEngine.PlayMode)">
      <summary>
        <para>Fades the animation with name <c>animation</c> in over a period of <c>time</c> seconds and fades other animations out.</para>
        <para>If mode is PlayMode.StopSameLayer, animations in the same layer as animation will be faded out while animation is faded in.
if mode is PlayMode.StopAll, all animations will be faded out while animation is faded in.If the animation is not set to be looping it will be stopped and rewinded after playing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.CrossFade(System.String,System.Single)">
      <summary>
        <para>Fades the animation with name <c>animation</c> in over a period of <c>time</c> seconds and fades other animations out.</para>
        <para>If mode is PlayMode.StopSameLayer, animations in the same layer as animation will be faded out while animation is faded in.
if mode is PlayMode.StopAll, all animations will be faded out while animation is faded in.If the animation is not set to be looping it will be stopped and rewinded after playing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.CrossFade(System.String)">
      <summary>
        <para>Fades the animation with name <c>animation</c> in over a period of <c>time</c> seconds and fades other animations out.</para>
        <para>If mode is PlayMode.StopSameLayer, animations in the same layer as animation will be faded out while animation is faded in.
if mode is PlayMode.StopAll, all animations will be faded out while animation is faded in.If the animation is not set to be looping it will be stopped and rewinded after playing.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Blend(System.String,System.Single,System.Single)">
      <summary>
        <para>Blends the animation named <c>animation</c> towards <c>targetWeight</c> over the next <c>time</c> seconds.</para>
        <para>Playback of other animations will not be affected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Blend(System.String,System.Single)">
      <summary>
        <para>Blends the animation named <c>animation</c> towards <c>targetWeight</c> over the next <c>time</c> seconds.</para>
        <para>Playback of other animations will not be affected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.Blend(System.String)">
      <summary>
        <para>Blends the animation named <c>animation</c> towards <c>targetWeight</c> over the next <c>time</c> seconds.</para>
        <para>Playback of other animations will not be affected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String,System.Single,UnityEngine.QueueMode,UnityEngine.PlayMode)">
      <summary>
        <para>Cross fades an animation after previous animations has finished playing.</para>
        <para>For example you might play a specific sequence of animations after each other.The animation duplicates itself before playing thus you can fade between the same animation. 
This can be used to overlay two same animations. For example you might have a sword swing animation.
The player slashes two times quickly after each other.
You could rewind the animation and play from the beginning but then you will get a jump in the animation.The following queue modes are available: 
If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. 
If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state.After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String,System.Single,UnityEngine.QueueMode)">
      <summary>
        <para>Cross fades an animation after previous animations has finished playing.</para>
        <para>For example you might play a specific sequence of animations after each other.The animation duplicates itself before playing thus you can fade between the same animation. 
This can be used to overlay two same animations. For example you might have a sword swing animation.
The player slashes two times quickly after each other.
You could rewind the animation and play from the beginning but then you will get a jump in the animation.The following queue modes are available: 
If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. 
If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state.After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String,System.Single)">
      <summary>
        <para>Cross fades an animation after previous animations has finished playing.</para>
        <para>For example you might play a specific sequence of animations after each other.The animation duplicates itself before playing thus you can fade between the same animation. 
This can be used to overlay two same animations. For example you might have a sword swing animation.
The player slashes two times quickly after each other.
You could rewind the animation and play from the beginning but then you will get a jump in the animation.The following queue modes are available: 
If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. 
If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state.After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.CrossFadeQueued(System.String)">
      <summary>
        <para>Cross fades an animation after previous animations has finished playing.</para>
        <para>For example you might play a specific sequence of animations after each other.The animation duplicates itself before playing thus you can fade between the same animation. 
This can be used to overlay two same animations. For example you might have a sword swing animation.
The player slashes two times quickly after each other.
You could rewind the animation and play from the beginning but then you will get a jump in the animation.The following queue modes are available: 
If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. 
If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state.After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.PlayQueued(System.String,UnityEngine.QueueMode,UnityEngine.PlayMode)">
      <summary>
        <para>Plays an animation after previous animations has finished playing.</para>
        <para>For example you might play a specific sequeue of animations after each other.The animation state duplicates itself before playing thus you can fade between the same animation.
This can be used to overlay two same animations. For example you might have a sword swing animation.
The player slashes two times quickly after each other.
You could rewind the animation and play from the beginning but then you will get a jump in the animation.The following queue modes are available: 
If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. 
If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state.After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.PlayQueued(System.String,UnityEngine.QueueMode)">
      <summary>
        <para>Plays an animation after previous animations has finished playing.</para>
        <para>For example you might play a specific sequeue of animations after each other.The animation state duplicates itself before playing thus you can fade between the same animation.
This can be used to overlay two same animations. For example you might have a sword swing animation.
The player slashes two times quickly after each other.
You could rewind the animation and play from the beginning but then you will get a jump in the animation.The following queue modes are available: 
If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. 
If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state.After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.PlayQueued(System.String)">
      <summary>
        <para>Plays an animation after previous animations has finished playing.</para>
        <para>For example you might play a specific sequeue of animations after each other.The animation state duplicates itself before playing thus you can fade between the same animation.
This can be used to overlay two same animations. For example you might have a sword swing animation.
The player slashes two times quickly after each other.
You could rewind the animation and play from the beginning but then you will get a jump in the animation.The following queue modes are available: 
If queue is QueueMode.CompleteOthers this animation will only start once all other animations have stopped playing. 
If queue is QueueMode.PlayNow this animation will start playing immediately on a duplicated animation state.After the animation has finished playing it will automatically clean itself up. Using the duplicated animation state after it has finished will result in an exception.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.AddClip(UnityEngine.AnimationClip,System.String)">
      <summary>
        <para>Adds a <c>clip</c> to the animation with name <c>newName</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.AddClip(UnityEngine.AnimationClip,System.String,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Adds <c>clip</c> to the only play between <c>firstFrame</c> and <c>lastFrame</c>. The new clip will also be added to the animation with name <c>newName</c>.</para>
        <para>If a clip with that name already exists it will be replaced with the new clip.</para>
      </summary>
      <param name="addLoopFrame">Should an extra frame be inserted at the end that matches the first frame? Turn this on if you are making a looping animation.</param>
    </member>
    <member name="M:UnityEngine.Animation.AddClip(UnityEngine.AnimationClip,System.String,System.Int32,System.Int32)">
      <summary>
        <para>Adds <c>clip</c> to the only play between <c>firstFrame</c> and <c>lastFrame</c>. The new clip will also be added to the animation with name <c>newName</c>.</para>
        <para>If a clip with that name already exists it will be replaced with the new clip.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.RemoveClip(UnityEngine.AnimationClip)">
      <summary>
        <para>Remove clip from the animation list.</para>
        <para>This willl remove the clip and any animation states based on it.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.RemoveClip(System.String)">
      <summary>
        <para>Remove clip from the animation list.</para>
        <para>This willl remove the animation state that match the name.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animation.GetClipCount">
      <summary>
        <para>Get the number of clips currently assigned to this animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.clip">
      <summary>
        <para>The default animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.playAutomatically">
      <summary>
        <para>Should the default animation clip (Animation.clip) automatically start playing on startup.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.wrapMode">
      <summary>
        <para>How should time beyond the playback range of the clip be treated?</para>
        <para>WrapMode.Default: Read's the wrap mode from the clip (default for a clip is Once).
WrapMode.Once: Stops the animation when time reaches the end.
WrapMode.Loop: Starts at the beginning when time reaches the end.
WrapMode.PingPong: Ping Pong's back and forth between beginning and end.
WrapMode.ClampForever: Plays back the animation. When it reaches the end, it will keep sampling the last frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.isPlaying">
      <summary>
        <para>Are we playing any animations?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.animatePhysics">
      <summary>
        <para>When turned on, animations will be executed in the physics loop. This is only useful in conjunction with kinematic rigidbodies.</para>
        <para>An animated platform can apply velocity and friction to rigid bodies sitting on top of it.
In order to use this,  animatePhysics must be enabled and animated object must be a kinematic rigid body.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.cullingType">
      <summary>
        <para>Controls culling of this Animation component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animation.localBounds">
      <summary>
        <para>AABB of this Animation animation component in local space.</para>
        <para>By default it is computed based on animation states (i.e. attached animation clips), unless user overrides it by setting
value to localBounds. You can switch back to precomputed bounds by setting cullingType to AnimationCullingType.BasedOnClipBounds.
Value of localBounds is undefined when cullingType is not set to AnimationCullingType.BasedOnClipBounds or AnimationCullingType.BasedOnUserBounds.
When setting localBounds cullingType will be set to AnimationCullingType.BasedOnUserBounds automatically.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationState">
      <summary>
        <para>The AnimationState gives full control over animation blending.</para>
        <para>In most cases the Animation interface is sufficient and easier to use.
Use the AnimationState if you need full control over the animation blending any playback process.The AnimationState interface allows you to modify speed, weight, time and layers while any animation is playing.
You can also setup animation mixing and wrapMode.The Animation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationState.AddMixingTransform(UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.</para>
        <para>For example you might have a handwaving animation.
You might want to play the hand waving animation on a idle character or on a walking character.
Either you have to create 2 hand waving animations one for idle, one for walking.
By using mixing the hand waving animation will have full control of the shoulder. But the lower body will not be affected by it, and continue playing the idle or walk animation.
Thus you only need one hand waving animation.If recursive is true all children of the mix transform will also be animated.
If you don't call AddMixingTransform, all animation curves will be used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationState.AddMixingTransform(UnityEngine.Transform)">
      <summary>
        <para>Adds a transform which should be animated. This allows you to reduce the number of animations you have to create.</para>
        <para>For example you might have a handwaving animation.
You might want to play the hand waving animation on a idle character or on a walking character.
Either you have to create 2 hand waving animations one for idle, one for walking.
By using mixing the hand waving animation will have full control of the shoulder. But the lower body will not be affected by it, and continue playing the idle or walk animation.
Thus you only need one hand waving animation.If recursive is true all children of the mix transform will also be animated.
If you don't call AddMixingTransform, all animation curves will be used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimationState.RemoveMixingTransform(UnityEngine.Transform)">
      <summary>
        <para>Removes a transform which should be animated.</para>
        <para>You can only pass transforms that have been added through AddMixingTransform function. If transform has been 
added as recursive, then it will be removed as recursive. Once you remove all mixing transforms added to 
animation state all curves become animated again.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.enabled">
      <summary>
        <para>Enables / disables the animation.</para>
        <para>For the animation to take any effect the weight also needs to be set to a value higher than zero.
If the animation is disabled, time will be paused until the animation is enabled again.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.weight">
      <summary>
        <para>The weight of animation.</para>
        <para>This calculates the blend weights for one curve.Weights are distributed so that the top layer gets everything.
If it doesn't use the full weight then the next layer gets to distribute the remaining
weights and so on. Once all weights are used by the top layers,
no weights will be available for lower layers anymore
Unity uses fair weighting, which means if a lower layer wants 80% and 50% have already been used up, the layer will NOT use up all weights.
instead it will take up 80% of the 50%.Example:
a upper body which is affected by wave, walk and idle
a lower body which is affected by only walk and idle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.wrapMode">
      <summary>
        <para>Wrapping mode of the animation.</para>
        <para>By default wrapMode is initialized to the value set in the Animation component's wrap mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.time">
      <summary>
        <para>The current time of the animation.</para>
        <para>If the time is larger than length it will be wrapped according to wrapMode.
The value can be larger than the animations length.
In this case playback mode will remap the time before sampling.
This value usually goes from 0 to infinity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.normalizedTime">
      <summary>
        <para>The normalized time of the animation.</para>
        <para>A value of 1 is the end of the animation. A value of 0.5 is the middle of the animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.speed">
      <summary>
        <para>The playback speed of the animation. 1 is normal playback speed.</para>
        <para>A negative playback speed will play the animation backwards.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.normalizedSpeed">
      <summary>
        <para>The normalized playback speed.</para>
        <para>This is most commonly used to synchronize playback speed when blending between two animations.
In most cases it is easier and better to use animation.SyncLayer instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.length">
      <summary>
        <para>The length of the animation clip in seconds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.clip">
      <summary>
        <para>The clip that is being played by this animation state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.name">
      <summary>
        <para>The name of the animation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationState.blendMode">
      <summary>
        <para>Which blend mode should be used?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GameObject">
      <summary>
        <para>Base class for all entities in Unity scenes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.#ctor(System.String)">
      <summary>
        <para>Creates a new game object, named <i>name</i>.</para>
        <para>A Transform is always added to the game object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.#ctor">
      <summary>
        <para>Creates a new game object.</para>
        <para>A Transform is always added to the game object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.#ctor(System.String,System.Type[])">
      <summary>
        <para>Creates a game object and attaches the specified components.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.SampleAnimation(UnityEngine.AnimationClip,System.Single)">
      <summary>
        <para>Samples an animation at a given time for any animated properties.</para>
        <para>It is recommended to use the Animation interface instead for performance reasons.
This will sample animation at the given time.
Any component properties that are animated in the clip will be replaced with the sampled value.
Most of the time you want to use Animation.Play instead. SampleAnimation is useful when you need to jump between frames in an unordered way or
based on some special input.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.CreatePrimitive(UnityEngine.PrimitiveType)">
      <summary>
        <para>Creates a game object with a primitive mesh renderer and appropriate collider.</para>
      </summary>
      <param name="type">The type of primitive object to create.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponent(System.Type)">
      <summary>
        <para>Returns the component of Type <c>type</c> if the game object has one attached, null if it doesn't.</para>
        <para>GetComponent is the primary way of accessing other components. From javascript the type of a script is always the name of the script as seen in the project view. You can access both builtin components or scripts with this function.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponent``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponent(System.String)">
      <summary>
        <para>Returns the component with name <c>type</c> if the game object has one attached, null if it doesn't.</para>
        <para>It is better to use GetComponent with a Type instead of a string for performance reasons.
Sometimes you might not be able to get to the type however, for example when trying to access a C# script from Javascript.
In that case you can simply access the component by name instead of type.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInChildren(System.Type)">
      <summary>
        <para>Returns the component of Type <c>type</c> in the GameObject or any of its children using depth first search.</para>
        <para>Only active components are returned.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInChildren``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInParent(System.Type)">
      <summary>
        <para>Finds component in the parent.</para>
        <para>Recurses upwards till it finds a valid component. Returns null if no component found.</para>
      </summary>
      <param name="type">Type of component to find.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentInParent``1">
      <summary>
        <para>Finds component in the parent.</para>
        <para>Recurses upwards till it finds a valid component. Returns null if no component found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponents(System.Type)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the GameObject.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponents``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren(System.Type)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the GameObject or any of its children.</para>
        <para>The search for components is carried out recursively on child objects, so it includes children of children, and so on.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren(System.Type,System.Boolean)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the GameObject or any of its children.</para>
        <para>The search for components is carried out recursively on child objects, so it includes children of children, and so on.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren``1(System.Boolean)">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInChildren``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInParent(System.Type)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the GameObject or any of its parents.</para>
        <para>The search for components is carried out recursively on parent objects, so it includes parents of parents, and so on.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInParent(System.Type,System.Boolean)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the GameObject or any of its parents.</para>
        <para>The search for components is carried out recursively on parent objects, so it includes parents of parents, and so on.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInParent``1(System.Boolean)">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.GameObject.GetComponentsInParent``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.SetActive(System.Boolean)">
      <summary>
        <para>Activates/Deactivates the GameObject.</para>
        <para>Note that a GameObject may be inactive because a parent is not active. In that case,
calling SetActive() will not activate it, but only set the local state of the GameObject, which
can be checked using GameObject.activeSelf. This state will then be used once all parents are
active.
Making a GameObject inactive will disable every component, turning off any attached renderers,
colliders, rigidbodies, scripts, etc...  Any scripts that you have attached to the GameObject
will no longer have Update() called, for example.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.CompareTag(System.String)">
      <summary>
        <para>Is this game object tagged with /tag/?</para>
      </summary>
      <param name="tag">The tag to compare.</param>
    </member>
    <member name="M:UnityEngine.GameObject.FindWithTag(System.String)">
      <summary>
        <para>Returns one active <see cref="GameObject">GameObject</see> tagged <c>tag</c>. Returns <c>null</c> if no GameObject was found.</para>
        <para>Tags must be declared in the tag manager before using them. A UnityException will be thrown if the tag does not exist or an empty string or null is passed as the tag.</para>
      </summary>
      <param name="tag">The tag to search for.</param>
    </member>
    <member name="M:UnityEngine.GameObject.FindGameObjectsWithTag(System.String)">
      <summary>
        <para>Returns a list of active GameObjects tagged <c>tag</c>. Returns empty array if no GameObject was found.</para>
        <para>Tags must be declared in the tag manager before using them.  A UnityException will be thrown if the tag does not exist or an empty string or null is passed as the tag.</para>
      </summary>
      <param name="tag">The name of the tag to search <c>GameObjects</c> for.</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object and on every ancestor of the behaviour.</para>
        <para>The receiving method can choose to ignore the argument by having zero parameters.
If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
      <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String,System.Object)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object and on every ancestor of the behaviour.</para>
        <para>The receiving method can choose to ignore the argument by having zero parameters.
If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessageUpwards(System.String)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object and on every ancestor of the behaviour.</para>
        <para>The receiving method can choose to ignore the argument by having zero parameters.
If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object.</para>
        <para>The receiving method can choose to ignore the argument by having zero parameters.
If options is set to SendMessageOptions.RequireReceiver an error is printed if the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
      <param name="options">Should an error be raised if the method doesn't exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessage(System.String,System.Object)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object.</para>
        <para>The receiving method can choose to ignore the argument by having zero parameters.
If options is set to SendMessageOptions.RequireReceiver an error is printed if the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
      <param name="value">An optional parameter value to pass to the called method.</param>
    </member>
    <member name="M:UnityEngine.GameObject.SendMessage(System.String)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object.</para>
        <para>The receiving method can choose to ignore the argument by having zero parameters.
If options is set to SendMessageOptions.RequireReceiver an error is printed if the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the SetActive function).</para>
      </summary>
      <param name="methodName">The name of the method to call.</param>
    </member>
    <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object or any of its children.</para>
        <para>The receiving method can choose to ignore parameter by having zero parameters.
If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String,System.Object)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object or any of its children.</para>
        <para>The receiving method can choose to ignore parameter by having zero parameters.
If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.BroadcastMessage(System.String)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object or any of its children.</para>
        <para>The receiving method can choose to ignore parameter by having zero parameters.
If options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.AddComponent(System.String)">
      <summary>
        <para>Adds a component class named <c>className</c> to the game object.</para>
        <para>Use this function to change behaviour of objects on the fly.
You can also add script to game objects by passing in the name of the script class.Some components require other components to exist in the same game object as well.
This function automatically adds any required components as well eg.
if you add a HingeJoint this will automatically add a Rigidbody as well.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.AddComponent(System.Type)">
      <summary>
        <para>Adds a component class of type <c>componentType</c> to the game object. C# Users can use a generic version.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.AddComponent``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GameObject.Find(System.String)">
      <summary>
        <para>Finds a game object by <c>name</c> and returns it.</para>
        <para>If no game object with name can be found, null is returned.
If name contains a '/' character it will traverse the hierarchy like a path name.
This function only returns active gameobjects.For performance reasons it is recommended to not use this function every frame
Instead cache the result in a member variable at startup or use GameObject.FindWithTag.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.isStatic">
      <summary>
        <para>Editor only API that specifies if a game object is static.</para>
        <para>Returns true if any of the static flags are set (</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.transform">
      <summary>
        <para>The <see cref="Transform">Transform</see> attached to this GameObject. (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.rigidbody">
      <summary>
        <para>The <see cref="Rigidbody">Rigidbody</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.rigidbody2D">
      <summary>
        <para>The Rigidbody2D component attached to this GameObject. (Read Only)</para>
        <para>This property will be null if no Rigidbody2D is attached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.camera">
      <summary>
        <para>The <see cref="Camera">Camera</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.light">
      <summary>
        <para>The <see cref="Light">Light</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.animation">
      <summary>
        <para>The <see cref="Animation">Animation</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.constantForce">
      <summary>
        <para>The <see cref="ConstantForce">ConstantForce</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.renderer">
      <summary>
        <para>The <see cref="Renderer">Renderer</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.audio">
      <summary>
        <para>The <see cref="AudioSource">AudioSource</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.guiText">
      <summary>
        <para>The <see cref="GUIText">GUIText</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.networkView">
      <summary>
        <para>The <see cref="NetworkView">NetworkView</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.guiTexture">
      <summary>
        <para>The <see cref="GUITexture">GUITexture</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.collider">
      <summary>
        <para>The <see cref="Collider">Collider</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.collider2D">
      <summary>
        <para>The Collider2D component attached to this object.</para>
        <para>This returns null if no Collider2D is attached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.hingeJoint">
      <summary>
        <para>The <see cref="HingeJoint">HingeJoint</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.particleEmitter">
      <summary>
        <para>The <see cref="ParticleEmitter">ParticleEmitter</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.particleSystem">
      <summary>
        <para>The <see cref="ParticleSystem">ParticleSystem</see> attached to this GameObject (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.layer">
      <summary>
        <para>The layer the game object is in. A layer is in the range [0...31].</para>
        <para>Layers can be used for selective rendering from cameras or ignoring raycasts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.activeSelf">
      <summary>
        <para>The local active state of this GameObject. (Read Only)</para>
        <para>This returns the local active state of this GameObject, which is set using GameObject.SetActive.
Note that a GameObject may be inactive because a parent is not active, even if this returns true. This 
state will then be used once all parents are active. Use
GameObject.activeInHierarchy if you want to check if the GameObject is actually treated as
active in the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.activeInHierarchy">
      <summary>
        <para>Is the GameObject active in the scene?</para>
        <para>This lets you know if a gameObject is active in the game. That is the case if its 
GameObject.activeSelf property is enabled, as well as that of all it's parents.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GameObject.tag">
      <summary>
        <para>The tag of this game object.</para>
        <para>A tag can be used to identify a game object.
Tags must be declared in the tag manager before using them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AvatarTarget">
      <summary>
        <para>Target.</para>
        <para>Used for the MatchPosition, MatchRotation, and Set functions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.Root">
      <summary>
        <para>The root, the position of the game object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.Body">
      <summary>
        <para>The body, center of mass.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.LeftFoot">
      <summary>
        <para>The left foot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.RightFoot">
      <summary>
        <para>The right foot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.LeftHand">
      <summary>
        <para>The left hand.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarTarget.RightHand">
      <summary>
        <para>The right hand.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AvatarIKGoal">
      <summary>
        <para>IK Goal.</para>
        <para>Used to set and get IK weights and transform.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKGoal.LeftFoot">
      <summary>
        <para>The left foot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKGoal.RightFoot">
      <summary>
        <para>The right foot.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKGoal.LeftHand">
      <summary>
        <para>The left hand.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AvatarIKGoal.RightHand">
      <summary>
        <para>The right hand.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimationInfo">
      <summary>
        <para>Information about what animation clips is played and its weight.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationInfo.clip">
      <summary>
        <para>Animation clip that is played.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimationInfo.weight">
      <summary>
        <para>The weight of the animation clip.</para>
        <para>The weight is the concatenation of the blendtree weight and the transition weight.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorCullingMode">
      <summary>
        <para>Culling mode for the Animator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorCullingMode.AlwaysAnimate">
      <summary>
        <para>Always animate the entire character. Object is animated even when offscreen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorCullingMode.BasedOnRenderers">
      <summary>
        <para>Animation is disabled when renderers are not visible.</para>
        <para>The statemachine and root motion will always be evaluated. Thus you will always receive the OnAnimatorMove callbacks.
All other animation will be skipped if the character is not visible.
Specifically evaluation of bone animation, IK, OnAnimatorIK will be skipped.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorUpdateMode">
      <summary>
        <para>The update mode of the Animator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorUpdateMode.Normal">
      <summary>
        <para>Normal update of the animator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorUpdateMode.AnimatePhysics">
      <summary>
        <para>Updates the animator during the physic loop in order to have the animation system synchronized with the physics engine.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnimatorUpdateMode.UnscaledTime">
      <summary>
        <para>Animator updates independently of Time.timeScale.</para>
        <para>This is typically used when animating the UI while the game is paused.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorStateInfo">
      <summary>
        <para>Information about the current or next state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorStateInfo.IsName(System.String)">
      <summary>
        <para>Does <c>name</c> match the name of the active state in the statemachine?</para>
        <para>The name should be in the form Layer.Name, for example "Base.Idle".</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorStateInfo.IsTag(System.String)">
      <summary>
        <para>Does <c>tag</c> match the tag of the active state in the statemachine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.nameHash">
      <summary>
        <para>Name of the State.</para>
        <para>The hash is generated using Animator::StringToHash. The string to pass should include the parent layer's name.  For example, if you have a Run state in the Base Layer the string to generate the hash will be Base Layer.Run.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.normalizedTime">
      <summary>
        <para>Normalized time of the State.</para>
        <para>The integer part is the number of time a state has been looped. The fractional part is the % (0-1) of progress in the current loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.length">
      <summary>
        <para>Current duration of the state.</para>
        <para>In seconds
Can vary when the State contains a Blend Tree.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.tagHash">
      <summary>
        <para>The Tag of the State.</para>
        <para>The hash is generated using Animator::StringToHash.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorStateInfo.loop">
      <summary>
        <para>Is the state looping.</para>
        <para>All animations in the state must be looping.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorTransitionInfo">
      <summary>
        <para>Information about the current transition.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorTransitionInfo.IsName(System.String)">
      <summary>
        <para>Does <c>name</c> match the name of the active Transition.</para>
        <para>Format is "CURRENT_STATE -&amp;gt; NEXT_STATE".</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorTransitionInfo.IsUserName(System.String)">
      <summary>
        <para>Does <c>userName</c> match the name of the active Transition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.nameHash">
      <summary>
        <para>The unique name of the Transition.</para>
        <para>Format is "CURRENT_STATE -&amp;gt; NEXT_STATE" 
The hash is generated using Animator::StringToHash.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.userNameHash">
      <summary>
        <para>The user-specidied name of the Transition.</para>
        <para>The hash is generated using Animator::StringToHash.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AnimatorTransitionInfo.normalizedTime">
      <summary>
        <para>Normalized time of the Transition.</para>
        <para>0.0f to 1.0f.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MatchTargetWeightMask">
      <summary>
        <para>To specify position and rotation weight mask for Animator::MatchTarget.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MatchTargetWeightMask.#ctor(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>MatchTargetWeightMask contructor.</para>
      </summary>
      <param name="positionXYZWeight">Position XYZ weight.</param>
      <param name="rotationWeight">Rotation weight.</param>
    </member>
    <member name="P:UnityEngine.MatchTargetWeightMask.positionXYZWeight">
      <summary>
        <para>Position XYZ weight.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MatchTargetWeightMask.rotationWeight">
      <summary>
        <para>Rotation weight.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Animator">
      <summary>
        <para>Interface to control the Mecanim animation system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.Play(System.String,System.Int32)">
      <summary>
        <para>Plays a state.</para>
        <para>This could be used to synchronize your animation with audio or synchronize an Animator over the network.</para>
      </summary>
      <param name="stateName">The name of the state the will be played.</param>
      <param name="layer">The layer where the state is.</param>
    </member>
    <member name="M:UnityEngine.Animator.Play(System.String,System.Int32,System.Single)">
      <summary>
        <para>Plays a state.</para>
        <para>This could be used to synchronize your animation with audio or synchronize an Animator over the network.</para>
      </summary>
      <param name="stateName">The name of the state the will be played.</param>
      <param name="layer">The layer where the state is.</param>
      <param name="normalizedTime">The normalized time at which the state will play.</param>
    </member>
    <member name="M:UnityEngine.Animator.Play(System.Int32,System.Int32,System.Single)">
      <summary>
        <para>Plays a state.</para>
        <para>This could be used to synchronize your animation with audio or synchronize an Animator over the network.</para>
      </summary>
      <param name="layer">The layer where the state is.</param>
      <param name="normalizedTime">The normalized time at which the state will play.</param>
      <param name="stateNameHash">The  hash of the state.</param>
    </member>
    <member name="M:UnityEngine.Animator.Play(System.Int32,System.Int32)">
      <summary>
        <para>Plays a state.</para>
        <para>This could be used to synchronize your animation with audio or synchronize an Animator over the network.</para>
      </summary>
      <param name="layer">The layer where the state is.</param>
      <param name="stateNameHash">The  hash of the state.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetTarget(UnityEngine.AvatarTarget,System.Single)">
      <summary>
        <para>Sets an AvatarTarget and a targetNormalizedTime for the current state.</para>
        <para>Once the frame is evaluated, the position and the rotation can be queried using targetPosition and targetRotation.</para>
      </summary>
      <param name="targetIndex">The avatar body part that is queried.</param>
      <param name="targetNormalizedTime">The current state Time that is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetBoneTransform(UnityEngine.HumanBodyBones)">
      <summary>
        <para>Returns transform mapped to this human bone id.</para>
      </summary>
      <param name="humanBoneId">The human bone that is queried, see enum HumanBodyBones for a list of possible values.</param>
    </member>
    <member name="M:UnityEngine.Animator.StartPlayback">
      <summary>
        <para>Sets the animator in playback mode.</para>
        <para>In this mode, the animator is not updated from game logic and is controlled instead by setting time value. Note that time will not automatically progress here, you have to manipulate it explicitly from playbackTime.
PlaybackRecordedFrame should be used to playback recorded data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.StopPlayback">
      <summary>
        <para>Stops the animator playback mode. When playback stops, the avatar resumes getting control from game logic.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.StartRecording(System.Int32)">
      <summary>
        <para>Sets the animator in recording mode, and allocates a circular buffer of size <i>frameCount</i>.</para>
        <para>After this call, the recorder starts collecting up to frameCount frames in the buffer. Note it is not possible to start playback until a call to StopRecording is made. 
</para>
      </summary>
      <param name="frameCount">The number of frames (updates) that will be recorded. If frameCount is 0, the recording will continue until the user calls <see cref="Animator.StopRecording">StopRecording</see>. The maximum value for frameCount is 10000.</param>
    </member>
    <member name="M:UnityEngine.Animator.StopRecording">
      <summary>
        <para>Stops animator record mode.</para>
        <para>A call to StopRecording will lock the recording buffer's contents in its current state. The data get saved for subsequent playback with StartPlayback.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.StringToHash(System.String)">
      <summary>
        <para>Generates an parameter id from a string.</para>
        <para>Ids are used for optimized setters and getters on parameters.</para>
      </summary>
      <param name="name">The string to convert to Id.</param>
    </member>
    <member name="M:UnityEngine.Animator.Update(System.Single)">
      <summary>
        <para>Evaluates the animator based on deltaTime.</para>
        <para>Updating the animator with this function migth not work well with the physics engine or any other system that is normaly evaluated by the Game loop.</para>
      </summary>
      <param name="deltaTime">The time delta.</param>
    </member>
    <member name="M:UnityEngine.Animator.Rebind">
      <summary>
        <para>Rebind all the animated properties and mesh data with the Animator.</para>
        <para>This function can be used when you manually change your GameObject hierarchy by script, like combining meshes or swap a complete transform hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.GetFloat(System.String)">
      <summary>
        <para>Gets the value of a float parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetFloat(System.Int32)">
      <summary>
        <para>Gets the value of a float parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetFloat(System.String,System.Single)">
      <summary>
        <para>Sets the value of a float parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetFloat(System.String,System.Single,System.Single,System.Single)">
      <summary>
        <para>Sets the value of a float parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="value">The new value for the parameter.</param>
      <param name="dampTime">The time allowed to parameter to reach the value.</param>
      <param name="deltaTime">The current frame deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetFloat(System.Int32,System.Single)">
      <summary>
        <para>Sets the value of a float parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetFloat(System.Int32,System.Single,System.Single,System.Single)">
      <summary>
        <para>Sets the value of a float parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
      <param name="value">The new value for the parameter.</param>
      <param name="dampTime">The time allowed to parameter to reach the value.</param>
      <param name="deltaTime">The current frame deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetBool(System.String)">
      <summary>
        <para>Gets the value of a bool parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetBool(System.Int32)">
      <summary>
        <para>Gets the value of a bool parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetBool(System.String,System.Boolean)">
      <summary>
        <para>Sets the value of a bool parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetBool(System.Int32,System.Boolean)">
      <summary>
        <para>Sets the value of a bool parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetInteger(System.String)">
      <summary>
        <para>Gets the value of an integer parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetInteger(System.Int32)">
      <summary>
        <para>Gets the value of an integer parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetInteger(System.String,System.Int32)">
      <summary>
        <para>Sets the value of an integer parameter.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetInteger(System.Int32,System.Int32)">
      <summary>
        <para>Sets the value of an integer parameter.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
      <param name="value">The new value for the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetTrigger(System.String)">
      <summary>
        <para>Sets a trigger parameter to active.</para>
        <para>Triggers are parameters that act mostly like booleans, but get resets to inactive when they are used in a transition.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetTrigger(System.Int32)">
      <summary>
        <para>Sets a trigger parameter to active.</para>
        <para>Triggers are parameters that act mostly like booleans, but get resets to inactive when they are used in a transition.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
    </member>
    <member name="M:UnityEngine.Animator.ResetTrigger(System.String)">
      <summary>
        <para>Resets the trigger parameter to false.</para>
        <para>A trigger parameter is like a bool parameter, but the parameter is reset to false once the parameter has been consumed by a transition condition.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.ResetTrigger(System.Int32)">
      <summary>
        <para>Resets the trigger parameter to false.</para>
        <para>A trigger parameter is like a bool parameter, but the parameter is reset to false once the parameter has been consumed by a transition condition.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
    </member>
    <member name="M:UnityEngine.Animator.IsParameterControlledByCurve(System.String)">
      <summary>
        <para>Returns true if a parameter is controlled by an additional curve on an animation.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
    </member>
    <member name="M:UnityEngine.Animator.IsParameterControlledByCurve(System.Int32)">
      <summary>
        <para>Returns true if a parameter is controlled by an additional curve on an animation.</para>
      </summary>
      <param name="id">The id of the parameter. The id is generated using Animator::StringToHash.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetIKPosition(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Gets the position of an IK goal.</para>
        <para>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation).This function gets the current position of the specified goal in world space.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKPosition(UnityEngine.AvatarIKGoal,UnityEngine.Vector3)">
      <summary>
        <para>Sets the position of an IK goal.</para>
        <para>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation).This function sets the position of the ultimate goal in world space; the actual point in space where the body part ends up is also influenced by a weight parameter that specifies how far between the start and the goal the IK should aim (a value in the range 0..1).</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is set.</param>
      <param name="goalPosition">The position in world space.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetIKRotation(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Gets the rotation of an IK goal.</para>
        <para>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation).This function gets the current rotation of the specified goal in world space.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKRotation(UnityEngine.AvatarIKGoal,UnityEngine.Quaternion)">
      <summary>
        <para>Sets the rotation of an IK goal.</para>
        <para>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation).This function sets the rotation of the ultimate goal in world space; the actual rotation where the body part ends up is also influenced by a weight parameter that specifies how far between the start and the goal the IK should aim (a value in the range 0..1).</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is set.</param>
      <param name="goalRotation">The rotation in world space.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetIKPositionWeight(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Gets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).</para>
        <para>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation).The point calculated by the IK is also influenced by a weight value in the range 0..1 that determines how far between the start and the goal to aim. This function returns the current weight value for the position of the goal.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKPositionWeight(UnityEngine.AvatarIKGoal,System.Single)">
      <summary>
        <para>Sets the translative weight of an IK goal (0 = at the original animation before IK, 1 = at the goal).</para>
        <para>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation).This function sets a weight value in the range 0..1 to determine how far between the start and goal positions the IK will aim. The position itself is set separately using SetIKPosition.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is set.</param>
      <param name="value">The translative weight.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetIKRotationWeight(UnityEngine.AvatarIKGoal)">
      <summary>
        <para>Gets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).</para>
        <para>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation).The rotation calculated by the IK is also influenced by a weight value in the range 0..1 that determines how far between the start and the goal to aim. This function returns the current weight value for the rotation of the goal.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is queried.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetIKRotationWeight(UnityEngine.AvatarIKGoal,System.Single)">
      <summary>
        <para>Sets the rotational weight of an IK goal (0 = rotation before IK, 1 = rotation at the IK goal).</para>
        <para>An IK goal is a target position and rotation for a specific body part. Unity can calculate how to move the part toward the target from the starting point (ie, the current position and rotation obtained from the animation).This function sets a weight value in the range 0..1 to determine how far between the start and goal rotations the IK will aim. The goal itself is set separately using SetIKRotation.</para>
      </summary>
      <param name="goal">The AvatarIKGoal that is set.</param>
      <param name="value">The rotational weight.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtPosition(UnityEngine.Vector3)">
      <summary>
        <para>Sets the look at position.</para>
      </summary>
      <param name="lookAtPosition">The position to lookAt.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
      <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
      <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
      <param name="eyesWeight">(0-1) determines how much the eyes are involved in the LookAt.</param>
      <param name="clampWeight">(0-1) 0.0 means the character is completely unrestrained in motion, 1.0 means he's completely clamped (look at becomes impossible), and 0.5 means he'll be able to move on half of the possible range (180 degrees).</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
      <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
      <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
      <param name="eyesWeight">(0-1) determines how much the eyes are involved in the LookAt.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single,System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
      <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
      <param name="headWeight">(0-1) determines how much the head is involved in the LookAt.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single,System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
      <param name="bodyWeight">(0-1) determines how much the body is involved in the LookAt.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLookAtWeight(System.Single)">
      <summary>
        <para>Set look at weights.</para>
      </summary>
      <param name="weight">(0-1) the global weight of the LookAt, multiplier for other parameters.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetLayerName(System.Int32)">
      <summary>
        <para>Gets name of the layer.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetLayerWeight(System.Int32)">
      <summary>
        <para>Gets the layer's current weight.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
    </member>
    <member name="M:UnityEngine.Animator.SetLayerWeight(System.Int32,System.Single)">
      <summary>
        <para>Sets the layer's current weight.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
      <param name="weight">The weight of the layer.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetCurrentAnimatorStateInfo(System.Int32)">
      <summary>
        <para>Gets the current State information on a specified AnimatorController layer.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetNextAnimatorStateInfo(System.Int32)">
      <summary>
        <para>Gets the next State information on a specified AnimatorController layer.</para>
        <para>Only valid when during a transition.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetAnimatorTransitionInfo(System.Int32)">
      <summary>
        <para>Gets the Transition information on a specified AnimatorController layer.</para>
        <para>Only valid when during a transition.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetCurrentAnimationClipState(System.Int32)">
      <summary>
        <para>Gets the list of AnimationInfo currently played by the current state.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
    </member>
    <member name="M:UnityEngine.Animator.GetNextAnimationClipState(System.Int32)">
      <summary>
        <para>Gets the list of AnimationInfo currently played by the next state.</para>
        <para>Only valid when during a transition.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
    </member>
    <member name="M:UnityEngine.Animator.IsInTransition(System.Int32)">
      <summary>
        <para>Is the specified AnimatorController layer in a transition.</para>
      </summary>
      <param name="layerIndex">The layer's index.</param>
    </member>
    <member name="M:UnityEngine.Animator.MatchTarget(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.AvatarTarget,UnityEngine.MatchTargetWeightMask,System.Single,System.Single)">
      <summary>
        <para>Automatically adjust the gameobject position and rotation so that the AvatarTarget reaches the matchPosition when the current state is at the specified progress.</para>
        <para>Target matching only works on the base layer (index 0).</para>
      </summary>
      <param name="matchPosition">The position we want the body part to reach.</param>
      <param name="matchRotation">The rotation in which we want the body part to be.</param>
      <param name="targetBodyPart">The body part that is involved in the match.</param>
      <param name="weightMask">Structure that contains weights for matching position and rotation.</param>
      <param name="startNormalizedTime">Start time within the animation clip (0 - beginning of clip, 1 - end of clip).</param>
      <param name="targetNormalizedTime">End time within the animation clip (0 - beginning of clip, 1 - end of clip), values greater than 1 can be set to trigger a match after a certain number of loops. Ex: 2.3 means at 30% of 2nd loop.</param>
    </member>
    <member name="M:UnityEngine.Animator.MatchTarget(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.AvatarTarget,UnityEngine.MatchTargetWeightMask,System.Single)">
      <summary>
        <para>Automatically adjust the gameobject position and rotation so that the AvatarTarget reaches the matchPosition when the current state is at the specified progress.</para>
        <para>Target matching only works on the base layer (index 0).</para>
      </summary>
      <param name="matchPosition">The position we want the body part to reach.</param>
      <param name="matchRotation">The rotation in which we want the body part to be.</param>
      <param name="targetBodyPart">The body part that is involved in the match.</param>
      <param name="weightMask">Structure that contains weights for matching position and rotation.</param>
      <param name="startNormalizedTime">Start time within the animation clip (0 - beginning of clip, 1 - end of clip).</param>
    </member>
    <member name="M:UnityEngine.Animator.InterruptMatchTarget(System.Boolean)">
      <summary>
        <para>Interrupts the automatic target matching.</para>
        <para>CompleteMatch will make the gameobject match the target completely at the next frame.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.InterruptMatchTarget">
      <summary>
        <para>Interrupts the automatic target matching.</para>
        <para>CompleteMatch will make the gameobject match the target completely at the next frame.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Animator.CrossFade(System.String,System.Single,System.Int32)">
      <summary>
        <para>Create a dynamic transition between the current state and the destination state.</para>
        <para>Both state as to be on the same layer.You cannot change the current state on a synchronized layer, you need to change it on the referenced layer.</para>
      </summary>
      <param name="stateName">The name of the destination state.</param>
      <param name="transitionDuration">The duration of the transition. Value is in source state normalized time.</param>
      <param name="layer">Layer index containing the destination state.</param>
    </member>
    <member name="M:UnityEngine.Animator.CrossFade(System.String,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Create a dynamic transition between the current state and the destination state.</para>
        <para>Both state as to be on the same layer.You cannot change the current state on a synchronized layer, you need to change it on the referenced layer.</para>
      </summary>
      <param name="stateName">The name of the destination state.</param>
      <param name="transitionDuration">The duration of the transition. Value is in source state normalized time.</param>
      <param name="normalizedTime">Start time of the current destination state. Value is in source state normalized time, should be between 0 and 1.</param>
      <param name="layer">Layer index containing the destination state.</param>
    </member>
    <member name="M:UnityEngine.Animator.CrossFade(System.Int32,System.Single,System.Int32,System.Single)">
      <summary>
        <para>Create a dynamic transition between the current state and the destination state.</para>
        <para>Both state as to be on the same layer.You cannot change the current state on a synchronized layer, you need to change it on the referenced layer.</para>
      </summary>
      <param name="transitionDuration">The duration of the transition. Value is in source state normalized time.</param>
      <param name="normalizedTime">Start time of the current destination state. Value is in source state normalized time, should be between 0 and 1.</param>
      <param name="layer">Layer index containing the destination state.</param>
      <param name="stateNameHash">State hash of the destination state.</param>
    </member>
    <member name="M:UnityEngine.Animator.CrossFade(System.Int32,System.Single,System.Int32)">
      <summary>
        <para>Create a dynamic transition between the current state and the destination state.</para>
        <para>Both state as to be on the same layer.You cannot change the current state on a synchronized layer, you need to change it on the referenced layer.</para>
      </summary>
      <param name="transitionDuration">The duration of the transition. Value is in source state normalized time.</param>
      <param name="layer">Layer index containing the destination state.</param>
      <param name="stateNameHash">State hash of the destination state.</param>
    </member>
    <member name="P:UnityEngine.Animator.isOptimizable">
      <summary>
        <para>Returns true if the current rig is optimizable with AnimatorUtility.OptimizeTransformHierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.isHuman">
      <summary>
        <para>Returns true if the current rig is <i>humanoid</i>, false if it is <i>generic</i>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.hasRootMotion">
      <summary>
        <para>Returns true if the current rig has root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.humanScale">
      <summary>
        <para>Returns the scale of the current Avatar for a humanoid rig, (1 by default if the rig is generic).</para>
        <para>The scale is relative to Unity's Default Avatar.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.deltaPosition">
      <summary>
        <para>Gets the avatar delta position for the last evaluated frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.deltaRotation">
      <summary>
        <para>Gets the avatar delta rotation for the last evaluated frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.rootPosition">
      <summary>
        <para>The root position, the position of the game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.rootRotation">
      <summary>
        <para>The root rotation, the rotation of the game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.applyRootMotion">
      <summary>
        <para>Should root motion be applied?</para>
        <para>Root motion is the effect where an object's entire mesh moves away from its starting point but that motion is created by the animation itself rather than by changing the Transform position. Note that applyRootMotion has no effect when the script implements an MonoBehaviour.OnAnimatorMove function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.updateMode">
      <summary>
        <para>Specifies the update mode of the Animator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.hasTransformHierarchy">
      <summary>
        <para>Returns true if the object has a transform hierarchy.</para>
        <para>Based on the Optmize Game Object toggle of Model Importer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.gravityWeight">
      <summary>
        <para>The current gravity weight based on current animations that are played.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.bodyPosition">
      <summary>
        <para>The position of the body center of mass.</para>
        <para>The position is local to the gameobject.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.bodyRotation">
      <summary>
        <para>The rotation of the body center of mass.</para>
        <para>The rotation is local to the gameobject.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.stabilizeFeet">
      <summary>
        <para>Automatic stabilization of feet during transition and blending.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.layerCount">
      <summary>
        <para>The AnimatorController layer count.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.feetPivotActive">
      <summary>
        <para>Blends pivot point between body center of mass and feet pivot. At 0%, the blending point is body center of mass. At 100%, the blending point is feet pivot.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.pivotWeight">
      <summary>
        <para>Gets the pivot weight.</para>
        <para>The pivot is the most stable point between the avatar's left and right foot
For a value of 0, the left foot is the most stable point
For a value of 1, the right foot is the most stable point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.pivotPosition">
      <summary>
        <para>Get the current position of the pivot.</para>
        <para>The pivot is the most stable point between the avatar's left and right foot.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.isMatchingTarget">
      <summary>
        <para>If automatic matching is active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.speed">
      <summary>
        <para>The playback speed of the Animator. 1 is normal playback speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.targetPosition">
      <summary>
        <para>Returns the position of the target specified by SetTarget(AvatarTarget targetIndex, float targetNormalizedTime)).</para>
        <para>The position is only valid when a frame has being evaluated after the SetTarget call.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.targetRotation">
      <summary>
        <para>Returns the rotation of the target specified by SetTarget(AvatarTarget targetIndex, float targetNormalizedTime)).</para>
        <para>The rotation is only valid when a frame has being evaluated after the SetTarget call.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.cullingMode">
      <summary>
        <para>Controls culling of this Animator component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.playbackTime">
      <summary>
        <para>Sets the playback position in the recording buffer.</para>
        <para>When in playback mode (see StartPlayback), this value is used for controlling the current playback position in the buffer (in seconds). The value can range between recorderStartTime and recorderStopTime
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.recorderStartTime">
      <summary>
        <para>Start time of the first frame of the buffer relative to the frame at which <see cref="Animator.StartRecording">StartRecording</see> was called.</para>
        <para>For example, if we started recording at frame 10, and the buffer is 5 frames long.
If the buffer is not initialized (StartRecording is not called), the value of this property will be -1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.recorderStopTime">
      <summary>
        <para>End time of the recorded clip relative to when <see cref="Animator.StartRecording">StartRecording</see> was called.</para>
        <para>For example, if we started recording at second 10, and ended recording at second 15, then this will have a value of 5.
If the buffer is not initialized (StartRecording is not called), the value of this property will be -1.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.runtimeAnimatorController">
      <summary>
        <para>The runtime representation of AnimatorController that controls the Animator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.avatar">
      <summary>
        <para>Gets/Sets the current Avatar.</para>
        <para>Changing the avatar at runtime is not fully supported. Use it at your own risk.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.leftFeetBottomHeight">
      <summary>
        <para>Get left foot bottom height.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Animator.rightFeetBottomHeight">
      <summary>
        <para>Get right foot bottom height.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnimatorUtility">
      <summary>
        <para>Various utilities for animator manipulation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AnimatorUtility.OptimizeTransformHierarchy(UnityEngine.GameObject,System.String[])">
      <summary>
        <para>This function will remove all transform hierarchy under GameObject, the animator will write directly transform matrices into the skin mesh matrices saving alot of CPU cycles.</para>
        <para>You can optionally provide a list of transform name, this function will create a flattened hierarchy of these transfrom under GameObject.
</para>
      </summary>
      <param name="go">GameObject to Optimize.</param>
      <param name="exposedTransforms">List of transform name to expose.</param>
    </member>
    <member name="M:UnityEngine.AnimatorUtility.DeoptimizeTransformHierarchy(UnityEngine.GameObject)">
      <summary>
        <para>This function will recreate all transform hierarchy under GameObject.</para>
      </summary>
      <param name="go">GameObject to Deoptimize.</param>
    </member>
    <member name="T:UnityEngine.SkeletonBone">
      <summary>
        <para>Details of the Transform name mapped to a model's skeleton bone and its default position and rotation in the T-pose.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkeletonBone.name">
      <summary>
        <para>The name of the Transform mapped to the bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkeletonBone.position">
      <summary>
        <para>The T-pose position of the bone in local space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkeletonBone.rotation">
      <summary>
        <para>The T-pose rotation of the bone in local space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkeletonBone.scale">
      <summary>
        <para>The T-pose scaling of the bone in local space.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanLimit">
      <summary>
        <para>This class stores the rotation limits that define the <i>muscle</i> for a single human bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.useDefaultValues">
      <summary>
        <para>Should this limit use the default values?</para>
        <para>You should set useDefaultValues to false if you want to use your own limit values, otherwise the defaults will override your settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.min">
      <summary>
        <para>The maximum negative rotation away from the initial value that this muscle can apply.</para>
        <para>The center property specifies the rotation of the bone when the muscle is at "rest". The min value specfies the maximum negative rotation in degrees away from the rest value that the muscle can apply. The max value specifies a similar limit but in the positive direction of rotation.The allowed range for the minimum is -180..0 degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.max">
      <summary>
        <para>The maximum rotation away from the initial value that this muscle can apply.</para>
        <para>The center property specifies the rotation of the bone when the muscle is at "rest". The max value specfies the maximum rotation in degrees away from the rest value that the muscle can apply. The min value specifies a similar limit but in the negative direction of rotation.The allowed range for the maximum is 0..180 degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.center">
      <summary>
        <para>The default orientation of a bone when no muscle action is applied.</para>
        <para>The vector value represents the bone's rotation in degrees around the X, Y and Z axes relative to the initial position of the bone in the skeleton. Any muscle rotation subsequently applied to the bone will be relative to this value.If useDefaultValues is enabled, the value of center will be [0, 0, 0].</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanLimit.axisLength">
      <summary>
        <para>Length of the bone to which the limit is applied.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanBone">
      <summary>
        <para>The mapping between a bone in the model and the conceptual bone in the Mecanim human anatomy.</para>
        <para>The names of the Mecanim human bone and the bone in the model are stored along with the limiting muscle values that constrain the bone's rotation during animation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBone.limit">
      <summary>
        <para>The rotation limits that define the muscle for this bone.</para>
        <para>The muscle contains the default orientation of the bone alone with the allowed limits of rotation away from the default around all three axes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanBone.boneName">
      <summary>
        <para>The name of the bone to which the Mecanim human bone is mapped.</para>
        <para>This is the name of the bone in the original model and also of the Transform that represents it in the Unity GameObject.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanBone.humanName">
      <summary>
        <para>The name of the Mecanim human bone to which the bone from the model is mapped.</para>
        <para>To get a list of all the available human bones from code, you should use  HumanTrait.BoneName.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanDescription">
      <summary>
        <para>Class that holds humanoid avatar parameters to pass to the <see cref="AvatarBuilder.BuildHumanAvatar">AvatarBuilder.BuildHumanAvatar</see> function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanDescription.human">
      <summary>
        <para>Mapping between Mecanim bone names and bone names in the rig.</para>
        <para>Each item in the array is a HumanBone object that contains a Mecanim avatar bone name, a bone name in the model (to which the Mecanim bone is mapped) and a "muscle" that specifies the bone's limits of motion. The bones can be listed in any order but there are a certain number of bones that Mecanim requires you to define; use HumanTrait.RequiredBone to get a list of all required bones.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanDescription.skeleton">
      <summary>
        <para>List of bone Transforms to include in the model.</para>
        <para>This list define which transforms to include in the final avatar skeleton. Strange results can occur if a parent transform (ie, one with children in the hierarchy) is omitted from the list.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.upperArmTwist">
      <summary>
        <para>Defines how the lower arm's roll/twisting is distributed between the shoulder and elbow joints.</para>
        <para>When the upper arm needs to twist or "roll" for the IK, the rotation can be applied at the shoulder or elbow joints or some twist can be applied at both. The upperArmTwist is a weighting value in the range 0..1 that determines the fraction of the twist applied at the shoulder and elbow. For example, a value of zero means the twist should be handled entirely at the shoulder, while a value of one means it should be applied entirely at the elbow. The default value of 0.5 distributes the twisting evenly between shoulder and elbow.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.lowerArmTwist">
      <summary>
        <para>Defines how the lower arm's roll/twisting is distributed between the elbow and wrist joints.</para>
        <para>When the lower arm needs to twist or "roll" for the IK, the rotation can be applied at the wrist or elbow joints or some twist can be applied at both. The lowerArmTwist is a weighting value in the range 0..1 that determines the fraction of the twist applied at the elbow and wrist. For example, a value of zero means the twist should be handled entirely at the elbow, while a value of one means it should be applied entirely at the wrist. The default value of 0.5 distributes the twisting evenly between elbow and wrist.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.upperLegTwist">
      <summary>
        <para>Defines how the upper leg's roll/twisting is distributed between the thigh and knee joints.</para>
        <para>When the upper leg needs to twist or "roll" for the IK, the rotation can be applied at the thigh or knee joints or some twist can be applied at both. The upperLegTwist is a weighting value in the range 0..1 that determines the fraction of the twist applied at the thigh and knee. For example, a value of zero means the twist should be handled entirely at the thigh, while a value of one means it should be applied entirely at the knee. The default value of 0.5 distributes the twisting evenly between thigh and knee.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.lowerLegTwist">
      <summary>
        <para>Defines how the lower leg's roll/twisting is distributed between the knee and ankle.</para>
        <para>When the lower leg needs to twist or "roll" for the IK, the rotation can be applied at the knee or ankle joints or some twist can be applied at both. The lowerLegTwist is a weighting value in the range 0..1 that determines the fraction of the twist applied at the knee and ankle. For example, a value of zero means the twist should be handled entirely at the knee, while a value of one means it should be applied entirely at the ankle. The default value of 0.5 distributes the twisting evenly between knee and ank;e.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.armStretch">
      <summary>
        <para>Amount by which the arm's length is allowed to stretch when using IK.</para>
        <para>Inverse Kinematics (IK) can often be handled more smoothly if a small amount of "slack" is allowed in the positions of bones relative to each other. This property controls how much slack is available in the arm joints. The value is given in world distance units in the range 0..1. For example, with the default setting of 0.05, the arm will begin to stretch when the IK goal is at 95% of the target and will stretch by 5%. The stretch is carried out by translating both the elbow and wrist transforms.The ideal value will depend on the rig and the animation but in general, a larger value will make for a smoother IK computation at the expense of more unrealistic stretching of the arm.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.legStretch">
      <summary>
        <para>Amount by which the leg's length is allowed to stretch when using IK.</para>
        <para>Inverse Kinematics (IK) can often be handled more smoothly if a small amount of "slack" is allowed in the positions of bones relative to each other. This property controls how much slack is available in the leg joints. The value is given in world distance units in the range 0..1. For example, with the default setting of 0.05, the leg will begin to stretch when the IK goal is at 95% of the target and will stretch by 5%. The stretch is carried out by translating both the knee and ankle transforms.The ideal value will depend on the rig and the animation but in general, a larger value will make for a smoother IK computation at the expense of more unrealistic stretching of the leg.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanDescription.feetSpacing">
      <summary>
        <para>Modification to the minimum distance between the feet of a humanoid model.</para>
        <para>When a humanoid model has unusually large feet (a cartoon-like character, say) the meshes for the feet can sometimes interpenetrate during IK movement. The default value for feetSpacing is zero, but using a larger value will increase the minimum distance that is maintained between the feet and avoid interpenetration.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AvatarBuilder">
      <summary>
        <para>Class to build avatars from user scripts.</para>
        <para>The Unity editor has tools for setting up and editing avatars but this class can be useful for creating custom editors and inspectors for your characters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AvatarBuilder.BuildHumanAvatar(UnityEngine.GameObject,UnityEngine.HumanDescription)">
      <summary>
        <para>Create a humanoid avatar.</para>
        <para>The avatar is created using the supplied HumanDescription object which specifies the muscle space range limits and retargeting parameters like arm/leg twist and arm/leg stretch.</para>
      </summary>
      <param name="go">Root object of your transform hierachy.</param>
      <param name="monoHumanDescription">Description of the avatar.</param>
    </member>
    <member name="M:UnityEngine.AvatarBuilder.BuildGenericAvatar(UnityEngine.GameObject,System.String)">
      <summary>
        <para>Create a new generic avatar.</para>
        <para>All transforms under the root game object will be part of this generic avatar.</para>
      </summary>
      <param name="go">Root object of your transform hierarchy.</param>
      <param name="rootMotionTransformName">Transform name of the root motion transform. If empty no root motion is defined and you must take care of avatar movement yourself.</param>
    </member>
    <member name="T:UnityEngine.RuntimeAnimatorController">
      <summary>
        <para>Runtime reprentation of the AnimatorController. It can be used to change the Animator's AnimationSource during runtime.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanBodyBones">
      <summary>
        <para>Human Body Bones.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Hips">
      <summary>
        <para>This is the Hips bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftUpperLeg">
      <summary>
        <para>This is the Left Upper Leg bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightUpperLeg">
      <summary>
        <para>This is the Right Upper Leg bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLowerLeg">
      <summary>
        <para>This is the Left Knee bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLowerLeg">
      <summary>
        <para>This is the Right Knee bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftFoot">
      <summary>
        <para>This is the Left Ankle bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightFoot">
      <summary>
        <para>This is the Right Ankle bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Spine">
      <summary>
        <para>This is the first Spine bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Chest">
      <summary>
        <para>This is the Chest bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Neck">
      <summary>
        <para>This is the Neck bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Head">
      <summary>
        <para>This is the Head bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftShoulder">
      <summary>
        <para>This is the Left Shoulder bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightShoulder">
      <summary>
        <para>This is the Right Shoulder bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftUpperArm">
      <summary>
        <para>This is the Left Upper Arm bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightUpperArm">
      <summary>
        <para>This is the Right Upper Arm bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLowerArm">
      <summary>
        <para>This is the Left Elbow bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLowerArm">
      <summary>
        <para>This is the Right Elbow bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftHand">
      <summary>
        <para>This is the Left Wrist bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightHand">
      <summary>
        <para>This is the Right Wrist bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftToes">
      <summary>
        <para>This is the Left Toes bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightToes">
      <summary>
        <para>This is the Right Toes bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftEye">
      <summary>
        <para>This is the Left Eye bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightEye">
      <summary>
        <para>This is the Right Eye bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.Jaw">
      <summary>
        <para>This is the Jaw bone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftThumbProximal">
      <summary>
        <para>This is the left thumb 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftThumbIntermediate">
      <summary>
        <para>This is the left thumb 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftThumbDistal">
      <summary>
        <para>This is the left thumb 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftIndexProximal">
      <summary>
        <para>This is the left index 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftIndexIntermediate">
      <summary>
        <para>This is the left index 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftIndexDistal">
      <summary>
        <para>This is the left index 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftMiddleProximal">
      <summary>
        <para>This is the left middle 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftMiddleIntermediate">
      <summary>
        <para>This is the left middle 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftMiddleDistal">
      <summary>
        <para>This is the left middle 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftRingProximal">
      <summary>
        <para>This is the left ring 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftRingIntermediate">
      <summary>
        <para>This is the left ring 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftRingDistal">
      <summary>
        <para>This is the left ring 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLittleProximal">
      <summary>
        <para>This is the left little 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLittleIntermediate">
      <summary>
        <para>This is the left little 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LeftLittleDistal">
      <summary>
        <para>This is the left little 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightThumbProximal">
      <summary>
        <para>This is the right thumb 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightThumbIntermediate">
      <summary>
        <para>This is the right thumb 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightThumbDistal">
      <summary>
        <para>This is the right thumb 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightIndexProximal">
      <summary>
        <para>This is the right index 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightIndexIntermediate">
      <summary>
        <para>This is the right index 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightIndexDistal">
      <summary>
        <para>This is the right index 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightMiddleProximal">
      <summary>
        <para>This is the right middle 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightMiddleIntermediate">
      <summary>
        <para>This is the right middle 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightMiddleDistal">
      <summary>
        <para>This is the right middle 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightRingProximal">
      <summary>
        <para>This is the right ring 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightRingIntermediate">
      <summary>
        <para>This is the right ring 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightRingDistal">
      <summary>
        <para>This is the right ring 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLittleProximal">
      <summary>
        <para>This is the right little 1st phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLittleIntermediate">
      <summary>
        <para>This is the right little 2nd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.RightLittleDistal">
      <summary>
        <para>This is the right little 3rd phalange.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HumanBodyBones.LastBone">
      <summary>
        <para>This is the Last bone index delimiter.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Avatar">
      <summary>
        <para>Avatar definition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Avatar.isValid">
      <summary>
        <para>Return true if this avatar is a valid mecanim avatar. It can be a generic avatar or a human avatar.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Avatar.isHuman">
      <summary>
        <para>Return true if this avatar is a valid human avatar.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HumanTrait">
      <summary>
        <para>Details of all the human bone and muscle types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.HumanTrait.MuscleFromBone(System.Int32,System.Int32)">
      <summary>
        <para>Obtain the muscle index for a particular bone index and "degree of freedom".</para>
        <para>The indexing order of the bones is the same as that of the BoneName array.</para>
      </summary>
      <param name="i">Bone index.</param>
      <param name="dofIndex">Number representing a "degree of freedom": 0 for X-Axis, 1 for Y-Axis, 2 for Z-Axis.</param>
    </member>
    <member name="M:UnityEngine.HumanTrait.BoneFromMuscle(System.Int32)">
      <summary>
        <para>Return the bone to which a particular muscle is connected.</para>
        <para>The bone and muscle indices used by this function are the same as those of the BoneName and MuscleName arrays respectively.</para>
      </summary>
      <param name="i">Muscle index.</param>
    </member>
    <member name="M:UnityEngine.HumanTrait.RequiredBone(System.Int32)">
      <summary>
        <para>Is the bone a member of the minimal set of bones that Mecanim requires for a human model?</para>
        <para>The indexing order of the bones is the same as that used for the BoneName array.</para>
      </summary>
      <param name="i">Index of the bone to test.</param>
    </member>
    <member name="M:UnityEngine.HumanTrait.GetMuscleDefaultMin(System.Int32)">
      <summary>
        <para>Get the default minimum value of rotation for a muscle in degrees.</para>
        <para>The default minimum applies to all three axes of rotation for the muscle. The indexing order for the muscles is the same as that of the MuscleName array.</para>
      </summary>
      <param name="i">Muscle index.</param>
    </member>
    <member name="M:UnityEngine.HumanTrait.GetMuscleDefaultMax(System.Int32)">
      <summary>
        <para>Get the default maximum value of rotation for a muscle in degrees.</para>
        <para>The default maximum applies to all three axes of rotation for the muscle. The indexing order for the muscles is the same as that of the MuscleName array.</para>
      </summary>
      <param name="i">Muscle index.</param>
    </member>
    <member name="P:UnityEngine.HumanTrait.MuscleCount">
      <summary>
        <para>The number of human muscle types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanTrait.MuscleName">
      <summary>
        <para>Array of the names of all human muscle types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanTrait.BoneCount">
      <summary>
        <para>The number of human bone types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanTrait.BoneName">
      <summary>
        <para>Array of the names of all human bone types defined by Mecanim.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HumanTrait.RequiredBoneCount">
      <summary>
        <para>The number of bone types that are required by Mecanim for any human model.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TreePrototype" />
    <member name="M:UnityEngine.TreePrototype.#ctor" />
    <member name="P:UnityEngine.TreePrototype.prefab" />
    <member name="P:UnityEngine.TreePrototype.bendFactor" />
    <member name="T:UnityEngine.DetailRenderMode">
      <summary>
        <para>Render mode for detail prototypes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DetailRenderMode.GrassBillboard">
      <summary>
        <para>The detail prototype will be rendered as billboards that are always facing the camera.</para>
        <para>Grass will take normals from terrain directly underneath it, so that the shading matches the terrain.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DetailRenderMode.VertexLit">
      <summary>
        <para>Will show the prototype using diffuse shading.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DetailRenderMode.Grass">
      <summary>
        <para>The detail prototype will use the grass shader.</para>
        <para>When using custom meshes in this mode, control the wave amount by setting vertex color's
alpha channel. Grass will take normals from terrain directly
underneath it, so that the shading matches the terrain.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DetailPrototype">
      <summary>
        <para>Detail prototype used by the Terrain GameObject.</para>
        <para>This can be grass, or a flower..</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.prototype">
      <summary>
        <para>GameObject used by the DetailPrototype.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.prototypeTexture">
      <summary>
        <para>Texture used by the DetailPrototype.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.minWidth">
      <summary>
        <para>Minimum width of the grass billboards (if render mode is GrassBillboard).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.maxWidth">
      <summary>
        <para>Maximum width of the grass billboards (if render mode is GrassBillboard).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.minHeight">
      <summary>
        <para>Minimum height of the grass billboards (if render mode is GrassBillboard).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.maxHeight">
      <summary>
        <para>Maximum height of the grass billboards (if render mode is GrassBillboard).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.noiseSpread">
      <summary>
        <para>How spread out is the noise for the DetailPrototype.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.bendFactor">
      <summary>
        <para>Bend factor of the detailPrototype.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.healthyColor">
      <summary>
        <para>Color when the DetailPrototypes are "healthy".</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.dryColor">
      <summary>
        <para>Color when the DetailPrototypes are "dry".</para>
      </summary>
    </member>
    <member name="P:UnityEngine.DetailPrototype.renderMode">
      <summary>
        <para>Render mode for the DetailPrototype.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SplatPrototype">
      <summary>
        <para>A Splat prototype is just a texture that is used by the TerrainData.</para>
        <para>Class on a Terrain GameObject.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SplatPrototype.#ctor" />
    <member name="P:UnityEngine.SplatPrototype.texture">
      <summary>
        <para>Texture of the splat applied to the Terrain.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SplatPrototype.normalMap">
      <summary>
        <para>Normal map of the splat applied to the Terrain.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SplatPrototype.tileSize">
      <summary>
        <para>Size of the tile used in the texture of the SplatPrototype.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SplatPrototype.tileOffset">
      <summary>
        <para>Offset of the tile texture of the SplatPrototype.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TreeInstance" />
    <member name="P:UnityEngine.TreeInstance.position" />
    <member name="P:UnityEngine.TreeInstance.widthScale" />
    <member name="P:UnityEngine.TreeInstance.heightScale" />
    <member name="P:UnityEngine.TreeInstance.color" />
    <member name="P:UnityEngine.TreeInstance.lightmapColor" />
    <member name="P:UnityEngine.TreeInstance.prototypeIndex" />
    <member name="T:UnityEngine.TerrainData">
      <summary>
        <para>The TerrainData class stores heightmaps, detail mesh positions, tree instances, and terrain texture alpha maps.</para>
        <para>The Terrain component links to the terrain data and renders it.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetHeight(System.Int32,System.Int32)">
      <summary>
        <para>Gets the height at a certain point x,y.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetInterpolatedHeight(System.Single,System.Single)">
      <summary>
        <para>Gets an interpolated height at a point x,y.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetSteepness(System.Single,System.Single)">
      <summary>
        <para>Gets the gradient of the terrain at point &amp;lt;x,y&amp;gt;.</para>
        <para>The x and y values are normalized coordinates in the range 0..1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetInterpolatedNormal(System.Single,System.Single)">
      <summary>
        <para>Get an interpolated normal at a given location.</para>
        <para>The x and y values are normalized coordinates in the range 0..1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.SetDetailResolution(System.Int32,System.Int32)">
      <summary>
        <para>Set the resolution of the detail map.</para>
      </summary>
      <param name="detailResolution">Specifies the number of pixels in the detail resolution map. A larger detailResolution, leads to more accurate detail object painting.</param>
      <param name="resolutionPerPatch">Specifies the size in pixels of each individually rendered detail patch. A larger number reduces draw calls, but might increase triangle count since detail patches are culled on a per batch basis. A recommended value is 16. If you use a very large detail object distance and your grass is very sparse, it makes sense to increase the value.</param>
    </member>
    <member name="M:UnityEngine.TerrainData.RefreshPrototypes">
      <summary>
        <para>Reloads all the values of the available prototypes (ie, detail mesh assets) in the TerrainData Object.</para>
        <para>This can be used in editor scripts to update the terrain when the prototype assets change, much like the Terrain &amp;gt; Refresh Tree and Detail Prototypes menu command.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TerrainData.GetSupportedLayers(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Returns an array of all supported detail layer indices in the area.</para>
        <para>The Terrain uses a detail layer density map. Each pixel in the map the amount of details objects that will be procedurally placed in the pixel area.
The layer determines the detail prototype that will be instantiated at the location.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.physicMaterial">
      <summary>
        <para>The physic material used by  TerrainCollider using this Terrain.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.heightmapWidth">
      <summary>
        <para>Width of the terrain in samples (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.heightmapHeight">
      <summary>
        <para>Height of the terrain in samples (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.heightmapResolution">
      <summary>
        <para>Resolution of the heightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.heightmapScale">
      <summary>
        <para>The size of each heightmap sample.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.size">
      <summary>
        <para>The total size in world units of the terrain.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.wavingGrassStrength">
      <summary>
        <para>Strength of the waving grass in the terrain.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.wavingGrassAmount">
      <summary>
        <para>Amount of waving grass in the terrain.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.wavingGrassSpeed">
      <summary>
        <para>Speed of the waving grass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.wavingGrassTint">
      <summary>
        <para>Color of the waving grass that the terrain has.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.detailWidth">
      <summary>
        <para>Detail width of the TerrainData.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.detailHeight">
      <summary>
        <para>Detail height of the TerrainData.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.detailResolution">
      <summary>
        <para>Detail Resolution of the TerrainData.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.detailPrototypes">
      <summary>
        <para>Contains the detail texture/meshes that the terrain has.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.treeInstances">
      <summary>
        <para>Contains the current trees placed in the terrain.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.treePrototypes">
      <summary>
        <para>The list of tree prototypes this are the ones available in the inspector.</para>
        <para>If you change any value here, you should call TerrainData.RefreshPrototypes so the changes take effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.alphamapLayers">
      <summary>
        <para>Number of alpha map layers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.alphamapResolution">
      <summary>
        <para>Resolution of the alpha map.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.alphamapWidth">
      <summary>
        <para>Width of the alpha map.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.alphamapHeight">
      <summary>
        <para>Height of the alpha map.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.baseMapResolution">
      <summary>
        <para>Resolution of the base map used for rendering far patches on the terrain.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TerrainData.splatPrototypes">
      <summary>
        <para>Splat texture used by the terrain.</para>
        <para>These are the ground textures.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TerrainRenderFlags" />
    <member name="F:UnityEngine.TerrainRenderFlags.heightmap" />
    <member name="F:UnityEngine.TerrainRenderFlags.trees" />
    <member name="F:UnityEngine.TerrainRenderFlags.details" />
    <member name="F:UnityEngine.TerrainRenderFlags.all" />
    <member name="T:UnityEngine.Terrain">
      <summary>
        <para>The Terrain component renders the terrain.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Terrain.#ctor" />
    <member name="M:UnityEngine.Terrain.CreateTerrainGameObject(UnityEngine.TerrainData)">
      <summary>
        <para>Creates a Terrain including collider from <see cref="TerrainData">TerrainData</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Terrain.SampleHeight(UnityEngine.Vector3)">
      <summary>
        <para>Samples the height at the given position defined in world space, relative to the terrain space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Terrain.AddTreeInstance(UnityEngine.TreeInstance)">
      <summary>
        <para>Adds a tree instance to the terrain.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Terrain.SetNeighbors(UnityEngine.Terrain,UnityEngine.Terrain,UnityEngine.Terrain,UnityEngine.Terrain)">
      <summary>
        <para>Lets you setup the connection between neighboring Terrains.</para>
        <para>This ensures LOD matches up on neighboring terrains.
Note that it is not enough to call this function on one Terrain, you need to set the neighbors of each terrain.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Terrain.GetPosition">
      <summary>
        <para>Get the position of the terrain.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Terrain.Flush">
      <summary>
        <para>Flushes any change done in the terrain so it takes effect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.editorRenderFlags" />
    <member name="P:UnityEngine.Terrain.terrainData">
      <summary>
        <para>The Terrain Data that stores heightmaps, terrain textures, detail meshes and trees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.treeDistance">
      <summary>
        <para>The maximum distance at which trees are rendered.</para>
        <para>The higher this is, the further the distance trees can be seen and the slower it will run.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.treeBillboardDistance">
      <summary>
        <para>Distance from the camera where trees will be rendered as billboards only.</para>
        <para>Decreasing this value improves performance but makes the transition look worse
because the difference between billboards and trees will be more obvious.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.treeCrossFadeLength">
      <summary>
        <para>Total distance delta that trees will use to transition from billboard orientation to mesh orientation.</para>
        <para>Decreasing this value makes the transition happen faster.
Setting it to 0 will produce a visible pop when switching from mesh to billboard representation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.treeMaximumFullLODCount">
      <summary>
        <para>Maximum number of trees rendered at full LOD.</para>
        <para>This is an easy setting to prevent too many trees being rendered at too high resolution in dense forests.
Since there will be no fade if treeMaximumFullLODCount is exceeded you should tweak the treeBillboardDistance to 
not include unnecessary trees that are not being seen but, still rendered.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.detailObjectDistance">
      <summary>
        <para>Detail objects will be displayed up to this distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.detailObjectDensity">
      <summary>
        <para>Density of detail objects.</para>
        <para>This number goes from 0.0 to 1.0, with 1.0 being the original density, and lower numbers
resulting in less detail objects being rendered.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.heightmapPixelError">
      <summary>
        <para>An approximation of how many pixels the terrain will pop in the worst case when switching lod.</para>
        <para>A higher value reduces the number of polygons drawn.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.heightmapMaximumLOD">
      <summary>
        <para>Lets you essentially lower the heightmap resolution used for rendering.</para>
        <para>This can be used on low end cards to never display the highest lod terrain.
A value of 0 means always showing highest detail. A value of 1 means the triangle count will be reduced to 1/4th.
The heightmap resolution will be halved for width and height.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.basemapDistance">
      <summary>
        <para>Heightmap patches beyond basemap distance will use a precomputed low res basemap.</para>
        <para>This improves performance for far away patches. Close up Unity renders the heightmap using splat maps by blending between
any amount of provided terrain textures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.lightmapIndex">
      <summary>
        <para>The index of the lightmap applied to this renderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.castShadows">
      <summary>
        <para>Should terrain cast shadows?.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.materialTemplate" />
    <member name="P:UnityEngine.Terrain.collectDetailPatches">
      <summary>
        <para>Collect Detail patches from memory.</para>
        <para>If enabled the detail patches in the Terrain will be removed from memory when not visible. If the property is set to false, the patches are kept in memory until the Terrain object is destroyed or the collectDetailPatches property is set to true. By setting the property to false all the detail patches for a given density will be initialized and kept in memory. Changing the density will recreate the patches. Note that Detail Patches can use a large amount of memory, therefore this property when set to false can increase the memory usage of your application significantly. In most cases you don't need to set this property to false (default behavior).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.activeTerrain">
      <summary>
        <para>The active terrain. This is a convenience function to get to the main terrain in the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Terrain.activeTerrains">
      <summary>
        <para>The active terrains in the scene.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Tree" />
    <member name="M:UnityEngine.Tree.#ctor" />
    <member name="P:UnityEngine.Tree.data" />
    <member name="T:UnityEngine.DrivenTransformProperties">
      <summary>
        <para>An enumeration of transform properties that can be driven on a RectTransform by an object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.None">
      <summary>
        <para>Deselects all driven properties.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.All">
      <summary>
        <para>Selects all driven properties.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPositionX">
      <summary>
        <para>Selects driven property <see cref="RectTransform.anchoredPosition.x">RectTransform.anchoredPosition.x</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPositionY">
      <summary>
        <para>Selects driven property <see cref="RectTransform.anchoredPosition.y">RectTransform.anchoredPosition.y</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPositionZ">
      <summary>
        <para>Selects driven property <see cref="RectTransform.anchoredPosition3D.z">RectTransform.anchoredPosition3D.z</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.Rotation">
      <summary>
        <para>Selects driven property <see cref="Transform-localRotation">Transform.localRotation</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.ScaleX">
      <summary>
        <para>Selects driven property <see cref="Transform.localScale.x">Transform.localScale.x</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.ScaleY">
      <summary>
        <para>Selects driven property <see cref="Transform.localScale.y">Transform.localScale.y</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.ScaleZ">
      <summary>
        <para>Selects driven property <see cref="Transform.localScale.z">Transform.localScale.z</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMinX">
      <summary>
        <para>Selects driven property <see cref="RectTransform.anchorMin.x">RectTransform.anchorMin.x</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMinY">
      <summary>
        <para>Selects driven property <see cref="RectTransform.anchorMin.y">RectTransform.anchorMin.y</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMaxX">
      <summary>
        <para>Selects driven property <see cref="RectTransform.anchorMax.x">RectTransform.anchorMax.x</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMaxY">
      <summary>
        <para>Selects driven property <see cref="RectTransform.anchorMax.y">RectTransform.anchorMax.y</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.SizeDeltaX">
      <summary>
        <para>Selects driven property <see cref="RectTransform.sizeDelta.x">RectTransform.sizeDelta.x</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.SizeDeltaY">
      <summary>
        <para>Selects driven property <see cref="RectTransform.sizeDelta.y">RectTransform.sizeDelta.y</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.PivotX">
      <summary>
        <para>Selects driven property <see cref="RectTransform.pivot.x">RectTransform.pivot.x</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.PivotY">
      <summary>
        <para>Selects driven property <see cref="RectTransform.pivot.y">RectTransform.pivot.y</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPosition">
      <summary>
        <para>Selects driven property <see cref="RectTransform-anchoredPosition">RectTransform.anchoredPosition</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchoredPosition3D">
      <summary>
        <para>Selects driven property <see cref="RectTransform-anchoredPosition3D">RectTransform.anchoredPosition3D</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.Scale">
      <summary>
        <para>Selects driven property combining <see cref="DrivenTransformProperties.ScaleX">ScaleX</see>, <see cref="DrivenTransformProperties.ScaleY">ScaleY</see> &amp;amp;&amp;amp; <see cref="DrivenTransformProperties.Scale">Scale</see>	Z.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMin">
      <summary>
        <para>Selects driven property combining <see cref="DrivenTransformProperties.AnchorMinX">AnchorMinX</see> and <see cref="DrivenTransformProperties.AnchorMinY">AnchorMinY</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.AnchorMax">
      <summary>
        <para>Selects driven property combining <see cref="DrivenTransformProperties.AnchorMaxX">AnchorMaxX</see> and <see cref="DrivenTransformProperties.AnchorMaxY">AnchorMaxY</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.Anchors">
      <summary>
        <para>Selects driven property combining <see cref="DrivenTransformProperties.AnchorMinX">AnchorMinX</see>, ::refAnchorMinY, <see cref="DrivenTransformProperties.AnchorMaxX">AnchorMaxX</see> and <see cref="DrivenTransformProperties.AnchorMaxY">AnchorMaxY</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.SizeDelta">
      <summary>
        <para>Selects driven property combining <see cref="DrivenTransformProperties.SizeDeltaX">SizeDeltaX</see> and <see cref="DrivenTransformProperties.SizeDeltaY">SizeDeltaY</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DrivenTransformProperties.Pivot">
      <summary>
        <para>Selects driven property combining <see cref="DrivenTransformProperties.PivotX">PivotX</see> and <see cref="DrivenTransformProperties.PivotY">PivotY</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DrivenRectTransformTracker">
      <summary>
        <para>A component can be designed drive a RectTransform. The DrivenRectTransformTracker struct is used to specify which RectTransforms it is driving.</para>
        <para>Driving a RectTransform means that the values of the driven RectTransform are controlled by that component. These driven values cannot be edited in the Inspector (they are shown as disabled). They also won't be saved when saving a scene, which prevents undesired scene file changes.Whenever the component is changing values of driven RectTransforms, it should first call the Clear method and then use the Add method to add all RectTransforms it is driving. The Clear method should also be called in the OnDisable callback of the component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.DrivenRectTransformTracker.Add(UnityEngine.Object,UnityEngine.RectTransform,UnityEngine.DrivenTransformProperties)">
      <summary>
        <para>Add a RectTransform to be driven.</para>
      </summary>
      <param name="driver">The object to drive properties.</param>
      <param name="rectTransform">The RectTransform to be driven.</param>
      <param name="drivenProperties">The properties to be driven.</param>
    </member>
    <member name="M:UnityEngine.DrivenRectTransformTracker.Clear">
      <summary>
        <para>Clear the list of RectTransforms being driven.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RectTransform">
      <summary>
        <para>Position, size, anchor and pivot information for a rectangle.</para>
        <para>RectTransforms are used for GUI but can also be used for other things.
It's used to store and manipulate the position, size, and anchoring of a rectangle and supports various forms of scaling based on a parent RectTransform.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectTransform.GetLocalCorners(UnityEngine.Vector3[])">
      <summary>
        <para>Get the corners of the calculated rectangle in the local space of its Transform.</para>
      </summary>
      <param name="fourCornersArray">Array that corners should be filled into.</param>
    </member>
    <member name="M:UnityEngine.RectTransform.GetWorldCorners(UnityEngine.Vector3[])">
      <summary>
        <para>Get the corners of the calculated rectangle in world space.</para>
      </summary>
      <param name="fourCornersArray">Array that corners should be filled into.</param>
    </member>
    <member name="M:UnityEngine.RectTransform.SetInsetAndSizeFromParentEdge(UnityEngine.RectTransform.Edge,System.Single,System.Single)">
      <summary>
        <para>Set the distance of this rectangle relative to a specified edge of the parent rectangle, while also setting its size.</para>
        <para>Calling this method sets both the anchors, anchoredPosition, and sizeDelta, though only either the horizontal or vertical components, depending on which edge is specified for the inset.The method can particularly be useful when scripting layout behaviours, since it makes it simple to specify positions relative to the parent edges without needing to be concerned with anchoring functionality.</para>
      </summary>
      <param name="edge">The edge of the parent rectangle to inset from.</param>
      <param name="inset">The inset distance.</param>
      <param name="size">The size of the rectangle along the same direction of the inset.</param>
    </member>
    <member name="M:UnityEngine.RectTransform.SetSizeWithCurrentAnchors(UnityEngine.RectTransform.Axis,System.Single)">
      <summary>
        <para>Makes the RectTransform calculated rect be a given size on the specified axis.</para>
        <para>This method produces the given size with the current anchoring. If the parent RectTransform changes size, the size of the rect may change. If the size is meant to stay, either the RectTransform anchors should be set not to stretch, or this method should be invoked again whenever the parent size changes.</para>
      </summary>
      <param name="axis">The axis to specify the size along.</param>
      <param name="size">The desired size along the specified axis.</param>
    </member>
    <member name="P:UnityEngine.RectTransform.rect">
      <summary>
        <para>The calculated rectangle in the local space of the <see cref="RectTransform.Transform">Transform</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.anchorMin">
      <summary>
        <para>The normalized position in the parent RectTransform that the lower left corner is anchored to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.anchorMax">
      <summary>
        <para>The normalized position in the parent RectTransform that the upper right corner is anchored to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.anchoredPosition3D">
      <summary>
        <para>The 3D position of the pivot of this RectTransform relative to the anchor reference point.</para>
        <para>The anchor reference point is where the anchors are. If the anchors are not together, the four anchor positions are interpolated according to the pivot placement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.anchoredPosition">
      <summary>
        <para>The position of the pivot of this RectTransform relative to the anchor reference point.</para>
        <para>The anchor reference point is where the anchors are. If the anchors are not together, the four anchor positions are interpolated according to the pivot placement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.sizeDelta">
      <summary>
        <para>The size of this RectTransform relative to the distances between the anchors.</para>
        <para>If the anchors are together, sizeDelta is the same as size. If the anchors are in each of the four corners of the parent, the sizeDelta is how much bigger or smaller the rectangle is compared to its parent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.pivot">
      <summary>
        <para>The normalized position in this RectTransform that it rotates around.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.offsetMin">
      <summary>
        <para>The offset of the lower left corner of the rectangle relative to the lower left anchor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectTransform.offsetMax">
      <summary>
        <para>The offset of the upper right corner of the rectangle relative to the upper right anchor.</para>
      </summary>
    </member>
    <member name="E:UnityEngine.RectTransform.reapplyDrivenProperties">
      <summary>
        <para>Event that is invoked for RectTransforms that need to have their driven properties reapplied.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RectTransform+Edge">
      <summary>
        <para>Enum used to specify one edge of a rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform+Edge.Left">
      <summary>
        <para>The left edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform+Edge.Right">
      <summary>
        <para>The right edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform+Edge.Top">
      <summary>
        <para>The top edge.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform+Edge.Bottom">
      <summary>
        <para>The bottom edge.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RectTransform+Axis">
      <summary>
        <para>An axis that can be horizontal or vertical.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform+Axis.Horizontal">
      <summary>
        <para>Horizontal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RectTransform+Axis.Vertical">
      <summary>
        <para>Vertical.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RectTransformUtility">
      <summary>
        <para>Utility class containing helper methods for working with  <see cref="RectTransform">RectTransform</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.RectangleContainsScreenPoint(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>
        <para>Does the RectTransform contain the screen point as seen from the given camera?</para>
      </summary>
      <param name="rect">The RectTransform to test with.</param>
      <param name="screenPoint">The screen point to test.</param>
      <param name="cam">The camera from which the test is performed from.</param>
      <returns>
        <para>True if the point is inside the rectangle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.PixelAdjustPoint(UnityEngine.Vector2,UnityEngine.Transform,UnityEngine.Canvas)">
      <summary>
        <para>Convert a given point in screen space into a pixel correct point.</para>
      </summary>
      <returns>
        <para>Pixel adjusted point.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.PixelAdjustRect(UnityEngine.RectTransform,UnityEngine.Canvas)">
      <summary>
        <para>Given a rect transform, return the corner points in pixel accurate coordinates.</para>
      </summary>
      <returns>
        <para>Pixel adjusted rect.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.ScreenPointToWorldPointInRectangle(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Camera,UnityEngine.Vector3@)">
      <summary>
        <para>Transform a screen space point to a position in world space that is on the plane of the given RectTransform.</para>
        <para>The cam parameter should be the camera associated with the screen point. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be null.When ScreenPointToWorldPointInRectangle is used from within an event handler that provides a PointerEventData object, the correct camera can be obtained by using PointerEventData.enterEventData (for hover functionality) or PointerEventData.pressEventCamera (for click functionality). This will automatically use the correct camera (or null) for the given event.</para>
      </summary>
      <param name="rect">The RectTransform to find a point inside.</param>
      <param name="cam">The camera associated with the screen space position.</param>
      <param name="screenPoint">Screen space position.</param>
      <param name="worldPoint">Point in world space.</param>
      <returns>
        <para>Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.ScreenPointToLocalPointInRectangle(UnityEngine.RectTransform,UnityEngine.Vector2,UnityEngine.Camera,UnityEngine.Vector2@)">
      <summary>
        <para>Transform a screen space point to a position in the local space of a RectTransform that is on the plane of its rectangle.</para>
        <para>The cam parameter should be the camera associated with the screen point. For a RectTransform in a Canvas set to Screen Space - Overlay mode, the cam parameter should be null.When ScreenPointToLocalPointInRectangle is used from within an event handler that provides a PointerEventData object, the correct camera can be obtained by using PointerEventData.enterEventData (for hover functionality) or PointerEventData.pressEventCamera (for click functionality). This will automatically use the correct camera (or null) for the given event.</para>
      </summary>
      <param name="rect">The RectTransform to find a point inside.</param>
      <param name="cam">The camera associated with the screen space position.</param>
      <param name="screenPoint">Screen space position.</param>
      <param name="localPoint">Point in local space of the rect transform.</param>
      <returns>
        <para>Returns true if the plane of the RectTransform is hit, regardless of whether the point is inside the rectangle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.FlipLayoutOnAxis(UnityEngine.RectTransform,System.Int32,System.Boolean,System.Boolean)">
      <summary>
        <para>Flips the alignment of the RectTransform along the horizontal or vertical axis, and optionally its children as well.</para>
        <para>This flips the alignment of the RectTransform. Any actual content such as images or text will not be flipped but may aligned differently.
An example usage is to instantiate a control designed in a left to right manner (like a horizontal slider where 0 is to the left) and flip it horizontally so the layout becomes suitable for use in the opposite direction (like a horizontal slider where 0 is to the right).When used with the recursive argument set to true, the children are always flipped with the keepPositioning option set to false so that they properly follow the flip of the parent.</para>
      </summary>
      <param name="rect">The RectTransform to flip.</param>
      <param name="keepPositioning">Flips around the pivot if true. Flips within the parent rect if false.</param>
      <param name="recursive">Flip the children as well?</param>
      <param name="axis">The axis to flip along. 0 is horizontal and 1 is vertical.</param>
    </member>
    <member name="M:UnityEngine.RectTransformUtility.FlipLayoutAxes(UnityEngine.RectTransform,System.Boolean,System.Boolean)">
      <summary>
        <para>Flips the horizontal and vertical axes of the RectTransform size and alignment, and optionally its children as well.</para>
        <para>This swaps the horizontal and vertical axis in the size and alignment of the RectTransform. This can also be thought of as a diagonal flip. Any actual content such as images or text will not be flipped or rotated but may be resized and aligned differently.An example usage is to instantiate a control designed for alignment along one axis (like a horizontal slider) and flip the axes so the layout becomes suitable for use along the other axis (like a vertical slider).When used with the recursive argument set to true, the children are always flipped with the keepPositioning option set to false so that they properly follow the flip of the parent.</para>
      </summary>
      <param name="rect">The RectTransform to flip.</param>
      <param name="keepPositioning">Flips around the pivot if true. Flips within the parent rect if false.</param>
      <param name="recursive">Flip the children as well?</param>
    </member>
    <member name="T:UnityEngine.RenderMode">
      <summary>
        <para>RenderMode for the Canvas.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderMode.ScreenSpaceOverlay">
      <summary>
        <para>Render at the end of the scene using a 2D Canvas.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderMode.ScreenSpaceCamera">
      <summary>
        <para>Render using the <see cref="Camera">Camera</see> configured on the Canvas.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderMode.WorldSpace">
      <summary>
        <para>Render using any <see cref="Camera">Camera</see> in the scene that can render the layer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Canvas">
      <summary>
        <para>Element that can be used for screen rendering.</para>
        <para>Elements on a canvas are rendered AFTER scene rendering, either from an attached camera or using overlay mode.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Canvas.GetDefaultCanvasMaterial">
      <summary>
        <para>Returns the default material that can be used for rendering normal elements on the Canvas.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Canvas.GetDefaultCanvasTextMaterial">
      <summary>
        <para>Returns the default material that can be used for rendering text elements on the Canvas.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Canvas.ForceUpdateCanvases">
      <summary>
        <para>Force all canvases to update their content.</para>
        <para>A canvas performs its layout and content generation calculations at the end of a frame, just before rendering, in order to ensure that it's based on all the latest changes that may have happened during that frame. This means that in the Start callback and the first Update callback, the layout and content under the canvas may not be up-to-date.Code that relies on up-to-date layout or content can call this method to ensure it before executing code that relies on it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.renderMode">
      <summary>
        <para>Is the <see cref="Canvas">Canvas</see> in World or Overlay mode?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.isRootCanvas">
      <summary>
        <para>Is this the root <see cref="Canvas">Canvas</see>?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.worldCamera">
      <summary>
        <para>
          <see cref="Camera">Camera</see> used for sizing the <see cref="Canvas">Canvas</see> when in Screen Space - Camera. Also used as the <see cref="Camera">Camera</see> that events will be sent through for a World Space [[Canvas].</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.pixelRect">
      <summary>
        <para>Get the render rect for the <see cref="Canvas">Canvas</see>.</para>
        <para>If in overlay mode this will be the screen dimensions. If in world mode this will be the camera screen viewport rect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.scaleFactor">
      <summary>
        <para>Used to scale the entire canvas, while still making it fit the screen. Only applies with renderMode is Screen Space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.referencePixelsPerUnit">
      <summary>
        <para>The number of pixels per unit that is considered the default.</para>
        <para>Sprites have a Pixels Per Unit that control the pixel density of the sprite. For sprites that have the same Pixels Per Unit as the Reference Pixels Per Unit in the Canvas, the pixel density will be one to one.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.overridePixelPerfect">
      <summary>
        <para>Allows for nested canvases to override pixelPerfect settings inherited from parent canvases.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.pixelPerfect">
      <summary>
        <para>Force elements in the canvas to be aligned with pixels. Only applies with renderMode is Screen Space.</para>
        <para>Enabling pixelPerfect can make elements appear sharper and prevent blurriness. However, if many elements are scaled or rotated, or use subtle animated position or scaling, it may be advantageous to disable pixelPerfect, since the movement will be smoother without.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.planeDistance">
      <summary>
        <para>How far away from the camera is the Canvas generated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.renderOrder">
      <summary>
        <para>The render order in which the canvas is being emitted to the scene.</para>
        <para>Note: Currently only Screen Space - Overlay canvas's are ordered correctly as Screen Space - Camera and World Space are emitted and sorted based upon distance from the camera.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.overrideSorting">
      <summary>
        <para>Override the sorting of canvas.</para>
        <para>Allows for nested canvas's to ignore the parent draw order and draw ontop or below.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.sortingOrder">
      <summary>
        <para>Canvas' order within a sorting layer.</para>
        <para>See Renderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.sortingLayerID">
      <summary>
        <para>ID of the Canvas' sorting layer.</para>
        <para>See Renderer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Canvas.sortingLayerName">
      <summary>
        <para>Name of the Canvas' sorting layer.</para>
        <para>See Renderer.</para>
      </summary>
    </member>
    <member name="E:UnityEngine.Canvas.willRenderCanvases">
      <summary>
        <para>Event that is called just before <see cref="Canvas">Canvas</see> rendering happens.</para>
        <para>This allows you to delay processing / updating of canvas based elements until just before they are rendered.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ICanvasRaycastFilter">
      <summary>
        <para>This element can filter raycasts. If the top level element is hit it can further 'check' if the location is valid.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ICanvasRaycastFilter.IsRaycastLocationValid(UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>
        <para>Given a point and a camera is the raycast valid.</para>
      </summary>
      <param name="sp">Screen position.</param>
      <param name="eventCamera">Raycast camera.</param>
      <returns>
        <para>Valid.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.CanvasGroup">
      <summary>
        <para>A <see cref="Canvas">Canvas</see> placable element that can be used to modify children Alpha, Raycasting, Enabled state.</para>
        <para>A canvas group can be used to modify the state of children elements. An example of this would be a window which fades in over time, by modifying the alpha value of the group the children elements well be affected. The result alpha will be the multiplied result of any nested groups, multiplied with the canvas elements alpha.Canvas Groups can also be configured to not block raycasts (anything on the group will not be considerered for graphic raycasting), and whether elements are interactable.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CanvasGroup.IsRaycastLocationValid(UnityEngine.Vector2,UnityEngine.Camera)">
      <summary>
        <para>Returns true if the Group allows raycasts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CanvasGroup.alpha">
      <summary>
        <para>Set the alpha of the group.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CanvasGroup.interactable">
      <summary>
        <para>Is the group interactable (are the elements beneath the group enabled).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CanvasGroup.blocksRaycasts">
      <summary>
        <para>Does this group block raycasting (allow collision).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CanvasGroup.ignoreParentGroups">
      <summary>
        <para>Should the group ignore parent groups?</para>
        <para>If set to true the group will ignore any parent group settings.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UIVertex">
      <summary>
        <para>Vertex class used by a <see cref="Canvas">Canvas</see> for managing vertices.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIVertex.position">
      <summary>
        <para>Vertex position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIVertex.normal">
      <summary>
        <para>Normal.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIVertex.color">
      <summary>
        <para>Vertex color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIVertex.uv0">
      <summary>
        <para>UV0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIVertex.uv1">
      <summary>
        <para>UV1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIVertex.tangent">
      <summary>
        <para>Tangent.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UIVertex.simpleVert">
      <summary>
        <para>Simple UIVertex with sensible settings for use in the UI system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CanvasRenderer">
      <summary>
        <para>A component that will render to the screen after all normal rendering has completed when attached to a <see cref="Canvas">Canvas</see>. Designed for GUI application.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetColor(UnityEngine.Color)">
      <summary>
        <para>Set the color of the renderer. Will be multiplied with the <see cref="UIVertex">UIVertex</see> color and the <see cref="Canvas">Canvas</see> color.</para>
      </summary>
      <param name="color">Renderer multiply color.</param>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.GetColor">
      <summary>
        <para>Get the current color of the renderer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.GetAlpha">
      <summary>
        <para>Get the current alpha of the renderer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetAlpha(System.Single)">
      <summary>
        <para>Set the alpha of the renderer. Will be multiplied with the <see cref="UIVertex">UIVertex</see> alpha and the <see cref="Canvas">Canvas</see> alpha.</para>
      </summary>
      <param name="alpha">Alpha.</param>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetMaterial(UnityEngine.Material,UnityEngine.Texture)">
      <summary>
        <para>Set the material for UIRenderer. If a texture is specified then it will be used as the 'MainTex' instead of the material's 'MainTex'.</para>
      </summary>
      <param name="material">Material for rendering.</param>
      <param name="texture">Material texture overide.</param>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.GetMaterial">
      <summary>
        <para>Gets the current <see cref="Material">Material</see> assigned to the UIRenderer.</para>
      </summary>
      <returns>
        <para>Result.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetVertices(System.Collections.Generic.List{UnityEngine.UIVertex})">
      <summary>
        <para>Set the vertices for the UIRenderer.</para>
      </summary>
      <param name="vertices">Array of vertices to set.</param>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.SetVertices(UnityEngine.UIVertex[],System.Int32)">
      <summary>
        <para>Set the vertices for the UIRenderer.</para>
      </summary>
      <param name="vertices">Array of vertices to set.</param>
      <param name="size">Number of vertices to set.</param>
    </member>
    <member name="M:UnityEngine.CanvasRenderer.Clear">
      <summary>
        <para>Remove all cached vertices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.isMask">
      <summary>
        <para>Is the UIRenderer a mask component.</para>
        <para>If the UI renderer is configured to be a masking component then children components will only render if they intersect the mask area created by this pass.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.relativeDepth">
      <summary>
        <para>Depth of the renderer realative to the parent canvas.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CanvasRenderer.absoluteDepth">
      <summary>
        <para>Depth of the renderer realitive to the root canvas.</para>
      </summary>
    </member>
    <member name="E:UnityEngine.CanvasRenderer.onRequestRebuild">
      <summary>
        <para>(Editor Only) Event that gets fired whenever the data in the <see cref="CanvasRenderer">CanvasRenderer</see> gets invalidated and needs to be rebuilt.</para>
        <para>For instance, whenever a Texture gets re-imported this event gets fired.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AssetBundleCreateRequest">
      <summary>
        <para>Asynchronous create request for an <see cref="AssetBundle">AssetBundle</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleCreateRequest.assetBundle">
      <summary>
        <para>Asset object being loaded (Read Only).</para>
        <para>Note that accessing asset before isDone is true will stall the loading process.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AssetBundleRequest">
      <summary>
        <para>Asynchronous load request from an <see cref="AssetBundle">AssetBundle</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundleRequest.asset">
      <summary>
        <para>Asset object being loaded (Read Only).</para>
        <para>Note that accessing asset before isDone is true will stall the loading process.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AssetBundle">
      <summary>
        <para>AssetBundles let you stream additional assets via the WWW class and instantiate them at runtime. AssetBundles are created via BuildPipeline.BuildAssetBundle.</para>
        <para>Note that bundles are not fully compatible between platforms. A bundle built for any of the standalone
platforms (including webplayer) can be loaded on any of those platforms but not on iOS or Android.
Furthermore, a bundle built for iOS is not compatible with Android and vice versa.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.CreateFromMemory(System.Byte[])">
      <summary>
        <para>Asynchronously create an AssetBundle from a memory region.</para>
        <para>Use this method to create an AssetBundle from an array of bytes asynchronously. This is useful when you want to download the AssetBundle using your own system instead of the WWW class, or when you have downloaded the data with encryption using WWW and need to create the AssetBundle from the unencrypted bytes. Compared to AssetBundle.CreateFromMemoryImmediate, this version is asynchronous and will not create the AssetBundle object immediately. </para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.CreateFromMemoryImmediate(System.Byte[])">
      <summary>
        <para>Synchronously create an AssetBundle from a memory region.</para>
        <para>Use this method to create an AssetBundle from an array of bytes. This is useful when you want to download the AssetBundle using your own system instead of the WWW class, or when you have downloaded the data with encryption and need to create the AssetBundle from the unencrypted bytes.Compared to AssetBundle.CreateFromMemory, this version is synchronous and will not return until it is done creating the AssetBundle object.</para>
      </summary>
      <param name="binary">Array of bytes with the AssetBundle data.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.CreateFromFile(System.String)">
      <summary>
        <para>Loads an asset bundle from a disk.</para>
        <para>Only uncompressed asset bundles are supported by this function. This is the fastest way to load an asset bundle.</para>
      </summary>
      <param name="path">Path of the file on disk
See Also: <see cref="WWW-assetBundle">WWW.assetBundle</see>, <see cref="WWW.LoadFromCacheOrDownload">WWW.LoadFromCacheOrDownload</see>.</param>
    </member>
    <member name="M:UnityEngine.AssetBundle.Contains(System.String)">
      <summary>
        <para>Check if an AssetBundle contains a specific object.</para>
        <para>Returns true if an object referred to by name is contained in the AssetBundle, false otherwise.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.Load(System.String)">
      <summary>
        <para>Loads object with <c>name</c> from the bundle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.Load(System.String,System.Type)">
      <summary>
        <para>Loads object with <c>name</c> of a given <c>type</c> from the bundle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAsync(System.String,System.Type)">
      <summary>
        <para>Asynchronously loads object with <c>name</c> of a given <c>type</c> from the bundle.</para>
        <para>Asynchronous loading requires Unity Pro.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAll(System.Type)">
      <summary>
        <para>Loads all objects contained in the asset bundle that inherit from <c>type</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.LoadAll">
      <summary>
        <para>Loads all objects contained in the asset bundle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AssetBundle.Unload(System.Boolean)">
      <summary>
        <para>Unloads all assets in the bundle.</para>
        <para>Unload frees all the memory associated with the objects inside the bundle.When unloadAllLoadedObjects is false, compressed file data for assets inside the bundle will be unloaded, but any actual objects already loaded
from this bundle will be kept intact. Of course you won't be able to load any more objects from this bundle.When unloadAllLoadedObjects is true, all objects that were loaded from this bundle will be destroyed as well. If there are game
objects in your scene referencing those assets, the references to them will become missing.Note: before Unity 5 all bundles would finish loading before any of the bundles would be unloaded. So calling AssetBundle.Unload function while some of the bundles are still being loaded will block the execution of the rest of the code until all bundles are loaded. This will add a performance hiccup. This has been reworked in Unity 5.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AssetBundle.mainAsset">
      <summary>
        <para>Main asset that was supplied when building the asset bundle (Read Only).</para>
        <para>This is a convenience function that makes it easy to find the primary asset of a bundle.
For example you might want to have a prefab of a character and include all textures, materials, meshes and animations files with it.
But the fully rigged prefab of the character would be your mainAsset and can easily be accessed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HideFlags">
      <summary>
        <para>Bit mask that controls object destruction and visibility in inspectors.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.None">
      <summary>
        <para>A normal, visible object. This is the default.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.HideInHierarchy">
      <summary>
        <para>The object will not appear in the hierarchy.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.HideInInspector">
      <summary>
        <para>It is not possible to view it in the inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.DontSave">
      <summary>
        <para>The object will not be saved to the scene. <i>It will not be destroyed when a new scene is loaded</i>.</para>
        <para>It is your responsibility to cleanup the object manually using DestroyImmediate, otherwise it will leak.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.NotEditable">
      <summary>
        <para>The object is not be editable in the inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HideFlags.HideAndDontSave">
      <summary>
        <para>A combination of not shown in the hierarchy and not saved to to scenes.</para>
        <para>This is most commonly used for objects which are created by scripts and are purely under their control.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SendMessageOptions">
      <summary>
        <para>Options for how to send a message.</para>
        <para>This is used by SendMessage &amp;amp; BroadcastMessage in GameObject &amp;amp; Component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SendMessageOptions.RequireReceiver">
      <summary>
        <para>A receiver is required for SendMessage.</para>
        <para>If no receiver is found, an error is printed to the console. (This is the default value.)
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SendMessageOptions.DontRequireReceiver">
      <summary>
        <para>No receiver is required for SendMessage.</para>
        <para>If no Component (script) on the GameObject implements the method no error will be generated.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PrimitiveType">
      <summary>
        <para>The various primitives that can be created using the GameObject.CreatePrimitive function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Sphere">
      <summary>
        <para>A sphere primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Capsule">
      <summary>
        <para>A capsule primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Cylinder">
      <summary>
        <para>A cylinder primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Cube">
      <summary>
        <para>A cube primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Plane">
      <summary>
        <para>A plane primitive.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.PrimitiveType.Quad">
      <summary>
        <para>A Quad primitive.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Space">
      <summary>
        <para>The coordinate space in which to operate.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Space.World">
      <summary>
        <para>Applies transformation relative to the world coordinate system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Space.Self">
      <summary>
        <para>Applies transformation relative to the local coordinate system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LayerMask">
      <summary>
        <para>LayerMask allow you to display the LayerMask popup menu in the inspector.</para>
        <para>Similar to those in the camera.cullingMask.
Layer masks can be used selectively filter game objects for example when casting rays.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LayerMask.LayerToName(System.Int32)">
      <summary>
        <para>Given a layer number, returns the name of the layer as defined in either a Builtin or a User Layer in the <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-TagManager.html">Tag Manager</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LayerMask.NameToLayer(System.String)">
      <summary>
        <para>Given a layer name, returns the layer index as defined by either a Builtin or a User Layer in the <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-TagManager.html">Tag Manager</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LayerMask.GetMask(System.String[])">
      <summary>
        <para>Given a set of layer names as defined by either a Builtin or a User Layer in the <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-TagManager.html">Tag Manager</see>, returns the equivalent layer mask for all of them.</para>
      </summary>
      <param name="layerNames">List of layer names to convert to a layer mask.</param>
      <returns>
        <para>The layer mask created from the <c>layerNames</c>.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.LayerMask.value">
      <summary>
        <para>Converts a layer mask value to an integer value.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RuntimePlatform">
      <summary>
        <para>The platform application is running. Returned by Application.platform.</para>
        <para>Note: The difference between using RuntimePlatform and Platform dependent Compilation
is that using RuntimePlatform is evaluated at runtime while Platform dependent Compilation is
evaluated at compile time. So if you can use platform dependent compilation, don't hesitate to use it. In most cases, you can
get the same functionality using both, and using the defines will produce smaller and faster code, as you don't need to check at runtime.
There are some cases where RuntimePlatform is needed, for example: if you need to check which platform you are running a webplayer you may check this
at runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.OSXEditor">
      <summary>
        <para>In the Unity editor on Mac OS X.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.OSXPlayer">
      <summary>
        <para>In the player on Mac OS X.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WindowsPlayer">
      <summary>
        <para>In the player on Windows.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.OSXWebPlayer">
      <summary>
        <para>In the web player on Mac OS X.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.OSXDashboardPlayer">
      <summary>
        <para>In the Dashboard widget on Mac OS X.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WindowsWebPlayer">
      <summary>
        <para>In the web player on Windows.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WindowsEditor">
      <summary>
        <para>In the Unity editor on Windows.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.IPhonePlayer">
      <summary>
        <para>In the player on the iPhone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.XBOX360">
      <summary>
        <para>In the player on the XBOX360.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.PS3">
      <summary>
        <para>In the player on the Play Station 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.Android">
      <summary>
        <para>In the player on Android devices.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.LinuxPlayer">
      <summary>
        <para>In the player on Linux.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.FlashPlayer">
      <summary>
        <para>Flash Player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.WP8Player">
      <summary>
        <para>In the player on Windows Phone 8 device.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.BlackBerryPlayer" />
    <member name="F:UnityEngine.RuntimePlatform.PSP2">
      <summary>
        <para>In the player on the PS Vita.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.PS4">
      <summary>
        <para>In the player on the Playstation 4.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.PSMPlayer">
      <summary>
        <para>In the player on the PSM.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.XboxOne">
      <summary>
        <para>In the player on Xbox One.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RuntimePlatform.SamsungTVPlayer">
      <summary>
        <para>In the player on Samsung Smart TV.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SystemLanguage">
      <summary>
        <para>The language the user's operating system is running in. Returned by Application.systemLanguage.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Afrikaans">
      <summary>
        <para>Afrikaans.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Arabic">
      <summary>
        <para>Arabic.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Basque">
      <summary>
        <para>Basque.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Belarusian">
      <summary>
        <para>Belarusian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Bulgarian">
      <summary>
        <para>Bulgarian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Catalan">
      <summary>
        <para>Catalan.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Chinese">
      <summary>
        <para>Chinese.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Czech">
      <summary>
        <para>Czech.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Danish">
      <summary>
        <para>Danish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Dutch">
      <summary>
        <para>Dutch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.English">
      <summary>
        <para>English.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Estonian">
      <summary>
        <para>Estonian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Faroese">
      <summary>
        <para>Faroese.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Finnish">
      <summary>
        <para>Finnish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.French">
      <summary>
        <para>French.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.German">
      <summary>
        <para>German.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Greek">
      <summary>
        <para>Greek.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Hebrew">
      <summary>
        <para>Hebrew.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Icelandic">
      <summary>
        <para>Icelandic.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Indonesian">
      <summary>
        <para>Indonesian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Italian">
      <summary>
        <para>Italian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Japanese">
      <summary>
        <para>Japanese.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Korean">
      <summary>
        <para>Korean.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Latvian">
      <summary>
        <para>Latvian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Lithuanian">
      <summary>
        <para>Lithuanian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Norwegian">
      <summary>
        <para>Norwegian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Polish">
      <summary>
        <para>Polish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Portuguese">
      <summary>
        <para>Portuguese.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Romanian">
      <summary>
        <para>Romanian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Russian">
      <summary>
        <para>Russian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.SerboCroatian">
      <summary>
        <para>Serbo-Croatian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Slovak">
      <summary>
        <para>Slovak.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Slovenian">
      <summary>
        <para>Slovenian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Spanish">
      <summary>
        <para>Spanish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Swedish">
      <summary>
        <para>Swedish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Thai">
      <summary>
        <para>Thai.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Turkish">
      <summary>
        <para>Turkish.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Ukrainian">
      <summary>
        <para>Ukrainian.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Vietnamese">
      <summary>
        <para>Vietnamese.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Unknown">
      <summary>
        <para>Unknown.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SystemLanguage.Hungarian">
      <summary>
        <para>Hungarian.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LogType">
      <summary>
        <para>The type of the log message in the delegate registered with Application.RegisterLogCallback.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Error">
      <summary>
        <para>LogType used for Errors.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Assert">
      <summary>
        <para>LogType used for Asserts. (These indicate an error inside Unity itself.)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Warning">
      <summary>
        <para>LogType used for Warnings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Log">
      <summary>
        <para>LogType used for regular log messages.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LogType.Exception">
      <summary>
        <para>LogType used for Exceptions.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DeviceType">
      <summary>
        <para>Enumeration for <see cref="SystemInfo-deviceType">SystemInfo.deviceType</see>, denotes a coarse grouping of kinds of devices.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceType.Unknown">
      <summary>
        <para>Device type is unknown. You should never see this in practice.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceType.Handheld">
      <summary>
        <para>A handheld device like mobile phone or a tablet.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceType.Console">
      <summary>
        <para>A stationary gaming console.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceType.Desktop">
      <summary>
        <para>Desktop or laptop computer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SystemInfo">
      <summary>
        <para>Access system information.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SystemInfo.#ctor" />
    <member name="M:UnityEngine.SystemInfo.SupportsRenderTextureFormat(UnityEngine.RenderTextureFormat)">
      <summary>
        <para>Is render texture format supported?</para>
        <para>Returns true if graphics card supports given RenderTextureFormat.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.operatingSystem">
      <summary>
        <para>Operating system name with version (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.processorType">
      <summary>
        <para>Processor name (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.processorCount">
      <summary>
        <para>Number of processors present (Read Only).</para>
        <para>This is number of processors as reported by the operating system. The processors could be separate processors,
cores of the same processor, or logical processors (e.g. in case of one Hyper-Threaded CPU, this would report
two CPUs since that's what it looks like to the system).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.systemMemorySize">
      <summary>
        <para>Amount of system memory present (Read Only).</para>
        <para>This is the approximate amount of system memory in megabytes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsMemorySize">
      <summary>
        <para>Amount of video memory present (Read Only).</para>
        <para>This is the approximate amount of graphics memory in megabytes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceName">
      <summary>
        <para>The name of the graphics device (Read Only).</para>
        <para>This is the name of user's graphics card, as reported by the graphics driver.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceVendor">
      <summary>
        <para>The vendor of the graphics device (Read Only).</para>
        <para>This is the vendor of user's graphics card, as reported by the graphics driver.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceID">
      <summary>
        <para>The identifier code of the graphics device (Read Only).</para>
        <para>This is the PCI device ID of the user's graphics card. Together with SystemInfo.graphicsDeviceVendorID,
this number uniquely identifies a particular graphics card model. The number is the same across operating
systems and driver versions.See pcidatabase.com for a list of device IDs.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceVendorID">
      <summary>
        <para>The identifier code of the graphics device vendor (Read Only).</para>
        <para>This is the PCI vendor ID of the user's graphics card. This number uniquely identifies a
particular graphics card maker. The number is the same across operating systems and driver versions.See pcidatabase.com for a list of vendor IDs.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsDeviceVersion">
      <summary>
        <para>The graphics API version supported by the graphics device (Read Only).</para>
        <para>This is the low-level graphics API version supported by the user's graphics card.In case of OpenGL API, the returned string will contain "OpenGL" followed by
version in "major.minor" format, followed by full version string in square brackets.In case of Direct3D9 API, the returned string will contain "Direct3D 9.0c" followed
by driver name and version in square brackets.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsShaderLevel">
      <summary>
        <para>Graphics device shader capability level (Read Only).</para>
        <para>This is approximate "shader capability" level of the graphics device, expressed in DirectX shader model terms.
Possible values are:50 Shader Model 5.0 (DX11.0)
41 Shader Model 4.1 (DX10.1)
40 Shader Model 4.0 (DX10.0)
30 Shader Model 3.0
20 Shader Model 2.x
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.graphicsPixelFillrate">
      <summary>
        <para>Approximate pixel fill-rate of the graphics device (Read Only).</para>
        <para>Returns pixel fill-rate in megapixels/second, or -1 if fillrate
of the device is not known.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsShadows">
      <summary>
        <para>Are built-in shadows supported? (Read Only)</para>
        <para>Returns true if graphics card has support for built-in shadows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsRenderTextures">
      <summary>
        <para>Are render textures supported? (Read Only)</para>
        <para>Returns true if graphics card supports Render Textures in general. Use SystemInfo.SupportsRenderTextureFormat
to check for support for specific render texture format.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsRenderToCubemap">
      <summary>
        <para>Are cubemap render textures supported? (Read Only)</para>
        <para>Returns true if graphics card supports render into cubemap Render Textures.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsImageEffects">
      <summary>
        <para>Are image effects supported? (Read Only)</para>
        <para>Returns true if graphics card supports image postprocessing effects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supports3DTextures">
      <summary>
        <para>Are 3D (volume) textures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsComputeShaders">
      <summary>
        <para>Are compute shaders supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsInstancing">
      <summary>
        <para>Is GPU draw call instancing supported? (Read Only)</para>
        <para>Currently only Graphics.DrawProcedural and Graphics.DrawProceduralIndirect
use instancing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsSparseTextures">
      <summary>
        <para>Are sparse textures supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportedRenderTargetCount">
      <summary>
        <para>How many simultaneous render targets (MRTs) are supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsStencil">
      <summary>
        <para>Is the stencil buffer supported? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.npotSupport">
      <summary>
        <para>What NPOT (ie, non-power of two resolution) support does the GPU provide? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.deviceUniqueIdentifier">
      <summary>
        <para>A unique device identifier. It is guaranteed to be unique for every device (Read Only).</para>
        <para>iOS: on pre-iOS7 devices it will return hash of MAC address. On iOS7 devices it will be UIDevice identifierForVendor or, if that fails for any reason, ASIdentifierManager advertisingIdentifier.
Windows Store Apps: uses AdvertisingManager::AdvertisingId for returning unique device identifier, if option in 'PC Settings -&amp;gt; Privacy -&amp;gt; Let apps use my advertising ID for experiences across apps (turning this off will reset your ID)' is disabled, Unity will fallback to HardwareIdentification::GetPackageSpecificToken().Id.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.deviceName">
      <summary>
        <para>The user defined name of the device (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.deviceModel">
      <summary>
        <para>The model of the device (Read Only).</para>
        <para>Possible examples: iPhone3,1 or iPod4,1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsAccelerometer">
      <summary>
        <para>Is an accelerometer available on the device?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsGyroscope">
      <summary>
        <para>Is a gyroscope available on the device?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsLocationService">
      <summary>
        <para>Is the device capable of reporting its location?</para>
        <para>This property does not provide a detailed
information on what kind of sensor can be used, it can use all kinds of
underlying technology with varying accuracy.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.supportsVibration">
      <summary>
        <para>Is the device capable of providing the user haptic feedback by vibration?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.deviceType">
      <summary>
        <para>Returns the kind of device the application is running on.</para>
        <para>See DeviceType enumeration for possible values.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SystemInfo.maxTextureSize" />
    <member name="T:UnityEngine.WaitForSeconds">
      <summary>
        <para>Suspends the coroutine execution for the given amount of seconds.</para>
        <para>WaitForSeconds can only be used with a yield statement in coroutines.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WaitForSeconds.#ctor(System.Single)">
      <summary>
        <para>Creates a yield instruction to wait for a given number of seconds.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WaitForFixedUpdate">
      <summary>
        <para>Waits until next fixed frame rate update function. See Also: <see cref="MonoBehaviour.FixedUpdate">FixedUpdate</see>.</para>
        <para>WaitForFixedUpdate can only be used with a yield statement in coroutines.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WaitForFixedUpdate.#ctor" />
    <member name="T:UnityEngine.WaitForEndOfFrame">
      <summary>
        <para>Waits until the end of the frame after all cameras and GUI is rendered, just before displaying the frame on screen.</para>
        <para>You can use it to read the display into a texture, encode it as an image file (see Texture2D.ReadPixels and Texture2D.EncodeToPNG) and send it somewhere.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WaitForEndOfFrame.#ctor" />
    <member name="T:UnityEngine.Coroutine">
      <summary>
        <para>MonoBehaviour.StartCoroutine returns a Coroutine. Instances of this class are only used to reference these coroutines and do not hold any exposed properties or functions.</para>
        <para>A coroutine is a function that can suspend its execution (yield) until the given given
YieldInstruction finishes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DisallowMultipleComponent">
      <summary>
        <para>Prevents MonoBehaviour of same type (or subtype) to be added more than once to a GameObject.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RequireComponent">
      <summary>
        <para>The RequireComponent attribute lets automatically add required component as a dependency.</para>
        <para>When you add a script which uses RequireComponent, the required component will automatically be added to the game object.
This is useful to avoid setup errors.
For example a script might require that a rigid body is always added to the same game object.
Using RequireComponent this will be done automatically, thus you can never get the setup wrong.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RequireComponent.#ctor(System.Type)">
      <summary>
        <para>Require a single component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RequireComponent.#ctor(System.Type,System.Type)">
      <summary>
        <para>Require a two components.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RequireComponent.#ctor(System.Type,System.Type,System.Type)">
      <summary>
        <para>Require three components.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AddComponentMenu">
      <summary>
        <para>The AddComponentMenu attribute allows you to place a script anywhere in the "Component" menu, instead of just the "Component-&amp;gt;Scripts" menu.</para>
        <para>You use this to organize the Component menu better, this way improving workflow when adding scripts.
Important notice: You need to restart.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AddComponentMenu.#ctor(System.String)">
      <summary>
        <para>The script will be placed in the component menu according to <c>menuName</c>.</para>
        <para>For example, if the menuName is "Rendering/DoSomething" the new menu will be called DoSomething and appear as a child of the Rendering group in the Components menu.
If menuName is "" the component will be hidden from the menu.</para>
      </summary>
      <param name="menuName">/menuName/ is the path to the component.</param>
    </member>
    <member name="P:UnityEngine.AddComponentMenu.componentOrder">
      <summary>
        <para>The order of the component in the component menu (lower is higher to the top).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ContextMenu">
      <summary>
        <para>The ContextMenu attribute allows you to add commands to the context menu.</para>
        <para>In the inspector of the attached script. When the user selects the context menu,
the function will be executed.This is most useful for automatically setting up scene data from the script.
The function has to be non-static.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ContextMenu.#ctor(System.String)">
      <summary>
        <para>Adds the function to the context menu of the component.</para>
        <para>In the inspector of the attached script. When the user selects the context menu,
the function will be executed.This is most useful for automatically setting up scene data from the script.
The function has to be non-static.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ExecuteInEditMode">
      <summary>
        <para>Makes a script execute in edit mode.</para>
        <para>By default, script components are only executed in play mode.
By adding this attribute, each script component will also have its callback functions executed while the Editor is not in playmode.The functions are not called constantly like they are in play mode.
- Update is only called when something in the scene changed.
- OnGUI is called when the Game View recieves an Event.
- OnRenderObject and the other rendering callback functions are called on every repaint of the Scene View or Game View.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HideInInspector">
      <summary>
        <para>Makes a variable not show up in the inspector but be serialized.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ScriptableObject">
      <summary>
        <para>A class you can derive from if you want to create objects that don't need to be attached to game objects.</para>
        <para>This is most useful for assets which are only meant to store data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ScriptableObject.CreateInstance(System.String)">
      <summary>
        <para>Creates an instance of a scriptable object with <c>className</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ScriptableObject.CreateInstance(System.Type)">
      <summary>
        <para>Creates an instance of a scriptable object with <c>type</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ScriptableObject.CreateInstance``1">
      <summary>
        <para>Creates an instance of a scriptable object with <c>T</c>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ResourceRequest">
      <summary>
        <para>Asynchronous load request for assets in the Resources folder.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ResourceRequest.asset">
      <summary>
        <para>Asset object being loaded (Read Only).</para>
        <para>Note that accessing asset before isDone is true will stall the loading process.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Resources">
      <summary>
        <para>The Resources class allows you to find and access Objects including assets.</para>
        <para>In the editor, Resources.FindObjectsOfTypeAll can be used to locate assets and scene objects.All assets that are in a folder named "Resources" anywhere in the Assets folder can be accessed via the Resources.Load functions.
Multiple "Resources" folders may exist and when loading objects each will be examined.In Unity you usually don't use path names to access assets, instead you expose a reference to an
asset by declaring a member-variable, and then assign it in the inspector.
When using this technique Unity can automatically calculate which assets are used when building a player.
This radically minimizes the size of your players to the assets that you actually use in the built game.
When you place assets in "Resources" folders this can not be done, thus all assets in the "Resources" folders will be included in a build.Another disadvantage of using path names is that it leads to less reusable code since scripts will have specific hard coded requirements on where the used assets are placed.
On the other hand using references that are exposed in the inspector are self-documenting and immediately obvious to the user of your script.However there are situations where it is more convenient to fetch an asset by its name instead of linking to it in the inspector.
Essentially whenever it is inconvenient to assign the reference to the object in the inspector.
For example you might want to create a game object procedurally from a script and for example assign a texture to a procedurally generated mesh.Some loaded assets, most notably textures, can use up memory even when no instance exists in the scene. To reclaim this memory when the asset is no longer needed, you can use Resources.UnloadUnusedAssets.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Resources.#ctor" />
    <member name="M:UnityEngine.Resources.FindObjectsOfTypeAll(System.Type)">
      <summary>
        <para>Returns a list of all objects of Type <c>type</c>.</para>
        <para>This function can return any type of Unity object that is loaded, including game objects, prefabs, materials, meshes, textures, etc. It will also list internal stuff, therefore please be extra careful the way you handle the returned objects.
Contrary to Object.FindObjectsOfType this function will also list disabled objects.Please note that this function is very slow and is not recommended to be used every frame.</para>
      </summary>
      <param name="type">Type of the class to match while searching.</param>
      <returns>
        <para>An array of objects whose class is <i>type</i> or is derived from <i>type</i>.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Resources.FindObjectsOfTypeAll``1">
      <summary>
        <para>Returns a list of all objects of Type <c>T</c>.</para>
        <para>This function can return any type of Unity object that is loaded, including game objects, prefabs, materials, meshes, textures, etc. It will also list internal stuff, therefore please be extra careful the way you handle the returned objects.
Contrary to Object.FindObjectsOfType this function will also list disabled objects.Please note that this function is very slow and is not recommended to be used every frame.</para>
      </summary>
      <returns>
        <para>An array of objects whose class is <i>type</i> or is derived from <i>type</i>.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Resources.Load(System.String)">
      <summary>
        <para>Loads an asset stored at <c>path</c> in a Resources folder.</para>
        <para>Returns the asset at path if it can be found otherwise returns null.
Only objects of type will be returned if this parameter is supplied.
The path is relative to any Resources folder inside the Assets folder of your project, extensions must be omitted.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="path">Pathname of the target folder.</param>
    </member>
    <member name="M:UnityEngine.Resources.Load``1(System.String)">
      <summary>
        <para>Loads an asset stored at <c>path</c> in a Resources folder.</para>
        <para>Returns the asset at path if it can be found otherwise returns null.
Only objects of type T will be returned.
The path is relative to any Resources folder inside the Assets folder of your project, extensions must be omitted.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="path">Pathname of the target folder.</param>
    </member>
    <member name="M:UnityEngine.Resources.Load(System.String,System.Type)">
      <summary>
        <para>Loads an asset stored at <c>path</c> in a Resources folder.</para>
        <para>Returns the asset at path if it can be found otherwise returns null.
Only objects of type will be returned if this parameter is supplied.
The path is relative to any Resources folder inside the Assets folder of your project, extensions must be omitted.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="path">Pathname of the target folder.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAsync(System.String)">
      <summary>
        <para>Asynchronously loads an asset stored at <c>path</c> in a Resources folder.</para>
        <para>Asynchronous loading requires Unity Pro.Returns a ResourceRequest, from which the asset can be retrieved once the loading operation is completed.
Only objects of type will be returned if this parameter is supplied.
The path is relative to any Resources folder inside the Assets folder of your project, extensions must be omitted.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="path">Path to the asset in the Resources folder.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAsync``1(System.String)">
      <summary>
        <para>Asynchronously loads an asset stored at <c>path</c> in a Resources folder.</para>
        <para>Asynchronous loading requires Unity Pro.Returns a ResourceRequest, from which the asset can be retrieved once the loading operation is completed.
Only objects of type will be returned if this parameter is supplied.
The path is relative to any Resources folder inside the Assets folder of your project, extensions must be omitted.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="path">Path to the asset in the Resources folder.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAsync(System.String,System.Type)">
      <summary>
        <para>Asynchronously loads an asset stored at <c>path</c> in a Resources folder.</para>
        <para>Asynchronous loading requires Unity Pro.Returns a ResourceRequest, from which the asset can be retrieved once the loading operation is completed.
Only objects of type will be returned.
The path is relative to any Resources folder inside the Assets folder of your project, extensions must be omitted.</para>
      </summary>
      <param name="path">Path to the asset in the Resources folder.</param>
      <param name="type">Type filter for objects returned.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAll(System.String,System.Type)">
      <summary>
        <para>Loads all assets in a folder or file at <c>path</c> in a Resources folder.</para>
        <para>If path refers to a folder, all assets in the folder will be returned.
If path refers to a file, only that asset will be returned.
The path is relative to any Resources folder inside the Assets folder of your project.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="path">Pathname of the target folder.</param>
      <param name="systemTypeInstance">Type filter for objects returned.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAll(System.String)">
      <summary>
        <para>Loads all assets in a folder or file at <c>path</c> in a Resources folder.</para>
        <para>If path refers to a folder, all assets in the folder will be returned.
If path refers to a file, only that asset will be returned.
The path is relative to any Resources folder inside the Assets folder of your project.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="path">Pathname of the target folder.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAll``1(System.String)">
      <summary>
        <para>Loads all assets in a folder or file at <c>path</c> in a Resources folder.</para>
        <para>If path refers to a folder, all assets in the folder will be returned.
If path refers to a file, only that asset will be returned.
The path is relative to any Resources folder inside the Assets folder of your project.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="path">Pathname of the target folder.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAssetAtPath(System.String,System.Type)">
      <summary>
        <para>Returns a resource at an asset path (Editor Only).</para>
        <para>This function always return null in the standalone player or web player.
This is useful for quickly accessing an asset for use in the editor only.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="assetPath">Pathname of the target asset.</param>
      <param name="type">Type filter for objects returned.</param>
    </member>
    <member name="M:UnityEngine.Resources.LoadAssetAtPath``1(System.String)">
      <summary>
        <para>Returns a resource at an asset path (Editor Only).</para>
        <para>This function always return null in the standalone player or web player.
This is useful for quickly accessing an asset for use in the editor only.Note:All asset names &amp;amp; paths in Unity use forward slashes, paths using backslashes will not work.</para>
      </summary>
      <param name="assetPath">Pathname of the target asset.</param>
    </member>
    <member name="M:UnityEngine.Resources.UnloadAsset(UnityEngine.Object)">
      <summary>
        <para>Unloads <c>assetToUnload</c> from memory.</para>
        <para>This function can only be called on Assets that are stored on disk.If there are any references from game objects in the scene to the asset and it is being used then Unity will reload the asset from disk as soon as it is accessed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Resources.UnloadUnusedAssets">
      <summary>
        <para>Unloads assets that are not used.</para>
        <para>An asset is deemed to be unused if it isn't reached after walking the whole game object hierarchy, including script components. Static variables are also examined.The script excecution stack, however, is not examined so an asset referenced only from within the script stack will be unloaded and, if necessary, loaded back in the next time one of its properties or methods is used. This requires extra care for assets which have been modified in memory. Make sure to call EditorUtility.SetDirty before an asset garbage collection is triggered.</para>
      </summary>
      <returns>
        <para>Object on which you can yield to wait until the operation completes.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.ThreadPriority">
      <summary>
        <para>Priority of a thread.</para>
        <para>Lower priority means a background operation will run less often and will take up less time, but will progress more slowly.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ThreadPriority.Low">
      <summary>
        <para>Lowest thread priority.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ThreadPriority.BelowNormal">
      <summary>
        <para>Below normal thread priority.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ThreadPriority.Normal">
      <summary>
        <para>Normal thread priority.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ThreadPriority.High">
      <summary>
        <para>Highest thread priority.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Profiler">
      <summary>
        <para>Controls the <see href="http://docs.unity3d.com/ScriptReference/../Manual/Profiler.html">Profiler</see> from script.</para>
        <para>You can add custom Profiler sections in your scripts with Profiler.BeginSample and Profiler.EndSample.In standalone games, Profiler can dump all profiling information using Profiler.logFile and Profiler.enabled.Profiler is only available in Unity Pro.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiler.AddFramesFromFile(System.String)">
      <summary>
        <para>Displays the recorded profiledata in the profiler.</para>
        <para>Use the name of the text file, ".data" will be appended.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiler.BeginSample(System.String)">
      <summary>
        <para>Begin profiling a piece of code with a custom label.</para>
        <para>This will show up in the Profiler hierarchy.
Profiler.BeginSample is conditionally compiled away using ConditionalAttribute.
Thus it will have zero overhead, when it is deployed in non-Development Build.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiler.BeginSample(System.String,UnityEngine.Object)">
      <summary>
        <para>Begin profiling a piece of code with a custom label.</para>
        <para>This will show up in the Profiler hierarchy.
Profiler.BeginSample is conditionally compiled away using ConditionalAttribute.
Thus it will have zero overhead, when it is deployed in non-Development Build.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiler.EndSample">
      <summary>
        <para>End profiling a piece of code with a custom label.</para>
        <para>This will show up in the Profiler hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiler.GetRuntimeMemorySize(UnityEngine.Object)">
      <summary>
        <para>Returns the runtime memory usage of the resource.</para>
        <para>This has been implemented for the following resource types:
Mesh, Texture, Audio, Animation and Materials
Only available in development players and editor.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiler.GetMonoHeapSize">
      <summary>
        <para>Returns the size of the mono heap.</para>
        <para>This is the reserved system memory that Mono is using for allocations.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiler.GetMonoUsedSize">
      <summary>
        <para>Returns the used size from mono.</para>
        <para>This is the amount of allocated memory for non collected objects in Mono memory
always call GC.Collect before this call, as non referenced objects will still
take up space untill they are collected. If not Collecting, this will display an
ever growing number untill Collect is called elsewhere.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Profiler.GetTotalAllocatedMemory" />
    <member name="M:UnityEngine.Profiler.GetTotalUnusedReservedMemory" />
    <member name="M:UnityEngine.Profiler.GetTotalReservedMemory" />
    <member name="P:UnityEngine.Profiler.logFile">
      <summary>
        <para>Sets profiler output file in built players.</para>
        <para>Use it with Profiler.enabled to produce profiling information
outside of the Unity Editor.
Setting this property is not supported in the WebPlayer. The WebPlayer will output the profiling information next to your webplayer logfile.
This produces a file with framerate
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiler.enableBinaryLog">
      <summary>
        <para>Sets profiler output file in built players.</para>
        <para>If binary log is enabled, a file is generated named "&amp;lt;logfile&amp;gt;.data" which holds binary data for the profile
This becomes a large file, so only enable it for a few frames
on webplayers the file is placed next to the log file
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiler.enabled">
      <summary>
        <para>Enables the Profiler.</para>
        <para>Can be used with Profiler.logFile to log profiling information
in built players.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Profiler.usedHeapSize">
      <summary>
        <para>Heap size used by the program.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CrashReport">
      <summary>
        <para>Holds data for a single application crash event and provides access to all gathered crash reports.</para>
        <para>If compiled with appropriate settings, Unity will try to gather useful information, like location and thread stack traces, when your application crashes. Upon the next application start, if the data gathering was successful, all crash information will be accessible using this API.To enable crash report generation, in iOS player settings set "Script Call Optimization" option to "Fast but no Exceptions". After you build your Xcode project in Unity, open it and edit trampoline file: Classes/CrashReporter.h. Change ENABLE_CUSTOM_CRASH_REPORTER define from 0 to 1.Note: this API currently is available only for iOS targets.CrashReport API requires Unity Pro license for target platform.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CrashReport.RemoveAll">
      <summary>
        <para>Remove all reports from available reports list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.CrashReport.Remove">
      <summary>
        <para>Remove report from available reports list.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CrashReport.time">
      <summary>
        <para>Time, when the crash occured.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CrashReport.text">
      <summary>
        <para>Crash report data as formatted text.</para>
        <para>NOTE: data provided and text format depends on the target platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CrashReport.reports">
      <summary>
        <para>Returns all currently available reports in a new array.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CrashReport.lastReport">
      <summary>
        <para>Returns last crash report, or null if no reports are available.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CursorMode">
      <summary>
        <para>How should the custom cursor be rendered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CursorMode.Auto">
      <summary>
        <para>Use hardware cursors on supported platforms.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CursorMode.ForceSoftware">
      <summary>
        <para>Force the use of software cursors.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Cursor">
      <summary>
        <para>Cursor API for setting the cursor that is used for rendering.</para>
        <para>Supports Hardware Cursors on OSX, Windows, Linux, and Flash falls back to software cursors on unsupported platforms.Textures used as cursors should be marked as such in their import settings. OSX Webplayer note: Due to sandboxing, Hardware Cursors can only be updated intermittently (when the cursor is moving)
the best way to ensure correct behavior if to use OnMouseEnter and OnMouseExit to set the hardware cursors. This is not
an issue for software cursors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cursor.SetCursor(UnityEngine.Texture2D,UnityEngine.Vector2,UnityEngine.CursorMode)">
      <summary>
        <para>Specify a custom cursor that you wish to use as a cursor.</para>
      </summary>
      <param name="texture">The texture to use for the cursor.</param>
      <param name="hotspot">The offset from the top left of the texture to use as the target point (must be within the bounds of the cursor).</param>
      <param name="cursorMode">Allow this cursor to render as a hardware cursor on supported platforms, or force software cursor.</param>
    </member>
    <member name="T:UnityEngine.LightType">
      <summary>
        <para>The type of a <see cref="Light">Light</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightType.Spot">
      <summary>
        <para>The light is a spot light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightType.Directional">
      <summary>
        <para>The light is a directional light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightType.Point">
      <summary>
        <para>The light is a point light.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightType.Area">
      <summary>
        <para>The light is an area light. It affects only lightmaps and lightprobes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightRenderMode">
      <summary>
        <para>How the <see cref="Light">Light</see> is rendered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightRenderMode.Auto">
      <summary>
        <para>Automatically choose the render mode.</para>
        <para>This chooses whether to render the Light as a pixel or vertex light (recommended and default).
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightRenderMode.ForcePixel">
      <summary>
        <para>Force the <see cref="Light">Light</see> to be a pixel light.</para>
        <para>Use this only for really important lights, like a player flashlight.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightRenderMode.ForceVertex">
      <summary>
        <para>Force the <see cref="Light">Light</see> to be a vertex light.</para>
        <para>This option is good for background or distant lighting.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightShadows">
      <summary>
        <para>Shadow casting options for a <see cref="Light">Light</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShadows.None">
      <summary>
        <para>Do not cast shadows (default).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShadows.Hard">
      <summary>
        <para>Cast "hard" shadows (with no shadow filtering).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightShadows.Soft">
      <summary>
        <para>Cast "soft" shadows (with 4x PCF filtering).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.OcclusionArea">
      <summary>
        <para>OcclusionArea is an area in which occlusion culling is performed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.OcclusionArea.#ctor" />
    <member name="P:UnityEngine.OcclusionArea.center">
      <summary>
        <para>Center of the occlusion area relative to the transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.OcclusionArea.size">
      <summary>
        <para>Size that the occlusion area will have.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.OcclusionPortal">
      <summary>
        <para>The portal for dynamically changing occlusion at runtime.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.OcclusionPortal.#ctor" />
    <member name="P:UnityEngine.OcclusionPortal.open">
      <summary>
        <para>Gets / sets the portal's open state.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FogMode">
      <summary>
        <para>Fog mode to use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FogMode.Linear">
      <summary>
        <para>Linear fog.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FogMode.Exponential">
      <summary>
        <para>Exponential fog.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FogMode.ExponentialSquared">
      <summary>
        <para>Exponential squared fog (default).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderSettings">
      <summary>
        <para>The Render Settings contain values for a range of visual elements in your scene, like fog and ambient light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fog">
      <summary>
        <para>Is fog enabled?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogMode">
      <summary>
        <para>Fog mode to use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogColor">
      <summary>
        <para>The color of the fog.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogDensity">
      <summary>
        <para>The density of the exponential fog.</para>
        <para>Fog density is used by Exponential and ExponentialSquared
modes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogStartDistance">
      <summary>
        <para>The starting distance of linear fog.</para>
        <para>Fog start and end distances are used by Linear fog mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.fogEndDistance">
      <summary>
        <para>The ending distance of linear fog.</para>
        <para>Fog start and end distances are used by Linear fog mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.ambientLight">
      <summary>
        <para>Color of the scene's ambient light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.haloStrength">
      <summary>
        <para>Size of the <see cref="Light">Light</see> halos.</para>
        <para>For any light, the size of the halo is this value multiplied by Light.range.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.flareStrength">
      <summary>
        <para>The intensity of all flares in the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.flareFadeSpeed">
      <summary>
        <para>The fade speed of all flares in the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderSettings.skybox">
      <summary>
        <para>The global skybox to use.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ShadowProjection">
      <summary>
        <para>Shadow projection type for <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-QualitySettings.html">Quality Settings</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowProjection.CloseFit">
      <summary>
        <para>Close fit shadow maps with linear fadeout.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ShadowProjection.StableFit">
      <summary>
        <para>Stable shadow maps with spherical fadeout.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.QualitySettings">
      <summary>
        <para>Script interface for <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-QualitySettings.html">Quality Settings</see>.</para>
        <para>There can be an arbitrary number of quality settings. The details of each are set up
in the project's Quality Settings. At run time, the
current quality level can be changed using this class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.QualitySettings.GetQualityLevel">
      <summary>
        <para>Returns the current graphics quality level.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.QualitySettings.SetQualityLevel(System.Int32,System.Boolean)">
      <summary>
        <para>Sets a new graphics quality level.</para>
      </summary>
      <param name="index">Quality index to set.</param>
      <param name="applyExpensiveChanges">Should expensive changes be applied (Anti-aliasing etc).</param>
    </member>
    <member name="M:UnityEngine.QualitySettings.SetQualityLevel(System.Int32)">
      <summary>
        <para>Sets a new graphics quality level.</para>
      </summary>
      <param name="index">Quality index to set.</param>
    </member>
    <member name="M:UnityEngine.QualitySettings.IncreaseLevel(System.Boolean)">
      <summary>
        <para>Increase the current quality level.</para>
      </summary>
      <param name="applyExpensiveChanges">Should expensive changes be applied (Anti-aliasing etc).</param>
    </member>
    <member name="M:UnityEngine.QualitySettings.IncreaseLevel">
      <summary>
        <para>Increase the current quality level.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.QualitySettings.DecreaseLevel(System.Boolean)">
      <summary>
        <para>Decrease the current quality level.</para>
      </summary>
      <param name="applyExpensiveChanges">Should expensive changes be applied (Anti-aliasing etc).</param>
    </member>
    <member name="M:UnityEngine.QualitySettings.DecreaseLevel">
      <summary>
        <para>Decrease the current quality level.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.names">
      <summary>
        <para>The indexed list of available Quality Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.pixelLightCount">
      <summary>
        <para>The maximum number of pixel lights that should affect any object.</para>
        <para>If there are more lights illuminating an object, the dimmest ones will be rendered
as vertex lights.Use this from scripting if you want to have finer control than offered by quality settings
levels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowProjection">
      <summary>
        <para>Directional light shadow projection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowCascades">
      <summary>
        <para>Number of cascades to use for directional light shadows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.shadowDistance">
      <summary>
        <para>Shadow drawing distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.masterTextureLimit">
      <summary>
        <para>A texture size limit applied to all textures.</para>
        <para>Setting this to one uses the first mipmap of each texture (so all textures are half size),
setting this to two uses the second mipmap of each texture (so all textures are quarter size), etc..
This can be used to decrease video memory requirements on low-end computers.
The default value is zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.anisotropicFiltering">
      <summary>
        <para>Global anisotropic filtering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.lodBias">
      <summary>
        <para>Global multiplier for the LOD's switching distance.</para>
        <para>A larger value leads to a longer view distance before a lower resolution LOD is picked.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.maximumLODLevel">
      <summary>
        <para>A maximum LOD level. All LOD groups.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.particleRaycastBudget">
      <summary>
        <para>Budget for how many ray casts can be performed per frame for approximate collision testing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.softVegetation">
      <summary>
        <para>Use a two-pass shader for the vegetation in the terrain engine.</para>
        <para>If enabled, vegetation will have smoothed edges, if disabled all plants
will have hard edges but are rendered roughly twice as fast.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.maxQueuedFrames">
      <summary>
        <para>Maximum number of frames queued up by graphics driver.</para>
        <para>Graphics drivers can queue up frames to be rendered. When CPU has much less work to do than the graphics card,
is it possible for this queue to become quite large. In those cases, user's input will "lag behind"
what is on the screen.Use QualitySettings.maxQueuedFrames to limit maximum number of frames that are queued. The default value is -1,
which does not limit the queue.Note that using a low maxQueuedFrames value can lower your FPS count, because CPU will be waiting until the graphics card
will finish rendering previous frames. But you will get lower input latency.Currently maxQueuedFrames is only implemented in Direct3D renderer; it will be ignored in OpenGL.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.vSyncCount">
      <summary>
        <para>The VSync Count.</para>
        <para>The number of VSyncs that should pass between each frame. Use 'Don't Sync' (0) to not wait for VSync.
Value must be 0, 1 or 2.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.antiAliasing">
      <summary>
        <para>Set The AA Filtering option.</para>
        <para>The AntiAliazing filter can be set to either 0,2,4 or 8. This coresponds to the number of multisamples used per pixel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.desiredColorSpace">
      <summary>
        <para>Desired color space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.activeColorSpace">
      <summary>
        <para>Active color space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.QualitySettings.blendWeights">
      <summary>
        <para>Blend weights.</para>
        <para>The Blend weights can be set to either One Bone, Two Bones or Four Bones.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CameraClearFlags">
      <summary>
        <para>Values for Camera.clearFlags, determining what to clear when rendering a <see cref="Camera">Camera</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraClearFlags.Skybox">
      <summary>
        <para>Clear with the skybox.</para>
        <para>If a skybox is not set up, the Camera will clear with a backgroundColor.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraClearFlags.SolidColor">
      <summary>
        <para>Clear with a background color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraClearFlags.Depth">
      <summary>
        <para>Clear only the depth buffer.</para>
        <para>This will leave colors from the previous frame or whatever was displayed before.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CameraClearFlags.Nothing">
      <summary>
        <para>Don't clear anything.</para>
        <para>This will leave colors and depth buffer from the previous frame or whatever was displayed before.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DepthTextureMode">
      <summary>
        <para>Depth texture generation mode for <see cref="Camera">Camera</see>.</para>
        <para>The flags can be combined, so you can set a Camera to generate both a Depth and Depth+Normals texture if needed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DepthTextureMode.None">
      <summary>
        <para>Do not generate depth texture (Default).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DepthTextureMode.Depth">
      <summary>
        <para>Generate a depth texture.</para>
        <para>Will generate a screen-space depth texture as seen from this camera.
Texture will be in RenderTextureFormat.Depth format and will be set as _CameraDepthTexture
global shader property.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DepthTextureMode.DepthNormals">
      <summary>
        <para>Generate a depth + normals texture.</para>
        <para>Will generate a screen-space depth and view space normals texture as seen from this camera.
Texture will be in RenderTextureFormat.ARGB32 format and will be set as _CameraDepthNormalsTexture
global shader property. Depth and normals will be specially encoded, see Camera
Depth Texture page for details.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AnisotropicFiltering">
      <summary>
        <para>Anisotropic filtering mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnisotropicFiltering.Disable">
      <summary>
        <para>Disable anisotropic filtering for all textures.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnisotropicFiltering.Enable">
      <summary>
        <para>Enable anisotropic filtering, as set for each texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AnisotropicFiltering.ForceEnable">
      <summary>
        <para>Enable anisotropic filtering for all textures.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BlendWeights">
      <summary>
        <para>Blend weights.</para>
        <para>How many bones affect each vertex.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BlendWeights.OneBone">
      <summary>
        <para>One bone affects each vertex.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BlendWeights.TwoBones">
      <summary>
        <para>Two bones affect each vertex.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.BlendWeights.FourBones">
      <summary>
        <para>Four bones affect each vertex.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextureCompressionQuality">
      <summary>
        <para>Compression Quality.</para>
        <para>Corresponds to the settings in a texture inspector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureCompressionQuality.Fast">
      <summary>
        <para>Fast compression.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureCompressionQuality.Normal">
      <summary>
        <para>Normal compression (default).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextureCompressionQuality.Best">
      <summary>
        <para>Best compression.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MeshFilter">
      <summary>
        <para>A class to access the <see cref="Mesh">Mesh</see> of the <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-MeshFilter.html">mesh filter</see>.</para>
        <para>Use this with a procedural mesh interface. </para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshFilter.mesh">
      <summary>
        <para>Returns the instantiated <see cref="Mesh">Mesh</see> assigned to the mesh filter.</para>
        <para>If no mesh is assigned to the mesh filter a new mesh will be created and assigned.If a mesh is assigned to the mesh filter already, then first query of mesh property will create a duplicate of it, and this copy
will be returned. Further queries of mesh property will return this duplicated mesh instance. If you want to avoid this automatic
mesh duplication, use MeshFilter.sharedMesh instead.By using mesh property you can modify the mesh for a single object only. The
other objects that used the same mesh will not be modified.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MeshFilter.sharedMesh">
      <summary>
        <para>Returns the shared mesh of the mesh filter.</para>
        <para>It is recommended to use this function only for reading mesh data
and not for writing, since you might modify imported assets and all objects
that use this mesh will be affected.
Also, be aware that is not possible to undo the changes done to this mesh.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CombineInstance">
      <summary>
        <para>Struct used to describe meshes to be combined using Mesh.CombineMeshes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CombineInstance.mesh">
      <summary>
        <para>
          <see cref="Mesh">Mesh</see> to combine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CombineInstance.subMeshIndex">
      <summary>
        <para>Submesh index of the mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.CombineInstance.transform">
      <summary>
        <para>Matrix to transform the mesh with before combining.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MeshTopology">
      <summary>
        <para>Topology of <see cref="Mesh">Mesh</see> faces.</para>
        <para>Normally meshes are composed of triangles (three vertex indices per face), but
in some cases you might want to render complex things that are made up from lines
or points. Creating a Mesh with that topology and using it to render is usually the
most efficient way.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.Triangles">
      <summary>
        <para>Mesh is made from triangles.</para>
        <para>Each three indices in the mesh index buffer form a triangular face.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.Quads">
      <summary>
        <para>Mesh is made from quads.</para>
        <para>Each four indices in the mesh index buffer form a quadrangular face.
Note that quad topology is emulated on many platforms, so it's more efficient
to use a triangular mesh. Unless you really need quads, for example if using
DirectX 11 tessellation shaders that operate on quad patches.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.Lines">
      <summary>
        <para>Mesh is made from lines.</para>
        <para>Each two indices in the mesh index buffer form a line.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.LineStrip">
      <summary>
        <para>Mesh is a line strip.</para>
        <para>First two indices form a line, and then each new index connects a new
vertex to the existing line strip.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MeshTopology.Points">
      <summary>
        <para>Mesh is made from points.</para>
        <para>In most of use cases, mesh index buffer should be "indendity":
0, 1, 2, 3, 4, 5, ...</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Mesh">
      <summary>
        <para>A class that allows creating or modifying meshes from scripts.</para>
        <para>Meshes contain vertices and multiple triangle arrays.
See the Procedural example project
for examples of using the mesh interface.The triangle arrays are simply indices into the vertex arrays; three indices for each triangle.For every vertex there can be a normal, two texture coordinates, color and tangent.
These are optional though and can be removed at will. All vertex information is stored in separate
arrays of the same size, so if your mesh has 10 vertices, you would also have 10-size arrays
for normals and other attributes.There are probably 3 things you might want to use the modifyable mesh interface for:1. Building a mesh from scratch:
should always be done in the following order: 1) assign vertices 2) assign triangles.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.#ctor">
      <summary>
        <para>Creates an empty mesh.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.Clear(System.Boolean)">
      <summary>
        <para>Clears all vertex data and all triangle indices.</para>
        <para>You should call this function before rebuilding triangles array.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.Clear">
      <summary>
        <para>Clears all vertex data and all triangle indices.</para>
        <para>You should call this function before rebuilding triangles array.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateBounds">
      <summary>
        <para>Recalculate the bounding volume of the mesh from the vertices.</para>
        <para>After modifying vertices you should call this function to ensure the bounding volume is correct.
Assigning triangles will automatically Recalculate the bounding volume.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.RecalculateNormals">
      <summary>
        <para>Recalculates the normals of the mesh from the triangles and vertices.</para>
        <para>After modifying the vertices it is often useful to update the normals to reflect the change.
Normals are calculated from all shared vertices.
Imported meshes sometimes don't share all vertices. For example a vertex at a uv seam will be split into two vertices.
Thus the RecalculateNormals function will create normals that are not smooth at the uv seam.
Also note that RecalculateNormals does not generate tangents automatically thus bumpmap shaders will not work with the mesh
after calling RecalculateNormals. You can provide your own tangents however.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.Optimize">
      <summary>
        <para>Optimizes the mesh for display.</para>
        <para>This operation might take a while but will make the geometry displayed be faster.
You should use it if you generate a mesh from scratch procedurally and you want to trade better runtime performance against higher load time. Internally it optimizes the triangles for vertex cache locality.
For imported models you should never call this as the import pipeline already does it for you.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.GetTriangles(System.Int32)">
      <summary>
        <para>Returns the triangle list for the submesh.</para>
        <para>A submesh is simply a separate triangle list. When the mesh renderer uses multiple materials, you should
ensure that there are as many submeshes as materials.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.SetTriangles(System.Int32[],System.Int32)">
      <summary>
        <para>Sets the triangle list for the submesh.</para>
        <para>A submesh is simply a separate triangle list. When the mesh renderer uses multiple materials, you should
ensure that there are as many submeshes as materials.It is recommended to assign a the triangle array after assigning the vertex array in order to avoid out of bounds errors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.GetIndices(System.Int32)">
      <summary>
        <para>Returns the index buffer for the submesh.</para>
        <para>The layout of indices depends on the topology of a submesh, for example
for triangular mesh each triangle will result in three indices.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.SetIndices(System.Int32[],UnityEngine.MeshTopology,System.Int32)">
      <summary>
        <para>Sets the index buffer for the submesh.</para>
        <para>A submesh is simply a separate indices array. When the mesh renderer uses multiple materials, you should
ensure that there are as many submeshes as materials.SetTriangles and ::triangles always make the mesh be composed of triangles
faces. Using SetIndices you can create a mesh that's made out of lines or points,
see MeshTopology enum.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.GetTopology(System.Int32)">
      <summary>
        <para>Gets the topology of a submesh.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[],System.Boolean,System.Boolean)">
      <summary>
        <para>Combines several meshes into this mesh.</para>
        <para>Combining meshes is useful for performance optimization.
If mergeSubMeshes is true, all the meshes will be combined to a single submesh. Otherwise each mesh will
go into a different submesh. If all meshes share the same material, set this to true.
If useMatrices is false, the transform matrices in CombineInstance structs will be ignored.</para>
      </summary>
      <param name="combine">Descriptions of the meshes to combine.</param>
      <param name="mergeSubMeshes">Should all meshes be combined into a single submesh?</param>
      <param name="useMatrices">Should the transforms supplied in the CombineInstance array be used or ignored?</param>
    </member>
    <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[],System.Boolean)">
      <summary>
        <para>Combines several meshes into this mesh.</para>
        <para>Combining meshes is useful for performance optimization.
If mergeSubMeshes is true, all the meshes will be combined to a single submesh. Otherwise each mesh will
go into a different submesh. If all meshes share the same material, set this to true.
If useMatrices is false, the transform matrices in CombineInstance structs will be ignored.</para>
      </summary>
      <param name="combine">Descriptions of the meshes to combine.</param>
      <param name="mergeSubMeshes">Should all meshes be combined into a single submesh?</param>
    </member>
    <member name="M:UnityEngine.Mesh.CombineMeshes(UnityEngine.CombineInstance[])">
      <summary>
        <para>Combines several meshes into this mesh.</para>
        <para>Combining meshes is useful for performance optimization.
If mergeSubMeshes is true, all the meshes will be combined to a single submesh. Otherwise each mesh will
go into a different submesh. If all meshes share the same material, set this to true.
If useMatrices is false, the transform matrices in CombineInstance structs will be ignored.</para>
      </summary>
      <param name="combine">Descriptions of the meshes to combine.</param>
    </member>
    <member name="M:UnityEngine.Mesh.MarkDynamic">
      <summary>
        <para>Optimize mesh for frequent updates.</para>
        <para>Call this before assigning vertices to get better performance when continually updating mesh.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.UploadMeshData(System.Boolean)" />
    <member name="M:UnityEngine.Mesh.GetBlendShapeName(System.Int32)">
      <summary>
        <para>Returns name of BlendShape by given index.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mesh.GetBlendShapeIndex(System.String)" />
    <member name="P:UnityEngine.Mesh.isReadable">
      <summary>
        <para>Returns state of the Read/Write Enabled checkbox when model was imported.</para>
        <para>For a dynamic Mesh created from script, always returns true.Meshes not marked readable will throw an error on accessing any data arrays from script at runtime.
Access is allowed in Unity's editor outside of the game and rendering loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.vertices">
      <summary>
        <para>Returns a copy of the vertex positions or assigns a new vertex positions array.</para>
        <para>The number of vertices in the mesh is changed by assigning a vertex array with a different number of vertices.
Note that if you resize the vertex array then all other vertex attributes (normals, colors, tangents, UVs) will be automatically resized too.
RecalculateBounds will automatically be invoked if no vertices have been assigned to the mesh when setting the vertices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.normals">
      <summary>
        <para>The normals of the mesh.</para>
        <para>If the mesh contains no normals an empty array will be returned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.tangents">
      <summary>
        <para>The tangents of the mesh.</para>
        <para>Tangents are mostly used in bump-mapped shaders. A tangent is a unit length vector that follows mesh
surface along horizontal (U) texture direction. Tangents in Unity are represented as Vector4,
with x,y,z components defining the vector, and w used to flip the binormal if needed.Unity calculates the other surface vector (binormal) by taking a cross product between normal
and tangent, and multiplying result by tangent.w. Thus w should always be 1 or -1.You should calculate tangents yourself if you plan to use bump-mapped shaders on the mesh.
Assign tangents after assigning normals or using RecalculateNormals.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv">
      <summary>
        <para>The base texture coordinates of the mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.uv2">
      <summary>
        <para>The second texture coordinate set of the mesh, if present.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.bounds">
      <summary>
        <para>The bounding volume of the mesh.</para>
        <para>This is the axis-aligned bounding box of the mesh in its local space (that is, not affected
by the transform). See also Renderer.bounds property that returns bounds in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.colors">
      <summary>
        <para>Vertex colors of the mesh.</para>
        <para>If no vertex colors are available an empty array will be returned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.colors32">
      <summary>
        <para>Vertex colors of the mesh.</para>
        <para>Same as colors, except using Color32 structure which is better for performance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.triangles">
      <summary>
        <para>An array containing all triangles in the mesh.</para>
        <para>The array is a list of triangles that contains indices into the vertex array. The size of the triangle array must always be a multiple of 3.
Vertices can be shared by simply indexing into the same vertex.
If the mesh contains multiple sub meshes (materials) the triangle list will contain all triangles of all submeshes.
When you assign triangle array, subMeshCount is set to 1. If you want to have multiple sub meshes, use subMeshCount
and SetTriangles.It is recommended to assign a the triangle array after assigning the vertex array in order to avoid out of bounds errors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.vertexCount">
      <summary>
        <para>Returns the number of vertices in the mesh (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.subMeshCount">
      <summary>
        <para>The number of submeshes. Every material has a separate triangle list.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.boneWeights">
      <summary>
        <para>The bone weights of each vertex.</para>
        <para>The size of the array is either the same as vertexCount or empty.Each vertex can be affected by up to 4 different bones.
All 4 bone weights should sum up to 1.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.bindposes">
      <summary>
        <para>The bind poses. The bind pose at each index refers to the bone with the same index.</para>
        <para>The bind pose is the inverse of inverse transformation matrix of the bone, when the bone is in the bind pose.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Mesh.blendShapeCount">
      <summary>
        <para>Returns BlendShape count on this mesh.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BoneWeight">
      <summary>
        <para>Skinning bone weights of a vertex in the mesh.</para>
        <para>Each vertex is skinned with up to four bones. All weights should sum up to one.
Weights and bone indices should be defined in the order of decreasing weight.
If a vertex is affected by less than four bones, the remaining weights should be zeroes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.weight0">
      <summary>
        <para>Skinning weight for first bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.weight1">
      <summary>
        <para>Skinning weight for second bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.weight2">
      <summary>
        <para>Skinning weight for third bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.weight3">
      <summary>
        <para>Skinning weight for fourth bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.boneIndex0">
      <summary>
        <para>Index of first bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.boneIndex1">
      <summary>
        <para>Index of second bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.boneIndex2">
      <summary>
        <para>Index of third bone.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BoneWeight.boneIndex3">
      <summary>
        <para>Index of fourth bone.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SkinQuality">
      <summary>
        <para>/ The maximum number of bones affecting a single vertex.</para>
        <para>/ </para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinQuality.Auto">
      <summary>
        <para>Chooses the number of bones from the number current <see cref="QualitySettings">QualitySettings</see>. (Default)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinQuality.Bone1">
      <summary>
        <para>Use only 1 bone to deform a single vertex. (The most important bone will be used).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinQuality.Bone2">
      <summary>
        <para>Use 2 bones to deform a single vertex. (The most important bones will be used).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SkinQuality.Bone4">
      <summary>
        <para>Use 4 bones to deform a single vertex.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SkinnedMeshRenderer">
      <summary>
        <para>The Skinned Mesh filter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SkinnedMeshRenderer.BakeMesh(UnityEngine.Mesh)">
      <summary>
        <para>Creates a snapshot of SkinnedMeshRenderer and stores it in <c>mesh</c>.</para>
        <para>The vertices are relative to the SkinnedMeshRenderer Transform component. Note that the snapshot is still computed even when updateWhenOffscreen is set to false and the skinned mesh object is currently offscreen.</para>
      </summary>
      <param name="mesh">A static mesh that will receive the snapshot of the skinned mesh.</param>
    </member>
    <member name="M:UnityEngine.SkinnedMeshRenderer.GetBlendShapeWeight(System.Int32)">
      <summary>
        <para>Returns weight of BlendShape on this renderer.</para>
        <para>Index must be smaller than Mesh.blendShapeCount of a mesh attached to this renderer. 
At weight 0 BlendShape has no influence, at weight 1 BlendShape is fully active, 
but weight is not limited to [0; 1] range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SkinnedMeshRenderer.SetBlendShapeWeight(System.Int32,System.Single)">
      <summary>
        <para>Sets weight of BlendShape on this renderer.</para>
        <para>Index must be smaller than Mesh.blendShapeCount of a mesh attached to this renderer. 
At weight 0 BlendShape has no influence, at weight 1 BlendShape is fully active, 
but weight is not limited to [0; 1] range.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.bones">
      <summary>
        <para>The bones used to skin the mesh.</para>
        <para>See the code example for Mesh.bindposes for further details.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.rootBone" />
    <member name="P:UnityEngine.SkinnedMeshRenderer.quality">
      <summary>
        <para>The maximum number of bones affecting a single vertex.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.sharedMesh">
      <summary>
        <para>The mesh used for skinning.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.updateWhenOffscreen">
      <summary>
        <para>If enabled, the Skinned Mesh will be updated when offscreen. If disabled, this also disables updating animations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SkinnedMeshRenderer.localBounds">
      <summary>
        <para>AABB of this Skinned Mesh in its local space.</para>
        <para>It is precomputed on import for imported models based on animations associated with that model, which means that
the bounding box might be much bigger than the mesh itself. It is recomputed every time when
updateWhenOffscreen is enabled, but in this case it would be exactly the size of the mesh at that frame.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Flare">
      <summary>
        <para>A flare asset. Read more about flares in the <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Flare.html">components reference</see>.</para>
        <para>The flare class has no properties. It needs to be setup up in the inspector.
You can reference flares and assign them to a Light at runtime.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LensFlare">
      <summary>
        <para>Script interface for a <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-LensFlare.html">Lens flare component</see>.</para>
        <para>This allows you to change the brightness and color of lens flares at runtime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LensFlare.flare">
      <summary>
        <para>The <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Flare.html">flare asset</see> to use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LensFlare.brightness">
      <summary>
        <para>The strength of the flare.</para>
        <para>This controls the size and brightness of the flare elements.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LensFlare.fadeSpeed">
      <summary>
        <para>The fade speed of the flare.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LensFlare.color">
      <summary>
        <para>The color of the flare.</para>
        <para>This controls the color of some flare elements (the ones that have use light color enabled).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Renderer">
      <summary>
        <para>General functionality for all renderers.</para>
        <para>A renderer is what makes an object appear on the screen. For any game object or component its
renderer can be accessed trough a renderer property:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Renderer.SetPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Lets you add per-renderer material parameters without duplicating a material.</para>
        <para>This is recommended when changing material properties often. With multithreaded rendering,
it is more efficient than setting properties directly on the material.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Renderer.GetPropertyBlock(UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Get per-renderer material property block.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Renderer.Render(System.Int32)" />
    <member name="P:UnityEngine.Renderer.isPartOfStaticBatch">
      <summary>
        <para>Has this renderer been statically batched with any other renderers?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.worldToLocalMatrix">
      <summary>
        <para>Matrix that transforms a point from world space into local space (Read Only).</para>
        <para>This property MUST be used instead of Transform.worldToLocalMatrix, if you're setting shader parameters.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.localToWorldMatrix">
      <summary>
        <para>Matrix that transforms a point from local space into world space (Read Only).</para>
        <para>This property MUST be used instead of Transform.localToWorldMatrix, if you're setting shader parameters.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.enabled">
      <summary>
        <para>Makes the rendered 3D object visible if enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.castShadows">
      <summary>
        <para>Does this object cast shadows?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.receiveShadows">
      <summary>
        <para>Does this object receive shadows?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.material">
      <summary>
        <para>The material of this object.</para>
        <para>Modifying material will change the material for this object only.If the material is used by any other renderers,
this will clone the shared material and start using it from now on.
Important note: This function automatically instantiates the materials and makes them unique to this renderer.
It is your responsibility to destroy the materials when the game object is being destroyed. Resources.UnloadUnusedAssets
also destroys the materials but it is usually only called when loading a new level.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sharedMaterial">
      <summary>
        <para>The shared material of this object.</para>
        <para>Modifying sharedMaterial will change the appearance of all objects using this material,
and change material settings that are stored in the project too.It is not recommended to modify materials returned by sharedMaterial.
If you want to modify the material of a renderer use material instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sharedMaterials">
      <summary>
        <para>All the shared materials of this object.</para>
        <para>This is an array of all materials used by the renderer. Unity supports a single object
using multiple materials; in this case sharedMaterials contains all the materials.
sharedMaterial and material properties return the first used material if
there is more than one.Modifying any material in sharedMaterials will change the appearance of all objects
using this material, and change material settings that are stored in the project too.It is not recommended to modify materials returned by sharedMaterials.
If you want to modify the material of a renderer use material instead.Note that like all arrays returned by Unity, this returns a copy of materials
array. If you want to change some materials in it, get the value, change an entry and
set materials back.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.materials">
      <summary>
        <para>All the materials of this object.</para>
        <para>This is an array of all materials used by the renderer. Unity supports a single object
using multiple materials; in this case materials contains all the materials.
sharedMaterial and material properties return the first used material if
there is more than one.Modifying any material in materials will change the appearance of only that object.Note that like all arrays returned by Unity, this returns a copy of materials
array. If you want to change some materials in it, get the value, change an entry and
set materials back.
Important note: This function automatically instantiates the materials and makes them unique to this renderer.
It is your responsibility to destroy the materials when the game object is being destroyed. Resources.UnloadUnusedAssets
also destroys the materials but it is usually only called when loading a new level.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.bounds">
      <summary>
        <para>The bounding volume of the renderer (Read Only).</para>
        <para>This is the axis-aligned bounding box fully enclosing the object in world space.Using bounds is convenient to make rough approximations about the object's location
and its extents. For example, /renderer.bounds.center/ often is more precise
"center of the object" than /transform.position/ - especially if the object is not
symmetrical.See also Mesh.bounds property that returns bounds of the mesh in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.lightmapIndex">
      <summary>
        <para>The index of the lightmap applied to this renderer.</para>
        <para>The index refers to lightmaps array in LightmapSettings class. A value of 255 means
no lightmap has been assigned, which is the default. A value of 254 is internally used for objects,
that have their scale in lightmap set to 0, so behave as lightmapped, but don't have a lightmap assigned.
The index can't be larger than 253.A scene can have several lightmaps stored in it, and Renderer can use one of those lightmaps.
This makes it possible to use the same material on multiple objects, while
each object can refer to a different lightmap or different portion of the same lightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.lightmapTilingOffset">
      <summary>
        <para>The tiling &amp;amp; offset used for lightmap.</para>
        <para>A scene can have several lightmaps stored in it, and Renderer can use one of those lightmaps.
This makes it possible to use the same material on multiple objects, while
each object can refer to a different lightmap or different portion of the same lightmap.The vector's x and y refers to the lightmap scale, while z and w refers to the lightmap offset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.isVisible">
      <summary>
        <para>Is this renderer visible in any camera? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.useLightProbes">
      <summary>
        <para>Use light probes for this Renderer.</para>
        <para>If enabled and baked light probes are present in the scene, an interpolated light probe
will be calculated for this object and set as built-in shader uniform variables.
Surface shaders use this information automatically. To add light probe contribution to
your custom non-surface shaders, use ShadeSH9(worldSpaceNormal) in your vertex or pixel shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.lightProbeAnchor">
      <summary>
        <para>If set, Renderer will use this Transform's position to find the interpolated light probe.</para>
        <para>Otherwise the center of Renderer's AABB will be used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sortingLayerName">
      <summary>
        <para>Name of the Renderer's sorting layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sortingLayerID">
      <summary>
        <para>ID of the Renderer's sorting layer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Renderer.sortingOrder">
      <summary>
        <para>Renderer's order within a sorting layer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Projector">
      <summary>
        <para>A script interface for a <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Projector.html">projector component</see>.</para>
        <para>The Projector can be used to project any material onto the scene - just like a real world projector.
The properties exposed by this class are an exact match for the values in the Projector's inspector.It can be used to implement blob or projected shadows. You could also project an animated texture or
a render texture that films another part of the scene. The projector will render all objects in
its view frustum with the provided material.There is no shortcut property in GameObject or Component to access the Projector, so you must
use GetComponent to do it:</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.nearClipPlane">
      <summary>
        <para>The near clipping plane distance.</para>
        <para>The projector will not affect anything that is nearer than this distance.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.farClipPlane">
      <summary>
        <para>The far clipping plane distance.</para>
        <para>The projector will not affect anything that is further than this distance.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.fieldOfView">
      <summary>
        <para>The field of view of the projection in degrees.</para>
        <para>This is the vertical field of view; horizontal FOV varies depending on the aspectRatio.
Field of view is ignored when projector is orthographic (see orthographic).
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.aspectRatio">
      <summary>
        <para>The aspect ratio of the projection.</para>
        <para>This is projection width divided by height. An aspect ratio of 1.0
makes the projection square; a ratio of 2.0 makes it twice as wide
than high.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.orthographic">
      <summary>
        <para>Is the projection orthographic (<i>true</i>) or perspective (<i>false</i>)?</para>
        <para>When orthographic is true, projection is defined by orthographicSize.
When orthographic is false, projection is defined by fieldOfView.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.orthographicSize">
      <summary>
        <para>Projection's half-size when in orthographic mode.</para>
        <para>This is half of the vertical size of the projection volume. Horizontal projection
size varies depending on aspectRatio.
Orthographic size is ignored when projection is not orthographic (see orthographic).
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.orthoGraphicSize">
      <summary>
        <para>Projection's half-size when in orthographic mode.</para>
        <para>This is half of the vertical size of the projection volume. Horizontal projection
size varies depending on aspectRatio.
Orthographic size is ignored when projection is not orthographic (see orthographic).
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.ignoreLayers">
      <summary>
        <para>Which object layers are ignored by the projector.</para>
        <para>See layer mask.By default this is zero - i.e. no layers are ignored. Each set bit
in ignoreLayers will make this layer not affected by the projector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Projector.material">
      <summary>
        <para>The material that will be projected onto every object.</para>
        <para>Projector does nothing if it has no material set up.
The Standard Assets package
contains an example of Projector's material in Blob-Shadow folder.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Skybox">
      <summary>
        <para>A script interface for the <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Skybox.html">skybox component</see>.</para>
        <para>The skybox class has only the material property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Skybox.#ctor" />
    <member name="P:UnityEngine.Skybox.material">
      <summary>
        <para>The material used by the skybox.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextMesh">
      <summary>
        <para>A script interface for the <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-TextMesh.html">text mesh component</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextMesh.#ctor" />
    <member name="P:UnityEngine.TextMesh.text">
      <summary>
        <para>The text that is displayed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.font">
      <summary>
        <para>The <see cref="Font">Font</see> used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.fontSize">
      <summary>
        <para>The font size to use (for dynamic fonts).</para>
        <para>If this is set to a non-zero value, the font size specified in the font importer is overriden with a custom size.
This is only supported for fonts set to use dynamic font rendering. Other fonts will always use the default font size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.fontStyle">
      <summary>
        <para>The font style to use (for dynamic fonts).</para>
        <para>If this is set to a value other then normal, the font style set in the font importer is overriden with a custom style.
This is only supported for fonts set to use dynamic font rendering. Other fonts will always render in normal style.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.offsetZ">
      <summary>
        <para>How far should the text be offset from the transform.position.z when drawing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.alignment">
      <summary>
        <para>How lines of text are aligned (Left, Right, Center).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.anchor">
      <summary>
        <para>Which point of the text shares the position of the Transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.characterSize">
      <summary>
        <para>The size of each character (This scales the whole text).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.lineSpacing">
      <summary>
        <para>How much space will be in-between lines of text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.tabSize">
      <summary>
        <para>How much space will be inserted for a tab '\t' character. This is a multiplum of the 'spacebar' character offset.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.richText">
      <summary>
        <para>Enable HTML-style tags for Text Formatting Markup.</para>
        <para>Supported tags are:
&amp;lt;color="htmlcolor"&amp;gt;colored text&amp;lt;/color&amp;gt;, where "htmlcolor" is a html color string, like "#ff0000" or "red".
&amp;lt;b&amp;gt;bold text&amp;lt;/b&amp;gt;
&amp;lt;i&amp;gt;italic text&amp;lt;/i&amp;gt;
&amp;lt;size=20&amp;gt;sized text&amp;lt;/size&amp;gt;
&amp;lt;material=1&amp;gt;render using custom material index&amp;lt;/material&amp;gt;
&amp;lt;quad material=1 size=20 x=0.1 y=0.1 width=0.5 height=0.5&amp;gt;, to render a single quad using the given material and UVs, used for embedding images in text.
These are only supported for fonts set to use dynamic font rendering, except for the 'color', 'material' and 'quad' tags.Note that richText in Unity is not a full html implementation.  Other tags are not supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextMesh.color">
      <summary>
        <para>The color used to render the text.</para>
        <para>This is the base color used to render the text. &amp;lt;color&amp;gt; tags in rich text markup will override this.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Particle">
      <summary>
        <para>(Legacy Particle system).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Particle.position">
      <summary>
        <para>The position of the particle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Particle.velocity">
      <summary>
        <para>The velocity of the particle.</para>
        <para>If there is a particle animator it will move the particle by the velocity every frame.
The velocity is also used by the particle renderer if Stretch Particles is
set to ParticleRenderMode.Stretch.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Particle.energy">
      <summary>
        <para>The energy of the particle.</para>
        <para>This is the time in seconds for how long this particle will remain alive.
When the energy drops below zero the the Particle will be killed.The energy is also used for UV animation: 
If energy equals Particle.startEnergy the first tile will be used. 
If energy equals 0 the last tile will be used.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Particle.startEnergy">
      <summary>
        <para>The starting energy of the particle.</para>
        <para>This is the total lifetime of this particle in seconds. It is set by the particle emitter, when creating the particle.
This is used to calculate the color and UV animation for the particle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Particle.size">
      <summary>
        <para>The size of the particle.</para>
        <para>This is particle's size in meters in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Particle.rotation">
      <summary>
        <para>The rotation of the particle.</para>
        <para>This is particle's rotation in degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Particle.angularVelocity">
      <summary>
        <para>The angular velocity of the particle.</para>
        <para>This is particle's angular velocity in degrees per second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Particle.color">
      <summary>
        <para>The color of the particle.</para>
        <para>Alpha channel of the color is used to fade out particles.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleEmitter">
      <summary>
        <para>(Legacy Particles) Script interface for particle emitters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleEmitter.ClearParticles">
      <summary>
        <para>Removes all particles from the particle emitter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleEmitter.Emit">
      <summary>
        <para>Emit a number of particles.</para>
        <para>Makes the emitter spit out a random number of particles, as set by the minEmission
and maxEmission properties.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleEmitter.Emit(System.Int32)">
      <summary>
        <para>Emit <c>count</c> particles immediately.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleEmitter.Emit(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color)">
      <summary>
        <para>Emit a single particle with given parameters.</para>
      </summary>
      <param name="pos">The position of the particle.</param>
      <param name="velocity">The velocity of the particle.</param>
      <param name="size">The size of the particle.</param>
      <param name="energy">The remaining lifetime of the particle.</param>
      <param name="color">The color of the particle.</param>
    </member>
    <member name="M:UnityEngine.ParticleEmitter.Emit(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color,System.Single,System.Single)">
      <param name="rotation">The initial rotation of the particle in degrees.</param>
      <param name="angularVelocity">The angular velocity of the particle in degrees per second.</param>
    </member>
    <member name="M:UnityEngine.ParticleEmitter.Simulate(System.Single)">
      <summary>
        <para>Advance particle simulation by given time.</para>
        <para>This is useful for pre-warming particle emitters.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.emit">
      <summary>
        <para>Should particles be automatically emitted each frame?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.minSize">
      <summary>
        <para>The minimum size each particle can be at the time when it is spawned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.maxSize">
      <summary>
        <para>The maximum size each particle can be at the time when it is spawned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.minEnergy">
      <summary>
        <para>The minimum lifetime of each particle, measured in seconds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.maxEnergy">
      <summary>
        <para>The maximum lifetime of each particle, measured in seconds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.minEmission">
      <summary>
        <para>The minimum number of particles that will be spawned every second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.maxEmission">
      <summary>
        <para>The maximum number of particles that will be spawned every second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.emitterVelocityScale">
      <summary>
        <para>The amount of the emitter's speed that the particles inherit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.worldVelocity">
      <summary>
        <para>The starting speed of particles in world space, along X, Y, and Z.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.localVelocity">
      <summary>
        <para>The starting speed of particles along X, Y, and Z, measured in the object's orientation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.rndVelocity">
      <summary>
        <para>A random speed along X, Y, and Z that is added to the velocity.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.useWorldSpace">
      <summary>
        <para>If enabled, the particles don't move when the emitter moves. If false, when you move the emitter, the particles follow it around.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.rndRotation">
      <summary>
        <para>If enabled, the particles will be spawned with random rotations.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.angularVelocity">
      <summary>
        <para>The angular velocity of new particles in degrees per second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.rndAngularVelocity">
      <summary>
        <para>A random angular velocity modifier for new particles.</para>
        <para>A random value in the range of  [-rndAngularVelocity, rndAngularVelocity] will be applied to all new particles,
in addition to ParticleEmitter.angularVelocity
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.particles">
      <summary>
        <para>Returns a copy of all particles and assigns an array of all particles to be the current particles.</para>
        <para>Note that after modifying the particles array you must assign it back to the particleEmitter to see the change.
Particles with energy of zero or less will be killed when assigning the particles. Thus when creating a complete new particle array,
you need to set the energy of all particles explicitly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.particleCount">
      <summary>
        <para>The current number of particles (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleEmitter.enabled">
      <summary>
        <para>Turns the ParticleEmitter on or off.</para>
        <para>A ParticleEmitter which is not enabled will not emit any particles, and the emitted particles will not animate.
So, this value allows you to pause a particle emitter.The default value is true.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleAnimator">
      <summary>
        <para>(Legacy Particles) Particle animators move your particles over time, you use them to apply wind, drag &amp;amp; color cycling to your particle emitters.</para>
        <para>This class is a script interface for a particle animator component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleAnimator.doesAnimateColor">
      <summary>
        <para>Do particles cycle their color over their lifetime?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleAnimator.worldRotationAxis">
      <summary>
        <para>World space axis the particles rotate around.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleAnimator.localRotationAxis">
      <summary>
        <para>Local space axis the particles rotate around.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleAnimator.sizeGrow">
      <summary>
        <para>How the particle sizes grow over their lifetime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleAnimator.rndForce">
      <summary>
        <para>A random force added to particles every frame.</para>
        <para>Use this to make smoke become more alive.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleAnimator.force">
      <summary>
        <para>The force being applied to particles every frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleAnimator.damping">
      <summary>
        <para>How much particles are slowed down every frame.</para>
        <para>A value of 1 gives no damping, while smaller values makes them slow down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleAnimator.autodestruct">
      <summary>
        <para>Does the <see cref="GameObject">GameObject</see> of this particle animator auto destructs?</para>
        <para>When set to true, the GameObject will be destroyed when all particles disappear.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleAnimator.colorAnimation">
      <summary>
        <para>Colors the particles will cycle through over their lifetime.</para>
        <para>Currently you cannot directly modify a single index of this array.  Instead, you need to grab
the entire array, modify it, and assign it back to the Particle Animator.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TrailRenderer">
      <summary>
        <para>The trail renderer is used to make trails behind objects in the scene as they move about.</para>
        <para>This class is a script interface for a trail renderer component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.time">
      <summary>
        <para>How long does the trail take to fade out.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.startWidth">
      <summary>
        <para>The width of the trail at the spawning point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.endWidth">
      <summary>
        <para>The width of the trail at the end of the trail.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TrailRenderer.autodestruct">
      <summary>
        <para>Does the <see cref="GameObject">GameObject</see> of this trail renderer auto destructs?</para>
        <para>When set to true, the GameObject will be destroyed when it is not moving anymore.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleRenderMode">
      <summary>
        <para>The rendering mode for legacy particles.</para>
        <para>This is used by the ParticleRenderer to determine how to render the particles.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleRenderMode.Billboard">
      <summary>
        <para>Render the particles as billboards facing the player. (Default)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleRenderMode.Stretch">
      <summary>
        <para>Stretch particles in the direction of motion.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleRenderMode.SortedBillboard">
      <summary>
        <para>Sort the particles back-to-front and render as billboards.</para>
        <para>This looks better with blended particle shaders, but is slower because of the sorting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleRenderMode.HorizontalBillboard">
      <summary>
        <para>Render the particles as billboards always facing up along the y-Axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleRenderMode.VerticalBillboard">
      <summary>
        <para>Render the particles as billboards always facing the player, but not pitching along the x-Axis.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleRenderer">
      <summary>
        <para>(Legacy Particles) Renders particles on to the screen.</para>
        <para>This class is a script interface for a particle renderer component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleRenderer.particleRenderMode">
      <summary>
        <para>How particles are drawn.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleRenderer.lengthScale">
      <summary>
        <para>How much are the particles stretched in their direction of motion.</para>
        <para>Use this to make particles always be longer than they are wide.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleRenderer.velocityScale">
      <summary>
        <para>How much are the particles strectched depending on "how fast they move".</para>
        <para>Use this to make particles get longer as their speed increases.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleRenderer.cameraVelocityScale">
      <summary>
        <para>How much are the particles strected depending on the <see cref="Camera">Camera</see>'s speed.</para>
        <para>Use this to make particles become large if the viewing camera has a large speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleRenderer.maxParticleSize">
      <summary>
        <para>Clamp the maximum particle size.</para>
        <para>Particles can become very heavy on fillrate. Use this setting to make sure they don't
use too much perfomance when up close to the viewer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleRenderer.uvAnimationXTile">
      <summary>
        <para>Set horizontal tiling count.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleRenderer.uvAnimationYTile">
      <summary>
        <para>Set vertical tiling count.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleRenderer.uvAnimationCycles">
      <summary>
        <para>Set uv animation cycles.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LineRenderer">
      <summary>
        <para>The line renderer is used to draw free-floating lines in 3D space.</para>
        <para>This class is a script interface for a line renderer component.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetWidth(System.Single,System.Single)">
      <summary>
        <para>Set the line width at the start and at the end.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetColors(UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Set the line color at the start and at the end.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetVertexCount(System.Int32)">
      <summary>
        <para>Set the number of line segments.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LineRenderer.SetPosition(System.Int32,UnityEngine.Vector3)">
      <summary>
        <para>Set the position of the vertex in the line.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LineRenderer.useWorldSpace">
      <summary>
        <para>If enabled, the lines are defined in world space.</para>
        <para>This means the object's position is ignored, and the lines are rendered around world origin.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MaterialPropertyBlock">
      <summary>
        <para>A block of material values to apply.</para>
        <para>MaterialPropertyBlock is used by Graphics.DrawMesh and Renderer.SetPropertyBlock. Use
it in situations where you want to draw
multiple objects with the same material, but slightly different properties. For example, if you
want to slightly change the color of each mesh drawn.Unity's terrain engine uses MaterialPropertyBlock to draw trees; all of them use the
same material, but each tree has different color, scale &amp;amp; wind factor.The block passed to Graphics.DrawMesh or Renderer.SetPropertyBlock is copied, so the most efficient way of using it is
to create one block and reuse it for all DrawMesh calls. Use Clear to clear block's values,
and SetFloat, SetVector, SetColor, SetMatrix, SetTexture to add or replace values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetFloat(System.String,System.Single)">
      <summary>
        <para>Set a float material property.</para>
        <para>Adds a property to the block. If a float property with the given name already exists, the old value is replaced.Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly,
use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to SetFloat.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetFloat(System.Int32,System.Single)">
      <summary>
        <para>Set a float material property.</para>
        <para>Adds a property to the block. If a float property with the given name already exists, the old value is replaced.Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly,
use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to SetFloat.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Set a vector material property.</para>
        <para>Adds a property to the block. If a vector property with the given name already exists, the old value is replaced.Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly,
use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to SetVector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Set a vector material property.</para>
        <para>Adds a property to the block. If a vector property with the given name already exists, the old value is replaced.Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly,
use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to SetVector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetColor(System.String,UnityEngine.Color)">
      <summary>
        <para>Set a color property.</para>
        <para>Adds a property to the block. If a color property with the given name already exists, the old value is replaced.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetColor(System.Int32,UnityEngine.Color)">
      <summary>
        <para>Set a color property.</para>
        <para>Adds a property to the block. If a color property with the given name already exists, the old value is replaced.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Set a matrix material property.</para>
        <para>Adds a property to the block. If a matrix property with the given name already exists, the old value is replaced.Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly,
use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to SetMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Set a matrix material property.</para>
        <para>Adds a property to the block. If a matrix property with the given name already exists, the old value is replaced.Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly,
use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to SetMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetTexture(System.String,UnityEngine.Texture)">
      <summary>
        <para>Set a texture material property.</para>
        <para>Adds a property to the block. If a texture property with the given name already exists, the old value is replaced.Note that texture properties in the MaterialPropertyBlock will not work with fixed-function shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.SetTexture(System.Int32,UnityEngine.Texture)">
      <summary>
        <para>Set a texture material property.</para>
        <para>Adds a property to the block. If a texture property with the given name already exists, the old value is replaced.Note that texture properties in the MaterialPropertyBlock will not work with fixed-function shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddFloat(System.String,System.Single)">
      <summary>
        <para>Add a float material property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddFloat(System.Int32,System.Single)">
      <summary>
        <para>Add a float material property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Add a vector material property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Add a vector material property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddColor(System.String,UnityEngine.Color)">
      <summary>
        <para>Add a color material property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddColor(System.Int32,UnityEngine.Color)">
      <summary>
        <para>Add a color material property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Add a matrix material property.</para>
        <para>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly,
use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Add a matrix material property.</para>
        <para>Function variant that takes nameID is faster. If you are adding properties with the same name repeatedly,
use Shader.PropertyToID to get unique identifier for the name, and pass the identifier to AddMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddTexture(System.String,UnityEngine.Texture)">
      <summary>
        <para>Add a texture material property.</para>
        <para>Note that texture properties in the MaterialPropertyBlock will not work with fixed-function shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.AddTexture(System.Int32,UnityEngine.Texture)">
      <summary>
        <para>Add a texture material property.</para>
        <para>Note that texture properties in the MaterialPropertyBlock will not work with fixed-function shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetFloat(System.String)">
      <summary>
        <para>Get a float from the property block.</para>
        <para>Returns zero if not found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetFloat(System.Int32)">
      <summary>
        <para>Get a float from the property block.</para>
        <para>Returns zero if not found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetVector(System.String)">
      <summary>
        <para>Get a vector from the property block.</para>
        <para>Returns zero vector if not found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetVector(System.Int32)">
      <summary>
        <para>Get a vector from the property block.</para>
        <para>Returns zero vector if not found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrix(System.String)">
      <summary>
        <para>Get a matrix from the property block.</para>
        <para>Returns identity matrix if not found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetMatrix(System.Int32)">
      <summary>
        <para>Get a matrix from the property block.</para>
        <para>Returns identity matrix if not found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetTexture(System.String)">
      <summary>
        <para>Get a texture from the property block.</para>
        <para>Returns null if not found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.GetTexture(System.Int32)">
      <summary>
        <para>Get a texture from the property block.</para>
        <para>Returns null if not found.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MaterialPropertyBlock.Clear">
      <summary>
        <para>Clear material property values.</para>
        <para>Graphics.DrawMesh copies the passed property block, so the most efficient way of using it is
to create one block and reuse it for all DrawMesh calls. Use Clear to clear block's values,
and AddFloat, AddVector, AddColor, AddMatrix to add values.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderBuffer">
      <summary>
        <para>Color or depth buffer part of a <see cref="RenderTexture">RenderTexture</see>.</para>
        <para>A single RenderTexture object represents both color and depth buffers,
but many complex rendering algorithms require using the same depth buffer
with multiple color buffers or vice versa.This class represents either a color or a depth buffer part of a RenderTexture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Graphics">
      <summary>
        <para>Raw interface to Unity's drawing functions.</para>
        <para>This is the high-level shortcut into the optimized mesh drawing functionality of Unity.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
      <param name="camera">If <c>null</c> (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
      <param name="camera">If <c>null</c> (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
      <param name="camera">If <c>null</c> (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See <see cref="MaterialPropertyBlock">MaterialPropertyBlock</see>.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
      <param name="camera">If <c>null</c> (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
      <param name="camera">If <c>null</c> (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
      <param name="camera">If <c>null</c> (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See <see cref="MaterialPropertyBlock">MaterialPropertyBlock</see>.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,System.Boolean,System.Boolean)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
      <param name="camera">If <c>null</c> (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See <see cref="MaterialPropertyBlock">MaterialPropertyBlock</see>.</param>
      <param name="castShadows">Should the mesh cast shadows?</param>
      <param name="receiveShadows">Should the mesh receive shadows?</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMesh(UnityEngine.Mesh,UnityEngine.Matrix4x4,UnityEngine.Material,System.Int32,UnityEngine.Camera,System.Int32,UnityEngine.MaterialPropertyBlock,System.Boolean,System.Boolean)">
      <summary>
        <para>Draw a mesh.</para>
        <para>DrawMesh draws a mesh for one frame. The mesh will be affected by the lights, can cast and receive shadows and be
affected by Projectors - just like it was part of some game object. It can be drawn for all cameras or just for
some specific camera.Use DrawMesh in situations where you want to draw large amount of meshes, but don't want the overhead of creating and
managing game objects. Note that DrawMesh does not draw the mesh immediately; it merely "submits" it for rendering. The mesh
will be rendered as part of normal rendering process. If you want to draw a mesh immediately, use Graphics.DrawMeshNow.Because DrawMesh does not draw mesh immediately, modifying material properties between calls to this function won't make
the meshes pick up them. If you want to draw series of meshes with the same material, but slightly different
properties (e.g. change color of each mesh), use MaterialPropertyBlock parameter.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations).</param>
      <param name="material">
        <see cref="Material">Material</see> to use.</param>
      <param name="layer">
        <see href="http://docs.unity3d.com/ScriptReference/../Manual/Layers.html">Layer</see> to use.</param>
      <param name="camera">If <c>null</c> (default), the mesh will be drawn in all cameras. Otherwise it will be rendered in the given camera only.</param>
      <param name="submeshIndex">Which subset of the mesh to draw. This applies only to meshes that are composed of several materials.</param>
      <param name="properties">Additional material properties to apply onto material just before this mesh will be drawn. See <see cref="MaterialPropertyBlock">MaterialPropertyBlock</see>.</param>
      <param name="castShadows">Should the mesh cast shadows?</param>
      <param name="receiveShadows">Should the mesh receive shadows?</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Draw a mesh immediately.</para>
        <para>This function will draw a given mesh immediately. Currently set shader and
material (see Material.SetPass) will be used. The mesh will be just drawn once,
it won't be per-pixel lit and will not cast or receive realtime shadows. If you want
full integration with lighting and shadowing, use Graphics.DrawMesh instead.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32)">
      <summary>
        <para>Draw a mesh immediately.</para>
        <para>This function will draw a given mesh immediately. Currently set shader and
material (see Material.SetPass) will be used. The mesh will be just drawn once,
it won't be per-pixel lit and will not cast or receive realtime shadows. If you want
full integration with lighting and shadowing, use Graphics.DrawMesh instead.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="position">Position of the mesh.</param>
      <param name="rotation">Rotation of the mesh.</param>
      <param name="materialIndex">Subset of the mesh to draw.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Matrix4x4)">
      <summary>
        <para>Draw a mesh immediately.</para>
        <para>This function will draw a given mesh immediately. Currently set shader and
material (see Material.SetPass) will be used. The mesh will be just drawn once,
it won't be per-pixel lit and will not cast or receive realtime shadows. If you want
full integration with lighting and shadowing, use Graphics.DrawMesh instead.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations). Note that the mesh will not be displayed correctly if matrix has negative scale.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawMeshNow(UnityEngine.Mesh,UnityEngine.Matrix4x4,System.Int32)">
      <summary>
        <para>Draw a mesh immediately.</para>
        <para>This function will draw a given mesh immediately. Currently set shader and
material (see Material.SetPass) will be used. The mesh will be just drawn once,
it won't be per-pixel lit and will not cast or receive realtime shadows. If you want
full integration with lighting and shadowing, use Graphics.DrawMesh instead.</para>
      </summary>
      <param name="mesh">The <see cref="Mesh">Mesh</see> to draw.</param>
      <param name="matrix">Transformation matrix of the mesh (combines position, rotation and other transformations). Note that the mesh will not be displayed correctly if matrix has negative scale.</param>
      <param name="materialIndex">Subset of the mesh to draw.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProcedural(UnityEngine.MeshTopology,System.Int32,System.Int32)">
      <summary>
        <para>Draws a fully procedural geometry on the GPU.</para>
        <para>DrawProcedural does a draw call on the GPU, without any vertex or index buffers.
This is only useful on DirectX 11 level hardware where shaders can read
arbitrary data from ComputeBuffer buffers.Note that this call executes immediately, similar to Graphics.DrawMeshNow. It uses currently set render target, transformation matrices and currently set shader pass.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProcedural(UnityEngine.MeshTopology,System.Int32)">
      <summary>
        <para>Draws a fully procedural geometry on the GPU.</para>
        <para>DrawProcedural does a draw call on the GPU, without any vertex or index buffers.
This is only useful on DirectX 11 level hardware where shaders can read
arbitrary data from ComputeBuffer buffers.Note that this call executes immediately, similar to Graphics.DrawMeshNow. It uses currently set render target, transformation matrices and currently set shader pass.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirect(UnityEngine.MeshTopology,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Draws a fully procedural geometry on the GPU.</para>
        <para>DrawProceduralIndirect does a draw call on the GPU, without any vertex or index buffers.
The amount of geometry to draw is read from a ComputeBuffer. Typical use
case is generating arbitrary amount of data from a ComputeShader and
then rendering that, without requiring a readback to the CPU.This is only useful on DirectX 11 level hardware where shaders can read
arbitrary data from ComputeBuffer buffers.Buffer with arguments, bufferWithArgs, has to have four integer numbers at given argsOffset offset:
vertex count per instance, instance count, start vertex location, start instance location.
This very much maps to Direct3D11 DrawInstancedIndirect function.Note that this call executes immediately, similar to Graphics.DrawMeshNow. It uses currently set render target, transformation matrices and currently set shader pass.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.DrawProceduralIndirect(UnityEngine.MeshTopology,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Draws a fully procedural geometry on the GPU.</para>
        <para>DrawProceduralIndirect does a draw call on the GPU, without any vertex or index buffers.
The amount of geometry to draw is read from a ComputeBuffer. Typical use
case is generating arbitrary amount of data from a ComputeShader and
then rendering that, without requiring a readback to the CPU.This is only useful on DirectX 11 level hardware where shaders can read
arbitrary data from ComputeBuffer buffers.Buffer with arguments, bufferWithArgs, has to have four integer numbers at given argsOffset offset:
vertex count per instance, instance count, start vertex location, start instance location.
This very much maps to Direct3D11 DrawInstancedIndirect function.Note that this call executes immediately, similar to Graphics.DrawMeshNow. It uses currently set render target, transformation matrices and currently set shader pass.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
        <para>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint
events. It's probably better to use GUI.DrawTexture for GUI code.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">
        <see cref="Texture">Texture</see> to draw.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
        <para>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint
events. It's probably better to use GUI.DrawTexture for GUI code.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">
        <see cref="Texture">Texture</see> to draw.</param>
      <param name="mat">Custom <see cref="Material">Material</see> that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
        <para>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint
events. It's probably better to use GUI.DrawTexture for GUI code.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">
        <see cref="Texture">Texture</see> to draw.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
        <para>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint
events. It's probably better to use GUI.DrawTexture for GUI code.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">
        <see cref="Texture">Texture</see> to draw.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="mat">Custom <see cref="Material">Material</see> that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
        <para>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint
events. It's probably better to use GUI.DrawTexture for GUI code.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">
        <see cref="Texture">Texture</see> to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
        <para>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint
events. It's probably better to use GUI.DrawTexture for GUI code.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">
        <see cref="Texture">Texture</see> to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="mat">Custom <see cref="Material">Material</see> that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
        <para>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint
events. It's probably better to use GUI.DrawTexture for GUI code.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">
        <see cref="Texture">Texture</see> to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">
        <see cref="Color">Color</see> that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
    </member>
    <member name="M:UnityEngine.Graphics.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in screen coordinates.</para>
        <para>If you want to draw a texture from inside of OnGUI code, you should only do that from EventType.Repaint
events. It's probably better to use GUI.DrawTexture for GUI code.</para>
      </summary>
      <param name="screenRect">Rectangle on the screen to use for the texture. In pixel coordinates with (0,0) in the upper-left corner.</param>
      <param name="texture">
        <see cref="Texture">Texture</see> to draw.</param>
      <param name="sourceRect">Region of the texture to use. In normalized coordinates with (0,0) in the bottom-left corner.</param>
      <param name="leftBorder">Number of pixels from the left that are not affected by scale.</param>
      <param name="rightBorder">Number of pixels from the right that are not affected by scale.</param>
      <param name="topBorder">Number of pixels from the top that are not affected by scale.</param>
      <param name="bottomBorder">Number of pixels from the bottom that are not affected by scale.</param>
      <param name="color">
        <see cref="Color">Color</see> that modulates the output. The neutral value is (0.5, 0.5, 0.5, 0.5). Set as vertex color for the shader.</param>
      <param name="mat">Custom <see cref="Material">Material</see> that can be used to draw the texture. If null is passed, a default material with the Internal-GUITexture.shader is used.</param>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture)">
      <summary>
        <para>Copies source texture into destination render texture.</para>
        <para>This is mostly used for implementing image effects,
and requires Unity Pro.Blit sets dest to be active render texture, sets source as
_MainTex property on the material, and draws a full-screen quad.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">Destination <see cref="RenderTexture">RenderTexture</see>, or <c>null</c> to blit directly to screen.</param>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Copies source texture into destination render texture.</para>
        <para>This is mostly used for implementing image effects,
and requires Unity Pro.Blit sets dest to be active render texture, sets source as
_MainTex property on the material, and draws a full-screen quad.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">Destination <see cref="RenderTexture">RenderTexture</see>, or <c>null</c> to blit directly to screen.</param>
      <param name="mat">Material to use for copying. Material's shader could do some post-processing effect, for example.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.Blit(UnityEngine.Texture,UnityEngine.Material,System.Int32)">
      <summary>
        <para>Copies source texture into destination render texture.</para>
        <para>This is mostly used for implementing image effects,
and requires Unity Pro.Blit sets dest to be active render texture, sets source as
_MainTex property on the material, and draws a full-screen quad.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="mat">Material to use for copying. Material's shader could do some post-processing effect, for example.</param>
      <param name="pass">If -1 (default), draws all passes in the material. Otherwise, draws given pass only.</param>
    </member>
    <member name="M:UnityEngine.Graphics.BlitMultiTap(UnityEngine.Texture,UnityEngine.RenderTexture,UnityEngine.Material,UnityEngine.Vector2[])">
      <summary>
        <para>Copies source texture into destination, for multi-tap shader.</para>
        <para>This is mostly used for implementing some image effects. For example,
Gaussian or iterative Cone blurring samples source texture at multiple different locations.
Requires Unity Pro.BlitMultiTap sets dest to be active render texture, sets source as
_MainTex property on the material, and draws a full-screen quad. Each vertex of the quad
has multiple texture coordinates set up, offset by offsets pixels.</para>
      </summary>
      <param name="source">Source texture.</param>
      <param name="dest">Destination <see cref="RenderTexture">RenderTexture</see>, or <c>null</c> to blit directly to screen.</param>
      <param name="mat">Material to use for copying. Material's shader should do some post-processing effect.</param>
      <param name="offsets">Variable number of filtering offsets. Offsets are given in pixels.</param>
    </member>
    <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderTexture)">
      <summary>
        <para>Sets current render target.</para>
        <para>This function sets which RenderTexture or a RenderBuffer combination will be
rendered into next. Use it when implementing custom rendering algorithms, where
you need to render something into a render texture manually.
Requires Unity Pro.Variants with mipLevel and face arguments enable rendering into a specific mipmap level of a RenderTexture, or specific cubemap face of a cubemap RenderTexture.The function call with colorBuffers array enables techniques that use
Multiple Render Targets (MRT), where fragment shader can output more
than one final color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderTexture,System.Int32)">
      <summary>
        <para>Sets current render target.</para>
        <para>This function sets which RenderTexture or a RenderBuffer combination will be
rendered into next. Use it when implementing custom rendering algorithms, where
you need to render something into a render texture manually.
Requires Unity Pro.Variants with mipLevel and face arguments enable rendering into a specific mipmap level of a RenderTexture, or specific cubemap face of a cubemap RenderTexture.The function call with colorBuffers array enables techniques that use
Multiple Render Targets (MRT), where fragment shader can output more
than one final color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderTexture,System.Int32,UnityEngine.CubemapFace)">
      <summary>
        <para>Sets current render target.</para>
        <para>This function sets which RenderTexture or a RenderBuffer combination will be
rendered into next. Use it when implementing custom rendering algorithms, where
you need to render something into a render texture manually.
Requires Unity Pro.Variants with mipLevel and face arguments enable rendering into a specific mipmap level of a RenderTexture, or specific cubemap face of a cubemap RenderTexture.The function call with colorBuffers array enables techniques that use
Multiple Render Targets (MRT), where fragment shader can output more
than one final color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderBuffer,UnityEngine.RenderBuffer)">
      <summary>
        <para>Sets current render target.</para>
        <para>This function sets which RenderTexture or a RenderBuffer combination will be
rendered into next. Use it when implementing custom rendering algorithms, where
you need to render something into a render texture manually.
Requires Unity Pro.Variants with mipLevel and face arguments enable rendering into a specific mipmap level of a RenderTexture, or specific cubemap face of a cubemap RenderTexture.The function call with colorBuffers array enables techniques that use
Multiple Render Targets (MRT), where fragment shader can output more
than one final color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.SetRenderTarget(UnityEngine.RenderBuffer[],UnityEngine.RenderBuffer)">
      <summary>
        <para>Sets current render target.</para>
        <para>This function sets which RenderTexture or a RenderBuffer combination will be
rendered into next. Use it when implementing custom rendering algorithms, where
you need to render something into a render texture manually.
Requires Unity Pro.Variants with mipLevel and face arguments enable rendering into a specific mipmap level of a RenderTexture, or specific cubemap face of a cubemap RenderTexture.The function call with colorBuffers array enables techniques that use
Multiple Render Targets (MRT), where fragment shader can output more
than one final color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.SetRandomWriteTarget(System.Int32,UnityEngine.RenderTexture)">
      <summary>
        <para>Set random write target for DX11 pixel shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.SetRandomWriteTarget(System.Int32,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Set random write target for DX11 pixel shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Graphics.ClearRandomWriteTargets">
      <summary>
        <para>Clear random write targets for DX11 pixel shaders.</para>
        <para>This function clears any "random write" targets that were previously set with SetRandomWriteTarget.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Graphics.activeColorBuffer">
      <summary>
        <para>Currently active color buffer (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Graphics.activeDepthBuffer">
      <summary>
        <para>Currently active depth buffer (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Resolution">
      <summary>
        <para>Represents a display resolution.</para>
        <para>Resolution structures are returned by Screen.resolutions property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Resolution.width">
      <summary>
        <para>Resolution width in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Resolution.height">
      <summary>
        <para>Resolution height in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Resolution.refreshRate">
      <summary>
        <para>Resolution's vertical refresh rate in Hz.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightmapData">
      <summary>
        <para>Data of a lightmap.</para>
        <para>A scene can have several lightmaps stored in it, and Renderer components can use those
lightmaps. This makes it possible to use the same material on multiple objects, while
each object can refer to a different lightmap or different portion of the same lightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapData.lightmapFar">
      <summary>
        <para>Lightmap storing the full incoming light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapData.lightmapNear">
      <summary>
        <para>Lightmap storing only the indirect incoming light.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightmapsMode">
      <summary>
        <para>Single, dual, or directional lightmaps rendering mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapsMode.Single">
      <summary>
        <para>Single, traditional lightmap rendering mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapsMode.Dual">
      <summary>
        <para>Dual lightmap rendering mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LightmapsMode.Directional">
      <summary>
        <para>Directional rendering mode.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ColorSpace">
      <summary>
        <para>Valid color spaces.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorSpace.Uninitialized">
      <summary>
        <para>Uninitialized colorspace.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorSpace.Gamma">
      <summary>
        <para>Lightmap has been baked for gamma rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ColorSpace.Linear">
      <summary>
        <para>Lightmap has been baked for linear rendering.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbes">
      <summary>
        <para>Stores light probes for the scene.</para>
        <para>The baked data includes: probe positions, SH coefficients and the tetrahedral tesselation.
You can modify the coefficients at runtime. You can also swap the entire LightProbes object to
a different pre-baked one using LightmapSettings.lightProbes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LightProbes.GetInterpolatedLightProbe(UnityEngine.Vector3,UnityEngine.Renderer,System.Single[])">
      <summary>
        <para>Returns spherical harmonics coefficients of a light probe at the given position. The light probe is interpolated from the light probes baked.</para>
        <para>For the scene. The coefficients represent a 3-band RGB spherical harmonics probe, with a total of 27 floats laid out: rgbrgbrgb...
Renderer is only needed to speed up the search for the current tetrahedron, as it caches the index of the tetrahedron it was in the last frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbes.positions">
      <summary>
        <para>Positions of the baked light probes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbes.coefficients">
      <summary>
        <para>Coefficients of the baked light probes. The coefficients represent a 3-band RGB spherical harmonics probe, with a total of 27 floats per light probe, laid out: rgbrgbrgb...</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbes.count">
      <summary>
        <para>The number of light probes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbes.cellCount">
      <summary>
        <para>The number of cells (tetrahedra + outer cells) the space is divided to.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightmapSettings">
      <summary>
        <para>Stores lightmaps of the scene.</para>
        <para>A scene can have several lightmaps stored in it, and Renderer components can use those
lightmaps. This makes it possible to use the same material on multiple objects, while
each object can refer to a different lightmap or different portion of the same lightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapSettings.lightmaps">
      <summary>
        <para>Lightmap array.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapSettings.lightmapsMode">
      <summary>
        <para>Single, Dual or Directional lightmaps rendering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapSettings.bakedColorSpace">
      <summary>
        <para>Color space of the lightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightmapSettings.lightProbes">
      <summary>
        <para>Holds all data needed by the light probes.</para>
        <para>It can be swapped to a different pre-baked one at runtime.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GeometryUtility">
      <summary>
        <para>Utility class for common geometric functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GeometryUtility.CalculateFrustumPlanes(UnityEngine.Camera)">
      <summary>
        <para>Calculates frustum planes.</para>
        <para>This function takes given camera's view frustum and returns six planes
that form it.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GeometryUtility.CalculateFrustumPlanes(UnityEngine.Matrix4x4)">
      <summary>
        <para>Calculates frustum planes.</para>
        <para>This function returns six planes of a frustum defined by given view &amp;amp; projection matrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GeometryUtility.TestPlanesAABB(UnityEngine.Plane[],UnityEngine.Bounds)">
      <summary>
        <para>Returns true if bounds are inside the plane array.</para>
        <para>Will return true if the bounding box is inside the planes or intersects any of the planes.The TestPlanesAABB function uses the Plane array to test whether a bounding box is in the frustum or not.
You can use this function with CalculateFrustrumPlanes to test whether a camera's view contains an object
regardless of whether it is rendered or not.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ScreenOrientation">
      <summary>
        <para>Describes screen orientation.</para>
        <para>Currently this is only relevant on mobile devices.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.Portrait">
      <summary>
        <para>Portrait orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.PortraitUpsideDown">
      <summary>
        <para>Portrait orientation, upside down.</para>
        <para>Available on iOS and on Android 2.3+. On older Androids falls back to Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.LandscapeLeft">
      <summary>
        <para>Landscape orientation, counter-clockwise from the portrait orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.LandscapeRight">
      <summary>
        <para>Landscape orientation, clockwise from the portrait orientation.</para>
        <para>Available on iOS and on Android 2.3+. On older Androids falls
back to LandscapeLeft.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScreenOrientation.AutoRotation">
      <summary>
        <para>Auto-rotates the screen as necessary toward any of the enabled orientations.</para>
        <para>When this option is assigned to the Screen.orientation property, the screen will auto-rotate so that the bottom of the screen image points downwards. The orientations that can be used are set by the Screen.autorotateToLandscapeLeft, Screen.autorotateToLandscapeRight, Screen.autorotateToPortrait and Screen::autorotateToPortraitUpsideDown properties. For example, if Screen.autorotateToPortrait and Screen::autorotateToPortraitUpsideDown are both true but the others are false then the auto-rotation will never choose either of the landscape options even when the device is held with the long side of the screen pointing downwards.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Screen">
      <summary>
        <para>Access to display information.</para>
        <para>Screen class can be used to get the list of supported resolutions, switch the current resolution, hide or
show the system mouse pointer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Screen.#ctor" />
    <member name="M:UnityEngine.Screen.SetResolution(System.Int32,System.Int32,System.Boolean,System.Int32)">
      <summary>
        <para>Switches the screen resolution.</para>
        <para>A width by height resolution will be used.
If no matching resolution is supported, the closest one will be used.If preferredRefreshRate is 0 (default) Unity will switch to the highest refresh rate supported by the monitor.
If preferredRefreshRate is not 0 Unity will use it if the monitor supports it, otherwise will choose
the highest supported one.In the web player you may only switch resolutions after the user has clicked on the content.
The recommended way of doing it is to switch resolutions only when the user clicks on a designated button.On Android fullscreen controls the SYSTEM_UI_FLAG_LOW_PROFILE flag to View.setSystemUiVisibility(), on
devices running Honeycomb (OS 3.0 / API 11) or later.On Windows Store Apps, switching to non-native resolution is only supported starting from Windows 8.1 and newer.A resolution switch does not happen immediately; it will actually happen when the current frame is finished.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Screen.SetResolution(System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Switches the screen resolution.</para>
        <para>A width by height resolution will be used.
If no matching resolution is supported, the closest one will be used.If preferredRefreshRate is 0 (default) Unity will switch to the highest refresh rate supported by the monitor.
If preferredRefreshRate is not 0 Unity will use it if the monitor supports it, otherwise will choose
the highest supported one.In the web player you may only switch resolutions after the user has clicked on the content.
The recommended way of doing it is to switch resolutions only when the user clicks on a designated button.On Android fullscreen controls the SYSTEM_UI_FLAG_LOW_PROFILE flag to View.setSystemUiVisibility(), on
devices running Honeycomb (OS 3.0 / API 11) or later.On Windows Store Apps, switching to non-native resolution is only supported starting from Windows 8.1 and newer.A resolution switch does not happen immediately; it will actually happen when the current frame is finished.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.resolutions">
      <summary>
        <para>All fullscreen resolutions supported by the monitor (Read Only).</para>
        <para>The returned resolutions are sorted by width, lower resolutions come first.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.GetResolution" />
    <member name="P:UnityEngine.Screen.currentResolution">
      <summary>
        <para>The current screen resolution (Read Only).</para>
        <para>If the player is running in window mode, this returns the current resolution of the desktop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.showCursor">
      <summary>
        <para>Should the cursor be visible?</para>
        <para>It is entirely possible to implement a custom cursor instead of the system one. To do this you would
hide the system one, track mouse position or movement and display your own image in the needed place.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.lockCursor">
      <summary>
        <para>Should the cursor be locked?</para>
        <para>The cursor will automatically be hidden, centered on view and made to never leave the view.In the web player, the cursor may only be locked after the user has clicked on the content and the user has not left the content view with the cursor.
After the user presses escape or switches to another application the cursor will be automatically unlocked.
The cursor lock will also be lost when exiting full screen mode.
You can query if the cursor is currently locked by checking the lockCursor state.
To provide a good user experience it is recommended to only lock the cursor as a result of pressing a button.
Also you should check if the cursor got unlocked, in order to e.g. pause the game or bring up a game menu.
In the Web Player and Editor the cursor will automatically be unlocked when you press escape.
In the Standalone Player you have full control over mouse locking thus it won't automatically lose mouse lock unless you switch applications.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.width">
      <summary>
        <para>The current width of the screen window in pixels (Read Only).</para>
        <para>This is the actual width of the player window (in fullscreen it is also the current resolution).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.height">
      <summary>
        <para>The current height of the screen window in pixels (Read Only).</para>
        <para>This is the actual height of the player window (in fullscreen it is also the current resolution).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.dpi">
      <summary>
        <para>The current DPI of the screen / device (Read Only).</para>
        <para>This is the actual DPI of the screen attached or physical device running the application.
May return 0 if unable to determine the current DPI.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.fullScreen">
      <summary>
        <para>Is the game running fullscreen?</para>
        <para>It is possible to toggle fullscreen mode by changing this property:</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.autorotateToPortrait">
      <summary>
        <para>Allow auto-rotation to portrait?</para>
        <para>This setting is taken into account when orientation is set to AutoRotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.autorotateToPortraitUpsideDown">
      <summary>
        <para>Allow auto-rotation to portrait, upside down?</para>
        <para>This setting is taken into account when orientation is set to AutoRotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.autorotateToLandscapeLeft">
      <summary>
        <para>Allow auto-rotation to landscape left?</para>
        <para>This setting is taken into account when orientation is set to AutoRotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.autorotateToLandscapeRight">
      <summary>
        <para>Allow auto-rotation to landscape right?</para>
        <para>This setting is taken into account when orientation is set to AutoRotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.orientation">
      <summary>
        <para>Specifies logical orientation of the screen.</para>
        <para>Default value is taken from the 'Default Orientation' in Player Settings.
As an example, if we take 480x320 resolution on iPhone, horizontal
orientation is treated as 480x320 resolution and vertical orientation
as 320x480.Note: logical orientation affects not only screen orientation, but
also touch coordinates. You should expect drastic changes in the touch
positions after changing logical orientation, since touch positions
will be rotated clockwise or counter-clockwise to match screen
coordinates.Currently screen orientation is only relevant on mobile platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Screen.sleepTimeout">
      <summary>
        <para>A power saving setting, allowing the screen to dim some time after the last active user interaction.</para>
        <para>Most useful for handheld devices,
allowing OS to preserve battery life in most efficient ways. Does
nothing on non-handheld devices.sleepTimeout is measured in seconds. The default value varies from
platform to platform, generally being non-zero.On mobile devices it would be useful to set sleepTimeout to
[SleepTimeout.NeverSleep] for games using accelerometer as the main
source of input. However, such games should allow screen dimming while
in menu or paused. Currently you will only be able to set this property
to one of the values predefined in [SleepTimeout] class. A get
will return either one of the predefined values, or the actual number
of seconds until screen gets dimmed, as specified in system preferences
of the device.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SleepTimeout">
      <summary>
        <para>Constants for special values of <see cref="Screen-sleepTimeout">Screen.sleepTimeout</see>.</para>
        <para>Use them to specify something other than a fixed amount of seconds before dimming the screen.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SleepTimeout.#ctor" />
    <member name="F:UnityEngine.SleepTimeout.NeverSleep">
      <summary>
        <para>Prevent screen dimming.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SleepTimeout.SystemSetting">
      <summary>
        <para>Set the sleep timeout to whatever user has specified in the system settings.</para>
        <para>Useful when restoring back to the state the system was in before running your app.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GL">
      <summary>
        <para>Low-level graphics library.</para>
        <para>Use this class to manipulate active transformation matrices,
issue rendering commands similar to OpenGL's immediate mode and do other low-level
graphics tasks. Note that in almost all cases using Graphics.DrawMesh is more efficient than
using immediate mode drawing.GL immediate drawing functions use whatever is the "current material" set up right now.
The material controls how the rendering is done (blending, textures, etc.), so unless you explicitly
set it to something before using GL draw functions, the material can happen to be anything.
Also, if you call any other drawing commands from inside GL drawing code, they can set
material to something else, so make sure it's under control as well.GL drawing commands execute immediately. That means if you call them in Update(), they will be executed
before the camera is rendered (and the camera will most likely clear the screen, making the GL drawing
not visible).The usual place to call GL drawing is most often in OnPostRender() from a script attached to a camera</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.Vertex3(System.Single,System.Single,System.Single)">
      <summary>
        <para>Submit a vertex.</para>
        <para>In OpenGL this matches glVertex3f(x,y,z); on other graphics APIs the same
functionality is emulated.This function can only be called between GL.Begin and GL.End functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.Vertex(UnityEngine.Vector3)">
      <summary>
        <para>Submit a vertex.</para>
        <para>In OpenGL this matches glVertex3f(v.x,v.y,v.z); on other graphics APIs the same
functionality is emulated.This function can only be called between GL.Begin and GL.End functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.Color(UnityEngine.Color)">
      <summary>
        <para>Sets current vertex color.</para>
        <para>In OpenGL this matches glColor4f(c.r,c.g,c.b,c.a); on other graphics APIs the same
functionality is emulated.In order for per-vertex colors to work reliably across different hardware, you have to use
a shader that binds in the color channel. See BindChannels documentation.This function can only be called between GL.Begin and GL.End functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.TexCoord(UnityEngine.Vector3)">
      <summary>
        <para>Sets current texture coordinate (v.x,v.y,v.z) for all texture units.</para>
        <para>In OpenGL this matches glMultiTexCoord for all texture units or glTexCoord
when no multi-texturing is available. On other graphics APIs the same
functionality is emulated.The Z component is used only when:1. You access a cubemap (which you access with a vector coordinate, hence x,y &amp;amp; z).2. You do "projective texturing", where the X &amp;amp; Y coordinates are divided by Z to get the final coordinate. This would be mostly useful for water reflections and similar things.This function can only be called between GL.Begin and GL.End functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.TexCoord2(System.Single,System.Single)">
      <summary>
        <para>Sets current texture coordinate (x,y) for all texture units.</para>
        <para>In OpenGL this matches glMultiTexCoord for all texture units or glTexCoord
when no multi-texturing is available. On other graphics APIs the same
functionality is emulated.This function can only be called between GL.Begin and GL.End functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.TexCoord3(System.Single,System.Single,System.Single)">
      <summary>
        <para>Sets current texture coordinate (x,y,z) for all texture units.</para>
        <para>In OpenGL this matches glMultiTexCoord for all texture units or glTexCoord
when no multi-texturing is available. On other graphics APIs the same
functionality is emulated.The Z component is used only when:1. You access a cubemap (which you access with a vector coordinate, hence x,y &amp;amp; z).2. You do "projective texturing", where the X &amp;amp; Y coordinates are divided by Z to get the final coordinate. This would be mostly useful for water reflections and similar things.This function can only be called between GL.Begin and GL.End functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.MultiTexCoord2(System.Int32,System.Single,System.Single)">
      <summary>
        <para>Sets current texture coordinate (x,y) for the actual texture <c>unit</c>.</para>
        <para>In OpenGL this matches glMultiTexCoord for the given texture unit
if multi-texturing is available. On other graphics APIs the same
functionality is emulated.This function can only be called between GL.Begin and GL.End functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.MultiTexCoord3(System.Int32,System.Single,System.Single,System.Single)">
      <summary>
        <para>Sets current texture coordinate (x,y,z) to the actual texture <c>unit</c>.</para>
        <para>In OpenGL this matches glMultiTexCoord for the given texture unit
if multi-texturing is available. On other graphics APIs the same
functionality is emulated.The Z component is used only when:1. You access a cubemap (which you access with a vector coordinate, hence x,y &amp;amp; z).2. You do "projective texturing", where the X &amp;amp; Y coordinates are divided by Z to get the final coordinate. This would be mostly useful for water reflections and similar things.This function can only be called between GL.Begin and GL.End functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.MultiTexCoord(System.Int32,UnityEngine.Vector3)">
      <summary>
        <para>Sets current texture coordinate (v.x,v.y,v.z) to the actual texture <c>unit</c>.</para>
        <para>In OpenGL this matches glMultiTexCoord for the given texture unit
if multi-texturing is available. On other graphics APIs the same
functionality is emulated.The Z component is used only when:1. You access a cubemap (which you access with a vector coordinate, hence x,y &amp;amp; z).2. You do "projective texturing", where the X &amp;amp; Y coordinates are divided by Z to get the final coordinate. This would be mostly useful for water reflections and similar things.This function can only be called between GL.Begin and GL.End functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.Begin(System.Int32)">
      <summary>
        <para>Begin drawing 3D primitives.</para>
        <para>In OpenGL this matches glBegin; on other graphics APIs the same
functionality is emulated. Between GL.Begin and GL.End it is valid to
call GL.Vertex, GL.Color, GL.TexCoord and other immediate mode drawing
functions.You should be careful about culling when drawing primitives yourself. The culling rules
may be different depending on which graphics API the game is running. In most cases the
safest way is to use Cull Off command in the shader.</para>
      </summary>
      <param name="mode">Primitives to draw: can be <see cref="GL.TRIANGLES">TRIANGLES</see>, <see cref="GL.TRIANGLE_STRIP">TRIANGLE_STRIP</see>, <see cref="GL.QUADS">QUADS</see> or <see cref="GL.LINES">LINES</see>.</param>
    </member>
    <member name="M:UnityEngine.GL.End">
      <summary>
        <para>End drawing 3D primitives.</para>
        <para>In OpenGL this matches glEnd; on other graphics APIs the same
functionality is emulated.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.LoadOrtho">
      <summary>
        <para>Helper function to set up an ortho perspective transform.</para>
        <para>After calling LoadOrtho, the viewing frustum goes from (0,0,-1) to (1,1,100).
LoadOrtho can be used for drawing primitives in 2D.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.LoadPixelMatrix">
      <summary>
        <para>Setup a matrix for pixel-correct rendering.</para>
        <para>This sets up modelview and projection matrices so that X, Y coordinates map
directly to pixels. The (0,0) is at the bottom left corner of current camera's
viewport. The Z coordinate goes from -1 to +1.This function overrides current camera's parameters, so most often you want
to save and restore matrices using GL.PushMatrix and GL.PopMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.LoadPixelMatrix(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Setup a matrix for pixel-correct rendering.</para>
        <para>This sets up modelview and projection matrices so that X, Y coordinates map
directly to pixels. The (left,bottom is at the bottom left corner of current camera's
viewport; and (top,right) is at the top right corner of current camera's viewport.
The Z coordinate goes from -1 to +1.This function overrides current camera's parameters, so most often you want
to save and restore matrices using GL.PushMatrix and GL.PopMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.Viewport(UnityEngine.Rect)">
      <summary>
        <para>Set the rendering viewport.</para>
        <para>All rendering is constrained to be inside the passed pixelRect.
If the Viewport is modified, all the rendered content inside of it gets stretched.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.LoadProjectionMatrix(UnityEngine.Matrix4x4)">
      <summary>
        <para>Load an arbitrary matrix to the current projection matrix.</para>
        <para>This function overrides current camera's projection parameters, so most often you want
to save and restore projection matrix using GL.PushMatrix and GL.PopMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.LoadIdentity">
      <summary>
        <para>Load the identity matrix to the current modelview matrix.</para>
        <para>This function overrides current camera's view parameters, so most often you want
to save and restore matrix using GL.PushMatrix and GL.PopMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.MultMatrix(UnityEngine.Matrix4x4)">
      <summary>
        <para>Multiplies the current modelview matrix with the one specified.</para>
        <para>Equivalent to glMultMatrix(mat) in OpenGL; in other graphics APIs the
corresponding functionality is emulated.Changing modelview matrix overrides current camera's view parameters, so most
often you want to save and restore matrix using GL.PushMatrix and GL.PopMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.PushMatrix">
      <summary>
        <para>Saves both projection and modelview matrices to the matrix stack.</para>
        <para>Changing modelview or projection matrices overrides current camera's parameters.
These matrices can be saved and restored using GL.PushMatrix and GL.PopMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.PopMatrix">
      <summary>
        <para>Restores both projection and modelview matrices off the top of the matrix stack.</para>
        <para>Changing modelview or projection matrices overrides current camera's parameters.
These matrices can be saved and restored using GL.PushMatrix and GL.PopMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.GetGPUProjectionMatrix(UnityEngine.Matrix4x4,System.Boolean)">
      <summary>
        <para>Compute GPU projection matrix from camera's projection matrix.</para>
        <para>In Unity, projection matrices follow OpenGL convention. However on some platforms they
have to be transformed a bit to match the native API requirements. Use this function
to calculate how the final projection matrix will be like. The value will match what
comes as UNITY_MATRIX_P matrix in a shader.The renderIntoTexture value should be set to true if you intend to render into a
RenderTexture with this projection matrix. On some platforms it affects how
the final matrix will look like.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.SetRevertBackfacing(System.Boolean)">
      <summary>
        <para>Select whether to invert the backface culling (true) or not (false).</para>
        <para>Unlike most other calls, this is not only related to stuff you draw via GL class.
It changes culling of triangles globally.
Major use case: rendering reflections for mirrors, water etc. Since virtual camera for
rendering the reflection is mirrored, the culling order has to be inverted. You can see
that the Water script in Pro Standard Assets does that.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.Clear(System.Boolean,System.Boolean,UnityEngine.Color)">
      <summary>
        <para>Clear the current render buffer.</para>
        <para>This clears the screen or the active RenderTexture you are drawing into.
In most other situations, some camera is drawing something somewhere, and probably
is clearing already with the background color of the skybox.</para>
      </summary>
      <param name="clearDepth">Should the depth buffer be cleared?</param>
      <param name="clearColor">Should the color buffer be cleared?</param>
      <param name="backgroundColor">The color to clear with, used only if <c>clearColor</c> is <c>true</c>.</param>
    </member>
    <member name="M:UnityEngine.GL.Clear(System.Boolean,System.Boolean,UnityEngine.Color,System.Single)">
      <summary>
        <para>Clear the current render buffer.</para>
        <para>This clears the screen or the active RenderTexture you are drawing into.
In most other situations, some camera is drawing something somewhere, and probably
is clearing already with the background color of the skybox.</para>
      </summary>
      <param name="clearDepth">Should the depth buffer be cleared?</param>
      <param name="clearColor">Should the color buffer be cleared?</param>
      <param name="backgroundColor">The color to clear with, used only if <c>clearColor</c> is <c>true</c>.</param>
      <param name="depth">The depth to clear Z buffer with, used only if <c>clearDepth</c> is <c>true</c>.</param>
    </member>
    <member name="M:UnityEngine.GL.ClearWithSkybox(System.Boolean,UnityEngine.Camera)">
      <summary>
        <para>Clear the current render buffer with camera's skybox.</para>
        <para>This draws skybox into the screen or the active RenderTexture.
If the passed camera does not have custom Skybox component,
the global skybox from RenderSettings will be used.</para>
      </summary>
      <param name="clearDepth">Should the depth buffer be cleared?</param>
      <param name="camera">Camera to get projection parameters and skybox from.</param>
    </member>
    <member name="M:UnityEngine.GL.InvalidateState">
      <summary>
        <para>Invalidate the internally cached renderstates.</para>
        <para>This invalidates any cached renderstates tied to the GL context.
If for example a (native) plugin alters the renderstate settings
then Unity's rendering architecture must be made aware of that to
not assume the GL context is preserved.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GL.IssuePluginEvent(System.Int32)">
      <summary>
        <para>Send a user-defined event to a native code plugin.</para>
        <para>Rendering in Unity can be multithreaded if the platform and number
of available CPUs will allow for it. When multithreaded rendering is
used, the rendering API commands happen on a thread which is
completely separate from the one that runs the scripts. Consequently,
it is not possible for your plugin to start rendering immediately,
since it might interfere with what the render thread is doing at the time.In order to do any rendering from the plugin, you should call
GL.IssuePluginEvent from your script, which will cause your native
plugin to be called from the render thread. For example, if you
call GL.IssuePluginEvent from the camera's OnPostRender function, you'll
get a plugin callback immediately after the camera has finished rendering.See Native Plugin Interface for more details
and an example.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GL.TRIANGLES">
      <summary>
        <para>Mode for <see cref="GL.Begin">Begin</see>: draw triangles.</para>
        <para>If you want to draw something 2D in screen space then
probably you will want to use GL.LoadOrtho or GL.LoadPixelMatrix.
If you want something in "3D", then probably you should consider
using GL.LoadIdentity followed by GL.MultMatrix with the actual
3D transform you want your stuff to be in.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GL.TRIANGLE_STRIP">
      <summary>
        <para>Mode for <see cref="GL.Begin">Begin</see>: draw triangle strip.</para>
        <para>If you want to draw something 2D in screen space then
probably you will want to use GL.LoadOrtho or GL.LoadPixelMatrix.
If you want something in "3D", then probably you should consider
using GL.LoadIdentity followed by GL.MultMatrix with the actual
3D transform you want your stuff to be in.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GL.QUADS">
      <summary>
        <para>Mode for <see cref="GL.Begin">Begin</see>: draw quads.</para>
        <para>If you want to draw something 2D in screen space then
probably you will want to use GL.LoadOrtho or GL.LoadPixelMatrix.
If you want something in "3D", then probably you should consider
using GL.LoadIdentity followed by GL.MultMatrix with the actual
3D transform you want your stuff to be in.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GL.LINES">
      <summary>
        <para>Mode for <see cref="GL.Begin">Begin</see>: draw lines.</para>
        <para>If you want to draw something 2D in screen space then
probably you will want to use GL.LoadOrtho or GL.LoadPixelMatrix.
If you want something in "3D", then probably you should consider
using GL.LoadIdentity followed by GL.MultMatrix with the actual
3D transform you want your stuff to be in.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GL.modelview">
      <summary>
        <para>The current modelview matrix.</para>
        <para>Assigning to this variable is equivalent to glLoadMatrix(mat) in OpenGL; in other
graphics APIs the corresponding functionality is emulated.Changing modelview matrix overrides current camera's view parameters, so most
often you want to save and restore matrix using GL.PushMatrix and GL.PopMatrix.Reading this variable returns the current modelview matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GL.wireframe">
      <summary>
        <para>Should rendering be done in wireframe?</para>
        <para>Turning on wireframe mode will affect all objects rendered after the call, until you turn
wireframe back off. In the Unity editor, wireframe mode is always turned off
before repainting any window.Note that some platforms, for example mobile (OpenGL ES) and Flash (Stage3D) do not support
wireframe rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GL.sRGBWrite" />
    <member name="T:UnityEngine.MeshRenderer">
      <summary>
        <para>Renders meshes inserted by the <see cref="MeshFilter">MeshFilter</see> or <see cref="TextMesh">TextMesh</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.StaticBatchingUtility">
      <summary>
        <para>StaticBatchingUtility can prepare your objects to take advantage of Unity's static batching.</para>
        <para>This step is useful as a performance optimization allowing engine to reduce number of draw-calls dramatically,
but keep amount of rendered geometry intact.By calling one of the Combine methods you will create an internal mesh which will contain combined geometry,
however each original GameObject will be present in the scene and will be culled individually.
The fact that GameObjects can be culled individually allows run-time to render the same amount of geometry
as it would without batching, unlike combining geometry in the modeling tool. Combining geometry in the modeling tool
prevents efficient culling and results in much higher amount of geometry being rendered.Note that you do not need to call Combine methods on objects which were already marked as "Static" in the Editor. They will
be prepared for static batching automatically during the Build Player step.IMPORTANT: only objects with the same material can be batched, thus it is useful to share as many textures/material as you can.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.StaticBatchingUtility.#ctor" />
    <member name="M:UnityEngine.StaticBatchingUtility.Combine(UnityEngine.GameObject)">
      <summary>
        <para>Combine will prepare all children of the <c>staticBatchRoot</c> for static batching.</para>
        <para>Once combined children can NOT change their Transform properties, however staticBatchRoot can be moved.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.StaticBatchingUtility.Combine(UnityEngine.GameObject[],UnityEngine.GameObject)">
      <summary>
        <para>Combine will prepare all <c>gos</c> for the static batching. <c>staticBatchRoot</c> will be treated as their parent.</para>
        <para>Once combined gos can NOT change their Transform properties, however staticBatchRoot can be moved.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ImageEffectTransformsToLDR">
      <summary>
        <para>When using HDR rendering it can sometime be desirable to switch to LDR rendering during ImageEffect rendering.</para>
        <para>Using this Attribute on an image effect will cause the destination buffer to be an LDR buffer, and switch the
rest of the Image Effect pipeline into LDR mode. It is the responsibility of the Image Effect that this Attribute
is associated to ensure that the output is in the LDR range.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ImageEffectOpaque">
      <summary>
        <para>Any Image Effect with this attribute will be rendered after opaque geometry but before transparent geometry.</para>
        <para>This allows for effects which extensively use the depth buffer (SSAO, etc) to affect only opaque pixels. This attribute can be used to reduce the amount of visual artifacts in a scene with post processing.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Texture">
      <summary>
        <para>Base class for texture handling. Contains functionality that is common to both <see cref="Texture2D">Texture2D</see> and <see cref="RenderTexture">RenderTexture</see> classes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture.#ctor" />
    <member name="M:UnityEngine.Texture.SetGlobalAnisotropicFilteringLimits(System.Int32,System.Int32)">
      <summary>
        <para>Sets Anisotropic limits.</para>
        <para>ForcedMin value controls the minimal anisotropy level set when Anisotropy is forced.
globalMax value controls the max possible anisotropy level.
set any to -1 to use default values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture.GetNativeTexturePtr">
      <summary>
        <para>Retrieve native ('hardware') pointer to a texture.</para>
        <para>Use this function to retrieve a pointer/handle corresponding to a particular texture
as it is represented on the native graphics device level.
This can be used to enable texture manipulation from native code plugins.On Direct3D-like devices this returns a pointer to the base texture type (IDirect3DBaseTexture9
on D3D9, ID3D11Resource on D3D11). On OpenGL-like devices the texture "name" is returned;
cast the pointer to integer type to get it. On platforms that do not support native code plugins,
this function always returns NULL.Note that calling this function when using multi-threaded rendering will synchronize with the rendering
thread (a slow operation), so best practice is to set up needed texture pointers only at initialization
time.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture.GetNativeTextureID">
      <summary>
        <para>Retrieve native ('hardware') handle to a texture.</para>
        <para>Use this function to retrieve an ID/handle corresponding to a particular texture
as it is represented on the native graphics device level.
This can be used to enable texture manipulation from native code plugins.This function is only supported on OpenGL-like devices; for a better cross-platform
approach use GetNativeTexturePtr.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.width">
      <summary>
        <para>Width of the texture in pixels. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.height">
      <summary>
        <para>Height of the texture in pixels. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.filterMode">
      <summary>
        <para>Filtering mode of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.anisoLevel">
      <summary>
        <para>Anisotropic filtering level of the texture.</para>
        <para>Anisotropic filtering makes textures look better when viewed at a shallow angle, but comes at a performance cost in the graphics hardware.
Usually you use it on floor, ground or road textures to make them look better.The value range of this variable goes from 1 to 9, where 1 equals  no filtering applied and  9 equals full filtering applied. As the value gets bigger, the texture is clearer at shallow angles. Lower values mean the texture will be more blurry at shallow angles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.wrapMode">
      <summary>
        <para>Wrap mode (Repeat or Clamp) of the texture.</para>
        <para>Set the texture to clamp at the borders to avoid warping artifacts with TextureWrapMode.Clamp.
Or tile the texture with TextureWrapMode.Repeat.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture.mipMapBias">
      <summary>
        <para>Mip map bias of the texture.</para>
        <para>A positive bias makes a texture appear extra blurry, while a negative bias sharpens
the texture. Note that using large negative bias can reduce performance, so it's not
recommended to use more than -0.5 negative bias. In most cases better sharpening of the texture
can be achieved by using anisotropic filtering. Also note that mip map bias does not work
with MaterialPropertyBlocks, and some platforms, e.g., OpenGL ES based do not support it
without custom shaders.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Texture2D">
      <summary>
        <para>Class for texture handling.</para>
        <para>Use this to create textures on the fly or to modify existing texture assets.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Create a new empty texture.</para>
        <para>The texture will be width by height size, with an ARGB32 TextureFormat, with mipmaps and in sRGB color space.Usually you will want to set the colors of the texture after creating it, using
SetPixel, SetPixels and Apply functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Create a new empty texture.</para>
        <para>The texture will be width by height size, with a given format, with mipmaps
or without and in either the linear or sRGB color space.Usually you will want to set the colors of the texture after creating it, using
SetPixel, SetPixels and Apply functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.Boolean)">
      <summary>
        <para>See Also: <see cref="Texture2D.SetPixel">SetPixel</see>, <see cref="Texture2D.SetPixels">SetPixels</see>, <see cref="Texture2D.Apply">Apply</see> functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.CreateExternalTexture(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean,System.Boolean,System.IntPtr)">
      <summary>
        <para>Creates Unity Texture on top of already inited native texture object.</para>
        <para>You should make sure that params specified here are the same as the ones used for creation of native texture.
Native texture object on Direct3D-like devices is a pointer to the base type, from which a texture can be created
(IDirect3DBaseTexture9 on D3D9, ID3D11ShaderResourceView on D3D11). On OpenGL/OpenGL ES it is GLuint.</para>
      </summary>
      <param name="nativeTex">Native texture object.</param>
    </member>
    <member name="M:UnityEngine.Texture2D.UpdateExternalTexture(System.IntPtr)">
      <summary>
        <para>Updates Unity Texture to use different native texture object.</para>
        <para>Native texture object on Direct3D-like devices is a pointer to the base type, from which a texture can be created
(IDirect3DBaseTexture9 on D3D9, ID3D11ShaderResourceView on D3D11). On OpenGL/OpenGL ES it is GLuint.</para>
      </summary>
      <param name="nativeTex">Native texture object.</param>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixel(System.Int32,System.Int32,UnityEngine.Color)">
      <summary>
        <para>Sets pixel color at coordinates (x,y).</para>
        <para>Call Apply to actually upload the changed pixels to the graphics card.
Uploading is an expensive operation, so you'll want to change as many pixels
as possible between Apply calls.If you're constantly regenerating a texture at runtime, it may be faster
to generate an array of pixel colors and set all of them at once with SetPixels.This function works only on ARGB32, RGB24 and Alpha8 texture formats.
For other formats SetPixel is ignored.
The texture also has to have Read/Write Enabled flag set in the import settings.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixel(System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel color at coordinates (x, y).</para>
        <para>If the pixel coordinates are out of bounds (larger than width/height or small than 0),
they will be clamped or repeat based on the texture's wrap mode.If you are reading a large block of pixels from the texture, it may be faster
to use GetPixels which returns a whole block of pixel colors.The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixelBilinear(System.Single,System.Single)">
      <summary>
        <para>Returns filtered pixel color at normalized coordinates (u, v).</para>
        <para>Coordinates u and v go from 0.0 to 1.0, just like UV coordinates in meshes.
If coordinates are out of bounds (larger than 1.0 or smaller than 0.0),
they will be clamped or repeated based on the texture's wrap mode.Returned pixel color is bilinearly filtered.The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels(UnityEngine.Color[])">
      <summary>
        <para>Set a block of pixel colors.</para>
        <para>This function takes a color array and changes the pixel colors of the whole
mip level of the texture. Call Apply to actually upload the changed
pixels to the graphics card.The colors array is a flattened 2D array, where pixels are laid out left to right,
bottom to top (i.e. row after row). Array size must be at least width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipWidth=max(1,width&amp;gt;&amp;gt;miplevel)
and similarly for height.This function works only on ARGB32, RGB24 and Alpha8 texture formats.
For other formats SetPixels is ignored.
The texture also has to have Is Readable flag set in the import settings.Using SetPixels can be faster than calling SetPixel repeatedly, especially
for large textures. In addition, SetPixels can access individual mipmap levels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels(UnityEngine.Color[],System.Int32)">
      <summary>
        <para>Set a block of pixel colors.</para>
        <para>This function takes a color array and changes the pixel colors of the whole
mip level of the texture. Call Apply to actually upload the changed
pixels to the graphics card.The colors array is a flattened 2D array, where pixels are laid out left to right,
bottom to top (i.e. row after row). Array size must be at least width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipWidth=max(1,width&amp;gt;&amp;gt;miplevel)
and similarly for height.This function works only on ARGB32, RGB24 and Alpha8 texture formats.
For other formats SetPixels is ignored.
The texture also has to have Is Readable flag set in the import settings.Using SetPixels can be faster than calling SetPixel repeatedly, especially
for large textures. In addition, SetPixels can access individual mipmap levels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color[],System.Int32)">
      <summary>
        <para>Set a block of pixel colors.</para>
        <para>This function is an extended version of SetPixels above; it does not modify the whole
mip level but modifies only blockWidth by blockHeight region starting at x,y.
The colors array must be blockWidth*blockHeight size, and the modified block
must fit into the used mip level.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels(System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Color[])">
      <summary>
        <para>Set a block of pixel colors.</para>
        <para>This function is an extended version of SetPixels above; it does not modify the whole
mip level but modifies only blockWidth by blockHeight region starting at x,y.
The colors array must be blockWidth*blockHeight size, and the modified block
must fit into the used mip level.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels32(UnityEngine.Color32[],System.Int32)">
      <summary>
        <para>Set a block of pixel colors.</para>
        <para>This function takes a Color32 array and changes the pixel colors of the whole
mip level of the texture. Call Apply to actually upload the changed
pixels to the graphics card.The colors array is a flattened 2D array, where pixels are laid out left to right,
bottom to top (i.e. row after row). Array size must be at least width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipWidth=max(1,width&amp;gt;&amp;gt;miplevel)
and similarly for height.This function works only on ARGB32 texture formats.
For other formats SetPixels32 is ignored.
The texture also has to have Is Readable flag set in the import settings.Using SetPixels32 is faster than calling SetPixels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.SetPixels32(UnityEngine.Color32[])">
      <summary>
        <para>Set a block of pixel colors.</para>
        <para>This function takes a Color32 array and changes the pixel colors of the whole
mip level of the texture. Call Apply to actually upload the changed
pixels to the graphics card.The colors array is a flattened 2D array, where pixels are laid out left to right,
bottom to top (i.e. row after row). Array size must be at least width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipWidth=max(1,width&amp;gt;&amp;gt;miplevel)
and similarly for height.This function works only on ARGB32 texture formats.
For other formats SetPixels32 is ignored.
The texture also has to have Is Readable flag set in the import settings.Using SetPixels32 is faster than calling SetPixels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.LoadImage(System.Byte[])">
      <summary>
        <para>Loads an image from a byte array.</para>
        <para>This function loads a JPG or PNG image from a raw byte[] array.</para>
      </summary>
      <param name="data">The byte array containing the image data to load.</param>
      <returns>
        <para>Returns true if the data can be loaded, else false.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.LoadRawTextureData(System.Byte[])" />
    <member name="M:UnityEngine.Texture2D.GetPixels">
      <summary>
        <para>Get a block of pixel colors.</para>
        <para>This function returns an array of pixel colors of the whole
mip level of the texture.The returned array is a flattened 2D array, where pixels are laid out left to right,
bottom to top (i.e. row after row). Array size is width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipWidth=max(1,width&amp;gt;&amp;gt;miplevel)
and similarly for height.The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail.Using GetPixels can be faster than calling GetPixel repeatedly, especially
for large textures. In addition, GetPixels can access individual mipmap levels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixels(System.Int32)">
      <summary>
        <para>Get a block of pixel colors.</para>
        <para>This function returns an array of pixel colors of the whole
mip level of the texture.The returned array is a flattened 2D array, where pixels are laid out left to right,
bottom to top (i.e. row after row). Array size is width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipWidth=max(1,width&amp;gt;&amp;gt;miplevel)
and similarly for height.The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail.Using GetPixels can be faster than calling GetPixel repeatedly, especially
for large textures. In addition, GetPixels can access individual mipmap levels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixels(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Get a block of pixel colors.</para>
        <para>This function is an extended version of GetPixels above; it does not return the whole
mip level but only blockWidth by blockHeight region starting at x,y.
The block must fit into the used mip level. The returned array is blockWidth*blockHeight size.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixels(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Get a block of pixel colors.</para>
        <para>This function is an extended version of GetPixels above; it does not return the whole
mip level but only blockWidth by blockHeight region starting at x,y.
The block must fit into the used mip level. The returned array is blockWidth*blockHeight size.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixels32(System.Int32)">
      <summary>
        <para>Get a block of pixel colors in Color32 format.</para>
        <para>This function returns an array of pixel colors of the whole
mip level of the texture.The returned array is a flattened 2D array, where pixels are laid out left to right,
bottom to top (i.e. row after row). Array size is width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipWidth=max(1,width&amp;gt;&amp;gt;miplevel)
and similarly for height.The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail.Using GetPixels32 can be faster than calling GetPixel repeatedly, especially
for large textures. In addition, GetPixels32 can access individual mipmap levels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.GetPixels32">
      <summary>
        <para>Get a block of pixel colors in Color32 format.</para>
        <para>This function returns an array of pixel colors of the whole
mip level of the texture.The returned array is a flattened 2D array, where pixels are laid out left to right,
bottom to top (i.e. row after row). Array size is width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipWidth=max(1,width&amp;gt;&amp;gt;miplevel)
and similarly for height.The texture must have the Read/Write Enabled flag set in the import settings, otherwise this function will fail.Using GetPixels32 can be faster than calling GetPixel repeatedly, especially
for large textures. In addition, GetPixels32 can access individual mipmap levels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.Apply(System.Boolean,System.Boolean)">
      <summary>
        <para>Actually apply all previous <see cref="Texture2D.SetPixel">SetPixel</see> and <see cref="Texture2D.SetPixels">SetPixels</see> changes.</para>
        <para>If updateMipmaps is true, the mipmap levels are recalculated as well, using
the base level as a source. Usually you want to use true in all cases except when
you've modified the mip levels yourself using SetPixels.
By default updateMipmaps is set to true.If makeNoLongerReadable is true, texture will be marked as no longer readable
and memory will be freed after uploading to GPU.
By default makeNoLongerReadable is set to false.This is a potentially expensive operation, so you'll want to change as many pixels
as possible between Apply calls.The texture has to have Is Readable flag set in the import settings.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.Apply(System.Boolean)">
      <summary>
        <para>Actually apply all previous <see cref="Texture2D.SetPixel">SetPixel</see> and <see cref="Texture2D.SetPixels">SetPixels</see> changes.</para>
        <para>If updateMipmaps is true, the mipmap levels are recalculated as well, using
the base level as a source. Usually you want to use true in all cases except when
you've modified the mip levels yourself using SetPixels.
By default updateMipmaps is set to true.If makeNoLongerReadable is true, texture will be marked as no longer readable
and memory will be freed after uploading to GPU.
By default makeNoLongerReadable is set to false.This is a potentially expensive operation, so you'll want to change as many pixels
as possible between Apply calls.The texture has to have Is Readable flag set in the import settings.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.Apply">
      <summary>
        <para>Actually apply all previous <see cref="Texture2D.SetPixel">SetPixel</see> and <see cref="Texture2D.SetPixels">SetPixels</see> changes.</para>
        <para>If updateMipmaps is true, the mipmap levels are recalculated as well, using
the base level as a source. Usually you want to use true in all cases except when
you've modified the mip levels yourself using SetPixels.
By default updateMipmaps is set to true.If makeNoLongerReadable is true, texture will be marked as no longer readable
and memory will be freed after uploading to GPU.
By default makeNoLongerReadable is set to false.This is a potentially expensive operation, so you'll want to change as many pixels
as possible between Apply calls.The texture has to have Is Readable flag set in the import settings.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.Resize(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Resizes the texture.</para>
        <para>Changes size of texture to width by height, format to textureFormat and optionally creates mip maps.
After resizing, texture pixels will be undefined. This function is very similar to the texture constructor,
except it works on existing texture object.Call Apply to actually upload the changed pixels to the graphics card.The texture has to have Is Readable flag set in the import settings.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.Resize(System.Int32,System.Int32)">
      <summary>
        <para>Resizes the texture.</para>
        <para>Changes size of texture to width by height.
After resizing, texture pixels will be undefined. This function is very similar to texture constructor,
except it works on existing texture object.Call Apply to actually upload the changed pixels to the graphics card.The texture has to have Is Readable flag set in the import settings.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.Compress(System.Boolean)">
      <summary>
        <para>Compress texture into DXT format.</para>
        <para>Use this to compress textures generated at runtime. Compressed textures use less
graphics memory and are faster to render.After compression, texture will be in DXT1 format if the original texture
had no alpha channel, and in DXT5 format if it had alpha channel.Passing true for highQuality parameter will dither the source texture during compression,
which helps to reduce compression artifacts but is slightly slower.If the graphics card does not support compression or the texture is already in compressed format,
then Compress will do nothing.In the Editor scripts, you probably want to use EditorUtility.CompressTexture, which will
compress using slower, but higher quality DXT compression.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.PackTextures(UnityEngine.Texture2D[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Packs multiple Textures into a texture atlas.</para>
        <para>This function will replace the current texture with the atlas made from the supplied textures.
The size, format and mipmaps of any of the textures can change after packing.The resulting texture atlas will be as large as needed to fit all input textures but only up to maximumAtlasSize in
each dimension. If the input textures can't all fit into a texture atlas of the desired size then they will be
scaled down to fit.The atlas will have DXT1 format if all input textures are DXT1 compressed.
If all input textures are compressed in DXT1 or DXT5 formats
then the atlas will be in DXT5 format. If any input texture is not compressed then the atlas will
be in ARGB32 uncompressed format.If none of the input textures have mipmaps then the atlas will also have no mipmaps.If you use non-zero padding and the atlas is compressed and has mipmaps then the lower-level mipmaps might not be
exactly the same as in the original texture due to compression restrictions.If makeNoLongerReadable is true then the texture will be marked as no longer readable
and memory will be freed after uploading to the GPU.
By default makeNoLongerReadable is set to false.</para>
      </summary>
      <param name="textures">Array of textures to pack into the atlas.</param>
      <param name="padding">Padding in pixels between the packed textures.</param>
      <param name="maximumAtlasSize">Maximum size of the resulting texture.</param>
      <param name="makeNoLongerReadable">Should the texture be marked as no longer readable?</param>
      <returns>
        <para>An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.PackTextures(UnityEngine.Texture2D[],System.Int32,System.Int32)">
      <summary>
        <para>Packs multiple Textures into a texture atlas.</para>
        <para>This function will replace the current texture with the atlas made from the supplied textures.
The size, format and mipmaps of any of the textures can change after packing.The resulting texture atlas will be as large as needed to fit all input textures but only up to maximumAtlasSize in
each dimension. If the input textures can't all fit into a texture atlas of the desired size then they will be
scaled down to fit.The atlas will have DXT1 format if all input textures are DXT1 compressed.
If all input textures are compressed in DXT1 or DXT5 formats
then the atlas will be in DXT5 format. If any input texture is not compressed then the atlas will
be in ARGB32 uncompressed format.If none of the input textures have mipmaps then the atlas will also have no mipmaps.If you use non-zero padding and the atlas is compressed and has mipmaps then the lower-level mipmaps might not be
exactly the same as in the original texture due to compression restrictions.If makeNoLongerReadable is true then the texture will be marked as no longer readable
and memory will be freed after uploading to the GPU.
By default makeNoLongerReadable is set to false.</para>
      </summary>
      <param name="textures">Array of textures to pack into the atlas.</param>
      <param name="padding">Padding in pixels between the packed textures.</param>
      <param name="maximumAtlasSize">Maximum size of the resulting texture.</param>
      <returns>
        <para>An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.PackTextures(UnityEngine.Texture2D[],System.Int32)">
      <summary>
        <para>Packs multiple Textures into a texture atlas.</para>
        <para>This function will replace the current texture with the atlas made from the supplied textures.
The size, format and mipmaps of any of the textures can change after packing.The resulting texture atlas will be as large as needed to fit all input textures but only up to maximumAtlasSize in
each dimension. If the input textures can't all fit into a texture atlas of the desired size then they will be
scaled down to fit.The atlas will have DXT1 format if all input textures are DXT1 compressed.
If all input textures are compressed in DXT1 or DXT5 formats
then the atlas will be in DXT5 format. If any input texture is not compressed then the atlas will
be in ARGB32 uncompressed format.If none of the input textures have mipmaps then the atlas will also have no mipmaps.If you use non-zero padding and the atlas is compressed and has mipmaps then the lower-level mipmaps might not be
exactly the same as in the original texture due to compression restrictions.If makeNoLongerReadable is true then the texture will be marked as no longer readable
and memory will be freed after uploading to the GPU.
By default makeNoLongerReadable is set to false.</para>
      </summary>
      <param name="textures">Array of textures to pack into the atlas.</param>
      <param name="padding">Padding in pixels between the packed textures.</param>
      <returns>
        <para>An array of rectangles containing the UV coordinates in the atlas for each input texture, or null if packing fails.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Texture2D.ReadPixels(UnityEngine.Rect,System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Read screen pixels into the saved texture data.</para>
        <para>This will copy a rectangular pixel area from the currently active RenderTexture or the view (specified by the source parameter) into the position defined
by destX and destY. Both coordinates use pixel space - (0,0) is lower left.If recalculateMipMaps is set to true, the mip maps of the texture will also be updated. If recalculateMipMaps is set to false, you must call Apply to recalculate them.This function works only on ARGB32 and RGB24 texture formats.
The texture also has to have Read/Write Enabled flag set in the import settings.
ReadPixels is unsupported on Flash.</para>
      </summary>
      <param name="source">Rectangular region of the view to read from.</param>
      <param name="destX">Horizontal pixel position in the texture to place the pixels that are read.</param>
      <param name="destY">Vertical pixel position in the texture to place the pixels that are read.</param>
      <param name="recalculateMipMaps">Should the texture's mipmaps be recalculated after reading?</param>
    </member>
    <member name="M:UnityEngine.Texture2D.ReadPixels(UnityEngine.Rect,System.Int32,System.Int32)">
      <summary>
        <para>Read screen pixels into the saved texture data.</para>
        <para>This will copy a rectangular pixel area from the currently active RenderTexture or the view (specified by the source parameter) into the position defined
by destX and destY. Both coordinates use pixel space - (0,0) is lower left.If recalculateMipMaps is set to true, the mip maps of the texture will also be updated. If recalculateMipMaps is set to false, you must call Apply to recalculate them.This function works only on ARGB32 and RGB24 texture formats.
The texture also has to have Read/Write Enabled flag set in the import settings.
ReadPixels is unsupported on Flash.</para>
      </summary>
      <param name="source">Rectangular region of the view to read from.</param>
      <param name="destX">Horizontal pixel position in the texture to place the pixels that are read.</param>
      <param name="destY">Vertical pixel position in the texture to place the pixels that are read.</param>
    </member>
    <member name="M:UnityEngine.Texture2D.EncodeToPNG">
      <summary>
        <para>Encodes this texture into PNG format.</para>
        <para>The returned byte array is the PNG "file". You can write them to disk to get the PNG file,
send them over the network, etc.This function works only on ARGB32 and RGB24 texture formats.
The texture also has to have Is Readable flag set in the import settings.The encoded PNG data will
contain alpha channel for ARGB32 textures, and no alpha channel for RGB24 textures.
PNG data will not contain gamma correction or color profile information.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture2D.EncodeToJPG">
      <summary>
        <para>Encodes this texture into JPG format.</para>
        <para>The returned byte array is the JPG "file". You can write them to disk to get the JPG file,
send them over the network, etc.This function works only on ARGB32 and RGB24 texture formats.
The texture also has to have Is Readable flag set in the import settings.The encoded JPG data will have no alpha channel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.mipmapCount">
      <summary>
        <para>How many mipmap levels are in this texture (Read Only).</para>
        <para>The returned value includes the base level as well, so it is always 1 or more.Mipmap count is used if you use GetPixels or SetPixels to fetch or modify
the different mip levels. For example, you could change a texture so that each mip level
is tinted in a different color - then in the game you'd see which mip levels are actually
visible.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.format">
      <summary>
        <para>The format of the pixel data in the texture (Read Only).</para>
        <para>Use this to determine the format of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.whiteTexture">
      <summary>
        <para>Get a white filled texture (1,1,1,1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.blackTexture">
      <summary>
        <para>Get a black filled texture (0,0,0,1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture2D.alphaIsTransparency" />
    <member name="T:UnityEngine.Cubemap">
      <summary>
        <para>Class for handling cube maps, Use this to create or modify existing <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Cubemap.html">cube map assets</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cubemap.#ctor(System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Create a new empty cubemap texture.</para>
        <para>The texture will be size on each side and can be created with or without mipmaps.Usually you will want to set the colors of the texture after creating it, using
SetPixel and Apply functions.</para>
      </summary>
      <param name="size">Width/height of a cube face in pixels.</param>
      <param name="format">Pixel data format to be used for the Cubemap.</param>
      <param name="mipmap">Should mipmaps be created?</param>
    </member>
    <member name="M:UnityEngine.Cubemap.SetPixel(UnityEngine.CubemapFace,System.Int32,System.Int32,UnityEngine.Color)">
      <summary>
        <para>Sets pixel color at coordinates (face, x, y).</para>
        <para>Call Apply to actually upload the changed pixels to the graphics card.
Uploading is an expensive operation, so you'll want to change as many pixels
as possible between Apply calls.This function works only on ARGB32, RGB24 and Alpha8 texture formats.
For other formats SetPixel is ignored.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cubemap.GetPixel(UnityEngine.CubemapFace,System.Int32,System.Int32)">
      <summary>
        <para>Returns pixel color at coordinates (face, x, y).</para>
        <para>If the pixel coordinates are out of bounds (larger than width/height or small than 0),
they will be clamped or repeat based on the texture's wrap mode.The texture must have the Is Readable flag set in the import settings, otherwise this function will fail.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cubemap.GetPixels(UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Returns pixel colors of a cubemap face.</para>
        <para>This function returns an array of pixel colors of the whole
mip level of a cubemap face.The returned array is a flattened 2D array, where pixels are laid out right to left,
top to bottom (i.e. row after row). Array size is width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipSize=max(1,width&amp;gt;&amp;gt;miplevel).The texture must have the Is Readable flag set in the import settings, otherwise this function will fail.Using GetPixels can be faster than calling GetPixel repeatedly, especially
for large textures. In addition, GetPixels can access individual mipmap levels.</para>
      </summary>
      <param name="face">The face from which pixel data is taken.</param>
      <param name="miplevel">Mipmap level for the chosen face.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.GetPixels(UnityEngine.CubemapFace)">
      <summary>
        <para>Returns pixel colors of a cubemap face.</para>
        <para>This function returns an array of pixel colors of the whole
mip level of a cubemap face.The returned array is a flattened 2D array, where pixels are laid out right to left,
top to bottom (i.e. row after row). Array size is width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipSize=max(1,width&amp;gt;&amp;gt;miplevel).The texture must have the Is Readable flag set in the import settings, otherwise this function will fail.Using GetPixels can be faster than calling GetPixel repeatedly, especially
for large textures. In addition, GetPixels can access individual mipmap levels.</para>
      </summary>
      <param name="face">The face from which pixel data is taken.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.SetPixels(UnityEngine.Color[],UnityEngine.CubemapFace,System.Int32)">
      <summary>
        <para>Sets pixel colors of a cubemap face.</para>
        <para>This function takes a color array and changes the pixel colors of the whole
cubemap face. Call Apply to actually upload the changed
pixels to the graphics card.The colors array is a flattened 2D array, where pixels are laid out right to left,
top to bottom (i.e. row after row). Array size must be at least width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipSize=max(1,width&amp;gt;&amp;gt;miplevel).This function works only on ARGB32, RGB24 and Alpha8 texture formats.
For other formats SetPixels is ignored.</para>
      </summary>
      <param name="colors">Pixel data for the Cubemap face.</param>
      <param name="face">The face to which the new data should be applied.</param>
      <param name="miplevel">The mipmap level for the face.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.SetPixels(UnityEngine.Color[],UnityEngine.CubemapFace)">
      <summary>
        <para>Sets pixel colors of a cubemap face.</para>
        <para>This function takes a color array and changes the pixel colors of the whole
cubemap face. Call Apply to actually upload the changed
pixels to the graphics card.The colors array is a flattened 2D array, where pixels are laid out right to left,
top to bottom (i.e. row after row). Array size must be at least width by height of the mip level used.
The default mip level is zero (the base texture) in which case the size is just the size of the texture.
In general case, mip level size is mipSize=max(1,width&amp;gt;&amp;gt;miplevel).This function works only on ARGB32, RGB24 and Alpha8 texture formats.
For other formats SetPixels is ignored.</para>
      </summary>
      <param name="colors">Pixel data for the Cubemap face.</param>
      <param name="face">The face to which the new data should be applied.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.Apply(System.Boolean,System.Boolean)">
      <summary>
        <para>Actually apply all previous <see cref="Cubemap.SetPixel">SetPixel</see> and <see cref="Cubemap.SetPixels">SetPixels</see> changes.</para>
        <para>If updateMipmaps is true, the mipmap levels are recalculated as well, using
the base level as a source. Usually you want to use true in all cases except when
you've modified the mip levels yourself using SetPixels.This is a potentially expensive operation, so you'll want to change as many pixels
as possible between Apply calls.</para>
      </summary>
      <param name="updateMipmaps">Should all mipmap levels be updated?</param>
      <param name="makeNoLongerReadable">Should the Cubemap texture data be readable/modifiable after changes are applied?</param>
    </member>
    <member name="M:UnityEngine.Cubemap.Apply(System.Boolean)">
      <summary>
        <para>Actually apply all previous <see cref="Cubemap.SetPixel">SetPixel</see> and <see cref="Cubemap.SetPixels">SetPixels</see> changes.</para>
        <para>If updateMipmaps is true, the mipmap levels are recalculated as well, using
the base level as a source. Usually you want to use true in all cases except when
you've modified the mip levels yourself using SetPixels.This is a potentially expensive operation, so you'll want to change as many pixels
as possible between Apply calls.</para>
      </summary>
      <param name="updateMipmaps">Should all mipmap levels be updated?</param>
    </member>
    <member name="M:UnityEngine.Cubemap.Apply">
      <summary>
        <para>Actually apply all previous <see cref="Cubemap.SetPixel">SetPixel</see> and <see cref="Cubemap.SetPixels">SetPixels</see> changes.</para>
        <para>If updateMipmaps is true, the mipmap levels are recalculated as well, using
the base level as a source. Usually you want to use true in all cases except when
you've modified the mip levels yourself using SetPixels.This is a potentially expensive operation, so you'll want to change as many pixels
as possible between Apply calls.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Cubemap.SmoothEdges(System.Int32)">
      <summary>
        <para>Performs smoothing of near edge regions.</para>
        <para>Helps to compensate lack of linear interpolation across the edges of cubemap in GPU.Usually you will want to call this function for the cubemap which is going to be used for glossy reflections.</para>
      </summary>
      <param name="smoothRegionWidthInPixels">Pixel distance at edges over which to apply smoothing.</param>
    </member>
    <member name="M:UnityEngine.Cubemap.SmoothEdges">
      <summary>
        <para>Performs smoothing of near edge regions.</para>
        <para>Helps to compensate lack of linear interpolation across the edges of cubemap in GPU.Usually you will want to call this function for the cubemap which is going to be used for glossy reflections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Cubemap.format">
      <summary>
        <para>The format of the pixel data in the texture (Read Only).</para>
        <para>Use this to determine the format of the texture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Texture3D">
      <summary>
        <para>Class for handling 3D Textures, Use this to create <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Texture3D.html">3D texture assets</see>.</para>
        <para>3D textures are commonly used as lookup tables by shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture3D.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.TextureFormat,System.Boolean)">
      <summary>
        <para>Create a new empty 3D Texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture3D.GetPixels(System.Int32)">
      <summary>
        <para>This function returns an array of pixel colors representing one mip level of the 3D texture.</para>
        <para>Call Apply to actually upload the changed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture3D.GetPixels">
      <summary>
        <para>This function returns an array of pixel colors representing one mip level of the 3D texture.</para>
        <para>Call Apply to actually upload the changed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture3D.SetPixels(UnityEngine.Color[],System.Int32)">
      <summary>
        <para>Sets pixel colors of a 3D texture.</para>
        <para>This function takes a color array and changes the pixel colors of the 3D texture.
Call Apply to actually upload the changed.</para>
      </summary>
      <param name="colors">The colors to set the pixels to.</param>
      <param name="miplevel">The mipmap level to be affected by the new colors.</param>
    </member>
    <member name="M:UnityEngine.Texture3D.SetPixels(UnityEngine.Color[])">
      <summary>
        <para>Sets pixel colors of a 3D texture.</para>
        <para>This function takes a color array and changes the pixel colors of the 3D texture.
Call Apply to actually upload the changed.</para>
      </summary>
      <param name="colors">The colors to set the pixels to.</param>
    </member>
    <member name="M:UnityEngine.Texture3D.Apply(System.Boolean)">
      <summary>
        <para>Actually apply all previous <see cref="Texture3D.SetPixels">SetPixels</see> changes.</para>
        <para>If updateMipmaps is true, the mipmap levels are recalculated as well, using
the base level as a source. Usually you want to use true in all cases except when
you've modified the mip levels yourself using SetPixels.This is a potentially expensive operation, so you'll want to change as many pixels
as possible between Apply calls.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Texture3D.Apply">
      <summary>
        <para>Actually apply all previous <see cref="Texture3D.SetPixels">SetPixels</see> changes.</para>
        <para>If updateMipmaps is true, the mipmap levels are recalculated as well, using
the base level as a source. Usually you want to use true in all cases except when
you've modified the mip levels yourself using SetPixels.This is a potentially expensive operation, so you'll want to change as many pixels
as possible between Apply calls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture3D.depth">
      <summary>
        <para>The depth of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Texture3D.format">
      <summary>
        <para>The format of the pixel data in the texture (Read Only).</para>
        <para>Use this to determine the format of the texture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SparseTexture">
      <summary>
        <para>Class for handling Sparse Textures.</para>
        <para>Sparse textures are textures where not the whole texture data can be present in memory at once. They are also commonly called "tiled textures" or "mega textures".Imagine a 16384x16384 texture at 32 bits per pixel - it would take 1GB of memory. The texture is broken down into rectangular "tiles", and each tile can either be present in memory or not. You can load &amp;amp; unload these tiles as needed based on distance from the camera, sectors of the world that the player has to see, etc.Otherwise, the sparse textures behave just like any other texture in shaders - they can have mipmaps, can use all texture filtering modes, etc. If you happen to read from a tile that's not present, you can get undefined result (on many GPUs the result is a black color, but that's not guaranteed).Note that not all hardware and platforms support sparse textures, so you should check SystemInfo.supportsSparseTextures before using them. For example, on DirectX systems they require DX11.2 (Windows 8.1) and a fairly recent GPU; and on OpenGL they require ARB_sparse_texture extension support. Sparse textures also require a Unity Pro license.After creating the sparse texture, query the tile size with tileWidth &amp;amp; tileHeight. Tile sizes are platform and GPU dependent.Use UpdateTile or UpdateTileRaw to make a tile resident in memory and update its color data. Use UnloadTile to unload a tile.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SparseTexture.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Int32)">
      <summary>
        <para>Create a sparse texture.</para>
        <para>See SparseTexture.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="format">Texture format.</param>
      <param name="mipCount">Mipmap count. Pass -1 to create full mipmap chain.</param>
    </member>
    <member name="M:UnityEngine.SparseTexture.#ctor(System.Int32,System.Int32,UnityEngine.TextureFormat,System.Int32,System.Boolean)">
      <summary>
        <para>Create a sparse texture.</para>
        <para>See SparseTexture.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="format">Texture format.</param>
      <param name="mipCount">Mipmap count. Pass -1 to create full mipmap chain.</param>
      <param name="linear">Whether texture data will be in linear or sRGB color space (default is sRGB).</param>
    </member>
    <member name="M:UnityEngine.SparseTexture.UpdateTile(System.Int32,System.Int32,System.Int32,UnityEngine.Color32[])">
      <summary>
        <para>Update sparse texture tile with color values.</para>
        <para>This function makes a tile at (tileX,tileY) coordinates resident in memory, and updates its pixels. If a tile is already resident, then only the pixels are updated.Data passed should have enough pixels for the tile (tileWidth*tileHeight elements). Exception can be small mipmap levels that are smaller than tile size; then it's ok to pass enough data for the mip level size.UpdateTile only works for non-compressed color formats. If you use a sparse texture with a compressed format, use UpdateTileRaw and pass raw tile data bytes (e.g. DXT-compressed data). UpdateTileRaw can also be more efficient if texture format is not RGBA32, as then Unity does not have to convert from Color32 data into the underlying texture format.</para>
      </summary>
      <param name="tileX">Tile X coordinate.</param>
      <param name="tileY">Tile Y coordinate.</param>
      <param name="miplevel">Mipmap level of the texture.</param>
      <param name="data">Tile color data.</param>
    </member>
    <member name="M:UnityEngine.SparseTexture.UpdateTileRaw(System.Int32,System.Int32,System.Int32,System.Byte[])">
      <summary>
        <para>Update sparse texture tile with raw pixel values.</para>
        <para>This function behaves just like UpdateTile, except the data you pass already needs to be in the final texture format. This is mostly useful for compressed sparse textures, where you'd want to load already precompressed tile data.</para>
      </summary>
      <param name="tileX">Tile X coordinate.</param>
      <param name="tileY">Tile Y coordinate.</param>
      <param name="miplevel">Mipmap level of the texture.</param>
      <param name="data">Tile raw pixel data.</param>
    </member>
    <member name="M:UnityEngine.SparseTexture.UnloadTile(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Unload sparse texture tile.</para>
        <para>This function removes a tile at (tileX,tileY) coordinates from memory. If a tile is not present, then this function does nothing.</para>
      </summary>
      <param name="tileX">Tile X coordinate.</param>
      <param name="tileY">Tile Y coordinate.</param>
      <param name="miplevel">Mipmap level of the texture.</param>
    </member>
    <member name="P:UnityEngine.SparseTexture.tileWidth">
      <summary>
        <para>Get sparse texture tile width (Read Only).</para>
        <para>After creating the sparse texture, query the tile size with tileWidth &amp;amp; tileHeight. Tile sizes are platform and GPU dependent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SparseTexture.tileHeight">
      <summary>
        <para>Get sparse texture tile height (Read Only).</para>
        <para>After creating the sparse texture, query the tile size with tileWidth &amp;amp; tileHeight. Tile sizes are platform and GPU dependent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SparseTexture.isCreated">
      <summary>
        <para>Is the sparse texture actually created? (Read Only)</para>
        <para>Sparse texture contents can become "lost", mostly on graphics device change or active color space switch.
When that happens, isCreated will start returning false - meaning you should recreate all the needed
tiles again.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderTexture">
      <summary>
        <para>Render textures are textures that can be rendered to.</para>
        <para>They can be used to implement image based rendering effects, dynamic shadows,
projectors, reflections or surveillance cameras.All rendering goes into the active RenderTexture (active class property).
If the active RenderTexture is null everything is rendered to the main window.For short-lived temporary render textures, use GetTemporary and ReleaseTemporary
functions. These are most often useful in image post processing effects.Note that while RenderTexture assets can be only power-of-two
size, it is possible to create a non-power-of-two render textures from scripts.
These are most often used for image post processing effects.Keep in mind that render texture contents can become "lost" on certain events, like loading
a new level, system going to a screensaver mode, in and our of fullscreen and so on.
When that happens, your existing render textures will become "not yet created" again,
you can check for that with IsCreated function.RenderTexture class is only available in Unity Pro.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite)">
      <summary>
        <para>Creates a new RenderTexture object.</para>
        <para>The render texture is created with width by height size, with a depth buffer
of depth bits (depth can be 0, 16 or 24), and in format format and with sRGB read / write on or off.Note that constructing a RenderTexture object does not create the hardware representation immediately.
The actual render texture is created upon first use or when Create is called manually. So after
constructing the render texture, it is possible to set additional variables, like format,
isCubemap and so on.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="depth">Number of bits in depth buffer.</param>
      <param name="format">Data format for the pixel information.</param>
      <param name="readWrite">Is reading and writing of pixel data enabled?</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.#ctor(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat)">
      <summary>
        <para>Creates a new RenderTexture object.</para>
        <para>The render texture is created with width by height size, with a depth buffer
of depth bits (depth can be 0, 16 or 24), and in format format and with sRGB read / write on or off.Note that constructing a RenderTexture object does not create the hardware representation immediately.
The actual render texture is created upon first use or when Create is called manually. So after
constructing the render texture, it is possible to set additional variables, like format,
isCubemap and so on.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="depth">Number of bits in depth buffer.</param>
      <param name="format">Data format for the pixel information.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Creates a new RenderTexture object.</para>
        <para>The render texture is created with width by height size, with a depth buffer
of depth bits (depth can be 0, 16 or 24), and in format format and with sRGB read / write on or off.Note that constructing a RenderTexture object does not create the hardware representation immediately.
The actual render texture is created upon first use or when Create is called manually. So after
constructing the render texture, it is possible to set additional variables, like format,
isCubemap and so on.</para>
      </summary>
      <param name="width">Texture width in pixels.</param>
      <param name="height">Texture height in pixels.</param>
      <param name="depth">Number of bits in depth buffer.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite,System.Int32)">
      <summary>
        <para>Allocate a temporary render texture.</para>
        <para>This function is optimized for when you need a quick RenderTexture to do some temporary calculations.
Release it using ReleaseTemporary as soon as you're done with it, so another call can
start reusing it if needed.Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often
just returns an already created one (if the size and format matches). These temporary render textures
are actually destroyed when they aren't used for a couple of frames.If you are doing a series of post-processing "blits", it's best for performance to get and release
a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing
them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally
do a DiscardContents call which helps to avoid costly restore operations on the previous
render texture contents.You can not depend on any particular contents of the RenderTexture you get from GetTemporary function.
It might be garbage, or it might be cleared to some color, depending on the platform.</para>
      </summary>
      <param name="width">Width in pixels.</param>
      <param name="height">Height in pixels.</param>
      <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
      <param name="format">Render texture format.</param>
      <param name="readWrite">sRGB handling mode.</param>
      <param name="antiAliasing">Anti-aliasing (1,2,4,8).</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat,UnityEngine.RenderTextureReadWrite)">
      <summary>
        <para>Allocate a temporary render texture.</para>
        <para>This function is optimized for when you need a quick RenderTexture to do some temporary calculations.
Release it using ReleaseTemporary as soon as you're done with it, so another call can
start reusing it if needed.Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often
just returns an already created one (if the size and format matches). These temporary render textures
are actually destroyed when they aren't used for a couple of frames.If you are doing a series of post-processing "blits", it's best for performance to get and release
a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing
them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally
do a DiscardContents call which helps to avoid costly restore operations on the previous
render texture contents.You can not depend on any particular contents of the RenderTexture you get from GetTemporary function.
It might be garbage, or it might be cleared to some color, depending on the platform.</para>
      </summary>
      <param name="width">Width in pixels.</param>
      <param name="height">Height in pixels.</param>
      <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
      <param name="format">Render texture format.</param>
      <param name="readWrite">sRGB handling mode.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32,System.Int32,UnityEngine.RenderTextureFormat)">
      <summary>
        <para>Allocate a temporary render texture.</para>
        <para>This function is optimized for when you need a quick RenderTexture to do some temporary calculations.
Release it using ReleaseTemporary as soon as you're done with it, so another call can
start reusing it if needed.Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often
just returns an already created one (if the size and format matches). These temporary render textures
are actually destroyed when they aren't used for a couple of frames.If you are doing a series of post-processing "blits", it's best for performance to get and release
a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing
them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally
do a DiscardContents call which helps to avoid costly restore operations on the previous
render texture contents.You can not depend on any particular contents of the RenderTexture you get from GetTemporary function.
It might be garbage, or it might be cleared to some color, depending on the platform.</para>
      </summary>
      <param name="width">Width in pixels.</param>
      <param name="height">Height in pixels.</param>
      <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
      <param name="format">Render texture format.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Allocate a temporary render texture.</para>
        <para>This function is optimized for when you need a quick RenderTexture to do some temporary calculations.
Release it using ReleaseTemporary as soon as you're done with it, so another call can
start reusing it if needed.Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often
just returns an already created one (if the size and format matches). These temporary render textures
are actually destroyed when they aren't used for a couple of frames.If you are doing a series of post-processing "blits", it's best for performance to get and release
a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing
them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally
do a DiscardContents call which helps to avoid costly restore operations on the previous
render texture contents.You can not depend on any particular contents of the RenderTexture you get from GetTemporary function.
It might be garbage, or it might be cleared to some color, depending on the platform.</para>
      </summary>
      <param name="width">Width in pixels.</param>
      <param name="height">Height in pixels.</param>
      <param name="depthBuffer">Depth buffer bits (0, 16 or 24).</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.GetTemporary(System.Int32,System.Int32)">
      <summary>
        <para>Allocate a temporary render texture.</para>
        <para>This function is optimized for when you need a quick RenderTexture to do some temporary calculations.
Release it using ReleaseTemporary as soon as you're done with it, so another call can
start reusing it if needed.Internally Unity keeps a pool of temporary render textures, so a call to GetTemporary most often
just returns an already created one (if the size and format matches). These temporary render textures
are actually destroyed when they aren't used for a couple of frames.If you are doing a series of post-processing "blits", it's best for performance to get and release
a temporary render texture for each blit, instead of getting one or two render textures upfront and reusing
them. This is mostly beneficial for mobile (tile-based) and multi-GPU systems: GetTemporary will internally
do a DiscardContents call which helps to avoid costly restore operations on the previous
render texture contents.You can not depend on any particular contents of the RenderTexture you get from GetTemporary function.
It might be garbage, or it might be cleared to some color, depending on the platform.</para>
      </summary>
      <param name="width">Width in pixels.</param>
      <param name="height">Height in pixels.</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.ReleaseTemporary(UnityEngine.RenderTexture)">
      <summary>
        <para>Release a temporary texture allocated with <see cref="RenderTexture.GetTemporary">GetTemporary</see>.</para>
        <para>Later calls to GetTemporary will reuse the RenderTexture created earlier if possible.
When no one has requested the temporary RenderTexture for a few frames it will be destroyed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.Create">
      <summary>
        <para>Actually creates the RenderTexture.</para>
        <para>RenderTexture constructor does not actually create the hardware texture;
by default the texture is created the first time it is set active.
Calling Create lets you create it up front. Create does nothing
if the texture is already created.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.Release">
      <summary>
        <para>Releases the RenderTexture.</para>
        <para>This function releases the hardware resources used by the render texture.
The texture itself is not destroyed, and will be automatically
created again when being used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.IsCreated">
      <summary>
        <para>Is the render texture actually created?</para>
        <para>RenderTexture constructor does not actually create the hardware texture;
by default the texture is created the first time it is set active.
IsCreated returns true if the hardware resources for this render
are created.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.DiscardContents">
      <summary>
        <para>Discards the contents of the RenderTexture.</para>
        <para>On some platforms, it can be good for performance if you indicate when the
current contents of a RenderTexture aren't needed anymore. This can save
copying it from one kind of memory to another when the texture is reused.
Xbox 360 and many mobile GPUs benefit from this.Both the colour buffer and depth buffer are discarded by default but either can be selected individually using the optional boolean parameters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.DiscardContents(System.Boolean,System.Boolean)">
      <summary>
        <para>Discards the contents of the RenderTexture.</para>
        <para>On some platforms, it can be good for performance if you indicate when the
current contents of a RenderTexture aren't needed anymore. This can save
copying it from one kind of memory to another when the texture is reused.
Xbox 360 and many mobile GPUs benefit from this.Both the colour buffer and depth buffer are discarded by default but either can be selected individually using the optional boolean parameters.</para>
      </summary>
      <param name="discardColor">Should the colour buffer be discarded?</param>
      <param name="discardDepth">Should the depth buffer be discarded?</param>
    </member>
    <member name="M:UnityEngine.RenderTexture.MarkRestoreExpected">
      <summary>
        <para>Indicate that there's a RenderTexture restore operation expected.</para>
        <para>When in mobile graphics emulation mode, Unity issues warnings when a RenderTexture "restore" operation is performed. Restore happens when rendering into a texture, without clearing or discarding (DiscardContents) it first. This is a costly operation on many mobile GPUs and multi-GPU systems and best should be avoided.However, if your rendering effect absolutely needs a RenderTexture restore, you can call this function to indicate that yes, a restore is expected, and Unity will not issue a warning here.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.SetGlobalShaderProperty(System.String)">
      <summary>
        <para>Assigns this RenderTexture as a global shader property named <c>propertyName</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RenderTexture.SupportsStencil(UnityEngine.RenderTexture)">
      <summary>
        <para>Does the RenderTexture have stencil buffer?</para>
        <para>If rt is null, will report the status for the main screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.width">
      <summary>
        <para>The width of the render texture in pixels.</para>
        <para>Note that unlike Texture.width property, this is both read and write -
setting a value changes size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.height">
      <summary>
        <para>The height of the render texture in pixels.</para>
        <para>Note that unlike Texture.height property, this is both read and write -
setting a value changes size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.depth">
      <summary>
        <para>The precision of the render texture's depth buffer in bits (0, 16, 24 are supported).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.sRGB">
      <summary>
        <para>Does this render texture use sRGB read / write (Read Only).</para>
        <para>The value of this property is fixed for the life of the RenderTexture but it can be set using the readWrite parameter of the RenderTexture constructor function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.format">
      <summary>
        <para>The format of the render texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.useMipMap">
      <summary>
        <para>Use mipmaps on a render texture?</para>
        <para>When set to true, rendering into this render texture will create and generate mipmap levels. By default
render textures don't have mipmaps. This flag can be used only on render textures
that have power-of-two size.By default the mipmaps will be automatically generated. If you want to render into texture mip levels manually, set generateMips to false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.generateMips">
      <summary>
        <para>Should mipmap levels be generated automatically?</para>
        <para>When a render texture is with mipmaps (useMipMap), then by default rendering into it generates all the mipmaps levels.If you want to render into mip levels manually, set this variable to false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.isCubemap">
      <summary>
        <para>If enabled, this Render Texture will be used as a <see cref="Cubemap">Cubemap</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.isVolume">
      <summary>
        <para>If enabled, this Render Texture will be used as a <see cref="Texture3D">Texture3D</see>.</para>
        <para>Volumetric render textures currently only work on DirectX 11. You can render into them using "random access writes" from
a pixel shader or a compute shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.volumeDepth">
      <summary>
        <para>Volume extent of a 3D render texture.</para>
        <para>For volumetric render textures (see isVolume), this variable determines the volume extent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.antiAliasing">
      <summary>
        <para>The antialiasing level for the RenderTexture.</para>
        <para>The value is specified as a power of two (0, 1, 2, 4 or 8) indicating the number of multisamples per pixel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.enableRandomWrite">
      <summary>
        <para>Enable DX11 random access write into this render texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.colorBuffer">
      <summary>
        <para>Color buffer of the render texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.depthBuffer">
      <summary>
        <para>Depth buffer of the render texture (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RenderTexture.active">
      <summary>
        <para>The active render texture.</para>
        <para>All rendering goes into the active RenderTexture.
If the active RenderTexture is null everything is rendered in the main window.When a RenderTexture becomes active its hardware rendering context is automatically created if
it hasn't been created already.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUIElement">
      <summary>
        <para>Base class for images &amp;amp; text strings displayed in a GUI.</para>
        <para>This class holds the base functionality for any GUI elements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIElement.HitTest(UnityEngine.Vector3,UnityEngine.Camera)">
      <summary>
        <para>Is a point on screen inside the element.</para>
        <para>Returns true if the screenPosition is contained in this GUIElement. screenPosition is specified in
screen coordinates, like the values returned by Input.mousePosition property.
If no camera is given a camera filling the entire game window will be assumed.Note that if the position is inside the element, true will be returned even if
the game object belongs to Ignore Raycast layer (normally mouse events are not sent
to Ignore Raycast objects).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIElement.HitTest(UnityEngine.Vector3)">
      <summary>
        <para>Is a point on screen inside the element.</para>
        <para>Returns true if the screenPosition is contained in this GUIElement. screenPosition is specified in
screen coordinates, like the values returned by Input.mousePosition property.
If no camera is given a camera filling the entire game window will be assumed.Note that if the position is inside the element, true will be returned even if
the game object belongs to Ignore Raycast layer (normally mouse events are not sent
to Ignore Raycast objects).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIElement.GetScreenRect(UnityEngine.Camera)">
      <summary>
        <para>Returns bounding rectangle of <see cref="GUIElement">GUIElement</see> in screen coordinates.</para>
        <para>If no camera is given a camera filling the entire game window will be assumed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIElement.GetScreenRect">
      <summary>
        <para>Returns bounding rectangle of <see cref="GUIElement">GUIElement</see> in screen coordinates.</para>
        <para>If no camera is given a camera filling the entire game window will be assumed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUITexture">
      <summary>
        <para>A texture image used in a 2D GUI.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUITexture.color">
      <summary>
        <para>The color of the GUI texture.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUITexture.texture">
      <summary>
        <para>The texture used for drawing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUITexture.pixelInset">
      <summary>
        <para>Pixel inset used for pixel adjustments for size and position.</para>
        <para>You can set the transform.localScale to Vector3.zero in order to make the GUI texture always the same pixel size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUITexture.border">
      <summary>
        <para>The border defines the number of pixels from the edge that are not affected by scale.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextAlignment">
      <summary>
        <para>How multiline text should be aligned.</para>
        <para>This is used by GUIText.alignment property.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAlignment.Left">
      <summary>
        <para>Text lines are aligned on the left side.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAlignment.Center">
      <summary>
        <para>Text lines are centered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAlignment.Right">
      <summary>
        <para>Text lines are aligned on the right side.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextAnchor">
      <summary>
        <para>Where the anchor of the text is placed.</para>
        <para>This is used by GUIText.anchor property.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.UpperLeft">
      <summary>
        <para>Text is anchored in upper left corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.UpperCenter">
      <summary>
        <para>Text is anchored in upper side, centered horizontally.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.UpperRight">
      <summary>
        <para>Text is anchored in upper right corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.MiddleLeft">
      <summary>
        <para>Text is anchored in left side, centered vertically.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.MiddleCenter">
      <summary>
        <para>Text is centered both horizontally and vertically.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.MiddleRight">
      <summary>
        <para>Text is anchored in right side, centered vertically.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.LowerLeft">
      <summary>
        <para>Text is anchored in lower left corner.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.LowerCenter">
      <summary>
        <para>Text is anchored in lower side, centered horizontally.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextAnchor.LowerRight">
      <summary>
        <para>Text is anchored in lower right corner.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.HorizontalWrapMode">
      <summary>
        <para>Wrapping modes for text that reaches the horizontal boundary.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HorizontalWrapMode.Wrap">
      <summary>
        <para>Text will wrap when reaching the horizontal boundary.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.HorizontalWrapMode.Overflow">
      <summary>
        <para>Text well continue to generate when reaching horizontal boundary.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.VerticalWrapMode">
      <summary>
        <para>Wrapping modes for text that reaches the vertical boundary.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.VerticalWrapMode.Truncate">
      <summary>
        <para>Text will be clipped when reaching the vertical boundary.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.VerticalWrapMode.Overflow">
      <summary>
        <para>Text well continue to generate when reaching vertical boundary.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUIText">
      <summary>
        <para>A text string displayed in a GUI.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.text">
      <summary>
        <para>The text to display.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.material">
      <summary>
        <para>The <see cref="Material">Material</see> to use for rendering.</para>
        <para>Assing a new material to change how the rendering is handled. Change this material to change the
font used for all rendering.
If you assign null to material, the built-in basic font is selected.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.pixelOffset">
      <summary>
        <para>The pixel offset of the text.</para>
        <para>The text is offset from its original position by this amount.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.font">
      <summary>
        <para>The font used for the text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.alignment">
      <summary>
        <para>The alignment of the text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.anchor">
      <summary>
        <para>The anchor of the text.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.lineSpacing">
      <summary>
        <para>The line spacing multiplier.</para>
        <para>This is multiplied with the line spacing defined in the font.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.tabSize">
      <summary>
        <para>The tab width multiplier.</para>
        <para>This is multiplied with the tab width defined in the font.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.fontSize">
      <summary>
        <para>The font size to use (for dynamic fonts).</para>
        <para>If this is set to a non-zero value, the font size specified in the font importer is overriden with a custom size.
This is only supported for fonts set to use dynamic font rendering. Other fonts will always use the default font size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.fontStyle">
      <summary>
        <para>The font style to use (for dynamic fonts).</para>
        <para>If this is set to a value other then normal, the font style set in the font importer is overriden with a custom style.
This is only supported for fonts set to use dynamic font rendering. Other fonts will always render in normal style.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.richText">
      <summary>
        <para>Enable HTML-style tags for Text Formatting Markup.</para>
        <para>Supported tags are:
&amp;lt;color="htmlcolor"&amp;gt;colored text&amp;lt;/color&amp;gt;, where "htmlcolor" is a html color string, like "#ff0000" or "red".
&amp;lt;b&amp;gt;bold text&amp;lt;/b&amp;gt;
&amp;lt;i&amp;gt;italic text&amp;lt;/i&amp;gt;
&amp;lt;size=20&amp;gt;sized text&amp;lt;/size&amp;gt;
These are only supported for fonts set to use dynamic font rendering, except for the 'color' tag.Note that richText in Unity is not a full html implementation.  Other tags are not supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIText.color">
      <summary>
        <para>The color used to render the text.</para>
        <para>This is the base color used to render the text. &amp;lt;color&amp;gt; tags in rich text markup will override this.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CharacterInfo">
      <summary>
        <para>Info how to render a character from the font texture. See /Font.characterInfo/.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.index">
      <summary>
        <para>Unicode value of the character.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.uv">
      <summary>
        <para>UV coordinates for the character in the texture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.vert">
      <summary>
        <para>Screen coordinates for the character in generated text meshes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.width">
      <summary>
        <para>How for to advance between the beginning of this charcater and the next.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.size">
      <summary>
        <para>The size of the character or 0 if it is the default font size.</para>
        <para>Only used with characters generated at runtime for dynamic fonts).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.style">
      <summary>
        <para>The style of the character.</para>
        <para>Only used with characters generated at runtime for dynamic fonts).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CharacterInfo.flipped">
      <summary>
        <para>Is the character flipped?</para>
        <para>Unity may flip the U and V coordinates of characters in font textures it generates
to make more efficient use of texture space.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Font">
      <summary>
        <para>Script interface for <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Font.html">font assets</see>.</para>
        <para>You can use this class to dynamically switch fonts on GUI texts or Text Meshes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Font.#ctor">
      <summary>
        <para>Create a new Font.</para>
        <para>You may want to use this if you need to create Font objects programmatically to set up your own font by assigning the Font.characterInfo property.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Font.#ctor(System.String)">
      <summary>
        <para>Create a new Font.</para>
        <para>You may want to use this if you need to create Font objects programmatically to set up your own font by assigning the Font.characterInfo property.</para>
      </summary>
      <param name="name">The name of the created Font object.</param>
    </member>
    <member name="M:UnityEngine.Font.HasCharacter(System.Char)">
      <summary>
        <para>Does this font have a specific character?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Font.RequestCharactersInTexture(System.String,System.Int32,UnityEngine.FontStyle)">
      <summary>
        <para>Request characters to be added to the font texture (dynamic fonts only).</para>
        <para>Note: You should only ever need to use this when you want to implement your own text rendering.
Call this function to request Unity to make sure all the characters in the string characters are available
in the font's font texture (and it's characterInfo property). This is useful when you want to implement your
own code to render dynamic fonts. You can supply a custom font size and style for the characters. If size is zero
(the default), it will use the default size for that font.RequestCharactersInTexture may cause the font texture to be regenerated if it does not have space to add all the
requested characters. If the font texture is regenerated it will only contain characters which have been used
using Font.RequestCharactersInTexture, or using Unity's text rendering functions during the last frame. So
it is advisable to always call RequestCharactersInTexture for any text on the screen you wish to render using
custom font rendering functions, even if the characters are currently present in the texture, to make sure they
don't get purged during texture rebuild.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Font.RequestCharactersInTexture(System.String,System.Int32)">
      <summary>
        <para>Request characters to be added to the font texture (dynamic fonts only).</para>
        <para>Note: You should only ever need to use this when you want to implement your own text rendering.
Call this function to request Unity to make sure all the characters in the string characters are available
in the font's font texture (and it's characterInfo property). This is useful when you want to implement your
own code to render dynamic fonts. You can supply a custom font size and style for the characters. If size is zero
(the default), it will use the default size for that font.RequestCharactersInTexture may cause the font texture to be regenerated if it does not have space to add all the
requested characters. If the font texture is regenerated it will only contain characters which have been used
using Font.RequestCharactersInTexture, or using Unity's text rendering functions during the last frame. So
it is advisable to always call RequestCharactersInTexture for any text on the screen you wish to render using
custom font rendering functions, even if the characters are currently present in the texture, to make sure they
don't get purged during texture rebuild.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Font.RequestCharactersInTexture(System.String)">
      <summary>
        <para>Request characters to be added to the font texture (dynamic fonts only).</para>
        <para>Note: You should only ever need to use this when you want to implement your own text rendering.
Call this function to request Unity to make sure all the characters in the string characters are available
in the font's font texture (and it's characterInfo property). This is useful when you want to implement your
own code to render dynamic fonts. You can supply a custom font size and style for the characters. If size is zero
(the default), it will use the default size for that font.RequestCharactersInTexture may cause the font texture to be regenerated if it does not have space to add all the
requested characters. If the font texture is regenerated it will only contain characters which have been used
using Font.RequestCharactersInTexture, or using Unity's text rendering functions during the last frame. So
it is advisable to always call RequestCharactersInTexture for any text on the screen you wish to render using
custom font rendering functions, even if the characters are currently present in the texture, to make sure they
don't get purged during texture rebuild.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Font.GetMaxVertsForString(System.String)">
      <summary>
        <para>Returns the maximum number of verts that the text generator may return for a given string.</para>
      </summary>
      <param name="str">Input string.</param>
    </member>
    <member name="P:UnityEngine.Font.material">
      <summary>
        <para>The material used for the font display.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Font.characterInfo">
      <summary>
        <para>Access an array of all characters contained in the font texture.</para>
        <para>You can read this if you want to render the font texture using custom generated Meshes, or you can set it when you want to
build your own custom font assets from scripts (or modify existing ones).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Font.textureRebuildCallback">
      <summary>
        <para>Set a function to be called when the dynamic font texture is rebuilt.</para>
        <para>This lets you set a delegate function to be called when the dynamic font texture is rebuilt. This will happen when new characters added to the font no longer fit into the texture. The font texture will then be rebuilt to fit all needed characters. If you use custom meshes to render characters from the font, you will need to use the textureRebuildCallback to regenerate such meshes, as previous UV coordinates from the Font will no longer be valid.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Font.dynamic">
      <summary>
        <para>Is the font a dynamic font.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Font.fontSize">
      <summary>
        <para>The default size of the font.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UICharInfo">
      <summary>
        <para>Class that specifes some information about a renderable character.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UICharInfo.cursorPos">
      <summary>
        <para>Position of the character cursor in local (text generated) space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UICharInfo.charWidth">
      <summary>
        <para>Character width.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UILineInfo">
      <summary>
        <para>Information about a generated line of text.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UILineInfo.startCharIdx">
      <summary>
        <para>Index of the first character in the line.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UILineInfo.height">
      <summary>
        <para>Height of the line.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUILayer">
      <summary>
        <para>
          <see cref="Component">Component</see> added to a camera to make it render 2D GUI elements.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayer.HitTest(UnityEngine.Vector3)">
      <summary>
        <para>Get the GUI element at a specific screen position.</para>
        <para>Returns the GUIElement at a specific point on screen. If screenPosition is inside some GUIElement,
that element is returned. Returns null if the position is not inside any GUI element.
GUI elements that belong to Ignore Raycast layer will be ignored, as if they would not exist./screenPosition/ is measured in screen coordinates, like the values returned by Input.mousePosition property.Note: GUILayer.HitTest only finds old-school GUI components
(made up of the classes GUIElement, GUITexture, GUIText, GUILayer),
and will not work with the "new" one (referred to as "UnityGUI" and
made up of all the other GUIAnything classes, and the OnGUI() call).
So if you're using UnityGUI, HitTest won't find anything.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LOD">
      <summary>
        <para>Structure for building a LOD for passing to the SetLODs function.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LOD.#ctor(System.Single,UnityEngine.Renderer[])">
      <summary>
        <para>Construct a LOD.</para>
      </summary>
      <param name="screenRelativeTransitionHeight">The screen relative height to use for the transition [0-1].</param>
      <param name="renderers">An array of renderers to use for this LOD level.</param>
    </member>
    <member name="F:UnityEngine.LOD.screenRelativeTransitionHeight">
      <summary>
        <para>The screen relative height to use for the transition [0-1].</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LOD.renderers">
      <summary>
        <para>List of renderers for this LOD level.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LODGroup">
      <summary>
        <para>LODGroup lets you group multiple Renderers into LOD levels.</para>
        <para>This can be used to switch between different LOD levels at runtime based on size on screen.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LODGroup.RecalculateBounds">
      <summary>
        <para>Recalculate the bounding region for the LODGroup (Relatively slow, do not call often).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LODGroup.SetLODS(UnityEngine.LOD[])">
      <summary>
        <para>Set the LODs for the LOD group. This will remove any existing LODs configured on the LODGroup.</para>
      </summary>
      <param name="scriptingLODs">The LODs to use for this group.</param>
    </member>
    <member name="M:UnityEngine.LODGroup.ForceLOD(System.Int32)">
      <param name="index">The LOD level to use. Passing index &amp;lt; 0 will return to standard LOD processing.</param>
    </member>
    <member name="P:UnityEngine.LODGroup.localReferencePoint">
      <summary>
        <para>The local reference point against which the LOD distance is calculated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.size">
      <summary>
        <para>The size of the LOD object in local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.lodCount">
      <summary>
        <para>The number of LOD levels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LODGroup.enabled">
      <summary>
        <para>Enable / Disable the LODGroup - Disabling will turn off all renderers.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GradientColorKey">
      <summary>
        <para>Color key used by Gradient.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GradientColorKey.#ctor(UnityEngine.Color,System.Single)">
      <summary>
        <para>Gradient color key.</para>
      </summary>
      <param name="time">Time of the key (0 - 1).</param>
    </member>
    <member name="F:UnityEngine.GradientColorKey.color">
      <summary>
        <para>Color of key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientColorKey.time">
      <summary>
        <para>Time of the key (0 - 1).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GradientAlphaKey">
      <summary>
        <para>Alpha key used by Gradient.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GradientAlphaKey.#ctor(System.Single,System.Single)">
      <summary>
        <para>Gradient alpha key.</para>
      </summary>
      <param name="alpha">Alpha of key (0 - 1).</param>
      <param name="time">Time of the key (0 - 1).</param>
    </member>
    <member name="F:UnityEngine.GradientAlphaKey.alpha">
      <summary>
        <para>Alpha alpha of key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GradientAlphaKey.time">
      <summary>
        <para>Time of the key (0 - 1).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Gradient">
      <summary>
        <para>Gradient used for animating colors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gradient.#ctor">
      <summary>
        <para>Create a new Gradient object.</para>
        <para>The Gradient's keys can be manipulated using its SetKeys function.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gradient.Evaluate(System.Single)">
      <summary>
        <para>Calculate color at a given time.</para>
      </summary>
      <param name="time">Time of the key (0 - 1).</param>
    </member>
    <member name="M:UnityEngine.Gradient.SetKeys(UnityEngine.GradientColorKey[],UnityEngine.GradientAlphaKey[])">
      <summary>
        <para>Setup Gradient with an array of color keys and alpha keys.</para>
        <para>Note that the alpha and colors keys will be automatically sorted by time value and that it is ensured to always have a minimum of 2 color keys and 2 alpha keys.</para>
      </summary>
      <param name="colorKeys">Color keys of the gradient (maximum 8 color keys).</param>
      <param name="alphaKeys">Alpha keys of the gradient (maximum 8 alpha keys).</param>
    </member>
    <member name="P:UnityEngine.Gradient.colorKeys">
      <summary>
        <para>All color keys defined in the gradient.</para>
        <para>Note that the color keys will be automatically sorted by time value and that it is ensured to always have a minimum of 2 color keys.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gradient.alphaKeys">
      <summary>
        <para>All alpha keys defined in the gradient.</para>
        <para>Note that the alpha keys will be automatically sorted by time value and that it is ensured to always have a minimum of 2 alpha keys.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ScaleMode">
      <summary>
        <para>Scaling mode to draw textures with.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScaleMode.StretchToFill">
      <summary>
        <para>Stretches the texture to fill the complete rectangle passed in to GUI.DrawTexture.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScaleMode.ScaleAndCrop">
      <summary>
        <para>Scales the texture, maintaining aspect ratio, so it completely covers the <c>position</c> rectangle passed to GUI.DrawTexture. If the texture is being draw to a rectangle with a different aspect ratio than the original, the image is cropped.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ScaleMode.ScaleToFit">
      <summary>
        <para>Scales the texture, maintaining aspect ratio, so it completely fits withing the <c>position</c> rectangle passed to GUI.DrawTexture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUI">
      <summary>
        <para>The GUI class is the interface for Unity's GUI with manual positioning.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.HorizontalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
      <summary>
        <para>A horizontal slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.HorizontalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>A horizontal slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="slider">The <see cref="GUIStyle">GUIStyle</see> to use for displaying the dragging area. If left out, the <c>horizontalSlider</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="thumb">The <see cref="GUIStyle">GUIStyle</see> to use for displaying draggable thumb. If left out, the <c>horizontalSliderThumb</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.VerticalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
      <summary>
        <para>A vertical slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="topValue">The value at the top end of the slider.</param>
      <param name="bottomValue">The value at the bottom end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.VerticalSlider(UnityEngine.Rect,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>A vertical slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="topValue">The value at the top end of the slider.</param>
      <param name="bottomValue">The value at the bottom end of the slider.</param>
      <param name="slider">The <see cref="GUIStyle">GUIStyle</see> to use for displaying the dragging area. If left out, the <c>horizontalSlider</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="thumb">The <see cref="GUIStyle">GUIStyle</see> to use for displaying draggable thumb. If left out, the <c>horizontalSliderThumb</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.HorizontalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the scrollbar.</param>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="leftValue">The value at the left end of the scrollbar.</param>
      <param name="rightValue">The value at the right end of the scrollbar.</param>
      <returns>
        <para>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.HorizontalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a horizontal scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the scrollbar.</param>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="leftValue">The value at the left end of the scrollbar.</param>
      <param name="rightValue">The value at the right end of the scrollbar.</param>
      <param name="style">The style to use for the scrollbar background. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.VerticalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the scrollbar.</param>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="topValue">The value at the top of the scrollbar.</param>
      <param name="bottomValue">The value at the bottom of the scrollbar.</param>
      <returns>
        <para>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.VerticalScrollbar(UnityEngine.Rect,System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a vertical scrollbar. Scrollbars are what you use to scroll through a document. Most likely, you want to use scrollViews instead.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the scrollbar.</param>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="topValue">The value at the top of the scrollbar.</param>
      <param name="bottomValue">The value at the bottom of the scrollbar.</param>
      <param name="style">The style to use for the scrollbar background. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="GUI.EndGroup">EndGroup</see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group.
Groups can be nested - if they are, children are clipped to their parents.This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.
</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,System.String)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="GUI.EndGroup">EndGroup</see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group.
Groups can be nested - if they are, children are clipped to their parents.This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.
</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="text">Text to display on the group.</param>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="GUI.EndGroup">EndGroup</see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group.
Groups can be nested - if they are, children are clipped to their parents.This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.
</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the group.</param>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="GUI.EndGroup">EndGroup</see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group.
Groups can be nested - if they are, children are clipped to their parents.This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.
</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="content">Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.</param>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="GUI.EndGroup">EndGroup</see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group.
Groups can be nested - if they are, children are clipped to their parents.This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.
</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="style">The style to use for the background.</param>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="GUI.EndGroup">EndGroup</see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group.
Groups can be nested - if they are, children are clipped to their parents.This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.
</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="text">Text to display on the group.</param>
      <param name="style">The style to use for the background.</param>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="GUI.EndGroup">EndGroup</see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group.
Groups can be nested - if they are, children are clipped to their parents.This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.
</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the group.</param>
      <param name="style">The style to use for the background.</param>
    </member>
    <member name="M:UnityEngine.GUI.BeginGroup(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a group. Must be matched with a call to <see cref="GUI.EndGroup">EndGroup</see>.</para>
        <para>When you begin a group, the coordinate system for GUI controls are set so (0,0) is the top-left corner of the group. All controls are clipped to the group.
Groups can be nested - if they are, children are clipped to their parents.This is very useful when moving a bunch of GUI elements around on screen. A common use case is designing your menus to fit on a specific screen size, then centering the GUI on larger displays.
</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the group.</param>
      <param name="content">Text, image and tooltip for this group. If supplied, any mouse clicks are "captured" by the group and not If left out, no background is rendered, and mouse clicks are passed.</param>
      <param name="style">The style to use for the background.</param>
    </member>
    <member name="M:UnityEngine.GUI.EndGroup">
      <summary>
        <para>End a group.</para>
        <para>Should be attached with GUI.BeginGroup
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect)">
      <summary>
        <para>Begin a scrolling view inside your GUI.</para>
        <para>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the ScrollView.</param>
      <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
      <param name="viewRect">The rectangle used inside the scrollview.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,System.Boolean)">
      <summary>
        <para>Begin a scrolling view inside your GUI.</para>
        <para>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the ScrollView.</param>
      <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
      <param name="viewRect">The rectangle used inside the scrollview.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a scrolling view inside your GUI.</para>
        <para>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the ScrollView.</param>
      <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
      <param name="viewRect">The rectangle used inside the scrollview.</param>
      <param name="horizontalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.BeginScrollView(UnityEngine.Rect,UnityEngine.Vector2,UnityEngine.Rect,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a scrolling view inside your GUI.</para>
        <para>ScrollViews let you make a smaller area on-screen look 'into' a much larger area, using scrollbars placed on the sides of the ScrollView.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the ScrollView.</param>
      <param name="scrollPosition">The pixel distance that the view is scrolled in the X and Y directions.</param>
      <param name="viewRect">The rectangle used inside the scrollview.</param>
      <param name="horizontalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.EndScrollView">
      <summary>
        <para>Ends a scrollview started with a call to BeginScrollView.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.EndScrollView(System.Boolean)">
      <summary>
        <para>Ends a scrollview started with a call to BeginScrollView.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.ScrollTo(UnityEngine.Rect)">
      <summary>
        <para>Scrolls all enclosing scrollviews so they try to make <c>position</c> visible.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.ScrollTowards(UnityEngine.Rect,System.Single)" />
    <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,System.String)">
      <summary>
        <para>Make a popup window.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.</para>
      </summary>
      <param name="id">ID number for the window (can be any value as long as it is unique).</param>
      <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
      <param name="func">Script function to display the window's contents.</param>
      <param name="text">Text to render inside the window.</param>
      <returns>
        <para>Onscreen rectangle denoting the window's position and size.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.Texture)">
      <summary>
        <para>Make a popup window.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.</para>
      </summary>
      <param name="id">ID number for the window (can be any value as long as it is unique).</param>
      <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
      <param name="func">Script function to display the window's contents.</param>
      <param name="image">Image to render inside the window.</param>
      <returns>
        <para>Onscreen rectangle denoting the window's position and size.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.GUIContent)">
      <summary>
        <para>Make a popup window.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.</para>
      </summary>
      <param name="id">ID number for the window (can be any value as long as it is unique).</param>
      <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
      <param name="func">Script function to display the window's contents.</param>
      <param name="content">GUIContent to render inside the window.</param>
      <returns>
        <para>Onscreen rectangle denoting the window's position and size.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a popup window.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.</para>
      </summary>
      <param name="id">ID number for the window (can be any value as long as it is unique).</param>
      <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
      <param name="func">Script function to display the window's contents.</param>
      <param name="text">Text to render inside the window.</param>
      <param name="style">Style information for the window.</param>
      <returns>
        <para>Onscreen rectangle denoting the window's position and size.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a popup window.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.</para>
      </summary>
      <param name="id">ID number for the window (can be any value as long as it is unique).</param>
      <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
      <param name="func">Script function to display the window's contents.</param>
      <param name="image">Image to render inside the window.</param>
      <param name="style">Style information for the window.</param>
      <returns>
        <para>Onscreen rectangle denoting the window's position and size.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a popup window.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user. Unlike other controls, you need to pass them a separate function that renders the GUI controls inside the window. Note: If you are using GUILayout to place your components inside the window, you should use GUILayout.Window. Also, if MonoBehaviour.useGUILayout is set to false then a call to GUI.Window will not have any effect, even though it is not a GUILayout function.</para>
      </summary>
      <param name="id">ID number for the window (can be any value as long as it is unique).</param>
      <param name="clientRect">Onscreen rectangle denoting the window's position and size.</param>
      <param name="func">Script function to display the window's contents.</param>
      <param name="style">Style information for the window.</param>
      <param name="title">Text displayed in the window's title bar.</param>
      <returns>
        <para>Onscreen rectangle denoting the window's position and size.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,System.String)">
      <summary>
        <para>Show a Modal Window.</para>
        <para>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</para>
      </summary>
      <param name="id">A unique id number.</param>
      <param name="clientRect">Position and size of the window.</param>
      <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
      <param name="text">Text to appear in the title-bar area of the window, if any.</param>
    </member>
    <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.Texture)">
      <summary>
        <para>Show a Modal Window.</para>
        <para>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</para>
      </summary>
      <param name="id">A unique id number.</param>
      <param name="clientRect">Position and size of the window.</param>
      <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
      <param name="image">An image to appear in the title bar of the window, if any.</param>
    </member>
    <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.GUIContent)">
      <summary>
        <para>Show a Modal Window.</para>
        <para>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</para>
      </summary>
      <param name="id">A unique id number.</param>
      <param name="clientRect">Position and size of the window.</param>
      <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
      <param name="content">GUIContent to appear in the title bar of the window, if any.</param>
    </member>
    <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Show a Modal Window.</para>
        <para>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</para>
      </summary>
      <param name="id">A unique id number.</param>
      <param name="clientRect">Position and size of the window.</param>
      <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
      <param name="text">Text to appear in the title-bar area of the window, if any.</param>
      <param name="style">Style to apply to the window.</param>
    </member>
    <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Show a Modal Window.</para>
        <para>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</para>
      </summary>
      <param name="id">A unique id number.</param>
      <param name="clientRect">Position and size of the window.</param>
      <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
      <param name="image">An image to appear in the title bar of the window, if any.</param>
      <param name="style">Style to apply to the window.</param>
    </member>
    <member name="M:UnityEngine.GUI.ModalWindow(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Show a Modal Window.</para>
        <para>Similar to GUI.Window, however the window will always be on top of all other GUI, and while displayed, is guaranteed to be sole recipient of all GUI input and events. While a ModalWindow is being displayed, other controls will not be processing input. Note that only one ModalWindow can be displayed at a time.</para>
      </summary>
      <param name="id">A unique id number.</param>
      <param name="clientRect">Position and size of the window.</param>
      <param name="func">A function which contains the immediate mode GUI code to draw the contents of your window.</param>
      <param name="content">GUIContent to appear in the title bar of the window, if any.</param>
      <param name="style">Style to apply to the window.</param>
    </member>
    <member name="M:UnityEngine.GUI.DragWindow(UnityEngine.Rect)">
      <summary>
        <para>Make a window draggable.</para>
        <para>Insert a call to this function inside your window code to make a window draggable.</para>
      </summary>
      <param name="position">The part of the window that can be dragged. This is clipped to the actual window.</param>
    </member>
    <member name="M:UnityEngine.GUI.DragWindow">
      <summary>
        <para>If you want to have the entire window background to act as a drag area, use the version of DragWindow that takes no parameters and put it at the end of the window function.</para>
        <para>This will mean that any other controls will get precedence and the dragging will only be activated if nothing else has mouse focus.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.BringWindowToFront(System.Int32)">
      <summary>
        <para>Bring a specific window to front of the floating windows.</para>
      </summary>
      <param name="windowID">The identifier used when you created the window in the <see cref="GUI.Window">Window</see> call.</param>
    </member>
    <member name="M:UnityEngine.GUI.BringWindowToBack(System.Int32)">
      <summary>
        <para>Bring a specific window to back of the floating windows.</para>
      </summary>
      <param name="windowID">The identifier used when you created the window in the <see cref="GUI.Window">Window</see> call.</param>
    </member>
    <member name="M:UnityEngine.GUI.FocusWindow(System.Int32)">
      <summary>
        <para>Make a window become the active window.</para>
      </summary>
      <param name="windowID">The identifier used when you created the window in the <see cref="GUI.Window">Window</see> call.</param>
    </member>
    <member name="M:UnityEngine.GUI.UnfocusWindow">
      <summary>
        <para>Remove focus from all windows.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control.Example: Draw the classic Hello World! string:Text label on the Game View.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">Text to display on the label.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control.Example: Draw the classic Hello World! string:Text label on the Game View.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the label.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control.Example: Draw the classic Hello World! string:Text label on the Game View.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="content">Text, image and tooltip for this label.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control.Example: Draw the classic Hello World! string:Text label on the Game View.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">Text to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control.Example: Draw the classic Hello World! string:Text label on the Game View.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.Label(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text or texture label on screen.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box control.Example: Draw the classic Hello World! string:Text label on the Game View.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Boolean)">
      <summary>
        <para>Draw a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="alphaBlend">Whether to apply alpha blending when drawing the image (enabled by default).</param>
    </member>
    <member name="M:UnityEngine.GUI.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode)">
      <summary>
        <para>Draw a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
    </member>
    <member name="M:UnityEngine.GUI.DrawTexture(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draw a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
    </member>
    <member name="M:UnityEngine.GUI.DrawTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Boolean,System.Single)">
      <summary>
        <para>Draw a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="alphaBlend">Whether to apply alpha blending when drawing the image (enabled by default).</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.  Pass in w/h for the desired aspect ratio.  This allows the aspect ratio of the source image to be adjusted without changing the pixel width and height.</param>
    </member>
    <member name="M:UnityEngine.GUI.DrawTextureWithTexCoords(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect)">
      <summary>
        <para>Draw a texture within a rectangle with the given texture coordinates. Use this function for clipping or tiling the image within the given rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="texCoords">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
    </member>
    <member name="M:UnityEngine.GUI.DrawTextureWithTexCoords(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Draw a texture within a rectangle with the given texture coordinates. Use this function for clipping or tiling the image within the given rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="texCoords">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="alphaBlend">Whether to alpha blend the image on to the display (the default). If false, the picture is drawn on to the display.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a graphical box.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="text">Text to display on the box.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Make a graphical box.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the box.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a graphical box.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="content">Text, image and tooltip for this box.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a graphical box.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="text">Text to display on the box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a graphical box.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.Box(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a graphical box.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the box.</param>
      <param name="content">Text, image and tooltip for this box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="text">Text to display on the button.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Button(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a button that is active as long as the user holds it down.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="text">Text to display on the button.</param>
      <returns>
        <para>True when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Make a button that is active as long as the user holds it down.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <returns>
        <para>True when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a button that is active as long as the user holds it down.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <returns>
        <para>True when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a button that is active as long as the user holds it down.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>True when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a button that is active as long as the user holds it down.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>True when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.RepeatButton(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a button that is active as long as the user holds it down.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>True when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a single-line text field where the user can edit a string.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>
        <para>Make a single-line text field where the user can edit a string.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a single-line text field where the user can edit a string.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.TextField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a single-line text field where the user can edit a string.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <returns>
        <para>The edited password.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char,System.Int32)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <returns>
        <para>The edited password.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The edited password.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.PasswordField(UnityEngine.Rect,System.String,System.Char,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The edited password.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a Multi-line text area where the user can edit a string.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String,System.Int32)">
      <summary>
        <para>Make a Multi-line text area where the user can edit a string.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a Multi-line text area where the user can edit a string.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="style">The style to use. If left out, the <c>textArea</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.TextArea(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a Multi-line text area where the user can edit a string.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textArea</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.SetNextControlName(System.String)">
      <summary>
        <para>Set the name of the next control.</para>
        <para>This makes the following control be registered with a given name.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.GetNameOfFocusedControl">
      <summary>
        <para>Get the name of named control that has focus.</para>
        <para>Control names are set up by using SetNextControlName. When a named control has focus, this function will return its name. If no control has focus or the focused control has no name set, an empty string will be returned instead.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUI.FocusControl(System.String)">
      <summary>
        <para>Move keyboard focus to a named control.</para>
      </summary>
      <param name="name">Name set using <see cref="GUI.SetNextControlName">SetNextControlName</see>.</param>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Make an on/off toggle button.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="text">Text to display on the button.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.Texture)">
      <summary>
        <para>Make an on/off toggle button.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent)">
      <summary>
        <para>Make an on/off toggle button.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an on/off toggle button.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>toggle</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an on/off toggle button.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>toggle</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an on/off toggle button.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the button.</param>
      <param name="value">Is this button on or off?</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>toggle</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>
        <para>Make a toolbar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the toolbar buttons.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.Texture[])">
      <summary>
        <para>Make a toolbar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the toolbar buttons.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[])">
      <summary>
        <para>Make a toolbar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toolbar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the toolbar buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.Texture[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toolbar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the toolbar buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.Toolbar(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toolbar.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toolbar.</param>
      <param name="selected">The index of the selected button.</param>
      <param name="contents">An array of text, image and tooltips for the toolbar buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,System.String[],System.Int32)">
      <summary>
        <para>Make a grid of buttons.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="texts">An array of strings to show on the grid buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.Texture[],System.Int32)">
      <summary>
        <para>Make a grid of buttons.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="images">An array of textures on the grid buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32)">
      <summary>
        <para>Make a grid of buttons.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,System.String[],System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a grid of buttons.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="texts">An array of strings to show on the grid buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.Texture[],System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a grid of buttons.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="images">An array of textures on the grid buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUI.SelectionGrid(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a grid of buttons.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the grid.</param>
      <param name="selected">The index of the selected grid button.</param>
      <param name="contents">An array of text, image and tooltips for the grid button.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The controls will be scaled to fit unless the style defines a fixedWidth to use.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.GUI.skin">
      <summary>
        <para>The global skin to use.</para>
        <para>You can set this at any point to change the look of your GUI. If you set it to null, the skin will revert to the default Unity skin.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.color">
      <summary>
        <para>Global tinting color for the GUI.</para>
        <para>This will affect both backgrounds &amp;amp; text colors.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.backgroundColor">
      <summary>
        <para>Global tinting color for all background elements rendered by the GUI.</para>
        <para>This gets multiplied by color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.contentColor">
      <summary>
        <para>Tinting color for all text rendered by the GUI.</para>
        <para>This gets multiplied by color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.changed">
      <summary>
        <para>Returns true if any controls changed the value of the input data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.enabled">
      <summary>
        <para>Is the GUI enabled?</para>
        <para>Set this value to false to disable all GUI interaction. All controls will be draw semi-transparently, and will not respond to user input.Enabled / Disabled GUI controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.matrix">
      <summary>
        <para>The GUI transform matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.tooltip">
      <summary>
        <para>The tooltip of the control the mouse is currently over, or which has keyboard focus. (Read Only).</para>
        <para>When you create GUI controls, you can pass in a tooltip for them. This is done by changing the content parameter 
to take a custom-made GUIContent object, rather than just passing in a string to display.When the mouse is over a control with a tooltip, it sets the global GUI.tooltip value to the tooltip you pass in.
If the mouse is not hovering over any control, the value is set to the control which has keyboard focus.
At the end of the OnGUI code, you can make a label showing the value of GUI.tooltipGUI Tooltip on th Game view appears when the mouse is over the button.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUI.depth">
      <summary>
        <para>The sorting depth of the currently executing GUI behaviour.</para>
        <para>Set this to determine ordering when you have different scripts running simultaneously.
GUI elements drawn with lower depth values will appear on top of elements with higher values (ie, you can think of the depth as "distance" from the camera).Note:To see this example working, you will need to create 2
scripts. Remember to name the scripts with the same name as the class
names, else it will not work.One Button behind the other.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUILayout">
      <summary>
        <para>The GUILayout class is the interface for Unity gui with automatic layout.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box controlLabel in the Game View.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box controlLabel in the Game View.</para>
      </summary>
      <param name="text">Text to display on the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box controlLabel in the Game View.</para>
      </summary>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box controlLabel in the Game View.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box controlLabel in the Game View.</para>
      </summary>
      <param name="text">Text to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Label(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout label.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. If you want to make a control that responds visually to user input, use a Box controlLabel in the Game View.</para>
      </summary>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (BeginHorizontal, BeginVertical, BeginArea, etc...).Boxes in the Game View.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the box.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (BeginHorizontal, BeginVertical, BeginArea, etc...).Boxes in the Game View.</para>
      </summary>
      <param name="text">Text to display on the box.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (BeginHorizontal, BeginVertical, BeginArea, etc...).Boxes in the Game View.</para>
      </summary>
      <param name="content">Text, image and tooltip for this box.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (BeginHorizontal, BeginVertical, BeginArea, etc...).Boxes in the Game View.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (BeginHorizontal, BeginVertical, BeginArea, etc...).Boxes in the Game View.</para>
      </summary>
      <param name="text">Text to display on the box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Box(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an auto-layout box.</para>
        <para>This will make a box that contains static text or images but not other GUI controls. If you want to make a rectangular container for a set of GUI controls, use one of the grouping functions (BeginHorizontal, BeginVertical, BeginArea, etc...).Boxes in the Game View.</para>
      </summary>
      <param name="content">Text, image and tooltip for this box.</param>
      <param name="style">The style to use. If left out, the <c>box</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
        <para>Buttons in the Game View.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
        <para>Buttons in the Game View.</para>
      </summary>
      <param name="text">Text to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
        <para>Buttons in the Game View.</para>
      </summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
        <para>Buttons in the Game View.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
        <para>Buttons in the Game View.</para>
      </summary>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Button(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single press button. The user clicks them and something happens immediately.</para>
        <para>Buttons in the Game View.</para>
      </summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the users clicks the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a repeating button. The button returns true as long as the user holds down the mouse.</para>
        <para>Repeat Buttons in the Game View.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the holds down the mouse.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a repeating button. The button returns true as long as the user holds down the mouse.</para>
        <para>Repeat Buttons in the Game View.</para>
      </summary>
      <param name="text">Text to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the holds down the mouse.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a repeating button. The button returns true as long as the user holds down the mouse.</para>
        <para>Repeat Buttons in the Game View.</para>
      </summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the holds down the mouse.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a repeating button. The button returns true as long as the user holds down the mouse.</para>
        <para>Repeat Buttons in the Game View.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the holds down the mouse.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a repeating button. The button returns true as long as the user holds down the mouse.</para>
        <para>Repeat Buttons in the Game View.</para>
      </summary>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the holds down the mouse.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.RepeatButton(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a repeating button. The button returns true as long as the user holds down the mouse.</para>
        <para>Repeat Buttons in the Game View.</para>
      </summary>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>/true/ when the holds down the mouse.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.TextField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single-line text field where the user can edit a string.</para>
        <para>Text field in the GameView.</para>
      </summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.TextField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single-line text field where the user can edit a string.</para>
        <para>Text field in the GameView.</para>
      </summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.TextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single-line text field where the user can edit a string.</para>
        <para>Text field in the GameView.</para>
      </summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="style">The style to use. If left out, the <c>textArea</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.TextField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a single-line text field where the user can edit a string.</para>
        <para>Text field in the GameView.</para>
      </summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textArea</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>Password field in the Game View.</para>
      </summary>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <returns>
        <para>The edited password.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>Password field in the Game View.</para>
      </summary>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <returns>
        <para>The edited password.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>Password field in the Game View.</para>
      </summary>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The edited password.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.PasswordField(System.String,System.Char,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>Password field in the Game View.</para>
      </summary>
      <param name="password">Password to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maskChar">Character to mask the password with.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The edited password.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.TextArea(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a multi-line text field where the user can edit a string.</para>
        <para>Text area in the Game View.</para>
      </summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.TextArea(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a multi-line text field where the user can edit a string.</para>
        <para>Text area in the Game View.</para>
      </summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.TextArea(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a multi-line text field where the user can edit a string.</para>
        <para>Text area in the Game View.</para>
      </summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.TextArea(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a multi-line text field where the user can edit a string.</para>
        <para>Text area in the Game View.</para>
      </summary>
      <param name="text">Text to edit. The return value of this function should be assigned back to the string as shown in the example.</param>
      <param name="maxLength">The maximum length of the string. If left out, the user can type for ever and ever.</param>
      <param name="style">The style to use. If left out, the <c>textField</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The edited string.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an on/off toggle button.</para>
        <para>Toggle button in the Game View.</para>
      </summary>
      <param name="value">Is the button on or off?</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an on/off toggle button.</para>
        <para>Toggle button in the Game View.</para>
      </summary>
      <param name="value">Is the button on or off?</param>
      <param name="text">Text to display on the button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an on/off toggle button.</para>
        <para>Toggle button in the Game View.</para>
      </summary>
      <param name="value">Is the button on or off?</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an on/off toggle button.</para>
        <para>Toggle button in the Game View.</para>
      </summary>
      <param name="value">Is the button on or off?</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an on/off toggle button.</para>
        <para>Toggle button in the Game View.</para>
      </summary>
      <param name="value">Is the button on or off?</param>
      <param name="text">Text to display on the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toggle(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an on/off toggle button.</para>
        <para>Toggle button in the Game View.</para>
      </summary>
      <param name="value">Is the button on or off?</param>
      <param name="content">Text, image and tooltip for this button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The new value of the button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toolbar.</para>
        <para>Toolbar in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the buttons.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.Texture[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toolbar.</para>
        <para>Toolbar in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the buttons.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toolbar.</para>
        <para>Toolbar in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toolbar.</para>
        <para>Toolbar in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.Texture[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toolbar.</para>
        <para>Toolbar in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the buttons.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Toolbar(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toolbar.</para>
        <para>Toolbar in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="contents">An array of text, image and tooltips for the button.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,System.String[],System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a Selection Grid.</para>
        <para>Selection grid in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.Texture[],System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a Selection Grid.</para>
        <para>Selection grid in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.GUIContent[],System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a Selection Grid.</para>
        <para>Selection grid in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,System.String[],System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a Selection Grid.</para>
        <para>Selection grid in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="texts">An array of strings to show on the buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.Texture[],System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a Selection Grid.</para>
        <para>Selection grid in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="images">An array of textures on the buttons.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.SelectionGrid(System.Int32,UnityEngine.GUIContent[],System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a Selection Grid.</para>
        <para>Selection grid in the Game View.</para>
      </summary>
      <param name="selected">The index of the selected button.</param>
      <param name="contents">An array of text, image and tooltips for the button.</param>
      <param name="xCount">How many elements to fit in the horizontal direction. The elements will be scaled to fit unless the style defines a fixedWidth to use. The height of the control will be determined from the number of elements.</param>
      <param name="style">The style to use. If left out, the <c>button</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the selected button.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.HorizontalSlider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>A horizontal slider the user can drag to change a value between a min and a max.</para>
        <para>Horizontal slider in the GameView.</para>
      </summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.HorizontalSlider(System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>A horizontal slider the user can drag to change a value between a min and a max.</para>
        <para>Horizontal slider in the GameView.</para>
      </summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="slider">The <see cref="GUIStyle">GUIStyle</see> to use for displaying the dragging area. If left out, the <c>horizontalSlider</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="thumb">The <see cref="GUIStyle">GUIStyle</see> to use for displaying draggable thumb. If left out, the <c>horizontalSliderThumb</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.VerticalSlider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>A vertical slider the user can drag to change a value between a min and a max.</para>
        <para>Vertical slider in the Game View.</para>
      </summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.VerticalSlider(System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>A vertical slider the user can drag to change a value between a min and a max.</para>
        <para>Vertical slider in the Game View.</para>
      </summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="slider">The <see cref="GUIStyle">GUIStyle</see> to use for displaying the dragging area. If left out, the <c>horizontalSlider</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="thumb">The <see cref="GUIStyle">GUIStyle</see> to use for displaying draggable thumb. If left out, the <c>horizontalSliderThumb</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.HorizontalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a horiztonal scrollbar.</para>
        <para>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a scroll view control.Horizontal Scrollbar in the Game View.</para>
      </summary>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="leftValue">The value at the left end of the scrollbar.</param>
      <param name="rightValue">The value at the right end of the scrollbar.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <para>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.HorizontalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a horiztonal scrollbar.</para>
        <para>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a scroll view control.Horizontal Scrollbar in the Game View.</para>
      </summary>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="leftValue">The value at the left end of the scrollbar.</param>
      <param name="rightValue">The value at the right end of the scrollbar.</param>
      <param name="style">The style to use for the scrollbar background. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <para>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.VerticalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a vertical scrollbar.</para>
        <para>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a scroll view control.Vertical Scrollbar in the Game View.</para>
      </summary>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="topValue">The value at the top end of the scrollbar.</param>
      <param name="bottomValue">The value at the bottom end of the scrollbar.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <para>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.VerticalScrollbar(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a vertical scrollbar.</para>
        <para>A scrollbar control returns a float value that represents the position of the draggable "thumb" withtin the bar. You can use the value to adjust another GUI element to reflect the scroll position. However, most scrollable views can be handled more easily using a scroll view control.Vertical Scrollbar in the Game View.</para>
      </summary>
      <param name="value">The position between min and max.</param>
      <param name="size">How much can we see?</param>
      <param name="topValue">The value at the top end of the scrollbar.</param>
      <param name="bottomValue">The value at the bottom end of the scrollbar.</param>
      <param name="style">The style to use for the scrollbar background. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.</param>
      <returns>
        <para>The modified value. This can be changed by the user by dragging the scrollbar, or clicking the arrows at the end.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Space(System.Single)">
      <summary>
        <para>Insert a space in the current layout group.</para>
        <para>The direction of the space is dependent on the layout group you're currently in when issuing the command. If in a vertical group, the space will be vertical:
Note: This will override the GUILayout.ExpandWidth and GUILayout.ExpandHeightSpace of 20px between two buttons.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.FlexibleSpace">
      <summary>
        <para>Insert a flexible space element.</para>
        <para>Flexible spaces use up any leftover space in a layout. Note: This will override the GUILayout.ExpandWidth and GUILayout.ExpandHeightFlexible Space in a GUILayout Area.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal.Horizontal Layout.</para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal.Horizontal Layout.</para>
      </summary>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal.Horizontal Layout.</para>
      </summary>
      <param name="text">Text to display on group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal.Horizontal Layout.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginHorizontal(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a Horizontal control group.</para>
        <para>All controls rendered inside this element will be placed horizontally next to each other. The group must be closed with a call to EndHorizontal.Horizontal Layout.</para>
      </summary>
      <param name="content">Text, image, and tooltip for this group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.EndHorizontal">
      <summary>
        <para>Close a group started with BeginHorizontal.</para>
        <para>Horizontal Layout.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.Vertical Layout.</para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.Vertical Layout.</para>
      </summary>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.Vertical Layout.</para>
      </summary>
      <param name="text">Text to display on group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.Vertical Layout.</para>
      </summary>
      <param name="image">
        <see cref="Texture">Texture</see> to display on group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginVertical(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical control group.</para>
        <para>All controls rendered inside this element will be placed vertically below each other. The group must be closed with a call to EndVertical.Vertical Layout.</para>
      </summary>
      <param name="content">Text, image, and tooltip for this group.</param>
      <param name="style">The style to use for background image and padding values. If left out, the background is transparent.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.EndVertical">
      <summary>
        <para>Close a group started with BeginVertical.</para>
        <para>Vertical Layout.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. 
If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,System.String)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. 
If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use.</para>
      </summary>
      <param name="text">Optional text to display in the area.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. 
If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use.</para>
      </summary>
      <param name="image">Optional texture to display in the area.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. 
If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use.</para>
      </summary>
      <param name="content">Optional text, image and tooltip top display for this area.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. 
If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use.</para>
      </summary>
      <param name="style">The style to use. If left out, the empty <see cref="GUIStyle">GUIStyle</see> (<see cref="GUIStyle-none">GUIStyle.none</see>) is used, giving a transparent background.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. 
If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use.</para>
      </summary>
      <param name="text">Optional text to display in the area.</param>
      <param name="style">The style to use. If left out, the empty <see cref="GUIStyle">GUIStyle</see> (<see cref="GUIStyle-none">GUIStyle.none</see>) is used, giving a transparent background.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. 
If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use.</para>
      </summary>
      <param name="image">Optional texture to display in the area.</param>
      <param name="style">The style to use. If left out, the empty <see cref="GUIStyle">GUIStyle</see> (<see cref="GUIStyle-none">GUIStyle.none</see>) is used, giving a transparent background.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginArea(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin a GUILayout block of GUI controls in a fixed screen area.</para>
        <para>By default, any GUI controls made using GUILayout are placed in the top-left corner of the screen. 
If you want to place a series of automatically laid out controls in an arbitrary area, use GUILayout.BeginArea to define a new area for the automatic layouting system to use.</para>
      </summary>
      <param name="content">Optional text, image and tooltip top display for this area.</param>
      <param name="style">The style to use. If left out, the empty <see cref="GUIStyle">GUIStyle</see> (<see cref="GUIStyle-none">GUIStyle.none</see>) is used, giving a transparent background.</param>
    </member>
    <member name="M:UnityEngine.GUILayout.EndArea">
      <summary>
        <para>Close a GUILayout block started with BeginArea.</para>
        <para>Explained Area of the example.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.Scroll View in the Game View..</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.Scroll View in the Game View..</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.Scroll View in the Game View..</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle)">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.Scroll View in the Game View..</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.Scroll View in the Game View..</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.Scroll View in the Game View..</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically laid out scrollview.</para>
        <para>Automatically laid out scrollviews will take whatever content you have inside them and display normally. If it doesn't fit, scrollbars will appear. A call to BeginScrollView must always be matched with a call to EndScrollView.Scroll View in the Game View..</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.EndScrollView">
      <summary>
        <para>End a scroll view begun with a call to BeginScrollView.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a popup window that layouts its contents automatically.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user.
Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:Window in the Game View.</para>
      </summary>
      <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
      <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
      <param name="func">The function that creates the GUI <c>inside</c> the window. This function must take one parameter - the <c>id</c> of the window it's currently making GUI for.</param>
      <param name="text">Text to display as a title for the window.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c> or the <c>screenRect</c> you pass in.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.Texture,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a popup window that layouts its contents automatically.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user.
Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:Window in the Game View.</para>
      </summary>
      <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
      <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
      <param name="func">The function that creates the GUI <c>inside</c> the window. This function must take one parameter - the <c>id</c> of the window it's currently making GUI for.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display an image in the titlebar.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c> or the <c>screenRect</c> you pass in.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a popup window that layouts its contents automatically.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user.
Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:Window in the Game View.</para>
      </summary>
      <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
      <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
      <param name="func">The function that creates the GUI <c>inside</c> the window. This function must take one parameter - the <c>id</c> of the window it's currently making GUI for.</param>
      <param name="content">Text, image and tooltip for this window.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c> or the <c>screenRect</c> you pass in.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a popup window that layouts its contents automatically.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user.
Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:Window in the Game View.</para>
      </summary>
      <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
      <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
      <param name="func">The function that creates the GUI <c>inside</c> the window. This function must take one parameter - the <c>id</c> of the window it's currently making GUI for.</param>
      <param name="text">Text to display as a title for the window.</param>
      <param name="style">An optional style to use for the window. If left out, the <c>window</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c> or the <c>screenRect</c> you pass in.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.Texture,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a popup window that layouts its contents automatically.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user.
Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:Window in the Game View.</para>
      </summary>
      <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
      <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
      <param name="func">The function that creates the GUI <c>inside</c> the window. This function must take one parameter - the <c>id</c> of the window it's currently making GUI for.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display an image in the titlebar.</param>
      <param name="style">An optional style to use for the window. If left out, the <c>window</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c> or the <c>screenRect</c> you pass in.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Window(System.Int32,UnityEngine.Rect,UnityEngine.GUI.WindowFunction,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a popup window that layouts its contents automatically.</para>
        <para>Windows float above normal GUI controls, feature click-to-focus and can optionally be dragged around by the end user.
Unlike other controls, you need to pass them a separate function for the GUI controls to put inside the window. Here is a small example to get you started:Window in the Game View.</para>
      </summary>
      <param name="id">A unique ID to use for each window. This is the ID you'll use to interface to it.</param>
      <param name="screenRect">Rectangle on the screen to use for the window. The layouting system will attempt to fit the window inside it - if that cannot be done, it will adjust the rectangle to fit.</param>
      <param name="func">The function that creates the GUI <c>inside</c> the window. This function must take one parameter - the <c>id</c> of the window it's currently making GUI for.</param>
      <param name="content">Text, image and tooltip for this window.</param>
      <param name="style">An optional style to use for the window. If left out, the <c>window</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c> or the <c>screenRect</c> you pass in.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rectangle the window is at. This can be in a different position and have a different size than the one you passed in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayout.Width(System.Single)">
      <summary>
        <para>Option passed to a control to give it an absolute width.</para>
        <para>Fixed width for a GUI Control.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.MinWidth(System.Single)">
      <summary>
        <para>Option passed to a control to specify a minimum width.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.MaxWidth(System.Single)">
      <summary>
        <para>Option passed to a control to specify a maximum width.</para>
        <para>Maximum allowed width for a window.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.Height(System.Single)">
      <summary>
        <para>Option passed to a control to give it an absolute height.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.MinHeight(System.Single)">
      <summary>
        <para>Option passed to a control to specify a minimum height.</para>
        <para>Minimum height for a window.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.MaxHeight(System.Single)">
      <summary>
        <para>Option passed to a control to specify a maximum height.</para>
        <para>Maximum Height allowed for the window.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.ExpandWidth(System.Boolean)">
      <summary>
        <para>Option passed to a control to allow or disallow horizontal expansion.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayout.ExpandHeight(System.Boolean)">
      <summary>
        <para>Option passed to a control to allow or disallow vertical expansion.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUILayoutUtility">
      <summary>
        <para>Utility functions for implementing and extending the GUILayout class.</para>
        <para>Use this class to make your own GUI layouting code.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Reserve layout space for a rectangle for displaying some contents with a specific style.</para>
      </summary>
      <param name="content">The content to make room for displaying.</param>
      <param name="style">The <see cref="GUIStyle">GUIStyle</see> to layout for.</param>
      <returns>
        <para>A rectangle that is large enough to contain content when rendered in style.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Reserve layout space for a rectangle for displaying some contents with a specific style.</para>
      </summary>
      <param name="content">The content to make room for displaying.</param>
      <param name="style">The <see cref="GUIStyle">GUIStyle</see> to layout for.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>A rectangle that is large enough to contain content when rendered in style.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single)">
      <summary>
        <para>Reserve layout space for a rectangle with a fixed content area.</para>
      </summary>
      <param name="width">The width of the area you want.</param>
      <param name="height">The height of the area you want.</param>
      <returns>
        <para>The rectanlge to put your control in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Reserve layout space for a rectangle with a fixed content area.</para>
      </summary>
      <param name="width">The width of the area you want.</param>
      <param name="height">The height of the area you want.</param>
      <param name="style">An optional <see cref="GUIStyle">GUIStyle</see> to layout for. If specified, the style's <c>padding</c> value will be added to your sizes &amp;amp; its <c>margin</c> value will be used for spacing.</param>
      <returns>
        <para>The rectanlge to put your control in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Reserve layout space for a rectangle with a fixed content area.</para>
      </summary>
      <param name="width">The width of the area you want.</param>
      <param name="height">The height of the area you want.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rectanlge to put your control in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Reserve layout space for a rectangle with a fixed content area.</para>
      </summary>
      <param name="width">The width of the area you want.</param>
      <param name="height">The height of the area you want.</param>
      <param name="style">An optional <see cref="GUIStyle">GUIStyle</see> to layout for. If specified, the style's <c>padding</c> value will be added to your sizes &amp;amp; its <c>margin</c> value will be used for spacing.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rectanlge to put your control in.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Reserve layout space for a flexible rect.</para>
        <para>The rectangle's size will be between the min &amp;amp; max values.</para>
      </summary>
      <param name="minWidth">The minimum width of the area passed back.</param>
      <param name="maxWidth">The maximum width of the area passed back.</param>
      <param name="minHeight">The minimum width of the area passed back.</param>
      <param name="maxHeight">The maximum width of the area passed back.</param>
      <returns>
        <para>A rectangle with size between minWidth &amp;amp; maxWidth on both axes.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Reserve layout space for a flexible rect.</para>
        <para>The rectangle's size will be between the min &amp;amp; max values.</para>
      </summary>
      <param name="minWidth">The minimum width of the area passed back.</param>
      <param name="maxWidth">The maximum width of the area passed back.</param>
      <param name="minHeight">The minimum width of the area passed back.</param>
      <param name="maxHeight">The maximum width of the area passed back.</param>
      <param name="style">An optional style. If specified, the style's <c>padding</c> value will be added to the sizes requested &amp;amp; the style's <c>margin</c> values will be used for spacing.</param>
      <returns>
        <para>A rectangle with size between minWidth &amp;amp; maxWidth on both axes.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Reserve layout space for a flexible rect.</para>
        <para>The rectangle's size will be between the min &amp;amp; max values.</para>
      </summary>
      <param name="minWidth">The minimum width of the area passed back.</param>
      <param name="maxWidth">The maximum width of the area passed back.</param>
      <param name="minHeight">The minimum width of the area passed back.</param>
      <param name="maxHeight">The maximum width of the area passed back.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>A rectangle with size between minWidth &amp;amp; maxWidth on both axes.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetRect(System.Single,System.Single,System.Single,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Reserve layout space for a flexible rect.</para>
        <para>The rectangle's size will be between the min &amp;amp; max values.</para>
      </summary>
      <param name="minWidth">The minimum width of the area passed back.</param>
      <param name="maxWidth">The maximum width of the area passed back.</param>
      <param name="minHeight">The minimum width of the area passed back.</param>
      <param name="maxHeight">The maximum width of the area passed back.</param>
      <param name="style">An optional style. If specified, the style's <c>padding</c> value will be added to the sizes requested &amp;amp; the style's <c>margin</c> values will be used for spacing.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>A rectangle with size between minWidth &amp;amp; maxWidth on both axes.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetLastRect">
      <summary>
        <para>Get the rectangle last used by GUILayout for a control.</para>
        <para>Note that this only works during the Repaint event.</para>
      </summary>
      <returns>
        <para>The last used rectangle.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single)">
      <summary>
        <para>Reserve layout space for a rectangle with a specific aspect ratio.</para>
      </summary>
      <param name="aspect">The aspect ratio of the element (width / height).</param>
      <returns>
        <para>The rect for the control.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Reserve layout space for a rectangle with a specific aspect ratio.</para>
      </summary>
      <param name="aspect">The aspect ratio of the element (width / height).</param>
      <param name="style">An optional style. If specified, the style's <c>padding</c> value will be added to the sizes of the returned rectangle &amp;amp; the style's <c>margin</c> values will be used for spacing.</param>
      <returns>
        <para>The rect for the control.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Reserve layout space for a rectangle with a specific aspect ratio.</para>
      </summary>
      <param name="aspect">The aspect ratio of the element (width / height).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rect for the control.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.GUILayoutUtility.GetAspectRect(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Reserve layout space for a rectangle with a specific aspect ratio.</para>
      </summary>
      <param name="aspect">The aspect ratio of the element (width / height).</param>
      <param name="style">An optional style. If specified, the style's <c>padding</c> value will be added to the sizes of the returned rectangle &amp;amp; the style's <c>margin</c> values will be used for spacing.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The rect for the control.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.GUILayoutOption">
      <summary>
        <para>Class internally used to pass layout options into <see cref="GUILayout">GUILayout</see> functions. You don't use these directly, but construct them with the layouting functions in the <see cref="GUILayout">GUILayout</see> class.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FocusType">
      <summary>
        <para>Used by GUIUtility.GetControlID to inform the UnityGUI system if a given control can get keyboard focus.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FocusType.Native">
      <summary>
        <para>This control can get keyboard focus on Windows, but not on Mac. Used for buttons, checkboxes and other "pressable" things.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FocusType.Keyboard">
      <summary>
        <para>This is a proper keyboard control. It can have input focus on all platforms. Used for TextField and TextArea controls.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FocusType.Passive">
      <summary>
        <para>This control can never recieve keyboard focus.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUIUtility">
      <summary>
        <para>Utility class for making new GUI controls.</para>
        <para>Unless you are creating your own GUI controls from scratch, you should not use these functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.FocusType)">
      <summary>
        <para>Get a unique ID for a control.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(System.Int32,UnityEngine.FocusType)">
      <summary>
        <para>Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.GUIContent,UnityEngine.FocusType)">
      <summary>
        <para>Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.FocusType,UnityEngine.Rect)">
      <summary>
        <para>Get a unique ID for a control.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(System.Int32,UnityEngine.FocusType,UnityEngine.Rect)">
      <summary>
        <para>Get a unique ID for a control, using an integer as a hint to help ensure correct matching of IDs to controls.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetControlID(UnityEngine.GUIContent,UnityEngine.FocusType,UnityEngine.Rect)">
      <summary>
        <para>Get a unique ID for a control, using a the label content as a hint to help ensure correct matching of IDs to controls.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GetStateObject(System.Type,System.Int32)">
      <summary>
        <para>Get a state object from a controlID.</para>
        <para>This will return a recycled state object that is unique for controlID. If there is none already, A new one will be created and hooked up to the ControlID.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.QueryStateObject(System.Type,System.Int32)">
      <summary>
        <para>Get an existing state object from a controlID.</para>
        <para>This will return a recycled state object that is unique for controlID. If there is none already, this funtion will return null.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.GUIToScreenPoint(UnityEngine.Vector2)">
      <summary>
        <para>Convert a point from GUI position to screen space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.ScreenToGUIPoint(UnityEngine.Vector2)">
      <summary>
        <para>Convert a point from screen space to GUI position.</para>
        <para>Used for reconverting values calculated from GUIToScreenPointNote: In Unity the screen space y coordinate varies from zero at the top
edge of the window to a maximum at the bottom edge of the window. This is
different from what you might expect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.ScreenToGUIRect(UnityEngine.Rect)" />
    <member name="M:UnityEngine.GUIUtility.RotateAroundPivot(System.Single,UnityEngine.Vector2)">
      <summary>
        <para>Helper function to rotate the GUI around a point.</para>
        <para>Modifies GUI.matrix to rotate all GUI elements angle degrees around pivotPoint.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIUtility.ScaleAroundPivot(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Helper function to scale the GUI around a point.</para>
        <para>Modifies GUI.matrix to rotate all GUI elements angle degrees around pivotPoint.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIUtility.hotControl">
      <summary>
        <para>The controlID of the current hot control.</para>
        <para>The hot control is one that is temporarily active. When the user mousedown's on a button, it becomes hot. 
No other controls are allowed to respond to mouse events while some other control is hot.
once the user mouseup's, the control sets hotControl to 0 in order to indicate that other controls can now respond to user input.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIUtility.keyboardControl">
      <summary>
        <para>The controlID of the control that has keyboard focus.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIUtility.hasModalWindow">
      <summary>
        <para>A global property, which is true if a ModalWindow is being displayed, false otherwise.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUISettings">
      <summary>
        <para>General settings for how the GUI behaves.</para>
        <para>These are shared by all elements in a GUISkin.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISettings.doubleClickSelectsWord">
      <summary>
        <para>Should double-clicking select words in text fields.</para>
        <para>By default is set to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISettings.tripleClickSelectsLine">
      <summary>
        <para>Should triple-clicking select whole text in text fields.</para>
        <para>Bu default is set to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISettings.cursorColor">
      <summary>
        <para>The color of the cursor in text fields.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISettings.cursorFlashSpeed">
      <summary>
        <para>The speed of text field cursor flashes.</para>
        <para>This is how many flashes / second. If you set it to 0, flashing will be disabled. If you set it to -1, the flashing speed will match the system default of the end user.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISettings.selectionColor">
      <summary>
        <para>The color of the selection rect in text fields.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUISkin">
      <summary>
        <para>Defines how GUI looks and behaves.</para>
        <para>GUISkin contains GUI settings and a collection of GUIStyle objects that together specify GUI skin.Active GUI skin is get and set through GUI.skin.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUISkin.GetStyle(System.String)">
      <summary>
        <para>Get a named <see cref="GUIStyle">GUIStyle</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUISkin.FindStyle(System.String)">
      <summary>
        <para>Try to search for a <see cref="GUIStyle">GUIStyle</see>. This functions returns NULL and does not give an error.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.font">
      <summary>
        <para>The default font to use for all styles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.box">
      <summary>
        <para>Style used by default for <see cref="GUI.Box">GUI.Box</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.label">
      <summary>
        <para>Style used by default for <see cref="GUI.Label">GUI.Label</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.textField">
      <summary>
        <para>Style used by default for <see cref="GUI.TextField">GUI.TextField</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.textArea">
      <summary>
        <para>Style used by default for <see cref="GUI.TextArea">GUI.TextArea</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.button">
      <summary>
        <para>Style used by default for <see cref="GUI.Button">GUI.Button</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.toggle">
      <summary>
        <para>Style used by default for <see cref="GUI.Toggle">GUI.Toggle</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.window">
      <summary>
        <para>Style used by default for Window controls (SA <see cref="GUI.Window">GUI.Window</see>).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalSlider">
      <summary>
        <para>Style used by default for the background part of <see cref="GUI.HorizontalSlider">GUI.HorizontalSlider</see> controls.</para>
        <para>The padding property is used to determine the size of the area the thumb can be dragged within.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalSliderThumb">
      <summary>
        <para>Style used by default for the thumb that is dragged in <see cref="GUI.HorizontalSlider">GUI.HorizontalSlider</see> controls.</para>
        <para>The padding property is used to determine the size of the thumb.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalSlider">
      <summary>
        <para>Style used by default for the background part of <see cref="GUI.VerticalSlider">GUI.VerticalSlider</see> controls.</para>
        <para>The padding property is used to determine the size of the area the thumb can be dragged within.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalSliderThumb">
      <summary>
        <para>Style used by default for the thumb that is dragged in <see cref="GUI.VerticalSlider">GUI.VerticalSlider</see> controls.</para>
        <para>The padding property is used to determine the size of the thumb.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalScrollbar">
      <summary>
        <para>Style used by default for the background part of <see cref="GUI.HorizontalScrollbar">GUI.HorizontalScrollbar</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalScrollbarThumb">
      <summary>
        <para>Style used by default for the thumb that is dragged in <see cref="GUI.HorizontalScrollbar">GUI.HorizontalScrollbar</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalScrollbarLeftButton">
      <summary>
        <para>Style used by default for the left button on <see cref="GUI.HorizontalScrollbar">GUI.HorizontalScrollbar</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.horizontalScrollbarRightButton">
      <summary>
        <para>Style used by default for the right button on <see cref="GUI.HorizontalScrollbar">GUI.HorizontalScrollbar</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalScrollbar">
      <summary>
        <para>Style used by default for the background part of <see cref="GUI.VerticalScrollbar">GUI.VerticalScrollbar</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalScrollbarThumb">
      <summary>
        <para>Style used by default for the thumb that is dragged in <see cref="GUI.VerticalScrollbar">GUI.VerticalScrollbar</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalScrollbarUpButton">
      <summary>
        <para>Style used by default for the up button on <see cref="GUI.VerticalScrollbar">GUI.VerticalScrollbar</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.verticalScrollbarDownButton">
      <summary>
        <para>Style used by default for the down button on <see cref="GUI.VerticalScrollbar">GUI.VerticalScrollbar</see> controls.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.scrollView">
      <summary>
        <para>Style used by default for the background of ScrollView controls (see <see cref="GUI.BeginScrollView">GUI.BeginScrollView</see>).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.customStyles">
      <summary>
        <para>Array of GUI styles for specific needs.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUISkin.settings">
      <summary>
        <para>Generic settings for how controls should behave with this skin.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUIContent">
      <summary>
        <para>The contents of a GUI element.</para>
        <para>This works closely in relation with GUIStyle. GUIContent defines what to render and GUIStyle defines how to render it.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIContent.#ctor">
      <summary>
        <para>Constructor for GUIContent in all shapes and sizes.</para>
        <para>Build an empty GUIContent.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIContent.#ctor(System.String)">
      <summary>
        <para>Build a GUIContent object containing only text.</para>
        <para>When using the GUI, you don't need to create GUIContents for simple text strings - these two lines of code are functionally equivalent:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIContent.#ctor(UnityEngine.Texture)">
      <summary>
        <para>Build a GUIContent object containing only an image.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIContent.#ctor(System.String,UnityEngine.Texture)">
      <summary>
        <para>Build a GUIContent object containing both <c>text</c> and an image.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIContent.#ctor(System.String,System.String)">
      <summary>
        <para>Build a GUIContent containing some <c>text</c>. When the user hovers the mouse over it, the global <see cref="GUI-tooltip">GUI.tooltip</see> is set to the <c>tooltip</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIContent.#ctor(UnityEngine.Texture,System.String)">
      <summary>
        <para>Build a GUIContent containing an image. When the user hovers the mouse over it, the global <see cref="GUI-tooltip">GUI.tooltip</see> is set to the <c>tooltip</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIContent.#ctor(System.String,UnityEngine.Texture,System.String)">
      <summary>
        <para>Build a GUIContent that contains both <c>text</c>, an <c>image</c> and has a <c>tooltip</c> defined. When the user hovers the mouse over it, the global <see cref="GUI-tooltip">GUI.tooltip</see> is set to the <c>tooltip</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIContent.#ctor(UnityEngine.GUIContent)">
      <summary>
        <para>Build a GUIContent as a copy of another GUIContent.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.GUIContent.none">
      <summary>
        <para>Shorthand for empty content.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIContent.text">
      <summary>
        <para>The text contained.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIContent.image">
      <summary>
        <para>The icon image contained.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIContent.tooltip">
      <summary>
        <para>The tooltip of this element.</para>
        <para>The tooltip associated with this content. Read GUItooltip to get the tooltip of the gui element the user is currently over.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUIStyleState">
      <summary>
        <para>Specialized values for the given states used by <see cref="GUIStyle">GUIStyle</see> objects.</para>
        <para>The GUIStyle contains all values for displaying GUI elements.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyleState.background">
      <summary>
        <para>The background image used by GUI elements in this given state.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyleState.textColor">
      <summary>
        <para>The text color used by GUI elements in this state.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RectOffset">
      <summary>
        <para>Offsets for rectangles, borders, etc.</para>
        <para>Used all over the place by GUIStyle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectOffset.#ctor">
      <summary>
        <para>Creates a new rectangle with offsets.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectOffset.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Creates a new rectangle with offsets.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectOffset.Add(UnityEngine.Rect)">
      <summary>
        <para>Add the border offsets to a <c>rect</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectOffset.Remove(UnityEngine.Rect)">
      <summary>
        <para>Remove the border offsets from a <c>rect</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RectOffset.ToString" />
    <member name="P:UnityEngine.RectOffset.left">
      <summary>
        <para>Left edge size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.right">
      <summary>
        <para>Right edge size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.top">
      <summary>
        <para>Top edge size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.bottom">
      <summary>
        <para>Bottom edge size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.horizontal">
      <summary>
        <para>Shortcut for left + right. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RectOffset.vertical">
      <summary>
        <para>Shortcut for top + bottom. (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FontStyle">
      <summary>
        <para>Font Style applied to GUI Texts, Text Meshes or GUIStyles.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FontStyle.Normal">
      <summary>
        <para>No special style is applied.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FontStyle.Bold">
      <summary>
        <para>Bold style applied to your texts.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FontStyle.Italic">
      <summary>
        <para>Italic style applied to your texts.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FontStyle.BoldAndItalic">
      <summary>
        <para>Bold and Italic styles applied to your texts.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ImagePosition">
      <summary>
        <para>How image and text is placed inside <see cref="GUIStyle">GUIStyle</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ImagePosition.ImageLeft">
      <summary>
        <para>Image is to the left of the text.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ImagePosition.ImageAbove">
      <summary>
        <para>Image is above the text.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ImagePosition.ImageOnly">
      <summary>
        <para>Only the image is displayed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ImagePosition.TextOnly">
      <summary>
        <para>Only the text is displayed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUIStyle">
      <summary>
        <para>Styling information for GUI elements.</para>
        <para>Most GUI functions accept an optional GUIStyle parameter to override the default style. This allows coloring, fonts and other details to be changed and switched for different states (eg, when the mouse is hovering over the control). Where a consistent look-and-feel is required over a whole GUI design, the GUISkin class is a useful way to collect a set of GUIStyle settings and apply them all at once.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.#ctor">
      <summary>
        <para>Constructor for empty GUIStyle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.#ctor(UnityEngine.GUIStyle)">
      <summary>
        <para>Constructs GUIStyle identical to given other GUIStyle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.CalcSize(UnityEngine.GUIContent)">
      <summary>
        <para>Calculate the size of a some content if it is rendered with this style.</para>
        <para>This function does not take wordwrapping into account. To do that, you need to determine the allocated width and then call CalcHeight to figure out the wordwrapped height.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.CalcScreenSize(UnityEngine.Vector2)">
      <summary>
        <para>Calculate the size of an element formatted with this style, and a given space to content.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.CalcHeight(UnityEngine.GUIContent,System.Single)">
      <summary>
        <para>How tall this element will be when rendered with <c>content</c> and a specific <c>width</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.CalcMinMaxWidth(UnityEngine.GUIContent,System.Single@,System.Single@)">
      <summary>
        <para>Calculate the minimum and maximum widths for this style rendered with <c>content</c>.</para>
        <para>Used by GUILayout to handle word-wrapping elements correctly.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Draw this GUIStyle on to the screen, internal version.</para>
        <para>Draw plain GUIStyle without text nor image.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Draw the GUIStyle with a text string inside.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.Texture,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Draw the GUIStyle with an image inside. If the image is too large to fit within the content area of the style it is scaled down.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.Draw(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Boolean)">
      <summary>
        <para>Draw the GUIStyle with text and an image inside. If the image is too large to fit within the content area of the style it is scaled down.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.DrawCursor(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32)">
      <summary>
        <para>Draw this GUIStyle with selected content.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.DrawWithTextSelection(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Draw this GUIStyle with selected content.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.GetCursorPixelPosition(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Get the pixel position of a given string index.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.GUIStyle.GetCursorStringIndex(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector2)">
      <summary>
        <para>Get the cursor position (indexing into contents.text) when the user clicked at cursorPixelPosition.</para>
        <para>This does not respect any images inside content.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.name">
      <summary>
        <para>The name of this GUIStyle. Used for getting them based on name.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.normal">
      <summary>
        <para>Rendering settings for when the component is displayed normally.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.hover">
      <summary>
        <para>Rendering settings for when the mouse is hovering over the control.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.active">
      <summary>
        <para>Rendering settings for when the control is pressed down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.onNormal">
      <summary>
        <para>Rendering settings for when the control is turned on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.onHover">
      <summary>
        <para>Rendering settings for when the control is turned on and the mouse is hovering it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.onActive">
      <summary>
        <para>Rendering settings for when the element is turned on and pressed down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.focused">
      <summary>
        <para>Rendering settings for when the element has keyboard focus.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.onFocused">
      <summary>
        <para>Rendering settings for when the element has keyboard and is turned on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.border">
      <summary>
        <para>The borders of all background images.</para>
        <para>This corresponds to the border settings for GUITextures. It only affects the rendering of the background image and has no effect on positioning.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.margin">
      <summary>
        <para>The margins between elements rendered in this style and any other GUI elements.</para>
        <para>This only has effect when using automatic layout (</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.padding">
      <summary>
        <para>Space from the edge of <see cref="GUIStyle">GUIStyle</see> to the start of the contents.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.overflow">
      <summary>
        <para>Extra space to be added to the background image.</para>
        <para>This is used if your image has a drop shadow and you want to extend the background image beyond the rectangles specified for gui elements that use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.imagePosition">
      <summary>
        <para>How image and text of the <see cref="GUIContent">GUIContent</see> is combined.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.alignment">
      <summary>
        <para>Text alignment.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.wordWrap">
      <summary>
        <para>Should the text be wordwrapped?</para>
        <para>This will cause any text contrained to be wordwrapped to fit within the width of a control.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.clipping">
      <summary>
        <para>What to do when the contents to be rendered is too large to fit within the area given.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.contentOffset">
      <summary>
        <para>Pixel offset to apply to the content of this GUIstyle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.fixedWidth">
      <summary>
        <para>If non-0, any GUI elements rendered with this style will have the width specified here.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.fixedHeight">
      <summary>
        <para>If non-0, any GUI elements rendered with this style will have the height specified here.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.stretchWidth">
      <summary>
        <para>Can GUI elements of this style be stretched horizontally for better layouting?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.stretchHeight">
      <summary>
        <para>Can GUI elements of this style be stretched vertically for better layout?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.font">
      <summary>
        <para>The font to use for rendering. If null, the default font for the current <see cref="GUISkin">GUISkin</see> is used instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.fontSize">
      <summary>
        <para>The font size to use (for dynamic fonts).</para>
        <para>If this is set to a non-zero value, the font size specified in the font importer is overriden with a custom size.
This is only supported for fonts set to use dynamic font rendering. Other fonts will always use the default font size.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.fontStyle">
      <summary>
        <para>The font style to use (for dynamic fonts).</para>
        <para>If this is set to a value other then normal, the font style set in the font importer is overriden with a custom style.
This is only supported for fonts set to use dynamic font rendering. Other fonts will always render in normal style.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.richText">
      <summary>
        <para>Enable HTML-style tags for Text Formatting Markup.</para>
        <para>See the manual page about Rich Text for a list of supported tags.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.lineHeight">
      <summary>
        <para>The height of one line of text with this style, measured in pixels. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.GUIStyle.none">
      <summary>
        <para>Shortcut for an empty GUIStyle.</para>
        <para>This style contains no decoration and just renders everything in the default font.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextClipping">
      <summary>
        <para>Different methods for how the GUI system handles text being too large to fit the rectangle allocated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextClipping.Overflow">
      <summary>
        <para>Text flows freely outside the element.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TextClipping.Clip">
      <summary>
        <para>Text gets clipped to be inside the element.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FullScreenMovieControlMode">
      <summary>
        <para>Describes options for displaying movie playback controls.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieControlMode.Full">
      <summary>
        <para>Display the standard controls for controlling movie playback.</para>
        <para>This includes play/pause controls, a volume slider, and a timeline control.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieControlMode.Minimal">
      <summary>
        <para>Display minimal set of controls controlling movie playback.</para>
        <para>The set of controls displayed might differ between OS versions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieControlMode.CancelOnInput">
      <summary>
        <para>Do not display any controls, but cancel movie playback if input occurs.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieControlMode.Hidden">
      <summary>
        <para>Do not display any controls.</para>
        <para>This mode prevents the user from controlling playback.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.FullScreenMovieScalingMode">
      <summary>
        <para>Describes scaling modes for displaying movies.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieScalingMode.None">
      <summary>
        <para>Do not scale the movie.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieScalingMode.AspectFit">
      <summary>
        <para>Scale the movie until one dimension fits on the screen exactly.</para>
        <para>In the other dimension, the region between the edge of the movie and the
edge of the screen is filled with a black bar. The aspect ratio of the
movie is preserved.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieScalingMode.AspectFill">
      <summary>
        <para>Scale the movie until the movie fills the entire screen.</para>
        <para>Content at the edges of the larger of the two dimensions is clipped so that the
other dimension fits the screen exactly. The aspect ratio of the movie is
preserved.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.FullScreenMovieScalingMode.Fill">
      <summary>
        <para>Scale the movie until both dimensions fit the screen exactly.</para>
        <para>The aspect ratio of the movie is not preserved.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iOSActivityIndicatorStyle">
      <summary>
        <para>ActivityIndicator Style (iOS Specific).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOSActivityIndicatorStyle.DontShow">
      <summary>
        <para>Do not show ActivityIndicator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOSActivityIndicatorStyle.WhiteLarge">
      <summary>
        <para>The large white style of indicator (UIActivityIndicatorViewStyleWhiteLarge).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOSActivityIndicatorStyle.White">
      <summary>
        <para>The standard white style of indicator (UIActivityIndicatorViewStyleWhite).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iOSActivityIndicatorStyle.Gray">
      <summary>
        <para>The standard gray style of indicator (UIActivityIndicatorViewStyleGray).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AndroidActivityIndicatorStyle">
      <summary>
        <para>ActivityIndicator Style (Android Specific).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.DontShow">
      <summary>
        <para>Do not show ActivityIndicator.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.Large">
      <summary>
        <para>Large (android.R.attr.progressBarStyleLarge).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.InversedLarge">
      <summary>
        <para>Large Inversed (android.R.attr.progressBarStyleLargeInverse).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.Small">
      <summary>
        <para>Small (android.R.attr.progressBarStyleSmall).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.AndroidActivityIndicatorStyle.InversedSmall">
      <summary>
        <para>Small Inversed (android.R.attr.progressBarStyleSmallInverse).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Handheld">
      <summary>
        <para>Interface into functionality unique to handheld devices.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String,UnityEngine.Color,UnityEngine.FullScreenMovieControlMode,UnityEngine.FullScreenMovieScalingMode)">
      <summary>
        <para>Plays a full-screen movie (pro only feature).</para>
        <para>Note that player will stream movie directly
from the device storage, therefore you have to provide movie as a
separate files and not as a usual asset. You will have to create a
folder named StreamingAssets inside your Unity project (inside your
Assets folder). Store your movies inside that folder.
Unity will automatically copy contents of that folder into the
application bundle.Calling this function will pause Unity during movie playback. When
playback finishes Unity will resume.The first parameter, path, can be a network-based URL. The function
will detect that by looking for a "://" substring that follows the
protocol name.On iOS, Handheld.PlayFullScreenMovie internally uses MPMoviePlayerController
object to play movies. Therefore, you should expect the same behavior
and the same supported formats. MPMoviePlayerController supports any
movie or audio files that already play correctly on an iPod or iPhone.For movie files, this typically means files with the extensions .mov,
.mp4, .mpv, and .3gp and using one of the following compression
standards:H.264 Baseline Profile Level 3.0 video, up to 640 x 480 at 30 fps.
Note that B frames are not supported in the Baseline profile.MPEG-4 Part 2 video (Simple Profile).
Calling this function will initiate a transition that fades the screen
from your current content to the designated background color of the
player. When playback finishes, the player uses another fade effect to
transition back to your content.You can find Apple's MPMoviePlayerController documentation here:
MPMoviePlayerController Class Reference</para>
      </summary>
      <param name="path">Filesystem path to the movie file.</param>
      <param name="bgColor">Background color.</param>
      <param name="controlMode">How the playback controls are to be displayed.</param>
      <param name="scalingMode">How the movie is to be scaled to fit the screen.</param>
    </member>
    <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String,UnityEngine.Color,UnityEngine.FullScreenMovieControlMode)">
      <summary>
        <para>Plays a full-screen movie (pro only feature).</para>
        <para>Note that player will stream movie directly
from the device storage, therefore you have to provide movie as a
separate files and not as a usual asset. You will have to create a
folder named StreamingAssets inside your Unity project (inside your
Assets folder). Store your movies inside that folder.
Unity will automatically copy contents of that folder into the
application bundle.Calling this function will pause Unity during movie playback. When
playback finishes Unity will resume.The first parameter, path, can be a network-based URL. The function
will detect that by looking for a "://" substring that follows the
protocol name.On iOS, Handheld.PlayFullScreenMovie internally uses MPMoviePlayerController
object to play movies. Therefore, you should expect the same behavior
and the same supported formats. MPMoviePlayerController supports any
movie or audio files that already play correctly on an iPod or iPhone.For movie files, this typically means files with the extensions .mov,
.mp4, .mpv, and .3gp and using one of the following compression
standards:H.264 Baseline Profile Level 3.0 video, up to 640 x 480 at 30 fps.
Note that B frames are not supported in the Baseline profile.MPEG-4 Part 2 video (Simple Profile).
Calling this function will initiate a transition that fades the screen
from your current content to the designated background color of the
player. When playback finishes, the player uses another fade effect to
transition back to your content.You can find Apple's MPMoviePlayerController documentation here:
MPMoviePlayerController Class Reference</para>
      </summary>
      <param name="path">Filesystem path to the movie file.</param>
      <param name="bgColor">Background color.</param>
      <param name="controlMode">How the playback controls are to be displayed.</param>
    </member>
    <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String,UnityEngine.Color)">
      <summary>
        <para>Plays a full-screen movie (pro only feature).</para>
        <para>Note that player will stream movie directly
from the device storage, therefore you have to provide movie as a
separate files and not as a usual asset. You will have to create a
folder named StreamingAssets inside your Unity project (inside your
Assets folder). Store your movies inside that folder.
Unity will automatically copy contents of that folder into the
application bundle.Calling this function will pause Unity during movie playback. When
playback finishes Unity will resume.The first parameter, path, can be a network-based URL. The function
will detect that by looking for a "://" substring that follows the
protocol name.On iOS, Handheld.PlayFullScreenMovie internally uses MPMoviePlayerController
object to play movies. Therefore, you should expect the same behavior
and the same supported formats. MPMoviePlayerController supports any
movie or audio files that already play correctly on an iPod or iPhone.For movie files, this typically means files with the extensions .mov,
.mp4, .mpv, and .3gp and using one of the following compression
standards:H.264 Baseline Profile Level 3.0 video, up to 640 x 480 at 30 fps.
Note that B frames are not supported in the Baseline profile.MPEG-4 Part 2 video (Simple Profile).
Calling this function will initiate a transition that fades the screen
from your current content to the designated background color of the
player. When playback finishes, the player uses another fade effect to
transition back to your content.You can find Apple's MPMoviePlayerController documentation here:
MPMoviePlayerController Class Reference</para>
      </summary>
      <param name="path">Filesystem path to the movie file.</param>
      <param name="bgColor">Background color.</param>
    </member>
    <member name="M:UnityEngine.Handheld.PlayFullScreenMovie(System.String)">
      <summary>
        <para>Plays a full-screen movie (pro only feature).</para>
        <para>Note that player will stream movie directly
from the device storage, therefore you have to provide movie as a
separate files and not as a usual asset. You will have to create a
folder named StreamingAssets inside your Unity project (inside your
Assets folder). Store your movies inside that folder.
Unity will automatically copy contents of that folder into the
application bundle.Calling this function will pause Unity during movie playback. When
playback finishes Unity will resume.The first parameter, path, can be a network-based URL. The function
will detect that by looking for a "://" substring that follows the
protocol name.On iOS, Handheld.PlayFullScreenMovie internally uses MPMoviePlayerController
object to play movies. Therefore, you should expect the same behavior
and the same supported formats. MPMoviePlayerController supports any
movie or audio files that already play correctly on an iPod or iPhone.For movie files, this typically means files with the extensions .mov,
.mp4, .mpv, and .3gp and using one of the following compression
standards:H.264 Baseline Profile Level 3.0 video, up to 640 x 480 at 30 fps.
Note that B frames are not supported in the Baseline profile.MPEG-4 Part 2 video (Simple Profile).
Calling this function will initiate a transition that fades the screen
from your current content to the designated background color of the
player. When playback finishes, the player uses another fade effect to
transition back to your content.You can find Apple's MPMoviePlayerController documentation here:
MPMoviePlayerController Class Reference</para>
      </summary>
      <param name="path">Filesystem path to the movie file.</param>
    </member>
    <member name="M:UnityEngine.Handheld.Vibrate">
      <summary>
        <para>Triggers device vibration.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.SetActivityIndicatorStyle(UnityEngine.iOSActivityIndicatorStyle)">
      <summary>
        <para>Sets the desired activity indicator style.</para>
        <para>Note that the change will take effect on next call to StartActivityIndicator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.SetActivityIndicatorStyle(UnityEngine.AndroidActivityIndicatorStyle)">
      <summary>
        <para>Sets the desired activity indicator style.</para>
        <para>Note that the change will take effect on next call to StartActivityIndicator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.GetActivityIndicatorStyle">
      <summary>
        <para>Gets the current activity indicator style.</para>
        <para>See iOSActivityIndicatorStyle and AndroidActivityIndicatorStyle for the set of style options available.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.StartActivityIndicator">
      <summary>
        <para>Starts os activity indicator.</para>
        <para>Please be warned that this informs os ui system to start.
For actual animation to take effect you usually need to wait till the end of this frame.
So if you want activity indicator to be animated during synced operation, please use coroutines.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Handheld.StopActivityIndicator">
      <summary>
        <para>Stops os activity indicator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Handheld.use32BitDisplayBuffer">
      <summary>
        <para>Determines whether or not a 32-bit display buffer will be used.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TouchScreenKeyboardType">
      <summary>
        <para>Describes the type of keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.Default">
      <summary>
        <para>Default keyboard for the current input method.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.ASCIICapable">
      <summary>
        <para>Keyboard displays standard ASCII characters.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.NumbersAndPunctuation">
      <summary>
        <para>Keyboard with numbers and punctuation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.URL">
      <summary>
        <para>Keyboard optimized for URL entry.</para>
        <para>It features ".", "/", and ".com" prominently.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.NumberPad">
      <summary>
        <para>Numeric keypad designed for PIN entry.</para>
        <para>It features the numbers 0 through 9 prominently.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.PhonePad">
      <summary>
        <para>Keypad designed for entering telephone numbers.</para>
        <para>It features the numbers 0 through 9 and the "*" and "#" characters prominently.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.NamePhonePad">
      <summary>
        <para>Keypad designed for entering a person's name or phone number.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchScreenKeyboardType.EmailAddress">
      <summary>
        <para>Keyboard optimized for specifying email addresses.</para>
        <para>It features the "@", "." and space characters prominently.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TouchScreenKeyboard">
      <summary>
        <para>Interface into the native iPhone and Android on-screen keyboards - it is not available on other platforms.</para>
        <para>This interface allows to display different types of the keyboard: ASCII,
Numbers, URL, Email, and others.Because the appearance of the keyboard has the potential to obscure
portions of your user interface, it is up to you to make sure that parts
of your user interface are not obscured when the keyboard is being
displayed.TouchScreenKeyboard.visible and TouchScreenKeyboard.area should be
used to determine if the keyboard is being shown (activated) and what
portion of the screen is using.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
        <para>The autocorrection determines whether the input tracks unknown words
and suggests a more suitable replacement candidate to the user,
replacing the typed text automatically unless the user explicitly
overrides the action.
The multiline determines if user can input more than one line of
text.
The secure identifies whether the keyboard is used for password. Text
in the input field will be hidden from the user except the recently
typed character.
The keyboard can be opened in the alert mode too.
The placeholder string will be displayed when there is no other text
in the input field of the keyboard.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
        <para>The autocorrection determines whether the input tracks unknown words
and suggests a more suitable replacement candidate to the user,
replacing the typed text automatically unless the user explicitly
overrides the action.
The multiline determines if user can input more than one line of
text.
The secure identifies whether the keyboard is used for password. Text
in the input field will be hidden from the user except the recently
typed character.
The keyboard can be opened in the alert mode too.
The placeholder string will be displayed when there is no other text
in the input field of the keyboard.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
        <para>The autocorrection determines whether the input tracks unknown words
and suggests a more suitable replacement candidate to the user,
replacing the typed text automatically unless the user explicitly
overrides the action.
The multiline determines if user can input more than one line of
text.
The secure identifies whether the keyboard is used for password. Text
in the input field will be hidden from the user except the recently
typed character.
The keyboard can be opened in the alert mode too.
The placeholder string will be displayed when there is no other text
in the input field of the keyboard.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
        <para>The autocorrection determines whether the input tracks unknown words
and suggests a more suitable replacement candidate to the user,
replacing the typed text automatically unless the user explicitly
overrides the action.
The multiline determines if user can input more than one line of
text.
The secure identifies whether the keyboard is used for password. Text
in the input field will be hidden from the user except the recently
typed character.
The keyboard can be opened in the alert mode too.
The placeholder string will be displayed when there is no other text
in the input field of the keyboard.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
        <para>The autocorrection determines whether the input tracks unknown words
and suggests a more suitable replacement candidate to the user,
replacing the typed text automatically unless the user explicitly
overrides the action.
The multiline determines if user can input more than one line of
text.
The secure identifies whether the keyboard is used for password. Text
in the input field will be hidden from the user except the recently
typed character.
The keyboard can be opened in the alert mode too.
The placeholder string will be displayed when there is no other text
in the input field of the keyboard.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
        <para>The autocorrection determines whether the input tracks unknown words
and suggests a more suitable replacement candidate to the user,
replacing the typed text automatically unless the user explicitly
overrides the action.
The multiline determines if user can input more than one line of
text.
The secure identifies whether the keyboard is used for password. Text
in the input field will be hidden from the user except the recently
typed character.
The keyboard can be opened in the alert mode too.
The placeholder string will be displayed when there is no other text
in the input field of the keyboard.</para>
      </summary>
      <param name="text">Text to edit.</param>
    </member>
    <member name="M:UnityEngine.TouchScreenKeyboard.Open(System.String,UnityEngine.TouchScreenKeyboardType,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
      <summary>
        <para>Opens the native keyboard provided by OS on the screen.</para>
        <para>The autocorrection determines whether the input tracks unknown words
and suggests a more suitable replacement candidate to the user,
replacing the typed text automatically unless the user explicitly
overrides the action.
The multiline determines if user can input more than one line of
text.
The secure identifies whether the keyboard is used for password. Text
in the input field will be hidden from the user except the recently
typed character.
The keyboard can be opened in the alert mode too.
The placeholder string will be displayed when there is no other text
in the input field of the keyboard.</para>
      </summary>
      <param name="text">Text to edit.</param>
      <param name="keyboardType">Type of keyboard (eg, any text, numbers only, etc).</param>
      <param name="autocorrection">Is autocorrection applied?</param>
      <param name="multiline">Can more than one line of text be entered?</param>
      <param name="secure">Is the text masked (for passwords, etc)?</param>
      <param name="alert">Is the keyboard opened in alert mode?</param>
      <param name="textPlaceholder">Text to be used if no other text is present.</param>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.isSupported">
      <summary>
        <para>Is touch screen keyboard supported.</para>
        <para>Returns true if platform supports touch screen keyboard.
On Windows Store Apps this value will be false on desktop and can change on tablet depending on whether touch cover keyboard is connected.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.text">
      <summary>
        <para>Returns the text displayed by the input field of the keyboard.</para>
        <para>This value can be accessed at any moment, even if user has not yet finished input process.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.hideInput">
      <summary>
        <para>Will text input field above the keyboard be hidden when the keyboard is on screen?</para>
        <para>This property is applicable for single line
text fields that have assigned keyboard with alphanumeric keys.
Number-only keyboards will show text input field no matter if this
flag is set to true or false.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.active">
      <summary>
        <para>Is the keyboard visible or sliding into the position on the screen?</para>
        <para>Use this property to bring previously hidden keyboard back on the screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.done">
      <summary>
        <para>Specifies if input process was finished. (Read Only)</para>
        <para>Keyboard input process can be finished either by user tapping "Done"
button or script setting active property to false. Note that keyboard
might be temporarily inactive (either by sliding in/out due to
orientation change or by appearance of another keyboard), however it's
input process might still be not finished and will be resumed
automatically.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.wasCanceled">
      <summary>
        <para>Specifies if input process was canceled. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.area">
      <summary>
        <para>Returns portion of the screen which is covered by the keyboard.</para>
        <para>Returns zero-Rect on Android.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TouchScreenKeyboard.visible">
      <summary>
        <para>Returns true whenever any keyboard is completely visible on the screen.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iPhoneGeneration">
      <summary>
        <para>iPhone device generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone">
      <summary>
        <para>First generation device.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone3G">
      <summary>
        <para>Second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone3GS">
      <summary>
        <para>Third generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPodTouch1Gen">
      <summary>
        <para>iPod Touch, first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPodTouch2Gen">
      <summary>
        <para>iPod Touch, second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPodTouch3Gen">
      <summary>
        <para>iPod Touch, third generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPad1Gen">
      <summary>
        <para>iPad, first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone4">
      <summary>
        <para>Fourth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPodTouch4Gen">
      <summary>
        <para>iPod Touch, fourth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPad2Gen">
      <summary>
        <para>iPad, second generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone4S">
      <summary>
        <para>Fifth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPad3Gen">
      <summary>
        <para>iPad, third generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone5">
      <summary>
        <para>iPhone5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPodTouch5Gen">
      <summary>
        <para>iPod Touch, fifth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPadMini1Gen">
      <summary>
        <para>iPadMini, first generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPad4Gen">
      <summary>
        <para>iPad, fourth generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone5C">
      <summary>
        <para>iPhone 5C.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone5S">
      <summary>
        <para>iPhone 5S.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPad5Gen">
      <summary>
        <para>iPad Air (fifth generation).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPadMini2Gen">
      <summary>
        <para>iPadMini Retina (second generation).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone6">
      <summary>
        <para>iPhone 6.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhone6Plus">
      <summary>
        <para>iPhone 6 Plus.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPadMini3Gen">
      <summary>
        <para>iPad Mini 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPadAir2">
      <summary>
        <para>iPad Air 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPhoneUnknown">
      <summary>
        <para>Yet unknown iPhone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPadUnknown">
      <summary>
        <para>Yet unknown iPad.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.iPhoneGeneration.iPodTouchUnknown">
      <summary>
        <para>Yet unknown iPodTouch.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Event">
      <summary>
        <para>A UnityGUI event.</para>
        <para>Events correspond to user input (key presses, mouse actions), or are UnityGUI layout or rendering events.For each event OnGUI is called in the scripts; so OnGUI is potentially
called multiple times per frame. Event.current corresponds to "current" event inside OnGUI call.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Event.GetTypeForControl(System.Int32)">
      <summary>
        <para>Get a filtered event type for a given control ID.</para>
        <para>This function is used to implement mouse locking and keyboard focus.  The controlID can be obtained from GUIUtilty.GetControlID ().
</para>
      </summary>
      <param name="controlID">The ID of the control you are querying from.</param>
    </member>
    <member name="M:UnityEngine.Event.Use">
      <summary>
        <para>Use this event.</para>
        <para>Call this method when you've used an event. The event's type will be set to EventType.Used, causing other GUI elements to ignore it.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Event.PopEvent(UnityEngine.Event)">
      <summary>
        <para>Get the next queued [Event] from the event system.</para>
      </summary>
      <param name="outEvent">Next Event.</param>
    </member>
    <member name="M:UnityEngine.Event.GetEventCount">
      <summary>
        <para>Returns the current number of events that are stored in the event queue.</para>
      </summary>
      <returns>
        <para>Current number of events currently in the event queue.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Event.KeyboardEvent(System.String)">
      <summary>
        <para>Create a keyboard event.</para>
        <para>This is useful when you need to check if a certain key has been pressed - possibly with modifiers. The syntax for the key string is a key name
(same as in the Input Manager), optionally prefixed by any number of modifiers: 
&amp;amp; = Alternate, ^ = Control, % = Command/Windows key, # = Shift 
Examples: &amp;amp;f12 = Alternate + F12,    "^[0]" = Control + keypad0 .</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Event.GetHashCode" />
    <member name="M:UnityEngine.Event.Equals(System.Object)" />
    <member name="M:UnityEngine.Event.ToString" />
    <member name="P:UnityEngine.Event.type">
      <summary>
        <para>The type of event.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.mousePosition">
      <summary>
        <para>The mouse position.</para>
        <para>Used in EventType.MouseMove and EventType.MouseDrag events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.delta">
      <summary>
        <para>The relative movement of the mouse compared to last event.</para>
        <para>Used in EventType.MouseMove, EventType.MouseDrag, EventType.ScrollWheel events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.button">
      <summary>
        <para>Which mouse button was pressed.</para>
        <para>0 means left mouse button, 1 means right mouse button, 2 means middle mouse button.
Used in EventType.MouseDown, EventType.MouseUp events.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.modifiers">
      <summary>
        <para>Which modifier keys are held down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.clickCount">
      <summary>
        <para>How many consecutive mouse clicks have we received.</para>
        <para>Used in EventType.MouseDown event; use this to differentiate between a single and double clicks.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.character">
      <summary>
        <para>The character typed.</para>
        <para>Used in EventType.KeyDown event. Note that EventType.KeyUp events might not contain
a character, only Event.keyCode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.commandName">
      <summary>
        <para>The name of an ExecuteCommand or ValidateCommand Event.</para>
        <para>"Copy", "Cut", "Paste", "Delete", "FrameSelected", "Duplicate", "SelectAll" and so on.
Sent only in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.keyCode">
      <summary>
        <para>The raw key code for keyboard events.</para>
        <para>Used in EventType.KeyDown and EventType.KeyUp events; this returns KeyCode value
that matches the physical keyboard key. Use this for handling cursor keys,
function keys etc.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.shift">
      <summary>
        <para>Is Shift held down? (Read Only)</para>
        <para>Returns true if any Shift key is held down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.control">
      <summary>
        <para>Is Control key held down? (Read Only)</para>
        <para>Returns true if any Control key is held down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.alt">
      <summary>
        <para>Is Alt/Option key held down? (Read Only)</para>
        <para>On Windows, this returns true if any Alt key is held down. 
On Mac, this returns true if any Option key is held down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.command">
      <summary>
        <para>Is Command/Windows key held down? (Read Only)</para>
        <para>On Windows, this returns true if any Windows key is held down. 
On Mac, this returns true if any Command key is held down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.capsLock">
      <summary>
        <para>Is Caps Lock on? (Read Only)</para>
        <para>Returns true if Caps Lock is switched on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.numeric">
      <summary>
        <para>Is the current keypress on the numeric keyboard? (Read Only)</para>
        <para>Use this flag to destinguish between main &amp;amp; numeric keys.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.functionKey">
      <summary>
        <para>Is the current keypress a function key? (Read Only)</para>
        <para>Returns true if the current keypress is an arrow key, page up, page down, backspace, etc. key.
If this key needs special processing in order to work in text editing, functionKey is on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.current">
      <summary>
        <para>The current event that's being processed right now.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.isKey">
      <summary>
        <para>Is this event a keyboard event? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Event.isMouse">
      <summary>
        <para>Is this event a mouse event? (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.KeyCode">
      <summary>
        <para>Key codes returned by Event.keyCode. These map directly to a physical key on the keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.None">
      <summary>
        <para>Not assigned (never returned as the result of a keystroke).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Backspace">
      <summary>
        <para>The backspace key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Delete">
      <summary>
        <para>The forward delete key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Tab">
      <summary>
        <para>The tab key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Clear">
      <summary>
        <para>The Clear key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Return">
      <summary>
        <para>Return key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Pause">
      <summary>
        <para>Pause on PC machines.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Escape">
      <summary>
        <para>Escape key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Space">
      <summary>
        <para>Space key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad0">
      <summary>
        <para>Numeric keypad 0.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad1">
      <summary>
        <para>Numeric keypad 1.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad2">
      <summary>
        <para>Numeric keypad 2.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad3">
      <summary>
        <para>Numeric keypad 3.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad4">
      <summary>
        <para>Numeric keypad 4.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad5">
      <summary>
        <para>Numeric keypad 5.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad6">
      <summary>
        <para>Numeric keypad 6.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad7">
      <summary>
        <para>Numeric keypad 7.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad8">
      <summary>
        <para>Numeric keypad 8.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Keypad9">
      <summary>
        <para>Numeric keypad 9.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadPeriod">
      <summary>
        <para>Numeric keypad '.'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadDivide">
      <summary>
        <para>Numeric keypad '/'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadMultiply">
      <summary>
        <para>Numeric keypad '*'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadMinus">
      <summary>
        <para>Numeric keypad '-'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadPlus">
      <summary>
        <para>Numeric keypad '+'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadEnter">
      <summary>
        <para>Numeric keypad enter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.KeypadEquals">
      <summary>
        <para>Numeric keypad '='.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.UpArrow">
      <summary>
        <para>Up arrow key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.DownArrow">
      <summary>
        <para>Down arrow key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightArrow">
      <summary>
        <para>Right arrow key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftArrow">
      <summary>
        <para>Left arrow key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Insert">
      <summary>
        <para>Insert key key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Home">
      <summary>
        <para>Home key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.End">
      <summary>
        <para>End key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.PageUp">
      <summary>
        <para>Page up.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.PageDown">
      <summary>
        <para>Page down.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F1">
      <summary>
        <para>F1 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F2">
      <summary>
        <para>F2 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F3">
      <summary>
        <para>F3 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F4">
      <summary>
        <para>F4 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F5">
      <summary>
        <para>F5 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F6">
      <summary>
        <para>F6 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F7">
      <summary>
        <para>F7 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F8">
      <summary>
        <para>F8 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F9">
      <summary>
        <para>F9 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F10">
      <summary>
        <para>F10 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F11">
      <summary>
        <para>F11 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F12">
      <summary>
        <para>F12 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F13">
      <summary>
        <para>F13 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F14">
      <summary>
        <para>F14 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F15">
      <summary>
        <para>F15 function key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha0">
      <summary>
        <para>The '0' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha1">
      <summary>
        <para>The '1' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha2">
      <summary>
        <para>The '2' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha3">
      <summary>
        <para>The '3' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha4">
      <summary>
        <para>The '4' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha5">
      <summary>
        <para>The '5' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha6">
      <summary>
        <para>The '6' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha7">
      <summary>
        <para>The '7' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha8">
      <summary>
        <para>The '8' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Alpha9">
      <summary>
        <para>The '9' key on the top of the alphanumeric keyboard.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Exclaim">
      <summary>
        <para>Exclamation mark key '!'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.DoubleQuote">
      <summary>
        <para>Double quote key '"'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Hash">
      <summary>
        <para>Hash key '#'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Dollar">
      <summary>
        <para>Dollar sign key '$'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Ampersand">
      <summary>
        <para>Ampersand key '&amp;amp;'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Quote">
      <summary>
        <para>Quote key '.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftParen">
      <summary>
        <para>Left Parenthesis key '('.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightParen">
      <summary>
        <para>Right Parenthesis key ')'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Asterisk">
      <summary>
        <para>Asterisk key '*'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Plus">
      <summary>
        <para>Plus key '+'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Comma">
      <summary>
        <para>Comma ',' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Minus">
      <summary>
        <para>Minus '-' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Period">
      <summary>
        <para>Period '.' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Slash">
      <summary>
        <para>Slash '/' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Colon">
      <summary>
        <para>Colon ':' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Semicolon">
      <summary>
        <para>Semicolon ';' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Less">
      <summary>
        <para>Less than '&amp;lt;' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Equals">
      <summary>
        <para>Equals '=' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Greater">
      <summary>
        <para>Greater than '&amp;gt;' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Question">
      <summary>
        <para>Question mark '?' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.At">
      <summary>
        <para>At key '@'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftBracket">
      <summary>
        <para>Left square bracket key '['.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Backslash">
      <summary>
        <para>Backslash key '\'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightBracket">
      <summary>
        <para>Right square bracket key ']'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Caret">
      <summary>
        <para>Caret key '^'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Underscore">
      <summary>
        <para>Underscore '_' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.BackQuote">
      <summary>
        <para>Back quote key '`'.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.A">
      <summary>
        <para>'a' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.B">
      <summary>
        <para>'b' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.C">
      <summary>
        <para>'c' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.D">
      <summary>
        <para>'d' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.E">
      <summary>
        <para>'e' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.F">
      <summary>
        <para>'f' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.G">
      <summary>
        <para>'g' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.H">
      <summary>
        <para>'h' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.I">
      <summary>
        <para>'i' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.J">
      <summary>
        <para>'j' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.K">
      <summary>
        <para>'k' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.L">
      <summary>
        <para>'l' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.M">
      <summary>
        <para>'m' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.N">
      <summary>
        <para>'n' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.O">
      <summary>
        <para>'o' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.P">
      <summary>
        <para>'p' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Q">
      <summary>
        <para>'q' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.R">
      <summary>
        <para>'r' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.S">
      <summary>
        <para>'s' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.T">
      <summary>
        <para>'t' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.U">
      <summary>
        <para>'u' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.V">
      <summary>
        <para>'v' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.W">
      <summary>
        <para>'w' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.X">
      <summary>
        <para>'x' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Y">
      <summary>
        <para>'y' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Z">
      <summary>
        <para>'z' key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Numlock">
      <summary>
        <para>Numlock key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.CapsLock">
      <summary>
        <para>Capslock key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.ScrollLock">
      <summary>
        <para>Scroll lock key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightShift">
      <summary>
        <para>Right shift key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftShift">
      <summary>
        <para>Left shift key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightControl">
      <summary>
        <para>Right Control key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftControl">
      <summary>
        <para>Left Control key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightAlt">
      <summary>
        <para>Right Alt key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftAlt">
      <summary>
        <para>Left Alt key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftCommand">
      <summary>
        <para>Left Command key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftApple">
      <summary>
        <para>Left Command key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.LeftWindows">
      <summary>
        <para>Left Windows key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightCommand">
      <summary>
        <para>Right Command key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightApple">
      <summary>
        <para>Right Command key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.RightWindows">
      <summary>
        <para>Right Windows key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.AltGr">
      <summary>
        <para>Alt Gr key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Help">
      <summary>
        <para>Help key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Print">
      <summary>
        <para>Print key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.SysReq">
      <summary>
        <para>Sys Req key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Break">
      <summary>
        <para>Break key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Menu">
      <summary>
        <para>Menu key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse0">
      <summary>
        <para>First (primary) mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse1">
      <summary>
        <para>Second (secondary) mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse2">
      <summary>
        <para>Third mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse3">
      <summary>
        <para>Fourth mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse4">
      <summary>
        <para>Fifth mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse5">
      <summary>
        <para>Sixth mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Mouse6">
      <summary>
        <para>Seventh mouse button.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton0">
      <summary>
        <para>Button 0 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton1">
      <summary>
        <para>Button 1 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton2">
      <summary>
        <para>Button 2 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton3">
      <summary>
        <para>Button 3 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton4">
      <summary>
        <para>Button 4 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton5">
      <summary>
        <para>Button 5 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton6">
      <summary>
        <para>Button 6 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton7">
      <summary>
        <para>Button 7 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton8">
      <summary>
        <para>Button 8 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton9">
      <summary>
        <para>Button 9 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton10">
      <summary>
        <para>Button 10 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton11">
      <summary>
        <para>Button 11 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton12">
      <summary>
        <para>Button 12 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton13">
      <summary>
        <para>Button 13 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton14">
      <summary>
        <para>Button 14 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton15">
      <summary>
        <para>Button 15 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton16">
      <summary>
        <para>Button 16 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton17">
      <summary>
        <para>Button 17 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton18">
      <summary>
        <para>Button 18 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.JoystickButton19">
      <summary>
        <para>Button 19 on any joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button0">
      <summary>
        <para>Button 0 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button1">
      <summary>
        <para>Button 1 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button2">
      <summary>
        <para>Button 2 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button3">
      <summary>
        <para>Button 3 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button4">
      <summary>
        <para>Button 4 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button5">
      <summary>
        <para>Button 5 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button6">
      <summary>
        <para>Button 6 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button7">
      <summary>
        <para>Button 7 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button8">
      <summary>
        <para>Button 8 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button9">
      <summary>
        <para>Button 9 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button10">
      <summary>
        <para>Button 10 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button11">
      <summary>
        <para>Button 11 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button12">
      <summary>
        <para>Button 12 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button13">
      <summary>
        <para>Button 13 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button14">
      <summary>
        <para>Button 14 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button15">
      <summary>
        <para>Button 15 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button16">
      <summary>
        <para>Button 16 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button17">
      <summary>
        <para>Button 17 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button18">
      <summary>
        <para>Button 18 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick1Button19">
      <summary>
        <para>Button 19 on first joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button0">
      <summary>
        <para>Button 0 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button1">
      <summary>
        <para>Button 1 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button2">
      <summary>
        <para>Button 2 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button3">
      <summary>
        <para>Button 3 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button4">
      <summary>
        <para>Button 4 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button5">
      <summary>
        <para>Button 5 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button6">
      <summary>
        <para>Button 6 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button7">
      <summary>
        <para>Button 7 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button8">
      <summary>
        <para>Button 8 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button9">
      <summary>
        <para>Button 9 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button10">
      <summary>
        <para>Button 10 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button11">
      <summary>
        <para>Button 11 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button12">
      <summary>
        <para>Button 12 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button13">
      <summary>
        <para>Button 13 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button14">
      <summary>
        <para>Button 14 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button15">
      <summary>
        <para>Button 15 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button16">
      <summary>
        <para>Button 16 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button17">
      <summary>
        <para>Button 17 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button18">
      <summary>
        <para>Button 18 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick2Button19">
      <summary>
        <para>Button 19 on second joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button0">
      <summary>
        <para>Button 0 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button1">
      <summary>
        <para>Button 1 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button2">
      <summary>
        <para>Button 2 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button3">
      <summary>
        <para>Button 3 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button4">
      <summary>
        <para>Button 4 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button5">
      <summary>
        <para>Button 5 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button6">
      <summary>
        <para>Button 6 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button7">
      <summary>
        <para>Button 7 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button8">
      <summary>
        <para>Button 8 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button9">
      <summary>
        <para>Button 9 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button10">
      <summary>
        <para>Button 10 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button11">
      <summary>
        <para>Button 11 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button12">
      <summary>
        <para>Button 12 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button13">
      <summary>
        <para>Button 13 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button14">
      <summary>
        <para>Button 14 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button15">
      <summary>
        <para>Button 15 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button16">
      <summary>
        <para>Button 16 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button17">
      <summary>
        <para>Button 17 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button18">
      <summary>
        <para>Button 18 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick3Button19">
      <summary>
        <para>Button 19 on third joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button0">
      <summary>
        <para>Button 0 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button1">
      <summary>
        <para>Button 1 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button2">
      <summary>
        <para>Button 2 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button3">
      <summary>
        <para>Button 3 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button4">
      <summary>
        <para>Button 4 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button5">
      <summary>
        <para>Button 5 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button6">
      <summary>
        <para>Button 6 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button7">
      <summary>
        <para>Button 7 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button8">
      <summary>
        <para>Button 8 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button9">
      <summary>
        <para>Button 9 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button10">
      <summary>
        <para>Button 10 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button11">
      <summary>
        <para>Button 11 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button12">
      <summary>
        <para>Button 12 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button13">
      <summary>
        <para>Button 13 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button14">
      <summary>
        <para>Button 14 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button15">
      <summary>
        <para>Button 15 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button16">
      <summary>
        <para>Button 16 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button17">
      <summary>
        <para>Button 17 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button18">
      <summary>
        <para>Button 18 on forth joystick.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.KeyCode.Joystick4Button19">
      <summary>
        <para>Button 19 on forth joystick.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventType">
      <summary>
        <para>Types of UnityGUI input and processing events.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseDown">
      <summary>
        <para>Mouse button was pressed.</para>
        <para>This event gets sent when any mouse button is pressed. Use Event.button to determine which button was pressed down.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseUp">
      <summary>
        <para>Mouse button was released.</para>
        <para>This event gets sent when any mouse button is released. Use Event.button to determine which button was pressed down.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseMove">
      <summary>
        <para>Mouse was moved (editor views only).</para>
        <para>The mouse was moved without any buttons being held down. Use Event.mousePosition and Event.delta to determine mouse motion.Note that this even is only sent in the Editor, for EditorWindow windows which have EditorWindow.wantsMouseMove
set to true. Mouse move events are never sent in the games.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.MouseDrag">
      <summary>
        <para>Mouse was dragged.</para>
        <para>The mouse was moved with a button held down - a mouse drag. Use Event.mousePosition and Event.delta to determine mouse motion.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.KeyDown">
      <summary>
        <para>A keyboard key was pressed.</para>
        <para>Use Event.character to find out what has been typed. Use Event.keyCode to handle arrow, home/end or other function keys, or to find
out which physical key has been pressed.
This event is sent repeatedly depending on the end user's keyboard repeat settings.Note that key presses can come as separate events, one with valid Event.keyCode, and another with valid Event.character.
In case of keyboard layouts with dead keys, multiple Event.keyCode events can generate a single Event.character event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.KeyUp">
      <summary>
        <para>A keyboard key was released.</para>
        <para>Use Event.keyCode to find which physical key was released. Note that depending on the system
and keyboard layout, Event.character might not contain any character for a key release event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.ScrollWheel">
      <summary>
        <para>The scroll wheel was moved.</para>
        <para>Use Event.delta to determine X &amp;amp; Y scrolling amount.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.Repaint">
      <summary>
        <para>A repaint event. One is sent every frame.</para>
        <para>All other events are processed first, then the repaint event is sent.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.Layout">
      <summary>
        <para>A layout event.</para>
        <para>This event is sent prior to anything else - this is a chance to perform any initialization. 
It is used by the automatic layout system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.DragUpdated">
      <summary>
        <para>Editor only: drag &amp;amp; drop operation updated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.DragPerform">
      <summary>
        <para>Editor only: drag &amp;amp; drop operation performed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.DragExited">
      <summary>
        <para>Editor only: drag &amp;amp; drop operation exited.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.Ignore">
      <summary>
        <para>
          <see cref="Event">Event</see> should be ignored.</para>
        <para>This event is temporarily disabled and should be ignored.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.Used">
      <summary>
        <para>Already processed event.</para>
        <para>This event has been used by some other control and should be ignored.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.ValidateCommand">
      <summary>
        <para>Validates a special command (e.g. copy &amp;amp; paste).</para>
        <para>"Copy", "Cut", "Paste", "Delete", "FrameSelected", "Duplicate", "SelectAll" and so on.
Sent only in the editor.Example: Make pasting work in current window or control:</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.ExecuteCommand">
      <summary>
        <para>Execute a special command (eg. copy &amp;amp; paste).</para>
        <para>"Copy", "Cut", "Paste", "Delete", "FrameSelected", "Duplicate", "SelectAll" and so on.
Sent only in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.ContextClick">
      <summary>
        <para>User has right-clicked (or control-clicked on the mac).</para>
        <para>Window should show a context menu if applicable.
Sent only in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.mouseDown">
      <summary>
        <para>Mouse button was pressed.</para>
        <para>This event gets sent when any mouse button is pressed. Use Event.button to determine which button was pressed down.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.mouseUp">
      <summary>
        <para>Mouse button was released.</para>
        <para>This event gets sent when any mouse button is released. Use Event.button to determine which button was pressed down.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.mouseMove">
      <summary>
        <para>Mouse was moved (editor views only).</para>
        <para>The mouse was moved without any buttons being held down. Use Event.mousePosition and Event.delta to determine mouse motion.Note that this even is only sent in the Editor, for EditorWindow windows which have EditorWindow.wantsMouseMove
set to true. Mouse move events are never sent in the games.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.mouseDrag">
      <summary>
        <para>Mouse was dragged.</para>
        <para>The mouse was moved with a button held down - a mouse drag. Use Event.mousePosition and Event.delta to determine mouse motion.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.keyDown">
      <summary>
        <para>A keyboard key was pressed.</para>
        <para>Use Event.character to find out what has been typed. Use Event.keyCode to handle arrow, home/end or other function keys, or to find
out which physical key has been pressed.
This event is sent repeatedly depending on the end user's keyboard repeat settings.Note that key presses can come as separate events, one with valid Event.keyCode, and another with valid Event.character.
In case of keyboard layouts with dead keys, multiple Event.keyCode events can generate a single Event.character event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.keyUp">
      <summary>
        <para>A keyboard key was released.</para>
        <para>Use Event.keyCode to find which physical key was released. Note that depending on the system
and keyboard layout, Event.character might not contain any character for a key release event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.scrollWheel">
      <summary>
        <para>The scroll wheel was moved.</para>
        <para>Use Event.delta to determine X &amp;amp; Y scrolling amount.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.repaint">
      <summary>
        <para>A repaint event. One is sent every frame.</para>
        <para>All other events are processed first, then the repaint event is sent.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.layout">
      <summary>
        <para>A layout event.</para>
        <para>This event is sent prior to anything else - this is a chance to perform any initialization. 
It is used by the automatic layout system.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.dragUpdated">
      <summary>
        <para>Editor only: drag &amp;amp; drop operation updated.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.dragPerform">
      <summary>
        <para>Editor only: drag &amp;amp; drop operation performed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.ignore">
      <summary>
        <para>
          <see cref="Event">Event</see> should be ignored.</para>
        <para>This event is temporarily disabled and should be ignored.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventType.used">
      <summary>
        <para>Already processed event.</para>
        <para>This event has been used by some other control and should be ignored.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.EventModifiers">
      <summary>
        <para>Types of modifier key that can be active during a keystroke event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.None">
      <summary>
        <para>No modifier key pressed during a keystroke event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Shift">
      <summary>
        <para>Shift key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Control">
      <summary>
        <para>Control key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Alt">
      <summary>
        <para>Alt key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Command">
      <summary>
        <para>Command key (Mac).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.Numeric">
      <summary>
        <para>Num lock key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.CapsLock">
      <summary>
        <para>Caps lock key.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.EventModifiers.FunctionKey">
      <summary>
        <para>Function key.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Gizmos">
      <summary>
        <para>Gizmos are used to give visual debugging or setup aids in the scene view.</para>
        <para>All gizmo drawing has to be done in either OnDrawGizmos or
OnDrawGizmosSelected functions of the script.OnDrawGizmos is called every frame. All gizmos rendered within OnDrawGizmos are pickable.OnDrawGizmosSelected is called only if the object the script is attached to is selected.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawRay(UnityEngine.Ray)">
      <summary>
        <para>Draws a ray starting at <c>from</c> to <c>from</c> + <c>direction</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draws a ray starting at <c>from</c> to <c>from</c> + <c>direction</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draws a line starting at <c>from</c> towards <c>to</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawWireSphere(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draws a wireframe sphere with <c>center</c> and <c>radius</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawSphere(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draws a solid sphere with <c>center</c> and <c>radius</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawWireCube(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a wireframe box with <c>center</c> and <c>size</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawCube(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a solid box with <c>center</c> and <c>size</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawIcon(UnityEngine.Vector3,System.String,System.Boolean)">
      <summary>
        <para>Draw an icon at a position in the scene view.</para>
        <para>The image filename for the icon is specified with the name parameter
while the center parameter denotes the location of the icon in world space
and the allowScaling parameter determines if the icon is allowed to be scaled. 
The image file should be placed in the Assets/Gizmos folder.DrawIcon can be used to allow important objects in your game to be selected quickly.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawIcon(UnityEngine.Vector3,System.String)">
      <summary>
        <para>Draw an icon at a position in the scene view.</para>
        <para>The image filename for the icon is specified with the name parameter
while the center parameter denotes the location of the icon in world space
and the allowScaling parameter determines if the icon is allowed to be scaled. 
The image file should be placed in the Assets/Gizmos folder.DrawIcon can be used to allow important objects in your game to be selected quickly.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draw a texture in the scene.</para>
        <para>The chosen texture is drawn in 3D space on a "screen" defined by the XY plane (ie,
the plane where the Z coordinate is zero). The values of the texture rectangle are given in scene
units. The optional border values specify an inset from each edge within the rectangle in scene units; the texture
is drawn inside the inset rectangle and the edge pixels are repeated outwards. This is a useful quick way
to create a large background region around the main texture when its edges are of a single colour.This function can be useful for creating GUI backgrounds in conjunction with a camera
pointing directly at the texture.</para>
      </summary>
      <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
      <param name="texture">The texture to be displayed.</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in the scene.</para>
        <para>The chosen texture is drawn in 3D space on a "screen" defined by the XY plane (ie,
the plane where the Z coordinate is zero). The values of the texture rectangle are given in scene
units. The optional border values specify an inset from each edge within the rectangle in scene units; the texture
is drawn inside the inset rectangle and the edge pixels are repeated outwards. This is a useful quick way
to create a large background region around the main texture when its edges are of a single colour.This function can be useful for creating GUI backgrounds in conjunction with a camera
pointing directly at the texture.</para>
      </summary>
      <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
      <param name="texture">The texture to be displayed.</param>
      <param name="mat">An optional material to apply the texture.</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32,UnityEngine.Material)">
      <summary>
        <para>Draw a texture in the scene.</para>
        <para>The chosen texture is drawn in 3D space on a "screen" defined by the XY plane (ie,
the plane where the Z coordinate is zero). The values of the texture rectangle are given in scene
units. The optional border values specify an inset from each edge within the rectangle in scene units; the texture
is drawn inside the inset rectangle and the edge pixels are repeated outwards. This is a useful quick way
to create a large background region around the main texture when its edges are of a single colour.This function can be useful for creating GUI backgrounds in conjunction with a camera
pointing directly at the texture.</para>
      </summary>
      <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
      <param name="texture">The texture to be displayed.</param>
      <param name="mat">An optional material to apply the texture.</param>
      <param name="leftBorder">Inset from the rectangle's left edge.</param>
      <param name="rightBorder">Inset from the rectangle's right edge.</param>
      <param name="topBorder">Inset from the rectangle's top edge.</param>
      <param name="bottomBorder">Inset from the rectangle's bottom edge.</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawGUITexture(UnityEngine.Rect,UnityEngine.Texture,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Draw a texture in the scene.</para>
        <para>The chosen texture is drawn in 3D space on a "screen" defined by the XY plane (ie,
the plane where the Z coordinate is zero). The values of the texture rectangle are given in scene
units. The optional border values specify an inset from each edge within the rectangle in scene units; the texture
is drawn inside the inset rectangle and the edge pixels are repeated outwards. This is a useful quick way
to create a large background region around the main texture when its edges are of a single colour.This function can be useful for creating GUI backgrounds in conjunction with a camera
pointing directly at the texture.</para>
      </summary>
      <param name="screenRect">The size and position of the texture on the "screen" defined by the XY plane.</param>
      <param name="texture">The texture to be displayed.</param>
      <param name="leftBorder">Inset from the rectangle's left edge.</param>
      <param name="rightBorder">Inset from the rectangle's right edge.</param>
      <param name="topBorder">Inset from the rectangle's top edge.</param>
      <param name="bottomBorder">Inset from the rectangle's bottom edge.</param>
    </member>
    <member name="M:UnityEngine.Gizmos.DrawFrustum(UnityEngine.Vector3,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Draw a camera frustum using the currently set Gizmos.matrix for it's location and rotation.</para>
      </summary>
      <param name="center">The apex of the truncated pyramid.</param>
      <param name="fov">Vertical field of view (ie, the angle at the apex).</param>
      <param name="maxRange">Distance of the frustum's far plane.</param>
      <param name="minRange">Distance of the frustum's near plane.</param>
      <param name="aspect">Width/height ratio.</param>
    </member>
    <member name="P:UnityEngine.Gizmos.color">
      <summary>
        <para>Sets the color for the gizmos that will be drawn next.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gizmos.matrix">
      <summary>
        <para>Set the gizmo matrix used to draw all gizmos.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.iPhoneInput" />
    <member name="M:UnityEngine.iPhoneInput.#ctor" />
    <member name="T:UnityEngine.CalendarIdentifier">
      <summary>
        <para>Specify calendar types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.GregorianCalendar">
      <summary>
        <para>Identifies the Gregorian calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.BuddhistCalendar">
      <summary>
        <para>Identifies the Buddhist calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.ChineseCalendar">
      <summary>
        <para>Identifies the Chinese calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.HebrewCalendar">
      <summary>
        <para>Identifies the Hebrew calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.IslamicCalendar">
      <summary>
        <para>Identifies the Islamic calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.IslamicCivilCalendar">
      <summary>
        <para>Identifies the Islamic civil calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.JapaneseCalendar">
      <summary>
        <para>Identifies the Japanese calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.RepublicOfChinaCalendar">
      <summary>
        <para>Identifies the Republic of China (Taiwan) calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.PersianCalendar">
      <summary>
        <para>Identifies the Persian calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.IndianCalendar">
      <summary>
        <para>Identifies the Indian calendar.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarIdentifier.ISO8601Calendar">
      <summary>
        <para>Identifies the ISO8601.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.CalendarUnit">
      <summary>
        <para>Specify calendrical units.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Era">
      <summary>
        <para>Specifies the era unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Year">
      <summary>
        <para>Specifies the year unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Month">
      <summary>
        <para>Specifies the month unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Day">
      <summary>
        <para>Specifies the day unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Hour">
      <summary>
        <para>Specifies the hour unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Minute">
      <summary>
        <para>Specifies the minute unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Second">
      <summary>
        <para>Specifies the second unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Week">
      <summary>
        <para>Specifies the week unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Weekday">
      <summary>
        <para>Specifies the weekday unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.WeekdayOrdinal">
      <summary>
        <para>Specifies the ordinal weekday unit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.CalendarUnit.Quarter">
      <summary>
        <para>Specifies the quarter of the calendar.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LocalNotification">
      <summary>
        <para>LocalNotification is a wrapper around the UILocalNotification class found in the Apple UIKit framework and is only available on iPhone/iPad/iPod Touch.</para>
        <para>It represents notifications that an application can schedule for presentation to its user at specific dates and times. 
The operating system is responsible for delivering the notification at the specified time. 
Local notifications are similar to remote notifications but are scheduled and delivered locally and do not require connection with remote servers.Local notifications are scheduled and handled using NotificationServices class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LocalNotification.#ctor">
      <summary>
        <para>Creates a new local notification.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.fireDate">
      <summary>
        <para>The date and time when the system should deliver the notification.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.timeZone">
      <summary>
        <para>The time zone of the notification's fire date.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.repeatInterval">
      <summary>
        <para>The calendar interval at which to reschedule the notification.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.repeatCalendar">
      <summary>
        <para>The calendar type (Gregorian, Chinese, etc) to use for rescheduling the notification.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.alertBody">
      <summary>
        <para>The message displayed in the notification alert.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.alertAction">
      <summary>
        <para>The title of the action button or slider.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.hasAction">
      <summary>
        <para>A boolean value that controls whether the alert action is visible or not.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.alertLaunchImage">
      <summary>
        <para>Identifies the image used as the launch image when the user taps the action button.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.applicationIconBadgeNumber">
      <summary>
        <para>The number to display as the application's icon badge.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.soundName">
      <summary>
        <para>The name of the sound file to play when an alert is displayed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.defaultSoundName">
      <summary>
        <para>The default system sound. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocalNotification.userInfo">
      <summary>
        <para>A dictionary for passing custom information to the notified application.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RemoteNotification">
      <summary>
        <para>RemoteNotification is only available on iPhone/iPad/iPod Touch.</para>
        <para>Remote notifications are sent by an application's remote server (its provider) to Apple Push Notification service 
which pushes the notification to devices on which the application is installed.Remote notifications are registered for and handled using NotificationServices class.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RemoteNotification.alertBody">
      <summary>
        <para>The message displayed in the notification alert. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RemoteNotification.hasAction">
      <summary>
        <para>A boolean value that controls whether the alert action is visible or not. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RemoteNotification.applicationIconBadgeNumber">
      <summary>
        <para>The number to display as the application's icon badge. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RemoteNotification.soundName">
      <summary>
        <para>The name of the sound file to play when an alert is displayed. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.RemoteNotification.userInfo">
      <summary>
        <para>A dictionary for passing custom information to the notified application. (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LocalNotificationType">
      <summary>
        <para>Specify local notification types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LocalNotificationType.None">
      <summary>
        <para>The application accepts no notifications.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LocalNotificationType.Badge">
      <summary>
        <para>The application accepts notifications that badge the application icon.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LocalNotificationType.Sound">
      <summary>
        <para>The application accepts alert sounds as notifications.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LocalNotificationType.Alert">
      <summary>
        <para>The application accepts alert messages as notifications.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RemoteNotificationType">
      <summary>
        <para>Specify remote notification types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RemoteNotificationType.None">
      <summary>
        <para>The application accepts no notifications.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RemoteNotificationType.Badge">
      <summary>
        <para>The application accepts notifications that badge the application icon.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RemoteNotificationType.Sound">
      <summary>
        <para>The application accepts alert sounds as notifications.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RemoteNotificationType.Alert">
      <summary>
        <para>The application accepts alert messages as notifications.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NotificationServices">
      <summary>
        <para>NotificationServices is only available on iPhone/iPad/iPod Touch.</para>
        <para>It is used for scheduling, registering and handling notifications.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.GetLocalNotification(System.Int32)">
      <summary>
        <para>Returns an object representing a specific local notification. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.ScheduleLocalNotification(UnityEngine.LocalNotification)">
      <summary>
        <para>Schedules a local notification.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.PresentLocalNotificationNow(UnityEngine.LocalNotification)">
      <summary>
        <para>Presents a local notification immediately.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.CancelLocalNotification(UnityEngine.LocalNotification)">
      <summary>
        <para>Cancels the delivery of the specified scheduled local notification.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.CancelAllLocalNotifications">
      <summary>
        <para>Cancels the delivery of all scheduled local notifications.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.GetRemoteNotification(System.Int32)">
      <summary>
        <para>Returns an object representing a specific remote notification. (Read Only)</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.ClearLocalNotifications">
      <summary>
        <para>Discards of all received local notifications.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.ClearRemoteNotifications">
      <summary>
        <para>Discards of all received remote notifications.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.RegisterForLocalNotificationTypes(UnityEngine.LocalNotificationType)">
      <summary>
        <para>Register to receive local notifications of the specified types.</para>
        <para>Note: calling this method will set the requested notification types for both local and remote notifications, overriding any previous calls. Call to NotificationServices.RegisterForRemoteNotificationTypes() is still required to enable remote notifications.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.RegisterForRemoteNotificationTypes(UnityEngine.RemoteNotificationType)">
      <summary>
        <para>Register to receive remote notifications of the specified types from a provider via Apple Push Service.</para>
        <para>After an application registers for the specified remote notification types, 
the device token is received from Apple Push Service and is available via NotificationServices.deviceToken.Note: calling this method will set the requested notification types for both local and remote notifications, overriding any previous calls.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotificationServices.UnregisterForRemoteNotifications">
      <summary>
        <para>Unregister for remote notifications.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NotificationServices.localNotificationCount">
      <summary>
        <para>The number of received local notifications. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NotificationServices.localNotifications">
      <summary>
        <para>The list of objects representing received local notifications. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NotificationServices.scheduledLocalNotifications">
      <summary>
        <para>All currently scheduled local notifications.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NotificationServices.remoteNotificationCount">
      <summary>
        <para>The number of received remote notifications. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NotificationServices.remoteNotifications">
      <summary>
        <para>The list of objects representing received remote notifications. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NotificationServices.enabledRemoteNotificationTypes">
      <summary>
        <para>The types of notifications the application accepts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NotificationServices.deviceToken">
      <summary>
        <para>Device token received from Apple Push Service after calling <c>NotificationServices.RegisterForRemoteNotificationTypes</c>. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NotificationServices.registrationError">
      <summary>
        <para>Returns an error that might occur on registration for remote notifications via <c>NotificationServices.RegisterForRemoteNotificationTypes</c>. (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LightProbeGroup">
      <summary>
        <para>Light Probe Group.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LightProbeGroup.probePositions">
      <summary>
        <para>Editor only function to access and modify probe positions.</para>
        <para>Probe positions are specified in local space relative to the parent object.At runtime this function will return an empty Vector3 array and setting it will have no effect.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Vector2">
      <summary>
        <para>Representation of 2D vectors and points.</para>
        <para>This structure is used in some places to represent 2D positions and vectors (e.g. texture
coordinates in a Mesh or texture offsets in Material). In the majority of other cases a Vector3
is used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.#ctor(System.Single,System.Single)">
      <summary>
        <para>Constructs a new vector with given x, y components.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Set(System.Single,System.Single)">
      <summary>
        <para>Set x and y components of an existing Vector2.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Lerp(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Linearly interpolates between two vectors.</para>
        <para>Interpolates between from and to by amount t.t is clamped between [0...1].
When t = 0 returns from.
When t = 1 returns to.
When t = 0.5 returns the average of from and to.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.MoveTowards(UnityEngine.Vector2,UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Moves a point <c>current</c> towards <c>target</c>.</para>
        <para>This is essentially the same as Vector2.Lerp but instead the function will ensure that the speed never exceeds maxDistanceDelta.
Negative values of maxDistanceDelta pushes the vector away from target.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Scale(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Multiplies two vectors component-wise.</para>
        <para>Every component in the result is a component of a multiplied by the same component of b.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Scale(UnityEngine.Vector2)">
      <summary>
        <para>Multiplies every component of this vector by the same component of <c>scale</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Normalize">
      <summary>
        <para>Makes this vector have a <see cref="Vector2-magnitude">magnitude</see> of 1.</para>
        <para>When normalized, a vector keeps the same direction but its length is 1.0.Note that this function will change the current vector. If you
want to keep the current vector unchanged, use normalized variable.If this vector is too small to be normalized it will be set to zero.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.ToString">
      <summary>
        <para>Returns a nicely formatted string for this vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string for this vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Equals(System.Object)" />
    <member name="M:UnityEngine.Vector2.Dot(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Dot Product of two vectors.</para>
        <para>Returns lhs.rhs.For normalized vectors Dot returns 1 if they point in exactly the same direction;
-1 if they point in completely opposite directions; and a number in between for other
cases (e.g. Dot returns zero if vectors are perpendicular).For vectors of arbitrary length the Dot return values are similar: they get larger when the angle between vectors
decreases.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Angle(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns the angle in degrees between <c>from</c> and <c>to</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Distance(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns the distance between <c>a</c> and <c>b</c>.</para>
        <para>Vector2.Distance(a,b) is the same as (a-b).magnitude.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.ClampMagnitude(UnityEngine.Vector2,System.Single)">
      <summary>
        <para>Returns a copy of <c>vector</c> with its magnitude clamped to <c>maxLength</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.SqrMagnitude(UnityEngine.Vector2)" />
    <member name="M:UnityEngine.Vector2.SqrMagnitude" />
    <member name="M:UnityEngine.Vector2.Min(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns a vector that is made from the smallest components of two vectors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.Max(UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Returns a vector that is made from the largest components of two vectors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector2.SmoothDamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
        <para>The vector is smoothed by some spring-damper like function, which will never overshoot.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
    </member>
    <member name="M:UnityEngine.Vector2.SmoothDamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
        <para>The vector is smoothed by some spring-damper like function, which will never overshoot.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
    </member>
    <member name="M:UnityEngine.Vector2.SmoothDamp(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2@,System.Single,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
        <para>The vector is smoothed by some spring-damper like function, which will never overshoot.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="F:UnityEngine.Vector2.x">
      <summary>
        <para>X component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector2.y">
      <summary>
        <para>Y component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.normalized">
      <summary>
        <para>Returns this vector with a <see cref="Vector2-magnitude">magnitude</see> of 1 (Read Only).</para>
        <para>When normalized, a vector keeps the same direction but its length is 1.0.Note that the current vector is unchanged and a new normalized vector is returned. If you
want to normalize the current vector, use Normalize function.If the vector is too small to be normalized a zero vector will be returned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.magnitude">
      <summary>
        <para>Returns the length of this vector (Read Only).</para>
        <para>The length of the vector is square root of (x*x+y*y).If you only need to compare magnitudes of some vectors, you can compare squared magnitudes of them
using sqrMagnitude (computing squared magnitudes is faster).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.sqrMagnitude">
      <summary>
        <para>Returns the squared length of this vector (Read Only).</para>
        <para>Calculating the squared magnitude instead of the magnitude is much faster.
Often if you are comparing magnitudes of two vectors you can just compare
their squared magnitudes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.zero">
      <summary>
        <para>Shorthand for writing <c>Vector2(0, 0)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.one">
      <summary>
        <para>Shorthand for writing <c>Vector2(1, 1)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.up">
      <summary>
        <para>Shorthand for writing <c>Vector2(0, 1)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector2.right">
      <summary>
        <para>Shorthand for writing <c>Vector2(1, 0)</c>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Vector3">
      <summary>
        <para>Representation of 3D vectors and points.</para>
        <para>This structure is used throughout Unity to pass 3D positions and directions around.
It also contains functions for doing common vector operations.Besides the functions listed below, other classes can be used to manipulate vectors and points as well.
For example the Quaternion and the Matrix4x4 classes are useful for rotating or transforming vectors and points.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.#ctor(System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y, z components.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.#ctor(System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y components and sets <c>z</c> to zero.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Lerp(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Linearly interpolates between two vectors.</para>
        <para>Interpolates between from and to by the fraction t. This is most commonly
used to find a point some fraction of the way along a line between two
endpoints (eg, to move an object gradually between those points).
This fraction is clamped to the range [0...1].
When t = 0 returns from.
When t = 1 returns to.
When t = 0.5 returns the point midway between from and to.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Slerp(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Spherically interpolates between two vectors.</para>
        <para>Interpolates between from and to by amount t. The difference between this and linear
interpolation (aka, "lerp") is that the vectors are treated as directions rather than points
in space. The direction of the returned vector is interpolated by the angle and its
magnitude is interpolated between the magnitudes of from and to./t/ is clamped between [0...1].
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.OrthoNormalize(UnityEngine.Vector3@,UnityEngine.Vector3@)">
      <summary>
        <para>Makes vectors normalized and orthogonal to each other.</para>
        <para>Normalizes normal.
Normalizes tangent and makes sure it is orthogonal to normal (that is, angle between them is 90 degrees).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.OrthoNormalize(UnityEngine.Vector3@,UnityEngine.Vector3@,UnityEngine.Vector3@)">
      <summary>
        <para>Makes vectors normalized and orthogonal to each other.</para>
        <para>Normalizes normal.
Normalizes tangent and makes sure it is orthogonal to normal.
Normalizes binormal and makes sure it is orthogonal to both normal and tangent.Points in space are usually specified with coordinates in the standard XYZ axis system. However, you
can interpret any three vectors as "axes" if they are normalized (ie, have a magnitude of 1) and are
orthogonal (ie, perpendicular to each other).Creating your own coordinate axes is useful, say, if you want to scale a mesh
in arbitrary directions rather than just along the XYZ axes - you can transform the vertices
to your own coordinate system, scale them and then transform back. Often, a transformation like this will
be carried out along only one axis while the other two are either left as they are or treated equally.
For example, a stretching effect can be applied to a mesh by scaling up on one axis while scaling down
proportionally on the other two. This means that once the first axis vector is specified, it doesn't
greatly matter what the other two are as long as they are normalized and orthogonal. OrthoNormalize
can be used to ensure the first vector is normal and then generate two normalized, orthogonal vectors
for the other two axes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.MoveTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Moves a point <c>current</c> in a straight line towards a <c>target</c> point.</para>
        <para>The value returned by this function is a point maxDistanceDelta units closer to a target/
point along a line between current and target. If the target is closer than maxDistanceDelta/
then the returned value will be equal to target (ie, the movement will not overshoot the target).
Negative values of maxDistanceDelta can be used to push the point away from the target.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.RotateTowards(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Rotates a vector <c>current</c> towards <c>target</c>.</para>
        <para>This function is similar to MoveTowards except that the vector is treated as a direction rather
than a position. The current vector will be rotated round toward the target direction by an angle
of maxRadiansDelta, although it will land exactly on the target rather than overshoot. If the magnitudes
of current and target are different then the magnitude of the result will be linearly interpolated during
the rotation. If a negative value is used for maxRadiansDelta, the vector will rotate away from  target/
until it is pointing in exactly the opposite direction, then stop.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
        <para>The vector is smoothed by some spring-damper like function, which will never overshoot.
The most common use is for smoothing a follow camera.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
    </member>
    <member name="M:UnityEngine.Vector3.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
        <para>The vector is smoothed by some spring-damper like function, which will never overshoot.
The most common use is for smoothing a follow camera.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
    </member>
    <member name="M:UnityEngine.Vector3.SmoothDamp(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3@,System.Single,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a vector towards a desired goal over time.</para>
        <para>The vector is smoothed by some spring-damper like function, which will never overshoot.
The most common use is for smoothing a follow camera.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Vector3.Set(System.Single,System.Single,System.Single)">
      <summary>
        <para>Set x, y and z components of an existing Vector3.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Scale(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Multiplies two vectors component-wise.</para>
        <para>Every component in the result is a component of a multiplied by the same component of b.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Scale(UnityEngine.Vector3)">
      <summary>
        <para>Multiplies every component of this vector by the same component of <c>scale</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Cross(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Cross Product of two vectors.</para>
        <para>The cross product of two vectors results in a third vector which is perpendicular
to the two input vectors. The result's magnitude is equal to the magnitudes of the
two inputs multiplied together and then multiplied by the sine of the angle between
the inputs. You can determine the direction of the result vector using the "left hand rule".The left hand rule applied to Cross(a, b).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.GetHashCode" />
    <member name="M:UnityEngine.Vector3.Equals(System.Object)" />
    <member name="M:UnityEngine.Vector3.Reflect(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Reflects a vector off the plane defined by a normal.</para>
        <para>The inNormal vector defines a plane (a plane's normal is the vector that is perpendicular to
its surface). the inDirection vector is treated as a directional arrow coming in to the plane.
The returned value is a vector of equal magnitude to inDirection but with its direction reflected.Reflection of a vector off a plane.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Normalize">
      <summary>
        <para>Makes this vector have a <see cref="Vector3-magnitude">magnitude</see> of 1.</para>
        <para>When normalized, a vector keeps the same direction but its length is 1.0.Note that this function will change the current vector. If you
want to keep the current vector unchanged, use normalized variable.If this vector is too small to be normalized it will be set to zero.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.ToString">
      <summary>
        <para>Returns a nicely formatted string for this vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string for this vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Dot(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Dot Product of two vectors.</para>
        <para>The dot product is a float value equal to the magnitudes of the two vectors multiplied together
and then multiplied by the cosine of the angle between them.For normalized vectors Dot returns 1 if they point in exactly the same direction,
-1 if they point in completely opposite directions and zero if the vectors are perpendicular.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Project(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Projects a vector onto another vector.</para>
        <para>To understand vector projection, imagine that onNormal is resting on a line pointing in its
direction. Somewhere along that line will be the nearest point to the tip of vector. The
projection is just onNormal rescaled so that it reaches that point on the line.The function will return a zero vector if onNormal is almost zero.An example of the usage of projection is a rail-mounted gun that should slide so that it gets
as close as possible to a target object. The projection of the target heading along the
direction of the rail can be used to move the gun by applying a force to a rigidbody, say.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.ProjectOnPlane(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Projects a vector onto a plane defined by a normal orthogonal to the plane.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Angle(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns the angle in degrees between <c>from</c> and <c>to</c>.</para>
        <para>The angle returned is always the acute angle between the two vector (ie, the smaller of the two possible angles between them and never greater than 180 degrees).</para>
      </summary>
      <param name="from">The angle extends round from this vector.</param>
      <param name="to">The angle extends round to this vector.</param>
    </member>
    <member name="M:UnityEngine.Vector3.Distance(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns the distance between <c>a</c> and <c>b</c>.</para>
        <para>Vector3.Distance(a,b) is the same as (a-b).magnitude.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.ClampMagnitude(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Returns a copy of <c>vector</c> with its magnitude clamped to <c>maxLength</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Min(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns a vector that is made from the smallest components of two vectors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector3.Max(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns a vector that is made from the largest components of two vectors.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector3.x">
      <summary>
        <para>X component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector3.y">
      <summary>
        <para>Y component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector3.z">
      <summary>
        <para>Z component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.normalized">
      <summary>
        <para>Returns this vector with a <see cref="Vector3-magnitude">magnitude</see> of 1 (Read Only).</para>
        <para>When normalized, a vector keeps the same direction but its length is 1.0.Note that the current vector is unchanged and a new normalized vector is returned. If you
want to normalize the current vector, use Normalize function.If the vector is too small to be normalized a zero vector will be returned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.magnitude">
      <summary>
        <para>Returns the length of this vector (Read Only).</para>
        <para>The length of the vector is square root of (x*x+y*y+z*z).If you only need to compare magnitudes of some vectors, you can compare squared magnitudes of them
using sqrMagnitude (computing squared magnitudes is faster).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.sqrMagnitude">
      <summary>
        <para>Returns the squared length of this vector (Read Only).</para>
        <para>The magnitude of a vector v is calculated as Mathf.Sqrt(Vector3.Dot(v, v)). However, the
Sqrt calculation is quite complicated and takes longer to execute than the normal arithmetic
operations. 
Calculating the squared magnitude instead of using the magnitude property is much faster -
the calculation is basically the same only without the slow Sqrt call. If you are using
magnitudes simply to compare distances, then you can just as well compare squared magnitudes against
the squares of distances since the comparison will give the same result.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.zero">
      <summary>
        <para>Shorthand for writing <c>Vector3(0, 0, 0)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.one">
      <summary>
        <para>Shorthand for writing <c>Vector3(1, 1, 1)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.forward">
      <summary>
        <para>Shorthand for writing <c>Vector3(0, 0, 1)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.back">
      <summary>
        <para>Shorthand for writing <c>Vector3(0, 0, -1)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.up">
      <summary>
        <para>Shorthand for writing <c>Vector3(0, 1, 0)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.down">
      <summary>
        <para>Shorthand for writing <c>Vector3(0, -1, 0)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.left">
      <summary>
        <para>Shorthand for writing <c>Vector3(-1, 0, 0)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector3.right">
      <summary>
        <para>Shorthand for writing <c>Vector3(1, 0, 0)</c>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Color">
      <summary>
        <para>Representation of RGBA colors.</para>
        <para>This structure is used throughout Unity to pass colors around. 
Each color component is a floating point value with a range from 0 to 1.Components (r,g,b) define a color in RGB color space. Alpha component (a)
defines transparency - alpha of one is completely opaque, alpha of zero is completely
transparent.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Constructs a new Color with given r,g,b,a components.</para>
      </summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
      <param name="a">Alpha component.</param>
    </member>
    <member name="M:UnityEngine.Color.#ctor(System.Single,System.Single,System.Single)">
      <summary>
        <para>Constructs a new Color with given r,g,b components and sets <c>a</c> to 1.</para>
      </summary>
      <param name="r">Red component.</param>
      <param name="g">Green component.</param>
      <param name="b">Blue component.</param>
    </member>
    <member name="M:UnityEngine.Color.ToString">
      <summary>
        <para>Returns a nicely formatted string of this color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string of this color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color.Lerp(UnityEngine.Color,UnityEngine.Color,System.Single)">
      <summary>
        <para>Interpolates between colors <c>a</c> and <c>b</c> by <c>t</c>.</para>
        <para>t is clamped between 0 and 1. When t is 0 returns a. When t is 1 returns b.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color.r">
      <summary>
        <para>Red component of the color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color.g">
      <summary>
        <para>Green component of the color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color.b">
      <summary>
        <para>Blue component of the color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color.a">
      <summary>
        <para>Alpha component of the color.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.red">
      <summary>
        <para>Solid red. RGBA is (1, 0, 0, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.green">
      <summary>
        <para>Solid green. RGBA is (0, 1, 0, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.blue">
      <summary>
        <para>Solid blue. RGBA is (0, 0, 1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.white">
      <summary>
        <para>Solid white. RGBA is (1, 1, 1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.black">
      <summary>
        <para>Solid black. RGBA is (0, 0, 0, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.yellow">
      <summary>
        <para>Yellow. RGBA is (1, 0.92, 0.016, 1), but the color is nice to look at!</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.cyan">
      <summary>
        <para>Cyan. RGBA is (0, 1, 1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.magenta">
      <summary>
        <para>Magenta. RGBA is (1, 0, 1, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.gray">
      <summary>
        <para>Gray. RGBA is (0.5, 0.5, 0.5, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.grey">
      <summary>
        <para>English spelling for <see cref="Color-gray">gray</see>. RGBA is the same (0.5, 0.5, 0.5, 1).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.clear">
      <summary>
        <para>Completely transparent. RGBA is (0, 0, 0, 0).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.grayscale">
      <summary>
        <para>The grayscale value of the color. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.linear">
      <summary>
        <para>A version of the color that has had the inverse gamma curve applied.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Color.gamma">
      <summary>
        <para>A version of the color that has had the gamma curve applied.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Color32">
      <summary>
        <para>Representation of RGBA colors in 32 bit format.</para>
        <para>Each color component is a byte value with a range from 0 to 255.Components (r,g,b) define a color in RGB color space. Alpha component (a)
defines transparency - alpha of 255 is completely opaque, alpha of zero is completely
transparent.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>
        <para>Constructs a new Color with given r, g, b, a components.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color32.ToString">
      <summary>
        <para>Returns a nicely formatted string of this color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color32.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string of this color.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Color32.Lerp(UnityEngine.Color32,UnityEngine.Color32,System.Single)">
      <summary>
        <para>Interpolates between colors <c>a</c> and <c>b</c> by <c>t</c>.</para>
        <para>t is clamped between 0 and 1. When t is 0 returns a. When t is 1 returns b.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color32.r">
      <summary>
        <para>Red component of the color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color32.g">
      <summary>
        <para>Green component of the color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color32.b">
      <summary>
        <para>Blue component of the color.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Color32.a">
      <summary>
        <para>Alpha component of the color.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Quaternion">
      <summary>
        <para>Quaternions are used to represent rotations.</para>
        <para>They are compact, don't suffer from gimbal lock and can easily be interpolated.
Unity internally uses Quaternions to represent all rotations.They are based on complex numbers and are not easy to understand intuitively.
You almost never access or modify individual Quaternion components (x,y,z,w);
most often you would just take existing rotations (e.g. from the Transform) and use them
to construct new rotations (e.g. to smoothly interpolate between two rotations).
The Quaternion functions that you use 99% of the time are:
Quaternion.LookRotation, Quaternion.Angle, Quaternion.Euler, Quaternion.Slerp, Quaternion.FromToRotation, and Quaternion.identity. (The other functions are only for exotic uses.)You can use the Quaternion.operator * to rotate one rotation by another, or to rotate a vector by a rotation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Constructs new Quaternion with given x,y,z,w components.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set x, y, z and w components of an existing Quaternion.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.Dot(UnityEngine.Quaternion,UnityEngine.Quaternion)">
      <summary>
        <para>The dot product between two rotations.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.AngleAxis(System.Single,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation which rotates <c>angle</c> degrees around <c>axis</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.ToAngleAxis(System.Single@,UnityEngine.Vector3@)">
      <summary>
        <para>Converts a rotation to angle-axis representation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.FromToRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation which rotates from <c>fromDirection</c> to <c>toDirection</c>.</para>
        <para>Usually you use this to rotate a transform so that one of its axes eg. the y-axis - follows a target direction toDirection in world space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.SetFromToRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation which rotates from <c>fromDirection</c> to <c>toDirection</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.LookRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation with the specified <c>forward</c> and <c>upwards</c> directions.</para>
        <para>Returns the computed quaternion.
If used to orient a Transform, the Z axis will be aligned with forward/
and the Y axis with upwards if these vectors are orthogonal.
Logs an error if the forward direction is zero.</para>
      </summary>
      <param name="forward">The direction to look in.</param>
      <param name="upwards">The vector that defines in which direction up is.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.LookRotation(UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation with the specified <c>forward</c> and <c>upwards</c> directions.</para>
        <para>Returns the computed quaternion.
If used to orient a Transform, the Z axis will be aligned with forward/
and the Y axis with upwards if these vectors are orthogonal.
Logs an error if the forward direction is zero.</para>
      </summary>
      <param name="forward">The direction to look in.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.SetLookRotation(UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation with the specified <c>forward</c> and <c>upwards</c> directions.</para>
        <para>The result is applied to this quaternion
If used to orient a Transform, the Z axis will be aligned with forward/
and the Y axis with upwards, assuming these vectors are orthogonal.
Logs an error if the forward direction is zero.</para>
      </summary>
      <param name="view">The direction to look in.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.SetLookRotation(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a rotation with the specified <c>forward</c> and <c>upwards</c> directions.</para>
        <para>The result is applied to this quaternion
If used to orient a Transform, the Z axis will be aligned with forward/
and the Y axis with upwards, assuming these vectors are orthogonal.
Logs an error if the forward direction is zero.</para>
      </summary>
      <param name="view">The direction to look in.</param>
      <param name="up">The vector that defines in which direction up is.</param>
    </member>
    <member name="M:UnityEngine.Quaternion.Slerp(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Spherically interpolates between <c>from</c> and <c>to</c> by t.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.Lerp(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Interpolates between <c>from</c> and <c>to</c> by <c>t</c> and normalizes the result afterwards.</para>
        <para>This is faster than Slerp but looks worse if the rotations are far apart.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.RotateTowards(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Rotates a rotation <c>from</c> towards <c>to</c>.</para>
        <para>The from quaternion is rotated towards to by an angular step of maxDegreesDelta (but note
that the rotation will not overshoot).
Negative values of maxDegreesDelta will move away from to until the rotation
is exactly the opposite direction.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.Inverse(UnityEngine.Quaternion)">
      <summary>
        <para>Returns the Inverse of <c>rotation</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.ToString">
      <summary>
        <para>Returns a nicely formatted string of the Quaternion.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string of the Quaternion.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.Angle(UnityEngine.Quaternion,UnityEngine.Quaternion)">
      <summary>
        <para>Returns the angle in degrees between two rotations <c>a</c> and <c>b</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.Euler(System.Single,System.Single,System.Single)">
      <summary>
        <para>Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.Euler(UnityEngine.Vector3)">
      <summary>
        <para>Returns a rotation that rotates z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Quaternion.GetHashCode" />
    <member name="M:UnityEngine.Quaternion.Equals(System.Object)" />
    <member name="F:UnityEngine.Quaternion.x">
      <summary>
        <para>X component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Quaternion.y">
      <summary>
        <para>Y component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Quaternion.z">
      <summary>
        <para>Z component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Quaternion.w">
      <summary>
        <para>W component of the Quaternion. Don't modify this directly unless you know quaternions inside out.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Quaternion.identity">
      <summary>
        <para>The identity rotation (Read Only). This quaternion corresponds to "no rotation": the object.</para>
        <para>Is perfectly aligned with the world or parent axes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Quaternion.eulerAngles">
      <summary>
        <para>Returns the euler angle representation of the rotation.</para>
        <para>A rotation that rotates euler.z degrees around the z axis, euler.x degrees around the x axis, and euler.y degrees around the y axis (in that order).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Rect">
      <summary>
        <para>A 2D Rectangle defined by x, y position and width, height.</para>
        <para>The Rect structure is mainly used for 2D operations. The UnityGUI system uses it extensively
 and it is also to set the onscreen position of a Camera's view.The rectangle can be specified in two different ways. The first way involves
 supplying the top-left corner coordinate along with the width and height. This is
 done using the x, y, width and height properties.
 
The second way to specify the rectangle is to supply the X coordinates of its left
 and right sides and the Y coordinates of its top and bottom sides. These are denoted
 by the xMin, xMax, yMin and yMax properties.Although the x and y properties may seem to be the same as
 xMin and xMax, their behaviour is actually slightly different.
 The x and y values are assumed to be used along with width and height. This
 means that if you change x or y without changing width or height then the
 rectangle will change position but stay the same size. On the other hand, if you change
 the values of xMin or yMin without changing xMax or yMax then the rectangle will
 change size and the top-left corner will also change.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rect.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a new rectangle.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rect.MinMaxRect(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a rectangle from min/max coordinate values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rect.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set components of an existing Rect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rect.ToString">
      <summary>
        <para>Returns a nicely formatted string for this Rect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rect.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string for this Rect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector2)">
      <summary>
        <para>Returns true if the <c>x</c> and <c>y</c> components of <c>point</c> is a point inside this rectangle. If <c>allowInverse</c> is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="point">Point to test.</param>
    </member>
    <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector3)">
      <summary>
        <para>Returns true if the <c>x</c> and <c>y</c> components of <c>point</c> is a point inside this rectangle. If <c>allowInverse</c> is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="point">Point to test.</param>
    </member>
    <member name="M:UnityEngine.Rect.Contains(UnityEngine.Vector3,System.Boolean)">
      <summary>
        <para>Returns true if the <c>x</c> and <c>y</c> components of <c>point</c> is a point inside this rectangle. If <c>allowInverse</c> is present and true, the width and height of the Rect are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="point">Point to test.</param>
      <param name="allowInverse">Does the test allow the Rect's width and height to be negative?</param>
    </member>
    <member name="M:UnityEngine.Rect.Overlaps(UnityEngine.Rect)">
      <summary>
        <para>Returns true if the other rectangle overlaps this one. If <c>allowInverse</c> is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="other">Other rectangle to test overlapping with.</param>
    </member>
    <member name="M:UnityEngine.Rect.Overlaps(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns true if the other rectangle overlaps this one. If <c>allowInverse</c> is present and true, the widths and heights of the Rects are allowed to take negative values (ie, the min value is greater than the max), and the test will still work.</para>
      </summary>
      <param name="other">Other rectangle to test overlapping with.</param>
      <param name="allowInverse">Does the test allow the Rects' widths and heights to be negative?</param>
    </member>
    <member name="M:UnityEngine.Rect.NormalizedToPoint(UnityEngine.Rect,UnityEngine.Vector2)">
      <summary>
        <para>Returns a point inside a rectangle, given normalized coordinates.</para>
      </summary>
      <param name="rectangle">Rectangle to get a point inside.</param>
      <param name="normalizedRectCoordinates">Normalized coordinates to get a point for.</param>
    </member>
    <member name="M:UnityEngine.Rect.PointToNormalized(UnityEngine.Rect,UnityEngine.Vector2)">
      <summary>
        <para>Returns the normalized coordinates cooresponding the the point.</para>
      </summary>
      <param name="rectangle">Rectangle to get normalized coordinates inside.</param>
      <param name="point">A point inside the rectangle to get normalized coordinates for.</param>
    </member>
    <member name="M:UnityEngine.Rect.GetHashCode" />
    <member name="M:UnityEngine.Rect.Equals(System.Object)" />
    <member name="P:UnityEngine.Rect.x">
      <summary>
        <para>Left coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.y">
      <summary>
        <para>Top coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.position">
      <summary>
        <para>The top left coordinates of the rectangle.</para>
        <para>This is the x and y coordinates in a combined Vector2.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.center">
      <summary>
        <para>Center coordinate of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.min">
      <summary>
        <para>Lower left corner of the rectangle.</para>
        <para>Changing this value will preserve the right and top side of rectangle (so width and height will change as well).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.max">
      <summary>
        <para>Upper right corner of the rectangle.</para>
        <para>Changing this value will preserve the left and bottom side of rectangle (so width and height will change as well).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.width">
      <summary>
        <para>Width of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.height">
      <summary>
        <para>Height of the rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.size">
      <summary>
        <para>The size of the rectangle.</para>
        <para>This is the width and height in a combined Vector2.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.xMin">
      <summary>
        <para>Left coordinate of the rectangle.</para>
        <para>Changing this value will preserve right side of rectangle (so width will change as well).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.yMin">
      <summary>
        <para>Top coordinate of the rectangle.</para>
        <para>Changing this value will preserve bottom side of rectangle (so height will change as well).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.xMax">
      <summary>
        <para>Right coordinate of the rectangle.</para>
        <para>Changing this value will preserve left side of rectangle (so width will change as well).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Rect.yMax">
      <summary>
        <para>Bottom coordinate of the rectangle.</para>
        <para>Changing this value will preserve top side of rectangle (so height will change as well).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Matrix4x4">
      <summary>
        <para>A standard 4x4 transformation matrix.</para>
        <para>A transformation matrix can perform arbitrary linear 3D transformations (i.e. translation, rotation, scale, shear etc.)
and perspective transformations using homogenous coordinates. You rarely use matrices in scripts; most
often using Vector3s, Quaternions and functionality of Transform class is more straightforward. Plain matrices are used in special cases
like setting up nonstandard camera projection.Consult any graphics textbook for in depth explanation of transformation matrices.In Unity, Matrix4x4 is used by several Transform, Camera, Material and GL functions.Matrices in unity are column major. Data is accessed as: row + (column*4). Matrices can be
indexed like 2D arrays but in an expression like mat[a, b], a refers to the row index, while b refers
to the column index (note that this is the opposite way round to Cartesian coordinates).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.GetColumn(System.Int32)">
      <summary>
        <para>Get a column of the matrix.</para>
        <para>The i-th column is returned as a Vector4. i must be from 0 to 3 inclusive.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.GetRow(System.Int32)">
      <summary>
        <para>Returns a row of the matrix.</para>
        <para>The i-th row is returned as a Vector4. i must be from 0 to 3 inclusive.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.SetColumn(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Sets a column of the matrix.</para>
        <para>You use this to build transformation matrices using right, up and forward vectors:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.SetRow(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Sets a row of the matrix.</para>
        <para>The i-th row is set from v. i must be from 0 to 3 inclusive.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.MultiplyPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a position by this matrix (generic).</para>
        <para>Returns a position v transformed by the current fully arbitrary matrix.
If the matrix is a regular 3D transformation matrix, it is much faster to
use MultiplyPoint3x4 instead. MultiplyPoint is slower, but can handle
projective transformations as well.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.MultiplyPoint3x4(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a position by this matrix (fast).</para>
        <para>Returns a position v transformed by the current transformation matrix.
This function is a faster version of MultiplyPoint; but it can only
handle regular 3D transformations. MultiplyPoint is slower, but can handle
projective transformations as well.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.MultiplyVector(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a direction by this matrix.</para>
        <para>This function is similar to MultiplyPoint; but it transforms
directions and not positions. When transforming a direction, only
the rotation part of the matrix is taken into account.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Scale(UnityEngine.Vector3)">
      <summary>
        <para>Creates a scaling matrix.</para>
        <para>Returned matrix is such that scales along coordinate axes by a vector v.
The matrix looks like this:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.SetTRS(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Sets this matrix to a translation, rotation and scaling matrix.</para>
        <para>The current matrix is modified so that places things at position pos,
oriented in rotation q and scaled by s.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.TRS(UnityEngine.Vector3,UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Creates a translation, rotation and scaling matrix.</para>
        <para>The returned matrix is such that places things at position pos,
oriented in rotation q and scaled by s.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.ToString">
      <summary>
        <para>Returns a nicely formatted string for this matrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string for this matrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Ortho(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates an orthogonal projection matrix.</para>
        <para>The returned matrix is such that views left to right, bottom to top area, with
zFar and zFar depth clipping planes.If you want to use orthogonal for pixel-correct rendering, it is better to use GL.LoadPixelMatrix,
as that would apply proper half-texel offsets for Direct3D renderer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Matrix4x4.Perspective(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a perspective projection matrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.inverse">
      <summary>
        <para>The inverse of this matrix (Read Only).</para>
        <para>Inverted matrix is such that if multiplied by the original would result
in identity matrix.If some matrix transforms vectors in a particular way,
then the inverse matrix can transform them back. For example,
Transform's worldToLocalMatrix and localToWorldMatrix
are inverses of each other.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.transpose">
      <summary>
        <para>Returns the transpose of this matrix (Read Only).</para>
        <para>The transposed matrix is the one that has columns exchanged with rows of the
original (i.e. flipped along main diagonal). So, if the original matrix looks like.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.isIdentity">
      <summary>
        <para>Is this the identity matrix?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.zero">
      <summary>
        <para>Returns a matrix with all elements set to zero (Read Only).</para>
        <para>The matrix looks like this:</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Matrix4x4.identity">
      <summary>
        <para>Returns the identity matrix (Read Only).</para>
        <para>This is a matrix that effectively does nothing when applied.
It has 1s in the main diagonal and 0s in all other elements:</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Bounds">
      <summary>
        <para>Represents an axis aligned bounding box.</para>
        <para>An axis-aligned bounding box, or AABB for short, is a box aligned with coordinate axes and fully enclosing
some object. Because the box is never rotated with respect to the axes, it can be defined by just its
center and extents, or alternatively by min and max points./Bounds/ is used by Collider.bounds, Mesh.bounds, Renderer.bounds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates new Bounds with a given <c>center</c> and total <c>size</c>. Bound <see cref="Bounds-extents">extents</see> will be half the given size.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.SetMinMax(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Sets the bounds to the <c>min</c> and <c>max</c> value of the box.</para>
        <para>Using this function is faster than assigning min and max separately.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.Encapsulate(UnityEngine.Vector3)">
      <summary>
        <para>Grows the Bounds to include the <c>point</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.Encapsulate(UnityEngine.Bounds)">
      <summary>
        <para>Grow the bounds to encapsulate the bounds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.Expand(System.Single)">
      <summary>
        <para>Expand the bounds by increasing its <c>size</c> by <c>amount</c> along each side.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.Expand(UnityEngine.Vector3)">
      <summary>
        <para>Expand the bounds by increasing its <c>size</c> by <c>amount</c> along each side.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.Intersects(UnityEngine.Bounds)">
      <summary>
        <para>Does another bounding box intersect with this bounding box?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.Contains(UnityEngine.Vector3)">
      <summary>
        <para>Is <c>point</c> contained in the bounding box?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.SqrDistance(UnityEngine.Vector3)">
      <summary>
        <para>The smallest squared distance between the point and this bounding box.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.IntersectRay(UnityEngine.Ray)">
      <summary>
        <para>Does <c>ray</c> intersect this bounding box?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.IntersectRay(UnityEngine.Ray,System.Single@)">
      <summary>
        <para>Does <c>ray</c> intersect this bounding box?</para>
        <para>When IntersectRay returns true distance will be the distance to the ray's origin.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.ToString">
      <summary>
        <para>Returns a nicely formatted string for the bounds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Bounds.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string for the bounds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.center">
      <summary>
        <para>The center of the bounding box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.size">
      <summary>
        <para>The total size of the box. This is always twice as large as the <see cref="Bounds-extents">extents</see>.</para>
        <para>size.x is the width, size.y is the height and size.z is the depth of the box.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.extents">
      <summary>
        <para>The extents of the box. This is always half of the <see cref="Bounds-size">size</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.min">
      <summary>
        <para>The minimal point of the box. This is always equal to <i>center-extents</i>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Bounds.max">
      <summary>
        <para>The maximal point of the box. This is always equal to <i>center+extents</i>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Vector4">
      <summary>
        <para>Representation of four-dimensional vectors.</para>
        <para>This structure is used in some places to represent four component vectors (e.g. mesh tangents,
parameters for shaders). In the majority of other cases a Vector3 is used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y, z, w components.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.#ctor(System.Single,System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y, z components and sets <c>w</c> to zero.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.#ctor(System.Single,System.Single)">
      <summary>
        <para>Creates a new vector with given x, y components and sets <c>z</c> and <c>w</c> to zero.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Set(System.Single,System.Single,System.Single,System.Single)">
      <summary>
        <para>Set x, y, z and w components of an existing Vector4.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Lerp(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
      <summary>
        <para>Linearly interpolates between two vectors.</para>
        <para>Interpolates between from and to by amount t.t is clamped between [0...1].
When t = 0 returns from.
When t = 1 returns to.
When t = 0.5 returns the average of from and to.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.MoveTowards(UnityEngine.Vector4,UnityEngine.Vector4,System.Single)">
      <summary>
        <para>Moves a point <c>current</c> towards <c>target</c>.</para>
        <para>This is essentially the same as Vector4.Lerp but instead the function will ensure that the speed never exceeds maxDistanceDelta.
Negative values of maxDistanceDelta pushes the vector away from target.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Scale(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Multiplies two vectors component-wise.</para>
        <para>Every component in the result is a component of a multiplied by the same component of b.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Scale(UnityEngine.Vector4)">
      <summary>
        <para>Multiplies every component of this vector by the same component of <c>scale</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Normalize">
      <summary>
        <para>Makes this vector have a <see cref="Vector4-magnitude">magnitude</see> of 1.</para>
        <para>Note that this function will change the current vector. If you
want to keep the current vector unchanged, use normalized variable.If this vector is too small to be normalized it will be set to zero.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.ToString">
      <summary>
        <para>Returns a nicely formatted string for this vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string for this vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Dot(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Dot Product of two vectors.</para>
        <para>Returns lhs.rhs.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Project(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Projects a vector onto another vector.</para>
        <para>Returns a projected onto b.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Distance(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Returns the distance between <c>a</c> and <c>b</c>.</para>
        <para>Vector4.Distance(a,b) is the same as (a-b).magnitude.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Min(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Returns a vector that is made from the smallest components of two vectors.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Vector4.Max(UnityEngine.Vector4,UnityEngine.Vector4)">
      <summary>
        <para>Returns a vector that is made from the largest components of two vectors.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector4.x">
      <summary>
        <para>X component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector4.y">
      <summary>
        <para>Y component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector4.z">
      <summary>
        <para>Z component of the vector.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Vector4.w">
      <summary>
        <para>W component of the vector.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.normalized">
      <summary>
        <para>Returns this vector with a <see cref="Vector4-magnitude">magnitude</see> of 1 (Read Only).</para>
        <para>Note that the current vector is unchanged and a new normalized vector is returned. If you
want to normalize the current vector, use Normalize function.If the vector is too small to be normalized a zero vector will be returned.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.magnitude">
      <summary>
        <para>Returns the length of this vector (Read Only).</para>
        <para>The length of the vector is square root of (x*x+y*y+z*z+w*w).If you only need to compare magnitudes of some vectors, you can compare squared magnitudes of them
using sqrMagnitude (computing squared magnitudes is faster).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.sqrMagnitude">
      <summary>
        <para>Returns the squared length of this vector (Read Only).</para>
        <para>Calculating the squared magnitude instead of the magnitude is much faster.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.zero">
      <summary>
        <para>Shorthand for writing <c>Vector4(0,0,0,0)</c>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Vector4.one">
      <summary>
        <para>Shorthand for writing <c>Vector4(1,1,1,1)</c>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Ray">
      <summary>
        <para>Representation of rays.</para>
        <para>A ray is an infinite line starting at origin and going in some direction.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Ray.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a ray starting at <c>origin</c> along <c>direction</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Ray.GetPoint(System.Single)">
      <summary>
        <para>Returns a point at <c>distance</c> units along the ray.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Ray.ToString">
      <summary>
        <para>Returns a nicely formatted string for this ray.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Ray.ToString(System.String)">
      <summary>
        <para>Returns a nicely formatted string for this ray.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ray.origin">
      <summary>
        <para>The origin point of the ray.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ray.direction">
      <summary>
        <para>The direction of the ray.</para>
        <para>Direction is always a normalized vector. If you assign a vector of non unit length, it will
be normalized.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Ray2D">
      <summary>
        <para>A ray in 2D space.</para>
        <para>A ray is a line segment that extends from a point in space in a specified direction. Rays have a number of uses in Unity but the most common is probably raycasting. This technique involves tracing along the path of a ray from its origin to determine if it intersects with any objects. This is useful for plotting the paths of projectiles, determining lines of sight and implementing many common game mechanics.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Ray2D.#ctor(UnityEngine.Vector2,UnityEngine.Vector2)" />
    <member name="M:UnityEngine.Ray2D.GetPoint(System.Single)">
      <summary>
        <para>Get a point that lies a given distance along a ray.</para>
        <para>The distance is measured away from the ray's origin along its direction.</para>
      </summary>
      <param name="distance">Distance of the desired point along the path of the ray.</param>
    </member>
    <member name="M:UnityEngine.Ray2D.ToString" />
    <member name="M:UnityEngine.Ray2D.ToString(System.String)" />
    <member name="P:UnityEngine.Ray2D.origin">
      <summary>
        <para>The starting point of the ray in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ray2D.direction">
      <summary>
        <para>The direction of the ray in world space.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Plane">
      <summary>
        <para>Representation of a plane in 3D space.</para>
        <para>A plane is an infinitely large, flat surface that exists in 3D space and divides the space into two halves known as half-spaces. It is easy to determine which of the two half-spaces a particular point is in and also how far the point is from the plane. Walls, floors and other flat surfaces are common in games, so a plane is sometimes useful for mathematical calculations with these objects. Also, there are cases where a real surface does not exist but it is useful to imagine that one is there. For example, in sports, a goal line or out-of-bounds line is often assumed to extend into the air, effectively defining a plane.When a plane passes through the &amp;lt;0,0,0&amp;gt; point in world space, it is defined simply by a normal vector that determines which way it faces. It is easy to visualise this if you imagine looking at the plane edge-on.Note that the side from which the normal vector points is important since it is used to identify which half-space a point is in (ie, on the positive or "normal" side of the plane or the other side). When the plane doesn't pass through &amp;lt;0,0,0&amp;gt; it can be defined by the normal vector along with a distance from &amp;lt;0,0,0&amp;gt;A plane can also be defined by the three corner points of a triangle that lies within the plane. In this case, the normal vector points toward you if the corner points go around clockwise as you look at the triangle face-on..</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Plane.#ctor(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a plane.</para>
        <para>Resulting plane has normal inNormal and goes through a point inPoint./inNormal/ must be a normalized vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Plane.#ctor(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Creates a plane.</para>
        <para>Resulting plane has normal inNormal and distance d./inNormal/ must be a normalized vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Plane.#ctor(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Creates a plane.</para>
        <para>The resulting plane goes through the given three points. The points go around clockwise as you look down on the top surface of the plane.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Plane.SetNormalAndPosition(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Sets a plane using a point that lies within it along with a normal to orient it.</para>
        <para>Note that the normal must be a normalised vector.</para>
      </summary>
      <param name="inNormal">The plane's normal vector.</param>
      <param name="inPoint">A point that lies on the plane.</param>
    </member>
    <member name="M:UnityEngine.Plane.Set3Points(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Sets a plane using three points that lie within it.  The points go around clockwise as you look down on the top surface of the plane.</para>
      </summary>
      <param name="a">First point in clockwise order.</param>
      <param name="b">Second point in clockwise order.</param>
      <param name="c">Third point in clockwise order.</param>
    </member>
    <member name="M:UnityEngine.Plane.GetDistanceToPoint(UnityEngine.Vector3)">
      <summary>
        <para>Returns a signed distance from plane to point.</para>
        <para>The value returned is positive if the point is on the side of the plane into which the plane's 
normal is facing, and negative otherwise.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Plane.GetSide(UnityEngine.Vector3)">
      <summary>
        <para>Is a point on the positive side of the plane?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Plane.SameSide(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Are two points on the same side of the plane?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Plane.Raycast(UnityEngine.Ray,System.Single@)">
      <summary>
        <para>Intersects a ray with the plane.</para>
        <para>This function sets enter to the distance along the ray, where it intersects the plane.
If the ray is parallel to the plane, function returns false and sets enter to zero.
If the ray is pointing in the opposite direction than the plane, function returns false 
and sets enter to the distance along the ray (negative value).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Plane.normal">
      <summary>
        <para>Normal vector of the plane.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Plane.distance">
      <summary>
        <para>Distance from the origin to the plane.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Mathf">
      <summary>
        <para>A collection of common math functions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Sin(System.Single)">
      <summary>
        <para>Returns the sine of angle <c>f</c> in radians.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Cos(System.Single)">
      <summary>
        <para>Returns the cosine of angle <c>f</c> in radians.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Tan(System.Single)">
      <summary>
        <para>Returns the tangent of angle <c>f</c> in radians.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Asin(System.Single)">
      <summary>
        <para>Returns the arc-sine of <c>f</c> - the angle in radians whose sine is <c>f</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Acos(System.Single)">
      <summary>
        <para>Returns the arc-cosine of <c>f</c> - the angle in radians whose cosine is <c>f</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Atan(System.Single)">
      <summary>
        <para>Returns the arc-tangent of <c>f</c> - the angle in radians whose tangent is <c>f</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Atan2(System.Single,System.Single)">
      <summary>
        <para>Returns the angle in radians whose <see cref="Mathf.Tan">Tan</see> is <c>y/x</c>.</para>
        <para>Return value is the angle between the x-axis and a 2D vector starting at zero and terminating
at (x,y).Note that this function takes account of the cases where x is zero and returns the correct angle rather than throwing a division by zero exception.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Sqrt(System.Single)">
      <summary>
        <para>Returns square root of <c>f</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Abs(System.Single)">
      <summary>
        <para>Returns the absolute value of <c>f</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Abs(System.Int32)">
      <summary>
        <para>Returns the absolute value of <c>value</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Min(System.Single,System.Single)">
      <summary>
        <para>Returns the smallest of two or more values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Min(System.Single[])">
      <summary>
        <para>Returns the smallest of two or more values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Min(System.Int32,System.Int32)">
      <summary>
        <para>Returns the smallest of two or more values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Min(System.Int32[])">
      <summary>
        <para>Returns the smallest of two or more values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Max(System.Single,System.Single)">
      <summary>
        <para>Returns largest of two or more values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Max(System.Single[])">
      <summary>
        <para>Returns largest of two or more values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Max(System.Int32,System.Int32)">
      <summary>
        <para>Returns the largest of two or more values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Max(System.Int32[])">
      <summary>
        <para>Returns the largest of two or more values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Pow(System.Single,System.Single)">
      <summary>
        <para>Returns <c>f</c> raised to power <c>p</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Exp(System.Single)">
      <summary>
        <para>Returns e raised to the specified power.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Log(System.Single,System.Single)">
      <summary>
        <para>Returns the logarithm of a specified number in a specified base.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Log(System.Single)">
      <summary>
        <para>Returns the natural (base e) logarithm of a specified number.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Log10(System.Single)">
      <summary>
        <para>Returns the base 10 logarithm of a specified number.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Ceil(System.Single)">
      <summary>
        <para>Returns the smallest integer greater to or equal to <c>f</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Floor(System.Single)">
      <summary>
        <para>Returns the largest integer smaller to or equal to <c>f</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Round(System.Single)">
      <summary>
        <para>Returns <c>f</c> rounded to the nearest integer.</para>
        <para>If the number ends in .5 so it is halfway between two integers, one of which is even and the other odd, the even number is returned.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.CeilToInt(System.Single)">
      <summary>
        <para>Returns the smallest integer greater to or equal to <c>f</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.FloorToInt(System.Single)">
      <summary>
        <para>Returns the largest integer smaller to or equal to <c>f</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.RoundToInt(System.Single)">
      <summary>
        <para>Returns <c>f</c> rounded to the nearest integer.</para>
        <para>If the number ends in .5 so it is halfway between two integers, one of which is even and the other odd, the even number is returned.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Sign(System.Single)">
      <summary>
        <para>Returns the sign of <c>f</c>.</para>
        <para>Return value is 1 when f is positive or zero, -1 when f is negative.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Clamp(System.Single,System.Single,System.Single)">
      <summary>
        <para>Clamps a value between a minimum float and maximum float value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Clamp(System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Clamps value between min and max and returns value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Clamp01(System.Single)">
      <summary>
        <para>Clamps value between 0 and 1 and returns value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Lerp(System.Single,System.Single,System.Single)">
      <summary>
        <para>Interpolates between <c>a</c> and <c>b</c> by <c>t</c>. <c>t</c> is clamped between 0 and 1.</para>
        <para>When t = 0 returns from.
When t = 1 return to.
When t = 0.5 returns the average of a and b.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.LerpAngle(System.Single,System.Single,System.Single)">
      <summary>
        <para>Same as <see cref="Mathf.Lerp">Lerp</see> but makes sure the values interpolate correctly when they wrap around 360 degrees.</para>
        <para>Variables a and b are assumed to be in degrees.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.MoveTowards(System.Single,System.Single,System.Single)">
      <summary>
        <para>Moves a value <c>current</c> towards <c>target</c>.</para>
        <para>This is essentially the same as Mathf.Lerp but instead the function will ensure that the speed never exceeds maxDelta.
Negative values of maxDelta pushes the value away from target.</para>
      </summary>
      <param name="current">The current value.</param>
      <param name="target">The value to move towards.</param>
      <param name="maxDelta">The maximum change that should be applied to the value.</param>
    </member>
    <member name="M:UnityEngine.Mathf.MoveTowardsAngle(System.Single,System.Single,System.Single)">
      <summary>
        <para>Same as <see cref="Mathf.MoveTowards">MoveTowards</see> but makes sure the values interpolate correctly when they wrap around 360 degrees.</para>
        <para>Variables current and target are assumed to be in degrees.
For optimization reasons, negative values of maxDelta are not supported and may cause oscillation. To push current away from a target angle, add 180 to that angle instead.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothStep(System.Single,System.Single,System.Single)">
      <summary>
        <para>Interpolates between <c>min</c> and <c>max</c> with smoothing at the limits.</para>
        <para>This function interpolates between min and max in a similar way to Lerp.
However, the interpolation will gradually speed up from the start and slow down toward the end.
This is useful for creating natural-looking animation, fading and other transitions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.Approximately(System.Single,System.Single)">
      <summary>
        <para>Compares two floating point values if they are similar.</para>
        <para>Due to floating point imprecision it is not recommended to compare floats using the equal operator.
eg. 1.0 == 10.0 / 10.0 might not return true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a value towards a desired goal over time.</para>
        <para>The value is smoothed by some spring-damper like function, which will never overshoot.
The function can be used to smooth any kind of value, positions, colors, scalars.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single)">
      <summary>
        <para>Gradually changes a value towards a desired goal over time.</para>
        <para>The value is smoothed by some spring-damper like function, which will never overshoot.
The function can be used to smooth any kind of value, positions, colors, scalars.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDamp(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
      <summary>
        <para>Gradually changes a value towards a desired goal over time.</para>
        <para>The value is smoothed by some spring-damper like function, which will never overshoot.
The function can be used to smooth any kind of value, positions, colors, scalars.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single)">
      <summary>
        <para>Gradually changes an angle given in degrees towards a desired goal angle over time.</para>
        <para>The value is smoothed by some spring-damper like function. The function can be used to smooth any kind of value, positions, colors, scalars.
The most common use is for smoothing a follow camera.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single)">
      <summary>
        <para>Gradually changes an angle given in degrees towards a desired goal angle over time.</para>
        <para>The value is smoothed by some spring-damper like function. The function can be used to smooth any kind of value, positions, colors, scalars.
The most common use is for smoothing a follow camera.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
    </member>
    <member name="M:UnityEngine.Mathf.SmoothDampAngle(System.Single,System.Single,System.Single@,System.Single,System.Single,System.Single)">
      <summary>
        <para>Gradually changes an angle given in degrees towards a desired goal angle over time.</para>
        <para>The value is smoothed by some spring-damper like function. The function can be used to smooth any kind of value, positions, colors, scalars.
The most common use is for smoothing a follow camera.</para>
      </summary>
      <param name="current">The current position.</param>
      <param name="target">The position we are trying to reach.</param>
      <param name="currentVelocity">The current velocity, this value is modified by the function every time you call it.</param>
      <param name="smoothTime">Approximately the time it will take to reach the target. A smaller value will reach the target faster.</param>
      <param name="maxSpeed">Optionally allows you to clamp the maximum speed.</param>
      <param name="deltaTime">The time since the last call to this function. By default Time.deltaTime.</param>
    </member>
    <member name="M:UnityEngine.Mathf.Repeat(System.Single,System.Single)">
      <summary>
        <para>Loops the value t, so that it is never larger than length and never smaller than 0.</para>
        <para>This is similar to the modulo operator but it works with floating point numbers. For example, using 3.0 for t and 2.5 for length, the result would be 0.5. With t = 5 and length = 2.5, the result would be 0.0. Note, however, that the behaviour is not defined for negative numbers as it is for the modulo operator.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.PingPong(System.Single,System.Single)">
      <summary>
        <para>PingPongs the value t, so that it is never larger than length and never smaller than 0.</para>
        <para>The returned value will move back and forth between 0 and length.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.InverseLerp(System.Single,System.Single,System.Single)">
      <summary>
        <para>Calculates the <see cref="Mathf.Lerp">Lerp</see> parameter between of two values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.ClosestPowerOfTwo(System.Int32)">
      <summary>
        <para>Returns the closest power of two value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.GammaToLinearSpace(System.Single)">
      <summary>
        <para>Converts the given value from gamma to linear color space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.LinearToGammaSpace(System.Single)">
      <summary>
        <para>Converts the given value from linear to gamma color space.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.IsPowerOfTwo(System.Int32)">
      <summary>
        <para>Returns true if the value is power of two.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.NextPowerOfTwo(System.Int32)">
      <summary>
        <para>Returns the next power of two value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.DeltaAngle(System.Single,System.Single)">
      <summary>
        <para>Calculates the shortest difference between two given angles.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Mathf.PerlinNoise(System.Single,System.Single)">
      <summary>
        <para>Generate 2D Perlin noise.</para>
        <para>Perlin noise is a pseudo-random pattern of float values generated across a 2D plane (although
the technique does generalise to three or more dimensions, this is not implemented in Unity).
The noise does not contain a completely random value at each point but rather consists
of "waves" whose values gradually increase and decrease across the pattern. The noise can
be used as the basis for texture effects but also for animation, generating terrain heightmaps
and many other things.Perlin noise sampled in the range 0..10 (the greyscale values represent values from 0..1)Any point in the plane can be sampled by passing the appropriate X and Y coordinates. The
same coordinates will always return the same sample value but the plane is essentially infinite
so it is easy to avoid repetition by choosing a random area to sample from.</para>
      </summary>
      <returns>
        <para>Value between 0.0 and 1.0.</para>
      </returns>
    </member>
    <member name="F:UnityEngine.Mathf.PI">
      <summary>
        <para>The infamous <i>3.14159265358979...</i> value (Read Only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Mathf.Infinity">
      <summary>
        <para>A representation of positive infinity (Read Only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Mathf.NegativeInfinity">
      <summary>
        <para>A representation of negative infinity (Read Only).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Mathf.Deg2Rad">
      <summary>
        <para>Degrees-to-radians conversion constant (Read Only).</para>
        <para>This is equal to (PI * 2) / 360.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Mathf.Rad2Deg">
      <summary>
        <para>Radians-to-degrees conversion constant (Read Only).</para>
        <para>This is equal to 360 / (PI * 2).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Mathf.Epsilon">
      <summary>
        <para>A tiny floating point value (Read Only).</para>
        <para>The smallest value that a float can have different from zero.With the following rules: - anyValue + Epsilon = anyValue
- anyValue - Epsilon = anyValue
- 0 + Epsilon = Epsilon
- 0 - Epsilon = -EpsilonA value Between any number and Epsilon will result in an arbitrary number due to
truncating errors.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RPCMode">
      <summary>
        <para>Option for who will receive an <see cref="RPC">RPC</see>, used by NetworkView.RPC.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RPCMode.Server">
      <summary>
        <para>Sends to the server only.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RPCMode.Others">
      <summary>
        <para>Sends to everyone except the sender.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RPCMode.OthersBuffered">
      <summary>
        <para>Sends to everyone except the sender and adds to the buffer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RPCMode.All">
      <summary>
        <para>Sends to everyone.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RPCMode.AllBuffered">
      <summary>
        <para>Sends to everyone and adds to the buffer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ConnectionTesterStatus">
      <summary>
        <para>The various test results the connection tester may return with.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConnectionTesterStatus.Error">
      <summary>
        <para>Some unknown error occurred.</para>
        <para>Possibly there is no network connectivity available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConnectionTesterStatus.Undetermined">
      <summary>
        <para>Test result undetermined, still in progress.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConnectionTesterStatus.PublicIPIsConnectable">
      <summary>
        <para>Public IP address detected and game listen port is accessible to the internet.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConnectionTesterStatus.PublicIPPortBlocked">
      <summary>
        <para>Public IP address detected but the port is not connectable from the internet.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConnectionTesterStatus.PublicIPNoServerStarted">
      <summary>
        <para>Public IP address detected but server is not initialized and no port is listening.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConnectionTesterStatus.LimitedNATPunchthroughPortRestricted">
      <summary>
        <para>Port-restricted NAT type, can do NAT punchthrough to everyone except symmetric.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConnectionTesterStatus.LimitedNATPunchthroughSymmetric">
      <summary>
        <para>Symmetric NAT type, cannot do NAT punchthrough to other symmetric types nor port restricted type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConnectionTesterStatus.NATpunchthroughFullCone">
      <summary>
        <para>Full cone type, NAT punchthrough fully supported.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ConnectionTesterStatus.NATpunchthroughAddressRestrictedCone">
      <summary>
        <para>Address-restricted cone type, NAT punchthrough fully supported.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkConnectionError">
      <summary>
        <para>Possible status messages returned by Network.Connect and in <see cref="MonoBehaviour.OnFailedToConnect">OnFailedToConnect</see> in case the error was not immediate.</para>
        <para>Also used by the MasterServer in OnFailedToConnectToMasterServer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.NoError">
      <summary>
        <para>No error occurred.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.RSAPublicKeyMismatch">
      <summary>
        <para>We presented an RSA public key which does not match what the system we connected to is using.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.InvalidPassword">
      <summary>
        <para>The server is using a password and has refused our connection because we did not set the correct password.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.ConnectionFailed">
      <summary>
        <para>Connection attempt failed, possibly because of internal connectivity problems.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.TooManyConnectedPlayers">
      <summary>
        <para>The server is at full capacity, failed to connect.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.ConnectionBanned">
      <summary>
        <para>We are banned from the system we attempted to connect to (likely temporarily).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.AlreadyConnectedToServer">
      <summary>
        <para>We are already connected to this particular server (can happen after fast disconnect/reconnect).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.AlreadyConnectedToAnotherServer">
      <summary>
        <para>Cannot connect to two servers at once. Close the connection before connecting again.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.CreateSocketOrThreadFailure">
      <summary>
        <para>Internal error while attempting to initialize network interface. Socket possibly already in use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.IncorrectParameters">
      <summary>
        <para>Incorrect parameters given to Connect function.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.EmptyConnectTarget">
      <summary>
        <para>No host target given in Connect.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.InternalDirectConnectFailed">
      <summary>
        <para>Client could not connect internally to same network NAT enabled server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.NATTargetNotConnected">
      <summary>
        <para>The NAT target we are trying to connect to is not connected to the facilitator server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.NATTargetConnectionLost">
      <summary>
        <para>Connection lost while attempting to connect to NAT target.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkConnectionError.NATPunchthroughFailed">
      <summary>
        <para>NAT punchthrough attempt has failed. The cause could be a too restrictive NAT implementation on either endpoints.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkDisconnection">
      <summary>
        <para>The reason a disconnect event occured, like in <see cref="MonoBehaviour.OnDisconnectedFromServer">OnDisconnectedFromServer</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkDisconnection.LostConnection">
      <summary>
        <para>The connection to the system has been lost, no reliable packets could be delivered.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkDisconnection.Disconnected">
      <summary>
        <para>The connection to the system has been closed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MasterServerEvent">
      <summary>
        <para>Describes status messages from the master server as returned in <see cref="MonoBehaviour.OnMasterServerEvent">OnMasterServerEvent</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MasterServerEvent.RegistrationFailedGameName">
      <summary>
        <para>Registration failed because an empty game name was given.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MasterServerEvent.RegistrationFailedGameType">
      <summary>
        <para>Registration failed because an empty game type was given.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MasterServerEvent.RegistrationFailedNoServer">
      <summary>
        <para>Registration failed because no server is running.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MasterServerEvent.RegistrationSucceeded">
      <summary>
        <para>Registration to master server succeeded, received confirmation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.MasterServerEvent.HostListReceived">
      <summary>
        <para>Received a host list from the master server.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkStateSynchronization">
      <summary>
        <para>Different types of synchronization for the <see cref="NetworkView">NetworkView</see> component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkStateSynchronization.Off">
      <summary>
        <para>No state data will be synchronized.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkStateSynchronization.ReliableDeltaCompressed">
      <summary>
        <para>All packets are sent reliable and ordered.</para>
        <para>Delta compression is used to send only the difference between the last sent state and the current state.
For example if you synchronize a Transform. Scale x, y, z is most likely going to keep the same value.
Unity compares the state received by the client to the new state, if it is changed 1 bit and the data will be sent.
If it didn't change only a single bit will be sent.
When Unity detects that nothing has changed since the last state, no data will be sent at all.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkStateSynchronization.Unreliable">
      <summary>
        <para>Brute force unreliable state sending.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkPeerType">
      <summary>
        <para>Describes the status of the network interface peer type as returned by Network.peerType.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkPeerType.Disconnected">
      <summary>
        <para>No client connection running. Server not initialized.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkPeerType.Server">
      <summary>
        <para>Running as server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkPeerType.Client">
      <summary>
        <para>Running as client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkPeerType.Connecting">
      <summary>
        <para>Attempting to connect to a server.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkLogLevel">
      <summary>
        <para>Describes different levels of log information the network layer supports.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkLogLevel.Off">
      <summary>
        <para>Only report errors, otherwise silent.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkLogLevel.Informational">
      <summary>
        <para>Report informational messages like connectivity events.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkLogLevel.Full">
      <summary>
        <para>Full debug level logging down to each individual message being reported.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkPlayer">
      <summary>
        <para>The NetworkPlayer is a data structure with which you can locate another player over the network.</para>
        <para>With this you can, for example, send a message directly to another player.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NetworkPlayer.ToString">
      <summary>
        <para>Returns the index number for this network player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.ipAddress">
      <summary>
        <para>The IP address of this player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.port">
      <summary>
        <para>The port of this player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.guid">
      <summary>
        <para>The GUID for this player, used when connecting with NAT punchthrough.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.externalIP">
      <summary>
        <para>Returns the external IP address of the network interface.</para>
        <para>This will only be populated after some external connection has been made.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkPlayer.externalPort">
      <summary>
        <para>Returns the external port of the network interface.</para>
        <para>This will only be populated after some external connection has been made.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkViewID">
      <summary>
        <para>The NetworkViewID is a unique identifier for a network view instance in a multiplayer game.</para>
        <para>It is imporatant that this is a unique number accross all clients and that they can generate
these numbers themselves, or else network synchronization will break.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NetworkViewID.ToString">
      <summary>
        <para>Returns a formatted string with details on this NetworkViewID.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkViewID.unassigned">
      <summary>
        <para>Represents an invalid network view ID.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkViewID.isMine">
      <summary>
        <para>True if instantiated by me.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkViewID.owner">
      <summary>
        <para>The <see cref="NetworkPlayer">NetworkPlayer</see> who owns the <see cref="NetworkView">NetworkView</see>. Could be the server.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Ping">
      <summary>
        <para>Ping any given IP address (given in dot notation).</para>
        <para>The ping operation is asynchronous and a ping object can be polled for status using Ping.isDone. 
When a response is received it is in Ping.time.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Ping.#ctor(System.String)">
      <summary>
        <para>Perform a ping to the supplied target IP address.</para>
        <para>This does not perform DNS lookups on host names so it only
accepts IP addresses in dot notation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ping.isDone">
      <summary>
        <para>Has the ping function completed?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ping.time">
      <summary>
        <para>This property contains the ping time result after isDone returns true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Ping.ip">
      <summary>
        <para>The IP target of the ping.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkView">
      <summary>
        <para>The network view is the binding material of multiplayer games.</para>
        <para>With this you can define exactly what is to be synchronized over the network and how
it should be done. Game objects can have NetworkView components which can be
configured to watch other components for the object. 
For more information see the  Network View manual page and the component reference page.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NetworkView.RPC(System.String,UnityEngine.RPCMode,System.Object[])">
      <summary>
        <para>Call a <see cref="RPC">RPC</see> function on all connected peers.</para>
        <para>The called function must have the @RPC tag set ([RPC] for C Sharp code).
A NetworkView must be attached to the GameObject where the RPC function is being called. It doesn't matter if the NetworkView is being used for something else or just for the RPC function. If it is just for the RPC function, state synchronization should be turned off and the observed property can be set to none.
RPC function names should be unique accross the scene, if two RPC functions in different scripts 
have the same name only one of them is called when RPC is invoked.
RPC calls are always guaranteed to be executed in the same order as they are sent.
The communication group set for the network view, with NetworkView.group, is used for the RPC call.
To get information on the RPC itelf, you can add a NetworkMessageInfo parameter to the function declaration
which will automatically contain the information. You don't need to change the way you call the RPC
function when you do this. For more information see the RPC section of the manual.
Valid RPC parameters are int, float, string, NetworkPlayer, NetworkViewID, Vector3 and Quaternion.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NetworkView.RPC(System.String,UnityEngine.NetworkPlayer,System.Object[])">
      <summary>
        <para>Call a RPC function on a specific player.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NetworkView.SetScope(UnityEngine.NetworkPlayer,System.Boolean)">
      <summary>
        <para>Set the scope of the network view in relation to a specific network player.</para>
        <para>This can be used to implement relevant sets. Either set it to true or false depending
on if you want the player to receive updates from the network view or not.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NetworkView.Find(UnityEngine.NetworkViewID)">
      <summary>
        <para>Find a network view based on a <see cref="NetworkViewID">NetworkViewID</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.observed">
      <summary>
        <para>The component the network view is observing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.stateSynchronization">
      <summary>
        <para>The type of <see cref="NetworkStateSynchronization">NetworkStateSynchronization</see> set for this network view.</para>
        <para>It is your repsonsibility to ensure that NetworkView's across all machines use the same reliability method.
Do not change state reliability on the fly after state synchronization has already happened.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.viewID">
      <summary>
        <para>The ViewID of this network view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.group">
      <summary>
        <para>The network group number of this network view.</para>
        <para>All network messages and RPC calls go through this group number.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.isMine">
      <summary>
        <para>Is the network view controlled by this object?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkView.owner">
      <summary>
        <para>The <see cref="NetworkPlayer">NetworkPlayer</see> who owns this network view.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Network">
      <summary>
        <para>The network class is at the heart of the network implementation and provides the core functions.</para>
        <para>This class configures the network interface and all the network parameters. You use it to set up a
server or connect to one and have a row of helper functions to help you with those tasks. 
For more information on what is exposed in the editor see the Network Manger component reference.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.InitializeServer(System.Int32,System.Int32,System.Boolean)">
      <summary>
        <para>Initialize the server.</para>
        <para>/connections/ is the number of allowed incoming connections (note that this is generally not the same as the number of players).
/listenPort/ is the port number we want to listen to.
/useNat/ sets the NAT punchthrough functionality. If you want this server to be able to accept 
connections using NAT punchthrough, using the facilitator, set this to true.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.InitializeSecurity">
      <summary>
        <para>Initializes security layer.</para>
        <para>You need to call this function on the server before calling Network.InitializeServer. Don't call this function on the client.Once your online game reaches a certain popularity people will try to cheat. You will need to account for this both at the game layer and at the network layer.
Unity handles the network layer by providing secure connections if you wish to use them.
* Uses AES encryption. Prevents unauthorized reads and blocks replay attacks
* Adds CRCs so that data tampering can be detected.
* Uses randomized, encrypted SYNCookies to prevent unauthorized logins.
* Uses RSA encryption to protect the AES key.
Most games will want to use secure connections.
However, they add up to 15 bytes per packet and take time to compute so you may wish to limit usage to deployed games only.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String,System.Int32)">
      <summary>
        <para>Connect to the specified host (ip or domain name) and server port.</para>
        <para>The parameters are the IP address of the host. Either a dotted IP address or a domain name.
/remotePort/, which specifies the port on the remote machine to connect to.
/password/, which is an optional password for the server. The password has to match the Network.incomingPassword set on the server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String,System.Int32,System.String)">
      <summary>
        <para>Connect to the specified host (ip or domain name) and server port.</para>
        <para>The parameters are the IP address of the host. Either a dotted IP address or a domain name.
/remotePort/, which specifies the port on the remote machine to connect to.
/password/, which is an optional password for the server. The password has to match the Network.incomingPassword set on the server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String[],System.Int32)">
      <summary>
        <para>This function is exactly like Network.Connect but can accept an array of IP addresses.</para>
        <para>It can be used when the host information from a master server returns multiple internal IP addresses, then the IP data structure can be
passed directly into this connect function. It actually connects to the first IP which responds to a ping (i.e. is connectable).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String[],System.Int32,System.String)">
      <summary>
        <para>This function is exactly like Network.Connect but can accept an array of IP addresses.</para>
        <para>It can be used when the host information from a master server returns multiple internal IP addresses, then the IP data structure can be
passed directly into this connect function. It actually connects to the first IP which responds to a ping (i.e. is connectable).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String)">
      <summary>
        <para>Connect to a server GUID. NAT punchthrough can only be performed this way.</para>
        <para>The host GUID value is exposed locally through the NetworkPlayer structure. The master server also provides this in the HostData structure.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Connect(System.String,System.String)">
      <summary>
        <para>Connect to a server GUID. NAT punchthrough can only be performed this way.</para>
        <para>The host GUID value is exposed locally through the NetworkPlayer structure. The master server also provides this in the HostData structure.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Connect(UnityEngine.HostData)">
      <summary>
        <para>Connect to the host represented by a <see cref="HostData">HostData</see> structure returned by the Master Server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Connect(UnityEngine.HostData,System.String)">
      <summary>
        <para>Connect to the host represented by a <see cref="HostData">HostData</see> structure returned by the Master Server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Disconnect(System.Int32)">
      <summary>
        <para>Close all open connections and shuts down the network interface.</para>
        <para>The timeout parameter indicates how much time in milliseconds the network interface gets to signal to others that it is disconnecting.
The network state, like security and password, is also reset.Note that if you set the timeout to 0 the network interface will shut down before the disconnect notification can
be sent to the remote party. For a client this could mean he cannot reconnect to the server as the server thinks
he is still connected (after a certain interval the connection will be detected as dropped).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Disconnect">
      <summary>
        <para>Close all open connections and shuts down the network interface.</para>
        <para>The timeout parameter indicates how much time in milliseconds the network interface gets to signal to others that it is disconnecting.
The network state, like security and password, is also reset.Note that if you set the timeout to 0 the network interface will shut down before the disconnect notification can
be sent to the remote party. For a client this could mean he cannot reconnect to the server as the server thinks
he is still connected (after a certain interval the connection will be detected as dropped).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.CloseConnection(UnityEngine.NetworkPlayer,System.Boolean)">
      <summary>
        <para>Close the connection to another system.</para>
        <para>/target/ defines which system to close the connection to. If we are a client the only possible
connection to close is the server connection, if we are a server the target player will be kicked off.
/sendDisconnectionNotification/, enables or disables notifications being sent to the other end. If disabled the connection is dropped, if not a disconnect notification is reliably sent to the remote party and there after the connection is dropped.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.AllocateViewID">
      <summary>
        <para>Query for the next available network view ID number and allocate it (reserve).</para>
        <para>This number can then be assigned to the network view of an instantiated object. The example below demonstrates a simple
method to do this. Note that for this to work there must be a NetworkView attached to the object which has this script
and it must have the script as its observed property. There must be a Cube prefab present also with a NetworkView which
watches something (like the Transform of the Cube). The cubePrefab variable in the script must be set to that cube prefab. This 
is the simplest method of using AllocateViewID intelligently.
This get more complicated if there were more than one NetworkView attached to the Cube which is to be instantiated.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion,System.Int32)">
      <summary>
        <para>Network instantiate a prefab.</para>
        <para>The given prefab will be instanted on all clients in the game. Synchronization is automatically set up so there is no
extra work involved. The position, rotation and network group number are given as parameters. Note that in the example below there must
be something set to the playerPrefab in the Editor. You can read more about instantiations in the object reference Object.Instantiate.Internally this is a buffered RPC call. You can use Network.RemoveRPCs is with the group number to 
remove the call from the buffer. Alternatively you can call Network.RemoveRPCs on the first NetworkViewID in the instantiated
prefab. When the instantiation occurs internally the buffered RPC message is linked to the first NetworkView of the prefab which
makes this possible.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Destroy(UnityEngine.NetworkViewID)">
      <summary>
        <para>Destroy the object associated with this view ID across the network.</para>
        <para>The object is destroyed locally and remotely.Note that this does not remove any RPCs accociated with the object or NetworkViewID, these have to be explicitly removed
with the Network.RemoveRPCs method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.Destroy(UnityEngine.GameObject)">
      <summary>
        <para>Destroy the object across the network.</para>
        <para>The object is destroyed locally and remotely.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.DestroyPlayerObjects(UnityEngine.NetworkPlayer)">
      <summary>
        <para>Destroy all the objects based on view IDs belonging to this player.</para>
        <para>This should only be called when running as a server. It is, for example, meant to to clean up networked objects left by
a disconnected player.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.RemoveRPCs(UnityEngine.NetworkPlayer)">
      <summary>
        <para>Remove all <see cref="RPC">RPC</see> functions which belong to this player ID.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.RemoveRPCs(UnityEngine.NetworkPlayer,System.Int32)">
      <summary>
        <para>Remove all <see cref="RPC">RPC</see> functions which belong to this player ID and were sent based on the given group.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.RemoveRPCs(UnityEngine.NetworkViewID)">
      <summary>
        <para>Remove the <see cref="RPC">RPC</see> function calls accociated with this view ID number.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.RemoveRPCsInGroup(System.Int32)">
      <summary>
        <para>Remove all <see cref="RPC">RPC</see> functions which belong to given group number.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.SetLevelPrefix(System.Int32)">
      <summary>
        <para>Set the level prefix which will then be prefixed to all network ViewID numbers.</para>
        <para>This offers protection to prevent old network updates from straying from into a new level from the previous level.
This can be set to any number and then incremented with each new level load. This doesn't add overhead to
network traffic but just diminishes the pool of network ViewID numbers a little bit.
The Network level loading page has an example of how to use this function.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.GetLastPing(UnityEngine.NetworkPlayer)">
      <summary>
        <para>The last ping time to the given <c>player</c> in milliseconds.</para>
        <para>If the player can't be found -1 will be returned.
Pings are automatically sent out every couple of seconds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.GetAveragePing(UnityEngine.NetworkPlayer)">
      <summary>
        <para>The last average ping time to the given <c>player</c> in milliseconds.</para>
        <para>If the player can't be found -1 will be returned.
Pings are automatically sent out every couple of seconds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.SetReceivingEnabled(UnityEngine.NetworkPlayer,System.Int32,System.Boolean)">
      <summary>
        <para>Enable or disables the reception of messages in a specific group number from a specific player.</para>
        <para>You can use the when you do not want any network messages coming in for processing at the moment, and then enable it later
when you are ready. This is useful to stop network messages until a level is loaded, for example.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.SetSendingEnabled(System.Int32,System.Boolean)">
      <summary>
        <para>Enables or disables transmission of messages and <see cref="RPC">RPC</see> calls on a specific network group number.</para>
        <para>This can be set when you know you are not sending anything useful to other clients, such as before
you have loaded you level completely.
The Network level loading page has an example of how to use this function.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.SetSendingEnabled(UnityEngine.NetworkPlayer,System.Int32,System.Boolean)">
      <summary>
        <para>Enable or disable transmission of messages and <see cref="RPC">RPC</see> calls based on target network player as well as the network group.</para>
        <para>When used on a client, the only NetworkPlayer possible is the server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.TestConnection(System.Boolean)">
      <summary>
        <para>Test this machines network connection.</para>
        <para>Two types of tests are performed depending on if the machine has a public IP address present or if it only has a private address (or addresses). The public IP address test is primarily for when running a server as no tests are needed for clients with public addresses. In order
for the public IP test to succeed a server instance must be started. A test server will try to connect to the
IP and port of the local server and thus it is shown in the server is connectable. If not then a firewall is most likely
blocking the server port. A server instance needs to be running so that the test server has something to connect
to.The other test is for checking NAT punchthrough capabilities. This is a valid test for both servers and clients
and can be performed without any prior setup. There are 4 types of NAT test results (see ConnectionTesterStatus): __Full Cone_, Address Restricted Cone, Port restricted and 
Symmetric.First two types offer full NAT punchthrough support and can connect to any type. Port restricted type cannot connect to or receive a connection from symmetric
type. Symmetric if worst and cannot connect to other symmetric types or port restricted type. The latter two are labelled
as offering limited NAT punchthrough support.This function is asynchronous and might not return a valid result right away because the tests needs
some time to complete (1-2 seconds). After test completion the test result is only returned when the function is called again, 
a full network test is not redone. That way it is safe to poll the function frequently. If another test is desired, 
like if the network connection has been altered, then the forceTest parameter should be passed as true.The function returns a ConnectionTesterStatus enum.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.TestConnection">
      <summary>
        <para>Test this machines network connection.</para>
        <para>Two types of tests are performed depending on if the machine has a public IP address present or if it only has a private address (or addresses). The public IP address test is primarily for when running a server as no tests are needed for clients with public addresses. In order
for the public IP test to succeed a server instance must be started. A test server will try to connect to the
IP and port of the local server and thus it is shown in the server is connectable. If not then a firewall is most likely
blocking the server port. A server instance needs to be running so that the test server has something to connect
to.The other test is for checking NAT punchthrough capabilities. This is a valid test for both servers and clients
and can be performed without any prior setup. There are 4 types of NAT test results (see ConnectionTesterStatus): __Full Cone_, Address Restricted Cone, Port restricted and 
Symmetric.First two types offer full NAT punchthrough support and can connect to any type. Port restricted type cannot connect to or receive a connection from symmetric
type. Symmetric if worst and cannot connect to other symmetric types or port restricted type. The latter two are labelled
as offering limited NAT punchthrough support.This function is asynchronous and might not return a valid result right away because the tests needs
some time to complete (1-2 seconds). After test completion the test result is only returned when the function is called again, 
a full network test is not redone. That way it is safe to poll the function frequently. If another test is desired, 
like if the network connection has been altered, then the forceTest parameter should be passed as true.The function returns a ConnectionTesterStatus enum.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.TestConnectionNAT(System.Boolean)">
      <summary>
        <para>Test the connecction specifically for NAT punchthrough connectivity.</para>
        <para>This is like Network.TestConnection except that a NAT punchthrough test is forced, even through the
machine does not have a NAT address (private IP address) but a public address. See Network.TestConnection example code.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.TestConnectionNAT">
      <summary>
        <para>Test the connecction specifically for NAT punchthrough connectivity.</para>
        <para>This is like Network.TestConnection except that a NAT punchthrough test is forced, even through the
machine does not have a NAT address (private IP address) but a public address. See Network.TestConnection example code.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Network.HavePublicAddress">
      <summary>
        <para>Check if this machine has a public IP address.</para>
        <para>It checks all the network interfaces for IPv4 public addresses and returns true if one address is found.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.incomingPassword">
      <summary>
        <para>Set the password for the server (for incoming connections).</para>
        <para>This must be matched in the Network.Connect routine on the clients.
Pass "" to specify no password (this is default).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.logLevel">
      <summary>
        <para>Set the log level for network messages (default is Off).</para>
        <para>For a description of the different log levels have a look at the NetworkLogLevel enum.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.connections">
      <summary>
        <para>All connected players.</para>
        <para>On a client this contains only the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.player">
      <summary>
        <para>Get the local <see cref="NetworkPlayer">NetworkPlayer</see> instance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.isClient">
      <summary>
        <para>Returns true if your peer type is client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.isServer">
      <summary>
        <para>Returns true if your peer type is server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.peerType">
      <summary>
        <para>The status of the peer type, i.e. if it is disconnected, connecting, server or client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.sendRate">
      <summary>
        <para>The default send rate of network updates for all Network Views.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.isMessageQueueRunning">
      <summary>
        <para>Enable or disable the processing of network messages.</para>
        <para>If this is disabled no RPC call execution or network view synchronization takes place.
The Network level loading page has an example of how to use this function.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.time">
      <summary>
        <para>Get the current network time (seconds).</para>
        <para>This can, for example, be used to compare with the time returned in NetworkMessageInfo. The example
script needs to be attached to an object with a network view and have the network view observe the script.
It measures the time it took to send a message which synchronizes the X postion value of the objects transform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.minimumAllocatableViewIDs">
      <summary>
        <para>Get or set the minimum number of ViewID numbers in the ViewID pool given to clients by the server.</para>
        <para>The ViewID pools are given to each player as he connects and are refreshed with new numbers
if the player runs out. The server and clients should be in sync regarding this value. Setting 
this higher only on the server has the effect that he sends more view ID numbers to clients, than
they really want. Setting this higher only on clients means they request more view IDs more often, 
for example twice in a row, as the pools received from the server don't contain enough numbers. 
The default value is 100.If a game instantiates a lot of new objects over the network on each client, like more than
100 network intantiations per minute, then this value should be set higher.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.natFacilitatorIP">
      <summary>
        <para>The IP address of the NAT punchthrough facilitator.</para>
        <para>Usually this is the same as the Master Server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.natFacilitatorPort">
      <summary>
        <para>The port of the NAT punchthrough facilitator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.connectionTesterIP">
      <summary>
        <para>The IP address of the connection tester used in Network.TestConnection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.connectionTesterPort">
      <summary>
        <para>The port of the connection tester used in Network.TestConnection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.maxConnections">
      <summary>
        <para>Set the maximum amount of connections/players allowed.</para>
        <para>Setting it to 0 means no new connections can be made but the existing ones stay connected.
Setting it to -1 means the maximum connections count is set to the same number of current open connections. In that case, if
a players drops then the slot is still open for him. This cannot be set higher than the connection count given in
Network.InitializeServer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.proxyIP">
      <summary>
        <para>The IP address of the proxy server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.proxyPort">
      <summary>
        <para>The port of the proxy server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.useProxy">
      <summary>
        <para>Indicate if proxy support is needed, in which case traffic is relayed through the proxy server.</para>
        <para>The proxy server is a solution to connectivity problems with servers
as well as clients. When a machine has an non NAT punchthrough capable
router his connectivity options are limited. A game cannot be hosted
as nobody external can connect to him (only clients on the local network can).
By using the proxy server the machine can be fully connectable but with
the extra cost of having all traffic relayed through another server.
A non NAT punchthrough capable client can connect to any server through 
the proxy server, as long as the proxy server is set up properly.Unity Technologies does not provide a proxy server for public use, so to
use this feature you will need to set up your own proxy server. Of course
it is advisable to set up a proxy server with a public IP address and
a lot of available bandwidth.When running as a client, just enabling Network.useProxy is all you have
to do. Connect to the server as usual with Network.Connect(). All traffic 
will be relayed through the proxy server. The servers external IP and internal
IP still work as usual. So clients can connect to him directly without
the proxy in case they are located on the same network.When running as a server OnServerInitialized(NetworkPlayer) returns a
NetworkPlayer structure which indicates what the game servers relayed
IP/port is, i.e. what port the proxy server allocated to the game server. 
This is the IP/port others can use to connect to. When connecting to the
server, the clients don't treat the server any differently than other servers.
Technically speaking, they don't need to know at all that the game server
is getting help from a proxy server. When using the master server you can no longer only rely on the IP/port he
registers for servers when using proxy support. The proxy server IP address
and port which the server is using can be placed in the comment field of
the data sent to the master server. A client which received host information
from the master server can peek into the comment field and find out if
he can use an alternative IP/port for that host.IMPORTANT: You should never enable proxy support for both the server and
the client connecting to him. Unexpected things are bound to happen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Network.proxyPassword">
      <summary>
        <para>Set the proxy server password.</para>
        <para>It is possible to make your own custom proxy server. In that case you 
might want to password protect it and then your Unity players must set
this value appropriately.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.BitStream">
      <summary>
        <para>The BitStream class represents seralized variables, packed into a stream.</para>
        <para>Data can be serialized, transmitted, and then received by remote clients by
using this class. See the Network View component reference page for general
information on network synchronization and the Network.OnSerializeNetworkView function for more information.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Boolean@)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Char@)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Int16@)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Int32@)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Single@)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(System.Single@,System.Single)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Quaternion@)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Quaternion@,System.Single)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Vector3@)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.Vector3@,System.Single)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.NetworkPlayer@)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.BitStream.Serialize(UnityEngine.NetworkViewID@)">
      <summary>
        <para>Serializes different types of variables.</para>
        <para>Supported types are: bool, char, short, int, float, Quaternion, Vector3 and NetworkPlayer.Note that Serialize(char) serializes one byte, so it will only work properly for characters in 0..255 range.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BitStream.isReading">
      <summary>
        <para>Is the BitStream currently being read? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.BitStream.isWriting">
      <summary>
        <para>Is the BitStream currently being written? (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RPC">
      <summary>
        <para>Attribute for setting up RPC functions.</para>
        <para>Given an @RPC (javascript) or [RPC] attribute (C#) any function can be called remotely through Unity 
Networking. The function must exist on both sending and recieving party.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.RPC.#ctor" />
    <member name="T:UnityEngine.HostData">
      <summary>
        <para>This is the data structure for holding individual host information.</para>
        <para>The host list retreived from a master server uses this class to represent
individual hosts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.useNat">
      <summary>
        <para>Does this server require NAT punchthrough?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.gameType">
      <summary>
        <para>The type of the game (like "MyUniqueGameType").</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.gameName">
      <summary>
        <para>The name of the game (like John Doe's Game).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.connectedPlayers">
      <summary>
        <para>Currently connected players.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.playerLimit">
      <summary>
        <para>Maximum players limit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.ip">
      <summary>
        <para>Server IP address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.port">
      <summary>
        <para>Server port.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.passwordProtected">
      <summary>
        <para>Does the server require a password?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.comment">
      <summary>
        <para>A miscellaneous comment (can hold data).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.HostData.guid">
      <summary>
        <para>The GUID of the host, needed when connecting with NAT punchthrough.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.MasterServer">
      <summary>
        <para>The Master Server is used to make matchmaking between servers and clients easy.</para>
        <para>You can advertise game hosts or fetch host lists for you game type. The functions
here are used to communicate with the Master Server itself which resides on a 
separate server. If necessary the server itself can be customized. For an overview
of the Master Server as well as a technical description see the Master Server manual page.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MasterServer.RequestHostList(System.String)">
      <summary>
        <para>Request a host list from the master server.</para>
        <para>The list is available through MasterServer.PollHostList when it has arrived.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MasterServer.PollHostList">
      <summary>
        <para>Check for the latest host list received by using MasterServer.RequestHostList.</para>
        <para>You can clear the current host list with MasterServer.ClearHostList. That way you can be sure that the list returned by is up to date.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MasterServer.RegisterHost(System.String,System.String,System.String)">
      <summary>
        <para>Register this server on the master server.</para>
        <para>If the master server address information has not been changed the default Unity master server will be used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MasterServer.RegisterHost(System.String,System.String)">
      <summary>
        <para>Register this server on the master server.</para>
        <para>If the master server address information has not been changed the default Unity master server will be used.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MasterServer.UnregisterHost">
      <summary>
        <para>Unregister this server from the master server.</para>
        <para>Does nothing if the server is not registered or has already unregistered.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MasterServer.ClearHostList">
      <summary>
        <para>Clear the host list which was received by MasterServer.PollHostList.</para>
        <para>Useful if you want to update the list and want to make sure you don't use the older data.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MasterServer.ipAddress">
      <summary>
        <para>The IP address of the master server.</para>
        <para>By default this is a server run by Unity Technologies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MasterServer.port">
      <summary>
        <para>The connection port of the master server.</para>
        <para>By default this is a server run by Unity Technologies.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MasterServer.updateRate">
      <summary>
        <para>Set the minimum update rate for master server host information update.</para>
        <para>Normally host updates are only sent if something in the host information has changed (like connected players).
The update rate defines the minimum amount of time which may elapse between host updates. The default
value is 60 seconds minimum update rate (where a check is made for changes). So if one host update is sent and 
then some field changes 10 seconds later then the update will possibly sent 50 seconds later (at the next change check).
If this is set to 0 then no updates are sent, only initial registration information.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MasterServer.dedicatedServer">
      <summary>
        <para>Report this machine as a dedicated server.</para>
        <para>If running as a server the connection count defines the player count and this is reported when registering on the
master server. By default the master server assumes this instance is not a dedicated server and thus the player
count is incremented by one (to account for the \"client\" running on the server). If this is not desired this
variable can be set to false and then only the connection count is reported in the host data as the player count.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkMessageInfo">
      <summary>
        <para>This data structure contains information on a message just received from the network.</para>
        <para>It reveals where it came from, what time it was send and what network view sent it.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkMessageInfo.timestamp">
      <summary>
        <para>The time stamp when the Message was sent in seconds.</para>
        <para>Timestamps can be used to implement interpolation or extrapolation of continous streams of packets
The timestamp is passed as a double to avoid overflow when a game is running for a long time.
Internally timestamps are sent as 32 bit integers with millisecond accuracy to save bandwidth.
Timestamps are automatically adjusted to be relative to Network.time.
Thus Network.time - messageInfo.timeStamp is the time the packet spent in transit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkMessageInfo.sender">
      <summary>
        <para>The player who sent this network message (owner).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.NetworkMessageInfo.networkView">
      <summary>
        <para>The <see cref="NetworkView">NetworkView</see> who sent this message.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemRenderMode">
      <summary>
        <para>The rendering mode for particle systems (Shuriken).</para>
        <para>This is used by the ParticleSystemRenderer to determine how to render the particles.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.Billboard">
      <summary>
        <para>Render particles as billboards facing the player. (Default)</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.Stretch">
      <summary>
        <para>Stretch particles in the direction of motion.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.HorizontalBillboard">
      <summary>
        <para>Render particles as billboards always facing up along the y-Axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.VerticalBillboard">
      <summary>
        <para>Render particles as billboards always facing the player, but not pitching along the x-Axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemRenderMode.Mesh">
      <summary>
        <para>Render particles as meshes.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemSimulationSpace">
      <summary>
        <para>The space to simulate particles in.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSimulationSpace.Local">
      <summary>
        <para>Simulate particles in local space.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ParticleSystemSimulationSpace.World">
      <summary>
        <para>Simulate particles in world space.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem">
      <summary>
        <para>Script interface for particle systems (Shuriken).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.SetParticles(UnityEngine.ParticleSystem.Particle[],System.Int32)">
      <summary>
        <para>Set the particles of this particle system. <c>size</c> is the number of particles that is set.</para>
        <para>Setting the lifetime of a particle to a negative value will result in Shuriken removing the particle.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.GetParticles(UnityEngine.ParticleSystem.Particle[])">
      <summary>
        <para>Get the particles of this particle system. Returns the number of particles written to the input particle array.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.GetCollisionEvents(UnityEngine.GameObject,UnityEngine.ParticleSystem.CollisionEvent[])">
      <summary>
        <para>Get the particle collision events for a GameObject. Returns the number of events written to the array.</para>
        <para>This method is typically called from MonoBehaviour.OnParticleCollision in response to a collision callback.If the array used is too short events may be truncated. To avoid this use ParticleSystem.safeCollisionEventSize to determine an appropriate array size prior the call.</para>
      </summary>
      <param name="go">The GameObject for which to retrieve collision events.</param>
      <param name="collisionEvents">Array to write collision events to.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single,System.Boolean)">
      <summary>
        <para>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</para>
      </summary>
      <param name="t">Time to fastforward the particle system.</param>
      <param name="withChildren">Fastforward all child particle systems as well.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single)">
      <summary>
        <para>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</para>
      </summary>
      <param name="t">Time to fastforward the particle system.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Simulate(System.Single,System.Boolean,System.Boolean)">
      <summary>
        <para>Fastforwards the particle system by simulating particles over given period of time, then pauses it.</para>
      </summary>
      <param name="t">Time to fastforward the particle system.</param>
      <param name="withChildren">Fastforward all child particle systems as well.</param>
      <param name="restart">Restart and start from the beginning.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Play">
      <summary>
        <para>Plays the particle system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Play(System.Boolean)">
      <summary>
        <para>Plays the particle system.</para>
      </summary>
      <param name="withChildren">Play all child particle systems as well.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Stop">
      <summary>
        <para>Stops playing the particle system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Stop(System.Boolean)">
      <summary>
        <para>Stops playing the particle system.</para>
      </summary>
      <param name="withChildren">Stop all child particle systems as well.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Pause">
      <summary>
        <para>Pauses playing the particle system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Pause(System.Boolean)">
      <summary>
        <para>Pauses playing the particle system.</para>
      </summary>
      <param name="withChildren">Pause all child particle systems as well.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Clear">
      <summary>
        <para>Remove all particles in the particle system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Clear(System.Boolean)">
      <summary>
        <para>Remove all particles in the particle system.</para>
      </summary>
      <param name="withChildren">Clear all child particle systems as well.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.IsAlive">
      <summary>
        <para>Does the system have any live particles (or will produce more)?</para>
      </summary>
      <returns>
        <para>True if the particle system is still "alive", false if the particle system is done emitting particles and all particles are dead.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.IsAlive(System.Boolean)">
      <summary>
        <para>Does the system have any live particles (or will produce more)?</para>
      </summary>
      <param name="withChildren">Check all child particle systems as well.</param>
      <returns>
        <para>True if the particle system is still "alive", false if the particle system is done emitting particles and all particles are dead.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Emit(System.Int32)">
      <summary>
        <para>Emit <c>count</c> particles immediately.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Emit(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,UnityEngine.Color32)">
      <summary>
        <para>Emit a single particle with given parameters.</para>
      </summary>
      <param name="position">The position of the particle.</param>
      <param name="velocity">The velocity of the particle.</param>
      <param name="size">The size of the particle.</param>
      <param name="lifetime">The remaining lifetime of the particle.</param>
      <param name="color">The color of the particle.</param>
    </member>
    <member name="M:UnityEngine.ParticleSystem.Emit(UnityEngine.ParticleSystem.Particle)">
      <summary>
        <para>Emit a single particle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.startDelay">
      <summary>
        <para>Start delay in seconds.</para>
        <para>Use this to delay when the playback starts on the system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.isPlaying">
      <summary>
        <para>Is the particle system playing right now ?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.isStopped">
      <summary>
        <para>Is the particle system stopped right now ?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.isPaused">
      <summary>
        <para>Is the particle system paused right now ?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.loop">
      <summary>
        <para>Is the particle system looping?</para>
        <para>If you disable looping on a playing particle system, it will stop after the end of the current loop.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.playOnAwake">
      <summary>
        <para>If set to true, the particle system will automatically start playing on startup.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.time">
      <summary>
        <para>Playback position in seconds.</para>
        <para>Use this to read current playback time or to seek to a new playback time.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.duration">
      <summary>
        <para>The duration of the particle system in seconds (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.playbackSpeed">
      <summary>
        <para>The playback speed of the particle system. 1 is normal playback speed.</para>
        <para>A negative playback speed is not supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.particleCount">
      <summary>
        <para>The current number of particles (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.safeCollisionEventSize">
      <summary>
        <para>Safe array size for use with <see cref="ParticleSystem.GetCollisionEvents">ParticleSystem.GetCollisionEvents</see>.</para>
        <para>This is guaranteed to be large enough to use with ParticleSystem.GetCollisionEvents for the current frame. GetCollisionEvents may return fewer elements for some GameObjects though.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.enableEmission">
      <summary>
        <para>When set to false, the particle system will not emit particles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.emissionRate">
      <summary>
        <para>The rate of emission.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.startSpeed">
      <summary>
        <para>The initial speed of particles when emitted. When using curves, this values acts as a scale on the curve.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.startSize">
      <summary>
        <para>The initial size of particles when emitted. When using curves, this values acts as a scale on the curve.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.startColor">
      <summary>
        <para>The initial color of particles when emitted.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.startRotation">
      <summary>
        <para>The initial rotation of particles when emitted. When using curves, this values acts as a scale on the curve.</para>
        <para>Note that the value should be given in radians.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.startLifetime">
      <summary>
        <para>The total lifetime in seconds that particles will have when emitted. When using curves, this values acts as a scale on the curve. This value is set in the particle when it is create by the particle system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.gravityModifier">
      <summary>
        <para>Scale being applied to the gravity defined by <see cref="Physics-gravity">Physics.gravity</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.maxParticles">
      <summary>
        <para>The maximum number of particles to emit.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.simulationSpace">
      <summary>
        <para>This selects the space in which to simulate particles. It can be either world or local space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem.randomSeed">
      <summary>
        <para>Random seed used for the particle system emission. If set to 0, it will be assigned a random value on awake.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem+Particle">
      <summary>
        <para>Script interface for a Particle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+Particle.position">
      <summary>
        <para>The position of the particle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+Particle.velocity">
      <summary>
        <para>The velocity of the particle.</para>
        <para>The particle will move by the velocity every frame.
The velocity is also used by the ParticleSystemRenderer if Stretch Particles is
set to ParticleSystemRenderMode.Stretch.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+Particle.lifetime">
      <summary>
        <para>The lifetime of the particle.</para>
        <para>This is the time in seconds for how long this particle will remain alive.
When the lifetime drops below zero the Particle will be killed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+Particle.startLifetime">
      <summary>
        <para>The starting lifetime of the particle.</para>
        <para>This is the total lifetime of this particle in seconds. It is set by the particle system when creating the particle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+Particle.size">
      <summary>
        <para>The initial size of the particle. The current size of the particle is calculated procedurally based on this value and the active size modules.</para>
        <para>This is particle's size in meters in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+Particle.axisOfRotation" />
    <member name="P:UnityEngine.ParticleSystem+Particle.rotation">
      <summary>
        <para>The rotation of the particle.</para>
        <para>This is particle's rotation in degrees.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+Particle.angularVelocity">
      <summary>
        <para>The angular velocity of the particle.</para>
        <para>This is particle's angular velocity in degrees per second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+Particle.color">
      <summary>
        <para>The initial color of the particle. The current color of the particle is calculated procedurally based on this value and the active color modules.</para>
        <para>Alpha channel of the color is used to fade out particles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+Particle.randomSeed">
      <summary>
        <para>The random seed of the particle.</para>
        <para>This is used to create the value used to interpolate between the two curves when random between curves is used.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystem+CollisionEvent">
      <summary>
        <para>Information about a particle collision.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+CollisionEvent.intersection">
      <summary>
        <para>Intersection point of the collision in world coordinates.</para>
        <para>The intersection point is reported in world coordinates regardless of whether the particle system is simulated in local coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+CollisionEvent.normal">
      <summary>
        <para>Geometry normal at the intersection point of the collision.</para>
        <para>The normal is reported in world coordinates regardless of whether the particle system is simulated in local coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+CollisionEvent.velocity">
      <summary>
        <para>Incident velocity at the intersection point of the collision.</para>
        <para>The velocity is reported in world coordinates regardless of whether the particle system is simulated in local coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystem+CollisionEvent.collider">
      <summary>
        <para>The <see cref="Collider">Collider</see> for the GameObject struck by the particles.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ParticleSystemRenderer">
      <summary>
        <para>Renders particles on to the screen (Shuriken).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.renderMode">
      <summary>
        <para>How particles are drawn.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.lengthScale">
      <summary>
        <para>How much are the particles stretched in their direction of motion.</para>
        <para>Use this to make particles always be longer than they are wide.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.velocityScale">
      <summary>
        <para>How much are the particles strectched depending on "how fast they move".</para>
        <para>Use this to make particles get longer as their speed increases.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.cameraVelocityScale">
      <summary>
        <para>How much are the particles strected depending on the <see cref="Camera">Camera</see>'s speed.</para>
        <para>Use this to make particles become large if the viewing camera has a large speed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.maxParticleSize">
      <summary>
        <para>Clamp the maximum particle size.</para>
        <para>Particles can become very heavy on fillrate. Use this setting to make sure they don't 
use too much perfomance when up close to the viewer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ParticleSystemRenderer.mesh">
      <summary>
        <para>Mesh used as particle instead of billboarded texture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TextAsset">
      <summary>
        <para>Text file assets.</para>
        <para>You can use raw text files in your project as assets and get their contents through
this class. Also, you can access the file as a raw byte array if you want to access data from binary files. See the Text Asset manual page for further details about importing text and binary files into your project as Text Assets.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.TextAsset.#ctor" />
    <member name="M:UnityEngine.TextAsset.ToString" />
    <member name="P:UnityEngine.TextAsset.text">
      <summary>
        <para>The text contents of the .txt file as a string. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.TextAsset.bytes">
      <summary>
        <para>The raw bytes of the text asset. (Read Only)</para>
        <para>If you're using the text asset to contain binary data, you should make sure the file has the .bytes extension. For any other of the
extentions the TextImporter will try to strip nonascii characters if it is unable to parse the file as an utf8 string.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SerializeField">
      <summary>
        <para>Force Unity to serialize a private field.</para>
        <para>You will almost never need this.
When Unity serializes your scripts, it will only serialize public fields.
If in addition to that you also want Unity to serialize one of your private fields
you can add the SerializeField attribute to the field.
Unity will serialize all your script components, reload the new assemblies,
and recreate your script components from the serialized verions. This
serialization does not happen with .NET's serialization functionality, but
with an internal Unity one.The serialization system used can do the following:- CAN serialize public nonstatic fields (of serializable types)
- CAN serialize nonpublic nonstatic fields marked with the [SerializeField] attribute.
- CANNOT serialize static fields.
- CANNOT serialize properties.Your field will only serialize if it is of a type that Unity can serialize:Serializable types are:- All classes inheriting from UnityEngine.Object, for example GameObject, Component, MonoBehaviour, Texture2D, AnimationClip..
- All basic data types like int, string, float, bool.
- Some built-in types like Vector2, Vector3, Vector4, Quaternion, Matrix4x4, Color, Rect, LayerMask..
- Arrays of a serializable type
- List of a serializable type (new in Unity2.6)
- EnumsHeadsup note: if you put one element in a list (or array) twice, when the
list gets serialized, you'll get two copies of that element, instead of one copy being in the new list twice.Hint: Unity won't serialize Dictionary, however you could store a List&amp;lt;&amp;gt; for
keys and a List&amp;lt;&amp;gt; for values, and sew them up in a non serialized dictionary
on Awake(). This doesn't solve the problem of when you want to modify the
dictionary and have it "saved" back, but it is a handy trick in a lot of other cases.For UnityScript users: Fields in c# is a script variable in UnityScript, and
[SerializeField] becomes @SerializeField. [Serializable] on a class becomes @script Serializable in a UnityScript.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.SerializeField.#ctor" />
    <member name="T:UnityEngine.ISerializationCallbackReceiver">
      <summary>
        <para>Interface to receive callbacks upon serialization and deserialization.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize">
      <summary>
        <para>Implement this method to receive a callback after unity serialized your object.</para>
        <para>In contrast to many other programming environments where you often creates objects yourself by invoking constructors, Unity will often create objects for you, and set its fields with the values that you set for them in the Editor.The process of setting the fields of your objects, and getting them, is called deserialization and serialization respectively.
Unity's serializer is able to serialize many different kinds of fields, but not all of them. In those cases it can be convenient to get a callback before unity will read from your fields, or after it has written to them, to allow you to do some custom steps. A typical use case for this would be if you have an object graph that you know how to serialize, but Unity does not. In that case, you can implement INotifyOnSerialization interface, and before Unity will read your fields,  you manually serialize your object graph into your fields in a way that Unity can serialize. You can do the reverse in the OnDeserialize method.The interface can be used on MonoBehaviours like in the example, but it can also be used on custom classes and structs.This interface should be used very carefully. Unity's serializer usually runs on the non main thread, while most of the Unity API can only be called from the main thread. Your code is also running interleaved with Unity's serializing code, (the callbacks are not deferred), so you could seriously confuse Unity's serializer by modifying the very objects Unity is reading from and writing to. You're strongly recommended to only use this interface for the example use case mentioned above: serializing something yourself that Unity doesn't know how to.Another caveat is that serialization happens more often than you might think. When a MonoBehaviour gets cloned through Instantiate() at runtime, it gets deserialized and serialized.  If the object had a field that pointed to its own gameObject,  when that gameObject gets cloned, you'd want the field to point to the new gameObject, not the old one. In order to update these "internal references", Unity uses the serialization system. Unity reads all your fields, finds references to "things that were cloned", and then writes the new values in your fields. The callbacks will also be invoked for this updating phase, allowing you to make the updating of internal references to also work in your custom classes that Unity cannot serialize.Currently only classes will receive the callbacks. Structs will not.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize">
      <summary>
        <para>See <see cref="ISerializationCallbackReceiver.OnBeforeSerialize">ISerializationCallbackReceiver.OnBeforeSerialize</see> for documentation on how to use this method.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Shader">
      <summary>
        <para>Shader scripts used for all rendering.</para>
        <para>Most of the advanced rendering is controlled via Material class. Shader class is mostly
used just to check whether a shader can run on the user's hardware (isSupported property)
and to find shaders by name (Find method).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.#ctor" />
    <member name="M:UnityEngine.Shader.Find(System.String)">
      <summary>
        <para>Finds a shader with the given <c>name</c>.</para>
        <para>Shader.Find can be used to switch to another shader without having to keep a reference to the shader.
/name/ is the name you can see in the shader popup of any material.
Common names are: "Diffuse", "Bumped Diffuse", "VertexLit", "Transparent/Diffuse" etc.When building a player, a shader will only be included if it is assigned to a material that is used in any scene or if the shader is placed in a "Resources" folder.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalColor(System.String,UnityEngine.Color)">
      <summary>
        <para>Sets a global color property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).Usually this is used if you have a set of custom shaders that all use
the same "global" color (for example, color of the sun). Then you can
set the global property from script and don't have to setup the same color
in all materials.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalColor(System.Int32,UnityEngine.Color)">
      <summary>
        <para>Sets a global color property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).Usually this is used if you have a set of custom shaders that all use
the same "global" color (for example, color of the sun). Then you can
set the global property from script and don't have to setup the same color
in all materials.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Sets a global vector property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).Usually this is used if you have a set of custom shaders that all use
the same "global" vector (for example, wind direction). Then you can
set the global property from script and don't have to setup the same vector
in all materials.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Sets a global vector property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).Usually this is used if you have a set of custom shaders that all use
the same "global" vector (for example, wind direction). Then you can
set the global property from script and don't have to setup the same vector
in all materials.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalFloat(System.String,System.Single)">
      <summary>
        <para>Sets a global float property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).Usually this is used if you have a set of custom shaders that all use
the same "global" float (for example, density of some custom fog type).
Then you can set the global property from script and don't have to setup
the same float in all materials.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalFloat(System.Int32,System.Single)">
      <summary>
        <para>Sets a global float property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).Usually this is used if you have a set of custom shaders that all use
the same "global" float (for example, density of some custom fog type).
Then you can set the global property from script and don't have to setup
the same float in all materials.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalInt(System.String,System.Int32)">
      <summary>
        <para>Sets a global int property for all shaders.</para>
        <para>Internally float and integer shader properties are treated exactly the same, so this function is just an alias to SetGlobalFloat.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalInt(System.Int32,System.Int32)">
      <summary>
        <para>Sets a global int property for all shaders.</para>
        <para>Internally float and integer shader properties are treated exactly the same, so this function is just an alias to SetGlobalFloat.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalTexture(System.String,UnityEngine.Texture)">
      <summary>
        <para>Sets a global texture property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).Usually this is used if you have a set of custom shaders that all use
the same "global" texture (for example, custom diffuse-lighting cubemap).
Then you can set the global property from script and don't have to setup
the same texture in all materials.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalTexture(System.Int32,UnityEngine.Texture)">
      <summary>
        <para>Sets a global texture property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).Usually this is used if you have a set of custom shaders that all use
the same "global" texture (for example, custom diffuse-lighting cubemap).
Then you can set the global property from script and don't have to setup
the same texture in all materials.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets a global matrix property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Sets a global matrix property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.SetGlobalBuffer(System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Sets a global compute buffer property for all shaders.</para>
        <para>Global properties are used if a shader needs them but the material does
not have them defined (for example, if the shader does not expose them
in Properties block).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.PropertyToID(System.String)">
      <summary>
        <para>Gets unique identifier for a shader property name.</para>
        <para>Using property identifiers is more efficient than passing strings to all material property functions. For example if you are calling Material.SetColor a lot, or using MaterialPropertyBlock, then it is better to get the identifiers of the properties you need just once.Each name of shader property (for example, _MainTex or _Color) is assigned an unique
integer number in Unity, that stays the same for the whole game. The numbers will not be the same between different runs of the game or between machines, so do not store them or send them over network.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Shader.WarmupAllShaders">
      <summary>
        <para>Fully load all shaders to prevent future performance hiccups.</para>
        <para>Usually graphics drivers do not actually prepare shaders until they are first needed.
However when some object is first rendered with a previously unused shader, there
can be a hiccup because the driver is compiling/optimizing the shader. This can be quite
noticeable on mobile platforms.Calling this function will perform dummy one-invisible-triangle rendering
with all permutations of all currently loaded shaders. This can take some time but helps
to avoid hiccups in the future.Please be aware that this function will only warmup shaders that are currently loaded. 
If you use Resources.Load to load shaders, you will need to call WarmupAllShaders again.
Also, different fog modes are implemented through shader patching, 
so if you change fog mode at runtime, you need to do so before calling WarmupAllShaders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.isSupported">
      <summary>
        <para>Can this shader run on the end-users graphics card? (Read Only)</para>
        <para>Returns true if the shader itself or any fallbacks setup in the shader are supported.
Most often you use this when implementing special effects. For example, image effects
in Unity Pro automatically disable themselves if the shader is not supported.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.maximumLOD">
      <summary>
        <para>Shader LOD level for this shader.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.globalMaximumLOD">
      <summary>
        <para>Shader LOD level for all shaders.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Shader.renderQueue">
      <summary>
        <para>Render queue of this shader. (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Material">
      <summary>
        <para>The material class.</para>
        <para>This class exposes all properties from a material, allowing you to animate them.
You can also use it to set custom shader properties that can't be accessed through
the inspector (e.g. matrices).In order to get the material used by an object, use the Renderer.material property:
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.#ctor(System.String)">
      <summary>
        <para>Create a temporary material from a shader source string.</para>
        <para>If you have a script which implements a custom special effect, you implement all the graphic setup
using shaders &amp;amp; materials. Use this function to create a custom shader &amp;amp; material inside your script.
After creating the material, use SetColor, SetTexture, SetFloat,
SetVector, SetMatrix to populate the shader property values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.#ctor(UnityEngine.Shader)">
      <summary>
        <para>Create a temporary Material from a <see cref="Shader">Shader</see>.</para>
        <para>If you have a script which implements a custom special effect, you implement all the graphic setup
using shaders &amp;amp; materials. Use this function to create a custom shader &amp;amp; material inside your script.
After creating the material, use SetColor, SetTexture, SetFloat,
SetVector, SetMatrix to populate the shader property values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.#ctor(UnityEngine.Material)">
      <summary>
        <para>Create a temporary Material by copying the shader and all properties from the <c>source</c> Material.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetColor(System.String,UnityEngine.Color)">
      <summary>
        <para>Set a named color value.</para>
        <para>Many shaders use more than one color. Use SetColor to change the propertyName color.Common color names used by Unity's builtin shaders: "_Color" is the main color of a material. This can also be accessed via color property. "_SpecColor" is the specular color of a material (used in specular/vertexlit shaders). "_Emission" is the emissive color of a material (used in vertexlit shaders). "_ReflectColor" is the reflection color of the material (used in reflective shaders).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetColor(System.Int32,UnityEngine.Color)">
      <summary>
        <para>Set a named color value.</para>
        <para>Many shaders use more than one color. Use SetColor to change the propertyName color.Common color names used by Unity's builtin shaders: "_Color" is the main color of a material. This can also be accessed via color property. "_SpecColor" is the specular color of a material (used in specular/vertexlit shaders). "_Emission" is the emissive color of a material (used in vertexlit shaders). "_ReflectColor" is the reflection color of the material (used in reflective shaders).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetColor(System.String)">
      <summary>
        <para>Get a named color value.</para>
        <para>Many shaders use more than one color. Use GetColor to get the propertyName color.Common color names used by Unity's builtin shaders: "_Color" is the main color of a material. This can also be accessed via color property. "_SpecColor" is the specular color of a material (used in specular/glossy/vertexlit shaders). "_Emission" is the emissive color of a material (used in vertexlit shaders). "_ReflectColor" is the reflection color of the material (used in reflective shaders).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetColor(System.Int32)">
      <summary>
        <para>Get a named color value.</para>
        <para>Many shaders use more than one color. Use GetColor to get the propertyName color.Common color names used by Unity's builtin shaders: "_Color" is the main color of a material. This can also be accessed via color property. "_SpecColor" is the specular color of a material (used in specular/glossy/vertexlit shaders). "_Emission" is the emissive color of a material (used in vertexlit shaders). "_ReflectColor" is the reflection color of the material (used in reflective shaders).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Set a named vector value.</para>
        <para>Four component vectors and colors are the same in Unity shaders. SetVector does exactly the same
as SetColor just the input data type is different (xyzw in the vector becomes rgba in the color).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetVector(System.Int32,UnityEngine.Vector4)">
      <summary>
        <para>Set a named vector value.</para>
        <para>Four component vectors and colors are the same in Unity shaders. SetVector does exactly the same
as SetColor just the input data type is different (xyzw in the vector becomes rgba in the color).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetVector(System.String)">
      <summary>
        <para>Get a named vector value.</para>
        <para>Four component vectors and colors are the same in Unity shaders. GetVector does exactly the same
as GetColor just the input data type is different (xyzw in the vector becomes rgba in the color).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetVector(System.Int32)">
      <summary>
        <para>Get a named vector value.</para>
        <para>Four component vectors and colors are the same in Unity shaders. GetVector does exactly the same
as GetColor just the input data type is different (xyzw in the vector becomes rgba in the color).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetTexture(System.String,UnityEngine.Texture)">
      <summary>
        <para>Set a named texture.</para>
        <para>Many shaders use more than one texture. Use SetTexture to change the propertyName texture.Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTexture property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetTexture(System.Int32,UnityEngine.Texture)">
      <summary>
        <para>Set a named texture.</para>
        <para>Many shaders use more than one texture. Use SetTexture to change the propertyName texture.Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTexture property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetTexture(System.String)">
      <summary>
        <para>Get a named texture.</para>
        <para>Many shaders use more than one texture. Use GetTexture to get the propertyName texture.Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTexture property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetTexture(System.Int32)">
      <summary>
        <para>Get a named texture.</para>
        <para>Many shaders use more than one texture. Use GetTexture to get the propertyName texture.Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTexture property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetTextureOffset(System.String,UnityEngine.Vector2)">
      <summary>
        <para>Sets the placement offset of texture <c>propertyName</c>.</para>
        <para>Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTextureOffset property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetTextureOffset(System.String)">
      <summary>
        <para>Gets the placement offset of texture <c>propertyName</c>.</para>
        <para>Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTextureOffset property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetTextureScale(System.String,UnityEngine.Vector2)">
      <summary>
        <para>Sets the placement scale of texture <c>propertyName</c>.</para>
        <para>Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTextureScale property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetTextureScale(System.String)">
      <summary>
        <para>Gets the placement scale of texture <c>propertyName</c>.</para>
        <para>Common texture names used by Unity's builtin shaders: "_MainTex" is the main diffuse texture. This can also be accessed via mainTextureScale property. "_BumpMap" is the normal map. "_Cube" is the reflection cubemap.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetMatrix(System.String,UnityEngine.Matrix4x4)">
      <summary>
        <para>Set a named matrix for the shader.</para>
        <para>This is mostly used with custom shaders that need extra matrix
parameters. Matrix parameters are not exposed in the material inspector,
but can be set and queried with SetMatrix and GetMatrix from scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetMatrix(System.Int32,UnityEngine.Matrix4x4)">
      <summary>
        <para>Set a named matrix for the shader.</para>
        <para>This is mostly used with custom shaders that need extra matrix
parameters. Matrix parameters are not exposed in the material inspector,
but can be set and queried with SetMatrix and GetMatrix from scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetMatrix(System.String)">
      <summary>
        <para>Get a named matrix value from the shader.</para>
        <para>This is mostly used with custom shaders that need extra matrix
parameters. Matrix parameters are not exposed in the material inspector,
but can be set and queried with SetMatrix and GetMatrix from scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetMatrix(System.Int32)">
      <summary>
        <para>Get a named matrix value from the shader.</para>
        <para>This is mostly used with custom shaders that need extra matrix
parameters. Matrix parameters are not exposed in the material inspector,
but can be set and queried with SetMatrix and GetMatrix from scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetFloat(System.String,System.Single)">
      <summary>
        <para>Set a named float value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetFloat(System.Int32,System.Single)">
      <summary>
        <para>Set a named float value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetFloat(System.String)">
      <summary>
        <para>Get a named float value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetFloat(System.Int32)">
      <summary>
        <para>Get a named float value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetInt(System.String,System.Int32)">
      <summary>
        <para>Set a named integer value.</para>
        <para>This function is just an alias to SetFloat that casts the passed value to a float.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetInt(System.Int32,System.Int32)">
      <summary>
        <para>Set a named integer value.</para>
        <para>This function is just an alias to SetFloat that casts the passed value to a float.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetInt(System.String)">
      <summary>
        <para>Get a named integer value.</para>
        <para>This function is just an alias to GetFloat that casts the resulting value to an integer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetInt(System.Int32)">
      <summary>
        <para>Get a named integer value.</para>
        <para>This function is just an alias to GetFloat that casts the resulting value to an integer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetBuffer(System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>Set a <see cref="ComputeBuffer">ComputeBuffer</see> value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.HasProperty(System.String)">
      <summary>
        <para>Checks if material's shader has a property of a given name.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.HasProperty(System.Int32)">
      <summary>
        <para>Checks if material's shader has a property of a given name.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetTag(System.String,System.Boolean,System.String)">
      <summary>
        <para>Get the value of material's shader tag.</para>
        <para>If the material's shader does not define the tag, defaultValue is returned.If searchFallbacks is true then this function will look for tag in all subshaders
and all fallbacks. If seachFallbacks is false then only the currently used subshader
will be queried for the tag.Using GetTag without searching through fallbacks makes it possible to detect which
subshader is currently being used: add a custom tag to each subshader with different value,
and query the value at run time. For example, Unity Pro's water uses this function to
detect when the shader falls back to non-reflective one, and turns off reflection camera
in that case.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.GetTag(System.String,System.Boolean)">
      <summary>
        <para>Get the value of material's shader tag.</para>
        <para>If the material's shader does not define the tag, defaultValue is returned.If searchFallbacks is true then this function will look for tag in all subshaders
and all fallbacks. If seachFallbacks is false then only the currently used subshader
will be queried for the tag.Using GetTag without searching through fallbacks makes it possible to detect which
subshader is currently being used: add a custom tag to each subshader with different value,
and query the value at run time. For example, Unity Pro's water uses this function to
detect when the shader falls back to non-reflective one, and turns off reflection camera
in that case.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.Lerp(UnityEngine.Material,UnityEngine.Material,System.Single)">
      <summary>
        <para>Interpolate properties between two materials.</para>
        <para>Makes all color and float values of a material be interpolated from start to end,
based on t.
When t is 0, all values are taken from start.
When t is 1, all values are taken from end.Most often you want the materials that are interpolated between to be the same
(use the same shaders and textures) except for colors and floats. Then you use
/Lerp/ to blend between them.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.SetPass(System.Int32)">
      <summary>
        <para>Activate the given <c>pass</c> for rendering.</para>
        <para>Pass indices start from zero and go up to (but not including) passCount.This is mostly used in direct drawing code using GL class.
For example, Image Effects use materials for
implementing screen post-processing. For each pass in the material they activate
the pass and draw a fullscreen quad.If SetPass returns false, you should not render anything.Here is an example of a full image effect that inverts the colors.
Add this script to the camera and see it in play mode.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.CopyPropertiesFromMaterial(UnityEngine.Material)">
      <summary>
        <para>Copy properties from other material into this material.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.EnableKeyword(System.String)">
      <summary>
        <para>Set a shader keyword that is enabled by this material.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Material.DisableKeyword(System.String)">
      <summary>
        <para>Unset a shader keyword.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.shader">
      <summary>
        <para>The shader used by the material.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.color">
      <summary>
        <para>The main material's color.</para>
        <para>The same as using GetColor or SetColor with "_Color" name.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.mainTexture">
      <summary>
        <para>The material's texture.</para>
        <para>The same as using GetTexture or SetTexture with "_MainTex" name.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.mainTextureOffset">
      <summary>
        <para>The texture offset of the main texture.</para>
        <para>The same as using GetTextureOffset or SetTextureOffset with "_MainTex" name.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.mainTextureScale">
      <summary>
        <para>The texture scale of the main texture.</para>
        <para>The same as using GetTextureScale or SetTextureScale with "_MainTex" name.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.passCount">
      <summary>
        <para>How many passes are in this material (Read Only).</para>
        <para>This is mostly used in direct drawing code using GL class.
For example, Image Effects use materials for
implementing screen post-processing. For each pass in the material they activate
the pass (see SetPass) and draw a fullscreen quad.Here is an example of a full image effect that inverts the colors.
Add this script to the camera and see it in play mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.renderQueue">
      <summary>
        <para>Render queue of this material.</para>
        <para>By default materials use render queue of the shader it uses. You can override
the render queue used using this variable. Note that once render queue is set on the material,
it stays at that value, even if shader is later changed to be different.Render queue number should be positive to work properly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Material.shaderKeywords">
      <summary>
        <para>Additional shader keywords set by this material.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ProceduralProcessorUsage">
      <summary>
        <para>The global Substance engine processor usage (as used for the ProceduralMaterial.substanceProcessorUsage property).</para>
        <para>The values refer to the number of physical processor cores used for ProceduralMaterial generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralProcessorUsage.Unsupported">
      <summary>
        <para>Exact control of processor usage is not available.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralProcessorUsage.One">
      <summary>
        <para>A single physical processor core is used for ProceduralMaterial generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralProcessorUsage.Half">
      <summary>
        <para>Half of all physical processor cores are used for ProceduralMaterial generation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralProcessorUsage.All">
      <summary>
        <para>All physical processor cores are used for ProceduralMaterial generation.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ProceduralCacheSize">
      <summary>
        <para>Substance memory budget.</para>
        <para>This also affects the amount of working memory for the generation of the ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralCacheSize.Tiny">
      <summary>
        <para>A limit of 128MB for the cache or the working memory.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralCacheSize.Medium">
      <summary>
        <para>A limit of 256MB for the cache or the working memory.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralCacheSize.Heavy">
      <summary>
        <para>A limit of 512MB for the cache or the working memory.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralCacheSize.NoLimit">
      <summary>
        <para>No limit for the cache or the working memory.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralCacheSize.None">
      <summary>
        <para>A limit of 1B (one byte) for the cache or the working memory.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ProceduralLoadingBehavior">
      <summary>
        <para>ProceduralMaterial loading behavior.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralLoadingBehavior.DoNothing">
      <summary>
        <para>Do not generate the textures. RebuildTextures() or RebuildTexturesImmediately() must be called to generate the textures.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralLoadingBehavior.Generate">
      <summary>
        <para>Generate the textures when loading to favor application's size (default on supported platform).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralLoadingBehavior.BakeAndKeep">
      <summary>
        <para>Bake the textures to speed up loading and keep the ProceduralMaterial data so that it can still be tweaked and regenerated later on.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralLoadingBehavior.BakeAndDiscard">
      <summary>
        <para>Bake the textures to speed up loading and discard the ProceduralMaterial data (default on unsupported platform).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralLoadingBehavior.Cache">
      <summary>
        <para>Generate the textures when loading and cache them to disk/flash to speed up subsequent game/application startups.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralLoadingBehavior.DoNothingAndCache">
      <summary>
        <para>Do not generate the textures. RebuildTextures() or RebuildTexturesImmediately() must be called to generate the textures. After the textures have been generrated for the first time, they are cached to disk/flash to speed up subsequent game/application startups.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ProceduralPropertyType">
      <summary>
        <para>The type of a ProceduralProperty.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyType.Boolean">
      <summary>
        <para>Procedural boolean property. Use with <see cref="ProceduralMaterial.GetProceduralBoolean">ProceduralMaterial.GetProceduralBoolean</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyType.Float">
      <summary>
        <para>Procedural float property. Use with <see cref="ProceduralMaterial.GetProceduralFloat">ProceduralMaterial.GetProceduralFloat</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyType.Vector2">
      <summary>
        <para>Procedural Vector2 property. Use with <see cref="ProceduralMaterial.GetProceduralVector">ProceduralMaterial.GetProceduralVector</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyType.Vector3">
      <summary>
        <para>Procedural Vector3 property. Use with <see cref="ProceduralMaterial.GetProceduralVector">ProceduralMaterial.GetProceduralVector</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyType.Vector4">
      <summary>
        <para>Procedural Vector4 property. Use with <see cref="ProceduralMaterial.GetProceduralVector">ProceduralMaterial.GetProceduralVector</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyType.Color3">
      <summary>
        <para>Procedural Color property without alpha. Use with <see cref="ProceduralMaterial.GetProceduralColor">ProceduralMaterial.GetProceduralColor</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyType.Color4">
      <summary>
        <para>Procedural Color property with alpha. Use with <see cref="ProceduralMaterial.GetProceduralColor">ProceduralMaterial.GetProceduralColor</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyType.Enum">
      <summary>
        <para>Procedural Enum property. Use with <see cref="ProceduralMaterial.GetProceduralEnum">ProceduralMaterial.GetProceduralEnum</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyType.Texture">
      <summary>
        <para>Procedural Texture property. Use with <see cref="ProceduralMaterial.GetProceduralTexture">ProceduralMaterial.GetProceduralTexture</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ProceduralOutputType">
      <summary>
        <para>The type of generated image in a ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralOutputType.Unknown">
      <summary>
        <para>Undefined type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralOutputType.Diffuse">
      <summary>
        <para>Diffuse type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralOutputType.Normal">
      <summary>
        <para>NormalMap (BumpMap) type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralOutputType.Height">
      <summary>
        <para>HeightMap type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralOutputType.Emissive">
      <summary>
        <para>Emmisive type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralOutputType.Specular">
      <summary>
        <para>Specular (GlossMap) type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralOutputType.Opacity">
      <summary>
        <para>Opacity (Tranparence) type.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ProceduralPropertyDescription">
      <summary>
        <para>Describes a ProceduralProperty.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralPropertyDescription.#ctor" />
    <member name="F:UnityEngine.ProceduralPropertyDescription.name">
      <summary>
        <para>The name of the ProceduralProperty. Used to get and set the values.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyDescription.label">
      <summary>
        <para>The label of the ProceduralProperty. Can contain space and be overall more user-friendly than the 'name' member.</para>
        <para>Used in the Inspector to display the ProceduralProperty.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyDescription.group">
      <summary>
        <para>The name of the GUI group. Used to display ProceduralProperties in groups.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyDescription.type">
      <summary>
        <para>The <see cref="ProceduralPropertyType">ProceduralPropertyType</see> describes what type of property this is.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyDescription.hasRange">
      <summary>
        <para>If true, the Float or Vector property is constrained to values within a specified range.</para>
        <para>For Vector types this applies to all the vector components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyDescription.minimum">
      <summary>
        <para>If hasRange is true, minimum specifies the minimum allowed value for this Float or Vector property.</para>
        <para>For Vector types this applies to all the vector components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyDescription.maximum">
      <summary>
        <para>If hasRange is true, maximum specifies the maximum allowed value for this Float or Vector property.</para>
        <para>For Vector types this applies to all the vector components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyDescription.step">
      <summary>
        <para>Specifies the step size of this Float or Vector property. Zero is no step.</para>
        <para>For Vector types this applies to all the vector components.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyDescription.enumOptions">
      <summary>
        <para>The available options for a ProceduralProperty of type Enum.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ProceduralPropertyDescription.componentLabels">
      <summary>
        <para>The names of the individual components of a Vector2/3/4 ProceduralProperty.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ProceduralMaterial">
      <summary>
        <para>Class for ProceduralMaterial handling.</para>
        <para>A reference to a ProceduralMaterial is usually assigned using "renderer.sharedMaterial as ProceduralMaterial".</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.GetProceduralPropertyDescriptions">
      <summary>
        <para>Get an array of descriptions of all the ProceduralProperties this ProceduralMaterial has.</para>
        <para>This can be used to build generic GUI that can be used to edit the properties of any ProceduralMaterial
without knowing its properties in advance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.HasProceduralProperty(System.String)">
      <summary>
        <para>Checks if the ProceduralMaterial has a ProceduralProperty of a given name.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.GetProceduralBoolean(System.String)">
      <summary>
        <para>Get a named Procedural boolean property.</para>
        <para>Used for ProceduralProperties of type Boolean.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.SetProceduralBoolean(System.String,System.Boolean)">
      <summary>
        <para>Set a named Procedural boolean property.</para>
        <para>Used for ProceduralProperties of type Boolean.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.GetProceduralFloat(System.String)">
      <summary>
        <para>Get a named Procedural float property.</para>
        <para>Used for ProceduralProperties of type Float.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.SetProceduralFloat(System.String,System.Single)">
      <summary>
        <para>Set a named Procedural float property.</para>
        <para>Used for ProceduralProperties of type Float.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.GetProceduralVector(System.String)">
      <summary>
        <para>Get a named Procedural vector property.</para>
        <para>Used for ProceduralProperties of types Vector2, Vector3, and Vector4.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.SetProceduralVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Set a named Procedural vector property.</para>
        <para>Used for ProceduralProperties of types Vector2, Vector3, and Vector4.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.GetProceduralColor(System.String)">
      <summary>
        <para>Get a named Procedural color property.</para>
        <para>Used for ProceduralProperties of types Color3 and Color4.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.SetProceduralColor(System.String,UnityEngine.Color)">
      <summary>
        <para>Set a named Procedural color property.</para>
        <para>Used for ProceduralProperties of types Color3 and Color4.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.GetProceduralEnum(System.String)">
      <summary>
        <para>Get a named Procedural enum property.</para>
        <para>Used for ProceduralProperties of type Enum.
The function does not return an actual enum but an integer specifying the index of the selected option.
The available options are contained in the array ProceduralPropertyDescription.enumOptions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.SetProceduralEnum(System.String,System.Int32)">
      <summary>
        <para>Set a named Procedural enum property.</para>
        <para>Used for ProceduralProperties of type Enum.
The function does not take an actual enum but an integer specifying the index of the selected option.
The available options are contained in the array ProceduralPropertyDescription.enumOptions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.GetProceduralTexture(System.String)">
      <summary>
        <para>Get a named Procedural texture property.</para>
        <para>Used for ProceduralProperties of type Texture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.SetProceduralTexture(System.String,UnityEngine.Texture2D)">
      <summary>
        <para>Set a named Procedural texture property.</para>
        <para>Used for ProceduralProperties of type Texture.
The texture needs to be setup with Advanced texture type and Read-Write enabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.IsProceduralPropertyCached(System.String)">
      <summary>
        <para>Checks if a named ProceduralProperty is cached for efficient runtime tweaking.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.CacheProceduralProperty(System.String,System.Boolean)">
      <summary>
        <para>Specifies if a named ProceduralProperty should be cached for efficient runtime tweaking.</para>
        <para>Set this to true for all properties that you expect to be tweaking.
It will take effect the next time the textures are rebuild, so call RebuildTextures after setting up these flags in order to prepare the cache.
The fewer properties have caching enabled, the more efficient rebuilding the textures will be so consider carefully which properties are actually going to be changed.
While modified properties are automatically cached for the next rebuild, this cache flag is persistent.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.ClearCache">
      <summary>
        <para>Clear the Procedural cache.</para>
        <para>This frees up all memory used by the cache and sets all properties to not be cached anymore.
Use this when you don't expect to make anymore changes to the ProceduralProperties for now.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.RebuildTextures">
      <summary>
        <para>Triggers an asynchronous rebuild of this ProceduralMaterial's dirty textures.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.RebuildTexturesImmediately">
      <summary>
        <para>Triggers an immediate (synchronous) rebuild of this ProceduralMaterial's dirty textures.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.StopRebuilds">
      <summary>
        <para>Discard all the queued ProceduralMaterial rendering operations that have not started yet.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.GetGeneratedTextures">
      <summary>
        <para>Get generated textures.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralMaterial.GetGeneratedTexture(System.String)">
      <summary>
        <para>This allows to get a reference to a ProceduralTexture generated by a ProceduralMaterial using its name.</para>
      </summary>
      <param name="textureName">The name of the ProceduralTexture to get.</param>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.cacheSize">
      <summary>
        <para>Set or get the Procedural cache budget.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.animationUpdateRate">
      <summary>
        <para>Set or get the update rate in millisecond of the animated substance.</para>
        <para>An animated substance is a ProceduralMaterial containing a $time input which is automatically generated.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.isProcessing">
      <summary>
        <para>Check if the ProceduralTextures from this ProceduralMaterial are currently being rebuilt.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.isCachedDataAvailable">
      <summary>
        <para>Indicates whether cached data is available for this ProceduralMaterial's textures (only relevant for Cache and DoNothingAndCache loading behaviors).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.isLoadTimeGenerated">
      <summary>
        <para>Should the ProceduralMaterial be generated at load time?</para>
        <para>If enabled, the ProceduralMaterial will be generated when the scene loads.
If disabled, the ProceduralMaterial will not be generated until RebuildTextures or RebuildTexturesImmediately is called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.loadingBehavior">
      <summary>
        <para>Get ProceduralMaterial loading behavior.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.isSupported">
      <summary>
        <para>Check if ProceduralMaterials are supported on the current platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.substanceProcessorUsage">
      <summary>
        <para>Used to specify the Substance engine CPU usage.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.preset">
      <summary>
        <para>Set or get an XML string of "input/value" pairs (setting the preset rebuilds the textures).</para>
        <para>This allows to quickly save the set of a ProceduralMaterial's settings and to export them or to re-apply them later on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralMaterial.isReadable">
      <summary>
        <para>Set or get the "Readable" flag for a ProceduralMaterial.</para>
        <para>ProceduralTexture.GetPixels32 can ONLY be used with textures generated from a "Readable" ProceduralMaterial whose texture format is set to RAW.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ProceduralTexture">
      <summary>
        <para>Class for ProceduralTexture handling.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralTexture.GetProceduralOutputType">
      <summary>
        <para>The output type of this ProceduralTexture.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ProceduralTexture.GetPixels32(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Grab pixel values from a ProceduralTexture.</para>
        <para>This only works for ProceduralMaterial instances that have been marked as "Readable" and whose texture format is set to RAW.

The correct sequence to use GetPixels32() is:
 - Set the ProceduralMaterial "Readable" flag using ProceduralMaterial.isReadable
 - Rebuild the ProceduralMaterial's textures using ProceduralMaterial.RebuildTexturesImmediately
 - Call GetPixels32().

</para>
      </summary>
      <param name="x">X-coord of the top-left corner of the rectangle to grab.</param>
      <param name="y">Y-coord of the top-left corner of the rectangle to grab.</param>
      <param name="blockWidth">Width of rectangle to grab.</param>
      <param name="blockHeight">Height of the rectangle to grab.
Get the pixel values from a rectangular area of a ProceduralTexture into an array.
The block is specified by its x,y offset in the texture and by its width and height. The block is "flattened" into the array by scanning the pixel values across rows one by one.</param>
    </member>
    <member name="P:UnityEngine.ProceduralTexture.hasAlpha">
      <summary>
        <para>Check whether the ProceduralMaterial that generates this ProceduralTexture is set to an output format with an alpha channel.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ProceduralTexture.format">
      <summary>
        <para>The format of the pixel data in the texture (Read Only).</para>
        <para>Use this to determine the format of the texture.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpriteAlignment">
      <summary>
        <para>How a Sprite's graphic rectangle is aligned with its pivot point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.Center">
      <summary>
        <para>Pivot is at the center of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.TopLeft">
      <summary>
        <para>Pivot is at the top left corner of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.TopCenter">
      <summary>
        <para>Pivot is at the center of the top edge of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.TopRight">
      <summary>
        <para>Pivot is at the top right corner of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.LeftCenter">
      <summary>
        <para>Pivot is at the center of the left edge of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.RightCenter">
      <summary>
        <para>Pivot is at the center of the right edge of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.BottomLeft">
      <summary>
        <para>Pivot is at the bottom left corner of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.BottomCenter">
      <summary>
        <para>Pivot is at the center of the bottom edge of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.BottomRight">
      <summary>
        <para>Pivot is at the bottom right corner of the graphic rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteAlignment.Custom">
      <summary>
        <para>Pivot is at a custom position within the graphic rectangle.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpritePackingMode">
      <summary>
        <para>Sprite packing modes for the Sprite Packer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingMode.Tight">
      <summary>
        <para>Tight mesh based packing.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingMode.Rectangle">
      <summary>
        <para>Alpha-cropped ractangle packing.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpritePackingRotation">
      <summary>
        <para>Sprite rotation modes for the Sprite Packer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingRotation.None">
      <summary>
        <para>No rotation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpritePackingRotation.Any">
      <summary>
        <para>Any rotation.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpriteMeshType">
      <summary>
        <para>Defines the type of mesh generated for a sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteMeshType.FullRect">
      <summary>
        <para>Rectangle mesh equal to the user specified sprite size.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SpriteMeshType.Tight">
      <summary>
        <para>Tight mesh based on pixel alpha values. As many excess pixels are cropped as possible.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Sprite">
      <summary>
        <para>Represents a Sprite object for use in 2D gameplay.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Sprite.#ctor" />
    <member name="P:UnityEngine.Sprite.bounds">
      <summary>
        <para>Bounds of the Sprite, specified by its center and extents in world space units.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.rect">
      <summary>
        <para>Location of the Sprite on the original Texture, specified in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.pixelsPerUnit">
      <summary>
        <para>The number of pixels in the sprite that correspond to one unit in world space. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.texture">
      <summary>
        <para>Get the reference to the used texture. If packed this will point to the atlas, if not packed will point to the source sprite.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.textureRect">
      <summary>
        <para>Get the rectangle this sprite uses on its texture. Raises an exception if this sprite is tightly packed in an atlas.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.textureRectOffset">
      <summary>
        <para>Gets the offset of the rectangle this sprite uses on its texture to the original sprite bounds. If sprite mesh type is FullRect, offset is zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.packed">
      <summary>
        <para>Returns true if this Sprite is packed in an atlas.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.packingMode">
      <summary>
        <para>If Sprite is packed (see <see cref="Sprite-packed">Sprite.packed</see>), returns its SpritePackingMode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.packingRotation">
      <summary>
        <para>If Sprite is packed (see <see cref="Sprite-packed">Sprite.packed</see>), returns its SpritePackingRotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Sprite.border">
      <summary>
        <para>Returns the border sizes of the sprite.</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SpriteRenderer">
      <summary>
        <para>Renders a Sprite for 2D graphics.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.sprite">
      <summary>
        <para>The Sprite to render.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SpriteRenderer.color">
      <summary>
        <para>Rendering color for the Sprite graphic.</para>
        <para>Becomes the vertex color and can be accessed in a pixel shader.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Sprites.DataUtility">
      <summary>
        <para>Helper utilities for accessing <see cref="Sprite">Sprite</see> data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Sprites.DataUtility.GetInnerUV(UnityEngine.Sprite)">
      <summary>
        <para>Inner UV's of the <see cref="Sprite">Sprite</see>.</para>
        <para>If borders are used they will be taken into consideration.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Sprites.DataUtility.GetOuterUV(UnityEngine.Sprite)">
      <summary>
        <para>Outer UV's of the <see cref="Sprite">Sprite</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Sprites.DataUtility.GetPadding(UnityEngine.Sprite)">
      <summary>
        <para>Return the padding on the sprite.</para>
        <para>If the sprite has been packed it is possible that edges have been cliped from the source sprite. This will give the edge clipped size in pixels for each edge (x=left, y=bottom, z=right, w=top).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Sprites.DataUtility.GetMinSize(UnityEngine.Sprite)">
      <summary>
        <para>Minimum width and height of the <see cref="Sprite">Sprite</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.WWWForm">
      <summary>
        <para>Helper class to generate form data to post to web servers using the <see cref="WWW">WWW</see> class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.#ctor">
      <summary>
        <para>Creates an empty WWWForm object.</para>
        <para>Use the AddField and AddBinaryData methods to insert data into the form.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddField(System.String,System.String)">
      <summary>
        <para>Add a simple field to the form.</para>
        <para>Adds field fieldName with a given string value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddField(System.String,System.String,System.Text.Encoding)">
      <summary>
        <para>Add a simple field to the form.</para>
        <para>Adds field fieldName with a given string value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddField(System.String,System.Int32)">
      <summary>
        <para>Adds a simple field to the form.</para>
        <para>Adds field fieldName with a given integer value. A conveinience for calling
AddField(fieldName, i.ToString).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddBinaryData(System.String,System.Byte[],System.String)">
      <summary>
        <para>Add binary data to the form.</para>
        <para>Use this function to upload files and images to a web server application.
Note that the data is read from the contents of byte array and not from a file.
The fileName parameter is for telling the server what filename to use when saving the uploaded file.If mimeType is not given and first 8 bytes of the data match PNG format header, then the
data is sent with "image/png" mimetype. Otherwise it is sent with "application/octet-stream"
mimetype.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddBinaryData(System.String,System.Byte[])">
      <summary>
        <para>Add binary data to the form.</para>
        <para>Use this function to upload files and images to a web server application.
Note that the data is read from the contents of byte array and not from a file.
The fileName parameter is for telling the server what filename to use when saving the uploaded file.If mimeType is not given and first 8 bytes of the data match PNG format header, then the
data is sent with "image/png" mimetype. Otherwise it is sent with "application/octet-stream"
mimetype.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.WWWForm.AddBinaryData(System.String,System.Byte[],System.String,System.String)">
      <summary>
        <para>Add binary data to the form.</para>
        <para>Use this function to upload files and images to a web server application.
Note that the data is read from the contents of byte array and not from a file.
The fileName parameter is for telling the server what filename to use when saving the uploaded file.If mimeType is not given and first 8 bytes of the data match PNG format header, then the
data is sent with "image/png" mimetype. Otherwise it is sent with "application/octet-stream"
mimetype.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWWForm.headers">
      <summary>
        <para>(Read Only) Returns the correct request headers for posting the form using the <see cref="WWW">WWW</see> class.</para>
        <para>This field only contains one header, /"Content-Type"/,
which is set to the correct mime type for the form: "application/x-www-form-urlencoded" for normal
forms and "multipart/form-data" for forms containing data added using AddBinaryData.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.WWWForm.data">
      <summary>
        <para>(Read Only) The raw data to pass as the POST request body when sending the form.</para>
        <para>Usually, you just pass the WWWForm object directly to the WWW constructor, but you will
need this variable if you want to change the request headers sent to the web server.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Caching">
      <summary>
        <para>The Caching class lets you manage cached AssetBundles, downloaded using <see cref="WWW.LoadFromCacheOrDownload">WWW.LoadFromCacheOrDownload</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Caching.Authorize(System.String,System.String,System.Int64,System.String)">
      <summary>
        <para>(This is a WebPlayer-only function).</para>
        <para>Enables a dedicated, application-specific WebPlayer cache (Dedicated WebPlayer caches require a paid license from Unity Technologies). If you have a dedicated cache license, call this function at WebPlayer application startup with the license information provided to you.
Starting with the release of Unity 3.2, all WebPlayer applications have access to a 50 MiB shared cache; calling the Authorize() function is not necessary.
Starting with the release of Unity 3.4, PC/Mac Standalone players and iOS/Android players have access to a 4 GiB dedicated cache for each application; calling the Authorize() function is not necessary.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Caching.Authorize(System.String,System.String,System.Int64,System.Int32,System.String)">
      <summary>
        <para>(This is a WebPlayer-only function).</para>
        <para>Enables a dedicated, application-specific WebPlayer cache (Dedicated WebPlayer caches require a paid license from Unity Technologies). If you have a dedicated cache license, call this function at WebPlayer application startup with the license information provided to you.
Starting with the release of Unity 3.2, all WebPlayer applications have access to a 50 MiB shared cache; calling the Authorize() function is not necessary.
Starting with the release of Unity 3.4, PC/Mac Standalone players and iOS/Android players have access to a 4 GiB dedicated cache for each application; calling the Authorize() function is not necessary.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Caching.CleanCache">
      <summary>
        <para>Delete all AssetBundle content that has been cached by the current application.</para>
        <para>This function is not available to WebPlayer applications that use the shared cache.</para>
      </summary>
      <returns>
        <para>True when cache cleaning succeeded, false if cache was in use.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.IsVersionCached(System.String,System.Int32)">
      <summary>
        <para>Checks if an AssetBundle is cached.</para>
        <para>When using the default shared cache, the URL of the WebPlayer application bundle is automatically prepended to the url parameter; this prevents filename collisions with identically-named AssetBundles used by other developers' WebPlayer applications. WebPlayer applications that use a dedicated cache do not experience this behavior.
This function can be utilized to enable AssetBundle preloading. First, call Caching.IsVersionCached() to see if the current version of an AssetBundle is already cached. If the AssetBundle is not cached, it can be preloaded in the background so that it is immediately available for loading into memory when requested.</para>
      </summary>
      <returns>
        <para>True if an AssetBundle matching the <c>url</c> and <c>version</c> parameters has previously been loaded using WWW.LoadFromCacheOrDownload() and is currently stored in the cache. Returns false if the AssetBundle is not in cache, either because it has been flushed from the cache or was never loaded using the Caching API.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Caching.MarkAsUsed(System.String,System.Int32)">
      <summary>
        <para>Bumps the timestamp of a cached file to be the current time.</para>
        <para>This allows you to keep files in the cache even if you are not explicitly loading them.
Returns true if the url is cached.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Caching.SetNoBackupFlag(System.String,System.Int32)" />
    <member name="M:UnityEngine.Caching.ResetNoBackupFlag(System.String,System.Int32)" />
    <member name="P:UnityEngine.Caching.spaceFree">
      <summary>
        <para>The number of currently unused bytes in the cache.</para>
        <para>When the cache is empty, this value equals maximumAvailableDiskSpace. As AssetBundles are stored in the cache, this value will decrease. Caching manages cached content based on a Least Recently Used (LRU) algorithm. If insufficient space is available in the cache to store a requested AssetBundle, the oldest AssetBundles in the cache will be iteratively removed until enough space is free for the new AssetBundle.
This property does not account for total available disk space. If a user's computer has less available disk space on the drive where the cache is located than spaceFree, the full amount of spaceFree will not be usable.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.maximumAvailableDiskSpace">
      <summary>
        <para>The total number of bytes that can potentially be allocated for caching.</para>
        <para>This value can be set to a smaller number in order to limit the amount of disk space used by cached AssetBundles.
The WebPlayer shared cache allows up to 50 MiB of cached AssetBundles. PC/Mac Standalone applications and iOS/Android applications have a limit of 4 GiB.
WebPlayer applications that make use of a dedicated cache are limited to the number of bytes specified in the Caching license agreement.
This property does not account for total available disk space. If a user's computer has less available disk space on the drive where the cache is located than maximumAvailableDiskSpace, the full amount of maximumAvailableDiskSpace will not be usable.
Cache storage is allocated on an as-needed basis in order to minimize disk space usage.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.spaceOccupied">
      <summary>
        <para>Used disk space in bytes.</para>
        <para>Initially this is 0. As you download files to the cache, this will increment.
If insufficient space is available in the cache to store a requested AssetBundle, the least-recently-used AssetBundles in the cache will be iteratively removed until enough space is available for the new AssetBundle.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.expirationDelay">
      <summary>
        <para>The number of seconds that an AssetBundle may remain unused in the cache before it is automatically deleted.</para>
        <para>This value defaults to 150 days (12,960,000 seconds).
Lower values will cause the cache to be cleaned more aggressively in order to minimize disk storage usage. The delay cannot be set greater than 12,960,000 seconds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.enabled">
      <summary>
        <para>Is Caching enabled?</para>
        <para>WebPlayer users may disable Caching for all WebPlayer applications by right-clicking on the WebPlayer content, selecting "Setup...", and checking the 'Disable all caching' checkbox. If caching is disabled, WWW.LoadFromCacheOrDownload() will continue to function, but will never cache downloaded AssetBundles.
Caching is always enabled for PC/Mac Standalone and iOS/Android player builds.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Caching.ready">
      <summary>
        <para>Is caching ready?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AsyncOperation">
      <summary>
        <para>Asynchronous operation coroutine.</para>
        <para>You can yield until asynchronous operation continues, or manually check whether it's done
(isDone) or progress (progress).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AsyncOperation.isDone">
      <summary>
        <para>Has the operation finished? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AsyncOperation.progress">
      <summary>
        <para>What's the operation's progress. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AsyncOperation.priority">
      <summary>
        <para>Priority lets you tweak in which order async operation calls will be performed.</para>
        <para>When multiple asynchronous operations are queued up, the operation with the
higher priority will be executed first. Once an operation has been started on
the background thread, changing the priority will have no effect anymore.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AsyncOperation.allowSceneActivation">
      <summary>
        <para>Allow scenes to be activated as soon as it is ready.</para>
        <para>When used in combination with LoadLevelAsync &amp;amp; LoadLevelAsyncAdditive it allows you
to delay the actual activation of the scene. (And unloading of the previous scene).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NetworkReachability">
      <summary>
        <para>Describes network reachability options.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkReachability.NotReachable">
      <summary>
        <para>Network is not reachable.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkReachability.ReachableViaCarrierDataNetwork">
      <summary>
        <para>Network is reachable via carrier data network.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.NetworkReachability.ReachableViaLocalAreaNetwork">
      <summary>
        <para>Network is reachable via WiFi or cable.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Application">
      <summary>
        <para>Access to application run-time data.</para>
        <para>This class contains static methods for looking up information about and controlling the run-time data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.Quit">
      <summary>
        <para>Quits the player application.</para>
        <para>Quit is ignored in the editor or the web player.
IMPORTANT: In most cases termination of application under iOS should be left at the user discretion.
Consult Apple Technical Page qa1561 for further details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.CancelQuit">
      <summary>
        <para>Cancels quitting the application. This is useful for showing a splash screen at the end of a game.</para>
        <para>This function only works in the player and does nothing in the web player or editor.
IMPORTANT: This function has no effect on iPhone. Application can not prevent termination under iPhone OS.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.LoadLevel(System.Int32)">
      <summary>
        <para>Loads the level by its name or index.</para>
        <para>Before you can load a level you have to add it to the list of levels used in the game.
Use File-&amp;gt;Build Settings... in Unity and add the levels you need to the level list there.
MonoBehaviour.OnLevelWasLoaded is called on all active game objects after the level has been loaded.</para>
      </summary>
      <param name="index">The level to load.</param>
    </member>
    <member name="M:UnityEngine.Application.LoadLevel(System.String)">
      <summary>
        <para>Loads the level by its name or index.</para>
        <para>Before you can load a level you have to add it to the list of levels used in the game.
Use File-&amp;gt;Build Settings... in Unity and add the levels you need to the level list there.
MonoBehaviour.OnLevelWasLoaded is called on all active game objects after the level has been loaded.</para>
      </summary>
      <param name="name">The name of the level to load.</param>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAsync(System.Int32)">
      <summary>
        <para>Loads the level asynchronously in the background.</para>
        <para>Unity will completely load all assets and all objects in the scene in a background loading thread.
This allows you to load new levels while still playing the current one, show a progress bar or
create a completely streaming world where you constantly load and unload different parts of the
world based on the player position, without any hiccups in game play.isDone variable from the resulting AsyncOperation can be used to query
if the level load has completed. The result of a LoadLevelAsync can also be used to yield in a coroutine.When building a player Unity automatically optimizes assets in such a way that LoadLevelAsync will
load them from disk linearly to avoid seek times.  Note that background loading performance in the
Unity Editor is much lower than in the web player or standalone build. In the Editor you might also
get more loading hiccups than in the player.This function requires Unity Pro.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAsync(System.String)">
      <summary>
        <para>Loads the level asynchronously in the background.</para>
        <para>Unity will completely load all assets and all objects in the scene in a background loading thread.
This allows you to load new levels while still playing the current one, show a progress bar or
create a completely streaming world where you constantly load and unload different parts of the
world based on the player position, without any hiccups in game play.isDone variable from the resulting AsyncOperation can be used to query
if the level load has completed. The result of a LoadLevelAsync can also be used to yield in a coroutine.When building a player Unity automatically optimizes assets in such a way that LoadLevelAsync will
load them from disk linearly to avoid seek times.  Note that background loading performance in the
Unity Editor is much lower than in the web player or standalone build. In the Editor you might also
get more loading hiccups than in the player.This function requires Unity Pro.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAdditiveAsync(System.Int32)">
      <summary>
        <para>Loads the level additively and asynchronously in the background.</para>
        <para>Unlike LoadLevelAsync, LoadLevelAdditiveAsync does not destroy
objects in the current level. Objects from the new level are added to the
current scene. This is useful for creating continuous virtual worlds, where more
content is loaded in as you walk through the environment.Unity will completely load all assets and all objects in the scene in a background loading thread.
This allows you to create a completely streaming world where you constantly load and
unload different parts of the world based on the player position, without any hiccups in game play.isDone variable from the resulting AsyncOperation can be used to query
if the level load has completed. The result of a LoadLevelAdditiveAsync can also be used to yield in a coroutine.When building a player Unity automatically optimizes assets in such a way that LoadLevelAdditiveAsync will
load them from disk linearly to avoid seek times.  Note that background loading performance in the
Unity Editor is much lower than in the web player or standalone build. In the Editor you might also
get more loading hiccups than in the player.This function requires Unity Pro.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAdditiveAsync(System.String)">
      <summary>
        <para>Loads the level additively and asynchronously in the background.</para>
        <para>Unlike LoadLevelAsync, LoadLevelAdditiveAsync does not destroy
objects in the current level. Objects from the new level are added to the
current scene. This is useful for creating continuous virtual worlds, where more
content is loaded in as you walk through the environment.Unity will completely load all assets and all objects in the scene in a background loading thread.
This allows you to create a completely streaming world where you constantly load and
unload different parts of the world based on the player position, without any hiccups in game play.isDone variable from the resulting AsyncOperation can be used to query
if the level load has completed. The result of a LoadLevelAdditiveAsync can also be used to yield in a coroutine.When building a player Unity automatically optimizes assets in such a way that LoadLevelAdditiveAsync will
load them from disk linearly to avoid seek times.  Note that background loading performance in the
Unity Editor is much lower than in the web player or standalone build. In the Editor you might also
get more loading hiccups than in the player.This function requires Unity Pro.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAdditive(System.Int32)">
      <summary>
        <para>Loads a level additively.</para>
        <para>Unlike LoadLevel, LoadLevelAdditive does not destroy objects in the current level. Objects from the new
level are added to the current scene. This is useful for creating continuous virtual worlds, where more
content is loaded in as you walk through the environment.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.LoadLevelAdditive(System.String)">
      <summary>
        <para>Loads a level additively.</para>
        <para>Unlike LoadLevel, LoadLevelAdditive does not destroy objects in the current level. Objects from the new
level are added to the current scene. This is useful for creating continuous virtual worlds, where more
content is loaded in as you walk through the environment.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.GetStreamProgressForLevel(System.Int32)">
      <summary>
        <para>How far has the download progressed? [0...1].</para>
        <para>In the webplayer this returns the progress of this level.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.GetStreamProgressForLevel(System.String)">
      <summary>
        <para>How far has the download progressed? [0...1].</para>
        <para>In the webplayer this returns the progress of this level.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.CanStreamedLevelBeLoaded(System.Int32)">
      <summary>
        <para>Can the streamed level be loaded?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.CanStreamedLevelBeLoaded(System.String)">
      <summary>
        <para>Can the streamed level be loaded?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.CaptureScreenshot(System.String,System.Int32)">
      <summary>
        <para>Captures a screenshot at path <c>filename</c> as a PNG file.</para>
        <para>If the file exists already, it will be overwritten.
This function does nothing if used from inside the web player.  On mobile platforms the filename is appended to the persistent data path.When superSize parameter is larger than 1, a larger resolution screenshot will be
produced. For example, passing 4 will make the screenshot be 4x4 larger than it normally
would. This is useful to produce screenshots for printing.</para>
      </summary>
      <param name="filename">Pathname to save the screenshot file to.</param>
      <param name="superSize">Factor by which to increase resolution.</param>
    </member>
    <member name="M:UnityEngine.Application.CaptureScreenshot(System.String)">
      <summary>
        <para>Captures a screenshot at path <c>filename</c> as a PNG file.</para>
        <para>If the file exists already, it will be overwritten.
This function does nothing if used from inside the web player.  On mobile platforms the filename is appended to the persistent data path.When superSize parameter is larger than 1, a larger resolution screenshot will be
produced. For example, passing 4 will make the screenshot be 4x4 larger than it normally
would. This is useful to produce screenshots for printing.</para>
      </summary>
      <param name="filename">Pathname to save the screenshot file to.</param>
    </member>
    <member name="M:UnityEngine.Application.HasProLicense">
      <summary>
        <para>Is Unity activated with the Pro license?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.ExternalCall(System.String,System.Object[])">
      <summary>
        <para>Calls a function in the containing web page <i>(Web Player only)</i>.</para>
        <para>This will call JavaScript function functionName in the web page that contains
the web player, passing given arguments to it. Supported argument types are the
primitive types (string, int, float, char) and arrays of them. Any other objects
are converted to string (using ToString method) and passed as strings.The function is called non-blocking, i.e. ExternalCall immediately returns without waiting for the function that was called to complete.The number of passed arguments can be varying:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.ExternalEval(System.String)">
      <summary>
        <para>Evaluates script snippet in the containing web page <i>(Web Player only)</i>.</para>
        <para>This will execute JavaScript snippet script in the web page that contains
the web player.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.OpenURL(System.String)">
      <summary>
        <para>Opens the <c>url</c> in a browser.</para>
        <para>In the editor or standalone player this will open a new page in the default browser with the url. It will also bring the browser application to the front.When executed in the web player, the page the plugin is contained in will be redirected to the url.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.RegisterLogCallback(UnityEngine.Application.LogCallback)">
      <summary>
        <para>Register a delegate to be called on log messages.</para>
        <para>Pass null to remove log handler.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.RegisterLogCallbackThreaded(UnityEngine.Application.LogCallback)">
      <summary>
        <para>Register a delegate to be called on log messages.</para>
        <para>The only difference between this function and
RegisterLogCallback is that this function gets called from a
different thread.Note: You should *only* use this function if you know what you
are doing, else just use Application.RegisterLogCallback.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.RequestUserAuthorization(UnityEngine.UserAuthorization)">
      <summary>
        <para>Request authorization to use the webcam or microphone in the Web Player.</para>
        <para>For security reasons (to avoid implementing a web player spying on users), we require
you to have the user explicitly allow these features in the web player. To do so, you need
to call Application.RequestUserAuthorization, which shows a dialog box to the user,
and wait for operation to complete before being able to use these features.
Use Application.HasUserAuthorization to query the result of the operation.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Application.HasUserAuthorization(UnityEngine.UserAuthorization)">
      <summary>
        <para>Check if the user has authorized use of the webcam or microphone in the Web Player.</para>
        <para>This is used to check the result of a previous call to Application.RequestUserAuthorization.
Explicit user consent to use features is only needed in the Web Player. In other build
targets, this function will always return true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.loadedLevel">
      <summary>
        <para>The level index that was last loaded (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.loadedLevelName">
      <summary>
        <para>The name of the level that was last loaded (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isLoadingLevel">
      <summary>
        <para>Is some level being loaded? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.levelCount">
      <summary>
        <para>The total number of levels available (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.streamedBytes">
      <summary>
        <para>How many bytes have we downloaded from the main unity web stream (Read Only).</para>
        <para>In the webplayer this returns the number of compressed bytes downloaded so far.
In standalone player or the editor this always returns zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isPlaying">
      <summary>
        <para>Returns true when in any kind of player (Read Only).</para>
        <para>Returns true in the Unity editor when in play mode.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isEditor">
      <summary>
        <para>Are we running inside the Unity editor? (Read Only)</para>
        <para>Returns true if the game is being run from the Unity editor; false if run from any deployment target.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isWebPlayer">
      <summary>
        <para>Are we running inside a web player? (Read Only)</para>
        <para>Returns true if the game is being run from the Unity web player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.platform">
      <summary>
        <para>Returns the platform the game is running (Read Only).</para>
        <para>Use this property if you absolutely need to do some platform dependent work.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isMobilePlatform">
      <summary>
        <para>Is the current Runtime platform a known mobile platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.isConsolePlatform">
      <summary>
        <para>Is the current Runtime platform a known console platform.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.runInBackground">
      <summary>
        <para>Should the player be running when the application is in the background?</para>
        <para>Default is false (application pauses when it is in background).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.dataPath">
      <summary>
        <para>Contains the path to the game data folder (Read Only).</para>
        <para>The value depends on which platform you are running on:Unity Editor: &amp;lt;path to project folder&amp;gt;/AssetsMac player: &amp;lt;path to player app bundle&amp;gt;/ContentsiOS player: &amp;lt;path to player app bundle&amp;gt;/&amp;lt;AppName.app&amp;gt;/Data (this folder is read only, use Application.persistentDataPath to save data).Win player: &amp;lt;path to executablename_Data folder&amp;gt;Web player: The absolute url to the player data file folder (without the actual data file name)Flash: The absolute url to the player data file folder (without the actual data file name)
Note that the string returned on a PC will use a forward slash as a folder separator.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.streamingAssetsPath">
      <summary>
        <para>Contains the path to the StreamingAssets folder (Read Only).</para>
        <para>If you have a "StreamingAssets" folder in the Assets folder of your project, it will be
copied to your player builds and be present in the path given by
Application.streamingAssetsPath.Note that on some platforms it is not possible to directly access the StreamingAssets folder
because there is no file system access in the web platforms, and because it is compressed
into the .apk file on Android. On those platforms, a url will be returned, which can be used
using the WWW class.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.persistentDataPath">
      <summary>
        <para>Contains the path to a persistent data directory (Read Only).</para>
        <para>The value is a directory path where data expected to be kept between runs can be stored. When publishing on iOS and Android, persistentDataPath will point to a public directory on the device. Files in this location won't be erased with each update of the App. However, you should bear in mind that this is not foolproof against users' actions. For example, removing the SD Card would make data stored on it inaccessible. Note that when you build the app, a GUID will be generated based on the Bundle Identifier, and this GUID will be part of persistentDataPath. If you keep the same Bundle Identifier in future versions then the app will continue accessing the same location on every update.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.temporaryCachePath">
      <summary>
        <para>Contains the path to a temporary data / cache directory (Read Only).</para>
        <para>The value is a directory path where temporary data can be stored.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.srcValue">
      <summary>
        <para>The path to the web player data file relative to the html file (Read Only).</para>
        <para>Actually this is whatever path is written in the html file as a src parameter to object and embed tags. So if it's the
absolute URL, srcValue will have the absolute path.Application.absoluteURL and Application.srcValue allow you to detect if your unityWeb data file was moved to another location
or is being linked to. You might want to protect against both to prevent piracy of your data files.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.absoluteURL">
      <summary>
        <para>The absolute path to the web player data file (Read Only).</para>
        <para>Application.absoluteURL and Application.srcValue allow you to detect if your unityWeb data file was moved to another location
or is being linked to. You might want to protect against both to prevent piracy of your data files.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.absoluteUrl">
      <summary>
        <para>The absolute path to the web player data file (Read Only).</para>
        <para>Application.absoluteURL and Application.srcValue allow you to detect if your unityWeb data file was moved to another location
or is being linked to. You might want to protect against both to prevent piracy of your data files.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.unityVersion">
      <summary>
        <para>The version of the Unity runtime used to play the content.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.webSecurityEnabled">
      <summary>
        <para>Indicates whether Unity's webplayer security model is enabled.</para>
        <para>In the web player, this will always return true.
In the Unity editor, it will return true if web security emulation is enabled (Menu-&amp;gt;Edit-&amp;gt;Project Settings-&amp;gt;Editor) and false if the emulation is disabled.
On all other platforms, this will return false;
This property can only be read.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.targetFrameRate">
      <summary>
        <para>Instructs game to try to render at a specified frame rate.</para>
        <para>Setting targetFrameRate to -1 (the default) makes standalone games render
as fast as they can, and web player games to render at 50-60 frames/second depending on the platform.Note that setting targetFrameRate does not guarantee that frame rate. There can be fluctuations
due to platform specifics, or the game might not achieve the frame rate because the computer is too slow.If vsync is set in quality setting, the target framerate is ignored, and the vblank interval is used instead.
The vBlankCount property on qualitysettings can be used to limit the framerate to half of the screens
refresh rate (60 fps screen can be limited to 30 fps by setting vBlankCount to 2)/targetFrameRate/ is ignored in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.systemLanguage">
      <summary>
        <para>The language the user's operating system is running in.</para>
        <para>You can use this to automatically pick a localization for your content based on the user's system language.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.backgroundLoadingPriority">
      <summary>
        <para>Priority of background loading thread.</para>
        <para>Lets you control how long it takes to load data asynchronously vs.
performance impact on the game while loading in the background.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.internetReachability">
      <summary>
        <para>Returns the type of Internet reachability currently possible on the device.</para>
        <para>This property is mostly useful on handhelds to distinguish fast and
cheap WiFi connection from carrier networking.Note: Do not use this property to determine the actual connectivity.
E.g. the device can be connected to a hot spot, but not have the actual
route to the network. Non-handhelds are considered to always be capable
of NetworkReachability.ReachableViaLocalAreaNetwork.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.genuine">
      <summary>
        <para>Returns false if application is altered in any way after it was built.</para>
        <para>Otherwise returns true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Application.genuineCheckAvailable">
      <summary>
        <para>Returns true if application integrity can be confirmed.</para>
        <para>Otherwise returns false.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.UserAuthorization">
      <summary>
        <para>Constants to pass to <see cref="Application.RequestUserAuthorization">Application.RequestUserAuthorization</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UserAuthorization.WebCam">
      <summary>
        <para>Request permission to use any video input sources attached to the computer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.UserAuthorization.Microphone">
      <summary>
        <para>Request permission to use any audio input sources attached to the computer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Behaviour">
      <summary>
        <para>Behaviours are Components that can be enabled or disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Behaviour.enabled">
      <summary>
        <para>Enabled Behaviours are Updated, disabled Behaviours are not.</para>
        <para>This is shown as the small checkbox in the inspector of the behaviour.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Behaviour.isActiveAndEnabled">
      <summary>
        <para>Has the Behaviour had enabled called.</para>
        <para>True while the behaviour is enabled, false when disabled.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RenderingPath">
      <summary>
        <para>Rendering path of a <see cref="Camera">Camera</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderingPath.UsePlayerSettings">
      <summary>
        <para>Use Player Settings.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderingPath.VertexLit">
      <summary>
        <para>Vertex Lit.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderingPath.Forward">
      <summary>
        <para>Forward Rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.RenderingPath.DeferredLighting">
      <summary>
        <para>Deferred Lighting.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TransparencySortMode">
      <summary>
        <para>Transparent object sorting mode of a <see cref="Camera">Camera</see>.</para>
        <para>By default, perspective cameras sort objects based on distance from camera position
to the object center; and orthographic cameras sort based on distance along the view direction.If you're making a 2D game with a perspective camera, you might want to use TransparencySortMode.Orthographic
sort mode so that objects are sorted based on distance along the camera's view.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TransparencySortMode.Default">
      <summary>
        <para>Default sorting mode.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TransparencySortMode.Perspective">
      <summary>
        <para>Perspective sorting mode.</para>
        <para>Transparent objects will be sorted based on distance from camera position to the object center.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TransparencySortMode.Orthographic">
      <summary>
        <para>Orthographic sorting mode.</para>
        <para>Transparent objects will be sorted based on distance along the camera's view.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Camera">
      <summary>
        <para>A Camera is a device through which the player views the world.</para>
        <para>A screen space point is defined in pixels. The bottom-left of the screen is (0,0); the right-top
is (pixelWidth,pixelHeight). The z position is in world units from the camera.A viewport space point is normalized and relative to the camera. The bottom-left of the camera is
(0,0); the top-right is (1,1). The z position is in world units from the camera.A world space point is defined in global coordinates (eg. Transform.position).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.GetAllCameras(UnityEngine.Camera[])">
      <summary>
        <para>Fills an array of Camera with the current cameras in the scene, without allocating a new array.</para>
        <para>The passed in array needs to be of minimum size of what allCamerasCount
.When the array size is larger than the allCamerasCount value, only the first elements up to allCamerasCount will be filled up.When the array size is smaller than the allCamerasCount value, an argument exception is thrown.When the array argument passed in is null, this call will throw a nullreference exception.The return value will indicate how many cameras where put into the array.</para>
      </summary>
      <param name="cameras">An array to be filled up with cameras currently in the scene.</param>
    </member>
    <member name="M:UnityEngine.Camera.Render">
      <summary>
        <para>Render the camera manually.</para>
        <para>This will render the camera. It will use the camera's clear flags, target texture and all other settings.The camera will send OnPreCull, OnPreRender &amp;amp;
OnPostRender to any scripts attached, and render any eventual image filters.This is used for taking precise control of render order. To make use of this feature, create a 
camera and disable it. Then call Render on it.You are not able to call the Render function from a camera that is currently rendering. If you wish to
do this create a copy of the camera, and make it match the original one using CopyFrom.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.RenderWithShader(UnityEngine.Shader,System.String)">
      <summary>
        <para>Render the camera with shader replacement.</para>
        <para>See Rendering with Replaced Shaders page for details.This will render the camera. It will use the camera's clear flags, target texture and all other settings.The camera will not send OnPreCull, OnPreRender or
OnPostRender to attached scripts. Image filters will not be rendered either.This is used for special effects, e.g. rendering screenspace normal buffer of the whole scene,
heat vision and so on. To make use of this feature, usually you create a camera and disable it.
Then call RenderWithShader on it.You are not able to call the Render function from a camera that is currently rendering. If you wish to
do this create a copy of the camera, and make it match the original one using CopyFrom.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.SetReplacementShader(UnityEngine.Shader,System.String)">
      <summary>
        <para>Make the camera render with shader replacement.</para>
        <para>See Rendering with Replaced Shaders page for details.After calling this function, camera will render its view with shader replacement. Call
ResetReplacementShader to reset it back to normal rendering.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetReplacementShader">
      <summary>
        <para>Remove shader replacement from camera.</para>
        <para>Call this to end the effect of setting SetReplacementShader.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.Cubemap)">
      <summary>
        <para>Render into a static cubemap from this camera.</para>
        <para>This function is mostly useful in the editor for "baking" static cubemaps of your scene. See
wizard example below. If you want a realtime-updated cubemap, use RenderToCubemap variant that uses
a RenderTexture with isCubemap flag, see below.Camera's position, clear flags and clipping plane distances will be used to
render into cubemap faces. faceMask is a bitfield indicating which cubemap faces should be rendered into. Each
bit that is set corresponds to a face. Bit numbers are integer values of CubemapFace enum.
By default all six cubemap faces will be rendered (default value 63 has six lowest bits on).This function will return false if rendering to cubemap fails. Some graphics hardware does not
support the functionality.Note: This is a Unity PRO feature.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.Cubemap,System.Int32)">
      <summary>
        <para>Render into a static cubemap from this camera.</para>
        <para>This function is mostly useful in the editor for "baking" static cubemaps of your scene. See
wizard example below. If you want a realtime-updated cubemap, use RenderToCubemap variant that uses
a RenderTexture with isCubemap flag, see below.Camera's position, clear flags and clipping plane distances will be used to
render into cubemap faces. faceMask is a bitfield indicating which cubemap faces should be rendered into. Each
bit that is set corresponds to a face. Bit numbers are integer values of CubemapFace enum.
By default all six cubemap faces will be rendered (default value 63 has six lowest bits on).This function will return false if rendering to cubemap fails. Some graphics hardware does not
support the functionality.Note: This is a Unity PRO feature.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.RenderTexture)">
      <summary>
        <para>Render into a cubemap from this camera.</para>
        <para>This is used for real-time reflections into cubemap render textures. It can be quite expensive though,
especially if all six cubemap faces are rendered each frame.Camera's position, clear flags and clipping plane distances will be used to
render into cubemap faces. faceMask is a bitfield indicating which cubemap faces should be rendered into. Each
bit that is set corresponds to a face. Bit numbers are integer values of CubemapFace enum.
By default all six cubemap faces will be rendered (default value 63 has six lowest bits on).This function will return false if rendering to cubemap fails. Some graphics hardware does not
support the functionality.Note: This is a Unity PRO feature.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.RenderToCubemap(UnityEngine.RenderTexture,System.Int32)">
      <summary>
        <para>Render into a cubemap from this camera.</para>
        <para>This is used for real-time reflections into cubemap render textures. It can be quite expensive though,
especially if all six cubemap faces are rendered each frame.Camera's position, clear flags and clipping plane distances will be used to
render into cubemap faces. faceMask is a bitfield indicating which cubemap faces should be rendered into. Each
bit that is set corresponds to a face. Bit numbers are integer values of CubemapFace enum.
By default all six cubemap faces will be rendered (default value 63 has six lowest bits on).This function will return false if rendering to cubemap fails. Some graphics hardware does not
support the functionality.Note: This is a Unity PRO feature.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.CopyFrom(UnityEngine.Camera)">
      <summary>
        <para>Makes this camera's settings match other camera.</para>
        <para>This will copy all camera's variables (field of view, clear flags, culling mask, ...) from the other/
camera. It will also set this camera's transform to match the other camera, as well as this camera's
layer to match the layer of the other camera.This can be useful if you want one camera to match the other camera's setup, when doing custom
rendering effects. For example when using RenderWithShader.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.CalculateObliqueMatrix(UnityEngine.Vector4)">
      <summary>
        <para>Calculates and returns oblique near-plane projection matrix.</para>
        <para>Given a clip plane vector, this function returns camera's projection matrix which has this clip plane set as its near plane.</para>
      </summary>
      <param name="clipPlane">Vector4 that describes a clip plane.</param>
      <returns>
        <para>Oblique near-plane projection matrix.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Camera.SetTargetBuffers(UnityEngine.RenderBuffer,UnityEngine.RenderBuffer)">
      <summary>
        <para>Sets the Camera to render to the chosen buffers of one or more RenderTextures.</para>
      </summary>
      <param name="colorBuffer">The RenderBuffer to which color information will be rendered.</param>
      <param name="depthBuffer">The RenderBuffer to which depth information will be rendered.</param>
    </member>
    <member name="M:UnityEngine.Camera.SetTargetBuffers(UnityEngine.RenderBuffer[],UnityEngine.RenderBuffer)">
      <summary>
        <para>Sets the Camera to render to the chosen buffers of one or more RenderTextures.</para>
      </summary>
      <param name="colorBuffer">The RenderBuffer to which color information will be rendered.</param>
      <param name="depthBuffer">The RenderBuffer to which depth information will be rendered.</param>
    </member>
    <member name="M:UnityEngine.Camera.ResetWorldToCameraMatrix">
      <summary>
        <para>Make the rendering position reflect the camera's position in the scene.</para>
        <para>Call this to end the effect of setting worldToCameraMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetProjectionMatrix">
      <summary>
        <para>Make the projection reflect normal camera's parameters.</para>
        <para>Call this to end the effect of setting projectionMatrix.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ResetAspect">
      <summary>
        <para>Revert the aspect ratio to the screen's aspect ratio.</para>
        <para>Call this to end the effect of setting aspect.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.WorldToScreenPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>position</c> from world space into screen space.</para>
        <para>Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top
is (pixelWidth,pixelHeight). The z position is in world units from the camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.WorldToViewportPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>position</c> from world space into viewport space.</para>
        <para>Viewport space is normalized and relative to the camera. The bottom-left of the camera is
(0,0); the top-right is (1,1). The z position is in world units from the camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ViewportToWorldPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>position</c> from viewport space into world space.</para>
        <para>Viewport space is normalized and relative to the camera. The bottom-left of the camera is
(0,0); the top-right is (1,1). The z position is in world units from the camera.Note that it transforms a x-y screen position, into a x-y-z position in 3D space. You provide the function with a vector where the x-y components of the vector are the screen coordinates and the z component is the distance of the resulting plane from the camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ScreenToWorldPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>position</c> from screen space into world space.</para>
        <para>Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top
is (pixelWidth,pixelHeight). The z position is in world units from the camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ScreenToViewportPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>position</c> from screen space into viewport space.</para>
        <para>Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top
is (pixelWidth,pixelHeight). The z position is in world units from the camera.Viewport space is normalized and relative to the camera. The bottom-left of the camera is
(0,0); the top-right is (1,1). The z position is in world units from the camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ViewportToScreenPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>position</c> from viewport space into screen space.</para>
        <para>Viewport space is normalized and relative to the camera. The bottom-left of the camera is
(0,0); the top-right is (1,1). The z position is in world units from the camera.Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top
is (pixelWidth,pixelHeight). The z position is in world units from the camera.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ViewportPointToRay(UnityEngine.Vector3)">
      <summary>
        <para>Returns a ray going from camera through a viewport point.</para>
        <para>Resulting ray is in world space, starting on the near plane of the camera and going through
position's (x,y) coordinates on the viewport (position.z is ignored).Viewport coordinates are normalized and relative to the camera. The bottom-left of the camera is (0,0); the top-right is (1,1).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Camera.ScreenPointToRay(UnityEngine.Vector3)">
      <summary>
        <para>Returns a ray going from camera through a screen point.</para>
        <para>Resulting ray is in world space, starting on the near plane of the camera and going through
position's (x,y) pixel coordinates on the screen (position.z is ignored).Screenspace is defined in pixels. The bottom-left of the screen is (0,0); the right-top is (pixelWidth,pixelHeight).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.fieldOfView">
      <summary>
        <para>The field of view of the camera in degrees.</para>
        <para>This is the vertical field of view; horizontal
FOV varies depending on the viewport's aspect ratio.
Field of view is ignored when camera is orthographic (see orthographic).
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.nearClipPlane">
      <summary>
        <para>The near clipping plane distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.farClipPlane">
      <summary>
        <para>The far clipping plane distance.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.renderingPath">
      <summary>
        <para>Rendering path.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.actualRenderingPath">
      <summary>
        <para>Actually used rendering path (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.hdr">
      <summary>
        <para>High dynamic range rendering.</para>
        <para>Should this camera use HDR rendering?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.orthographicSize">
      <summary>
        <para>Camera's half-size when in orthographic mode.</para>
        <para>This is half of the vertical size of the viewing volume. Horizontal viewing
size varies depending on viewport's aspect ratio.
Orthographic size is ignored when camera is not orthographic (see orthographic).
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.orthographic">
      <summary>
        <para>Is the camera orthographic (<i>true</i>) or perspective (<i>false</i>)?</para>
        <para>When ortho is true, camera's viewing volume is defined by orthographicSize.
When orthographic is false, camera's viewing volume is defined by fieldOfView.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.transparencySortMode">
      <summary>
        <para>Transparent object sorting mode.</para>
        <para>By default, perspective cameras sort objects based on distance from camera position
to the object center; and orthographic cameras sort based on distance along the view direction.If you're making a 2D game with a perspective camera, you might want to use TransparencySortMode.Orthographic
sort mode so that objects are sorted based on distance along the camera's view.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.depth">
      <summary>
        <para>Camera's depth in the camera rendering order.</para>
        <para>Cameras with lower depth are rendered before cameras with higher depth.Use this to control the order in which cameras are drawn if you have multiple cameras and some of them don't cover the full screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.aspect">
      <summary>
        <para>The aspect ratio (width divided by height).</para>
        <para>By default the aspect ratio is automatically calculated from the screen's aspect ratio, even if the camera
is not rendering to full area.
If you modify the aspect ratio of the camera, the value will stay until you call camera.ResetAspect(); which resets the aspect to the screen's aspect ratio.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.cullingMask">
      <summary>
        <para>This is used to render parts of the scene selectively.</para>
        <para>If the GameObject's layerMask AND the camera's cullingMask is zero then the game object will be invisible from this camera.
See Layers for more information.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.eventMask">
      <summary>
        <para>Mask to select which layers can trigger events on the camera.</para>
        <para>Just as the camera's cullingMask determines if the camera is able to see the GameObject, the event mask determines whether the GameObject is able to receive mouse events.
Only objects visible by the camera and whose layerMask overlaps with the camera's eventMask will be able to receive OnMouseXXX events.
Setting this mask to zero will improve performance and is recommended if you don't use OnMouseXXX events.
See Layers for more information.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.backgroundColor">
      <summary>
        <para>The color with which the screen will be cleared.</para>
        <para>Only used if clearFlags are set to CameraClearFlags.SolidColor (or CameraClearFlags.Skybox but the skybox is not set up).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.rect">
      <summary>
        <para>Where on the screen is the camera rendered in normalized coordinates.</para>
        <para>The values in rect range from zero (left/bottom) to one (right/top).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.pixelRect">
      <summary>
        <para>Where on the screen is the camera rendered in pixel coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.targetTexture">
      <summary>
        <para>Destination render texture <i>(Unity Pro only)</i>.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.pixelWidth">
      <summary>
        <para>How wide is the camera in pixels (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.pixelHeight">
      <summary>
        <para>How tall is the camera in pixels (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.cameraToWorldMatrix">
      <summary>
        <para>Matrix that transforms from camera space to world space (Read Only).</para>
        <para>Use this to calculate where in the world a specific camera space point is.Note that camera space matches OpenGL convention: camera's forward is the negative
Z axis. This is different from Unity's convention, where forward is the positive Z
axis.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.worldToCameraMatrix">
      <summary>
        <para>Matrix that transforms from world to camera space.</para>
        <para>Use this to calculate the camera space position of objects or to provide custom
camera's location that is not based on the transform.Note that camera space matches OpenGL convention: camera's forward is the negative
Z axis. This is different from Unity's convention, where forward is the positive Z
axis.If you change this matrix, the camera no longer updates its rendering based on its Transform.
This lasts until you call ResetWorldToCameraMatrix.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.projectionMatrix">
      <summary>
        <para>Set a custom projection matrix.</para>
        <para>If you change this matrix, the camera no longer updates its rendering based on its fieldOfView.
This lasts until you call ResetProjectionMatrix.Use a custom projection only if you really need a non-standard projection.
This property is used by Unity's water rendering to setup an
oblique projection matrix. Using custom projections requires good knowledge
of transformation and projection matrices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.velocity">
      <summary>
        <para>Get the world-space speed of the camera (Read Only).</para>
        <para>This camera's motion in units per second as it was during the last frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.clearFlags">
      <summary>
        <para>How the camera clears the background.</para>
        <para>Can be CameraClearFlags.Skybox, CameraClearFlags.SolidColor, CameraClearFlags.Depth or CameraClearFlags.Nothing.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.stereoEnabled">
      <summary>
        <para>Stereoscopic rendering.</para>
        <para>Is this camera rendering from two virtual eye-points to a stereoscopic output?</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.stereoSeparation">
      <summary>
        <para>Distance between the virtual eyes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.stereoConvergence">
      <summary>
        <para>Distance to a point where virtual eyes converge.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.main">
      <summary>
        <para>The first enabled camera tagged "MainCamera" (Read Only).</para>
        <para>Returns null if there is no such camera in the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.current">
      <summary>
        <para>The camera we are currently rendering with, for low-level render control only (Read Only).</para>
        <para>Most of the time you will want to use Camera.main instead.
Use this function only when implementing one of the following events:
MonoBehaviour.OnRenderImage, MonoBehaviour.OnPreRender, MonoBehaviour.OnPostRender.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.allCameras">
      <summary>
        <para>Returns all enabled cameras in the scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.allCamerasCount">
      <summary>
        <para>The number of cameras in the current scene.</para>
        <para>Returns the size of the array that Camera.allCameras returns and the amount of cameras that Camera.GetAllCameras will fill.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.useOcclusionCulling">
      <summary>
        <para>Whether or not the Camera will use occlusion culling during rendering.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.layerCullDistances">
      <summary>
        <para>Per-layer culling distances.</para>
        <para>Normally Camera skips rendering of objects that are further away than farClipPlane.
You can set up some Layers to use smaller culling distances using layerCullDistances.
This is very useful to cull small objects early on, if you put them into appropriate layers.When assigning layerCullDistances, you need to assign float array that has 32 values.
Zero values in cull distances means "use far plane distance".By default, per-layer culling will use a plane aligned with the camera. You can change this to
a sphere by setting layerCullSpherical on the Camera to true.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.layerCullSpherical">
      <summary>
        <para>How to perform per-layer culling for a Camera.</para>
        <para>Normally this type of culling is performed by moving the Camera's far plane closer to the eye. By setting this
value to true, the culling is instead based on spherical distance. The benefit is that rotating on the same spot
does not affect which objects are visible.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.depthTextureMode">
      <summary>
        <para>How and if camera generates a depth texture.</para>
        <para>A camera can build a screen-space depth texture. This is mostly useful for image post-processing
effects. Note that generating the texture incurs a performance cost.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Camera.clearStencilAfterLightingPass" />
    <member name="T:UnityEngine.ComputeShader">
      <summary>
        <para>Compute Shader asset.</para>
        <para>Compute shaders are programs that run on the GPU outside of the normal rendering pipeline.
They correspond to compute shader assets in the project (.compute files).Compute shaders need a fairly modern GPU and are only available when using DirectX 11 right now.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.FindKernel(System.String)">
      <summary>
        <para>Find <see cref="ComputeShader">ComputeShader</see> kernel index.</para>
        <para>A single compute shader can contain many "kernels" (functions that do the computation);
FindKernel returns kernel index given the name. If name is not found, -1 is returned.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetFloat(System.String,System.Single)">
      <summary>
        <para>Set a float parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetInt(System.String,System.Int32)">
      <summary>
        <para>Set an integer parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetVector(System.String,UnityEngine.Vector4)">
      <summary>
        <para>Set a vector parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetFloats(System.String,System.Single[])">
      <summary>
        <para>Set multiple consecutive float parameters at once.</para>
        <para>This function can be used to set float vector, float array or float vector array
values. For example, float4 myArray[4] in the compute shader
can be filled by passing 16 floats.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetInts(System.String,System.Int32[])">
      <summary>
        <para>Set multiple consecutive integer parameters at once.</para>
        <para>This function can be used to set int vector, int array or int vector array
values. For example, int4 myArray[4] in the compute shader
can be filled by passing 16 integers.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetTexture(System.Int32,System.String,UnityEngine.Texture)">
      <summary>
        <para>Set a texture parameter.</para>
        <para>This function can either set a regular texture that is read in the
compute shader, or an output texture that is written into by the shader.
For an output texture, it has to be a RenderTexture with random write
flag enabled, see RenderTexture.enableRandomWrite.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.SetBuffer(System.Int32,System.String,UnityEngine.ComputeBuffer)">
      <summary>
        <para>This function can either set an input or output compute buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeShader.Dispatch(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Execute a compute shader.</para>
        <para>This functions "runs" the compute shader, with the given work size as
indicated by threadsX, threadsY, threadsZ parameters.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ComputeBufferType">
      <summary>
        <para>
          <see cref="ComputeBuffer">ComputeBuffer</see> type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Default">
      <summary>
        <para>Default <see cref="ComputeBuffer">ComputeBuffer</see> type.</para>
        <para>A simple structured buffer in DX11.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Raw">
      <summary>
        <para>Raw <see cref="ComputeBuffer">ComputeBuffer</see> type.</para>
        <para>Buffer that allows raw unstructured access; underlying DX11 format is typeless R32.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Append">
      <summary>
        <para>Append-consume <see cref="ComputeBuffer">ComputeBuffer</see> type.</para>
        <para>Allows a buffer to be treated like a stack in compute shaders.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.Counter">
      <summary>
        <para>
          <see cref="ComputeBuffer">ComputeBuffer</see> with a counter.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.ComputeBufferType.DrawIndirect">
      <summary>
        <para>
          <see cref="ComputeBuffer">ComputeBuffer</see> used for Graphics.DrawProceduralIndirect.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ComputeBuffer">
      <summary>
        <para>Data buffer to hold data for compute shaders.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.#ctor(System.Int32,System.Int32)">
      <summary>
        <para>Create a Compute Buffer.</para>
        <para>Use Release to release the buffer when no longer needed.</para>
      </summary>
      <param name="count">Number of elements in the buffer.</param>
      <param name="stride">Size of one element in the buffer. Has to match size of buffer type in the shader.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.#ctor(System.Int32,System.Int32,UnityEngine.ComputeBufferType)">
      <summary>
        <para>Create a Compute Buffer.</para>
        <para>Use Release to release the buffer when no longer needed.</para>
      </summary>
      <param name="count">Number of elements in the buffer.</param>
      <param name="stride">Size of one element in the buffer. Has to match size of buffer type in the shader.</param>
      <param name="type">Type of the buffer, default is ComputeBufferType.Default.
See Also: <see cref="SystemInfo-supportsComputeShaders">SystemInfo.supportsComputeShaders</see>, <see cref="ComputeShader">ComputeShader</see> class, <see cref="Shader.SetGlobalBuffer">Shader.SetGlobalBuffer</see>, <see cref="Material.SetBuffer">Material.SetBuffer</see>, <see href="http://docs.unity3d.com/ScriptReference/../Manual/ComputeShaders.html">Compute Shaders</see>.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.Release">
      <summary>
        <para>Release a Compute Buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.SetData(System.Array)">
      <summary>
        <para>Set the buffer with values from an array.</para>
      </summary>
      <param name="data">Array of values to fill the buffer.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.GetData(System.Array)">
      <summary>
        <para>Read data values from the buffer into an array.</para>
      </summary>
      <param name="data">An array to receive the data.</param>
    </member>
    <member name="M:UnityEngine.ComputeBuffer.CopyCount(UnityEngine.ComputeBuffer,UnityEngine.ComputeBuffer,System.Int32)">
      <summary>
        <para>Set buffer data.</para>
        <para>Compute buffer data can be filled from an aribrary array of value types (simple types like ints or floats;
or struct types like Vector3 or Color).
Read buffer data.Reads buffer data into an aribrary array of value types (simple types like ints or floats;
or struct types like Vector3 or Color). Note that reading data back from the buffer
can be quite slow, as the CPU will have to wait for GPU to finish any pending operations and read
the data back to system memory.
Copy counter value of append/consume buffer into another buffer.CopyCount takes an append or consume buffer as src, and copies its "counter"
value into dst buffer at given byte offset.This is most commonly used in conjunction with Graphics.DrawProceduralIndirect,
to render arbitrary number of primitives without reading their count back to the CPU.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ComputeBuffer.count">
      <summary>
        <para>Number of elements in the buffer (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.ComputeBuffer.stride">
      <summary>
        <para>Size of one element in the buffer (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Debug">
      <summary>
        <para>Class containing methods to ease debugging while developing a game.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
      <summary>
        <para>Draws a line between specified start and end points.</para>
        <para>The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there. The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame.Note: This is for debugging playmode only. Editor gizmos should be drawn with Gizmos.Drawline or Handles.DrawLine instead.</para>
      </summary>
      <param name="start">Point in world space where the line should start.</param>
      <param name="end">Point in world space where the line should end.</param>
      <param name="color">Color of the line.</param>
      <param name="duration">How long the line should be visible for.</param>
      <param name="depthTest">Should the line be obscured by objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
      <summary>
        <para>Draws a line between specified start and end points.</para>
        <para>The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there. The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame.Note: This is for debugging playmode only. Editor gizmos should be drawn with Gizmos.Drawline or Handles.DrawLine instead.</para>
      </summary>
      <param name="start">Point in world space where the line should start.</param>
      <param name="end">Point in world space where the line should end.</param>
      <param name="color">Color of the line.</param>
      <param name="duration">How long the line should be visible for.</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
      <summary>
        <para>Draws a line between specified start and end points.</para>
        <para>The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there. The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame.Note: This is for debugging playmode only. Editor gizmos should be drawn with Gizmos.Drawline or Handles.DrawLine instead.</para>
      </summary>
      <param name="start">Point in world space where the line should start.</param>
      <param name="end">Point in world space where the line should end.</param>
      <param name="color">Color of the line.</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draws a line between specified start and end points.</para>
        <para>The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there. The duration is the time (in seconds) for which the line will be visible after it is first displayed. A duration of zero shows the line for just one frame.Note: This is for debugging playmode only. Editor gizmos should be drawn with Gizmos.Drawline or Handles.DrawLine instead.</para>
      </summary>
      <param name="start">Point in world space where the line should start.</param>
      <param name="end">Point in world space where the line should end.</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single)">
      <summary>
        <para>Draws a line from <c>start</c> to <c>start</c> + <c>dir</c> in world coordinates.</para>
        <para>The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame.If depthTest is set to true then the line will be obscured by other objects in the scene that are nearer to the camera. The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.</para>
      </summary>
      <param name="start">Point in world space where the ray should start.</param>
      <param name="dir">Direction and length of the ray.</param>
      <param name="color">Color of the drawn line.</param>
      <param name="duration">How long the line will be visible for (in seconds).</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color)">
      <summary>
        <para>Draws a line from <c>start</c> to <c>start</c> + <c>dir</c> in world coordinates.</para>
        <para>The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame.If depthTest is set to true then the line will be obscured by other objects in the scene that are nearer to the camera. The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.</para>
      </summary>
      <param name="start">Point in world space where the ray should start.</param>
      <param name="dir">Direction and length of the ray.</param>
      <param name="color">Color of the drawn line.</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draws a line from <c>start</c> to <c>start</c> + <c>dir</c> in world coordinates.</para>
        <para>The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame.If depthTest is set to true then the line will be obscured by other objects in the scene that are nearer to the camera. The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.</para>
      </summary>
      <param name="start">Point in world space where the ray should start.</param>
      <param name="dir">Direction and length of the ray.</param>
    </member>
    <member name="M:UnityEngine.Debug.DrawRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,System.Single,System.Boolean)">
      <summary>
        <para>Draws a line from <c>start</c> to <c>start</c> + <c>dir</c> in world coordinates.</para>
        <para>The duration parameter determines how long the line will be visible after the frame it is drawn. If duration is 0 (the default) then the line is rendered 1 frame.If depthTest is set to true then the line will be obscured by other objects in the scene that are nearer to the camera. The line will be drawn in the scene view of the editor. If gizmo drawing is enabled in the game view, the line will also be drawn there.</para>
      </summary>
      <param name="start">Point in world space where the ray should start.</param>
      <param name="dir">Direction and length of the ray.</param>
      <param name="color">Color of the drawn line.</param>
      <param name="duration">How long the line will be visible for (in seconds).</param>
      <param name="depthTest">Should the line be obscured by other objects closer to the camera?</param>
    </member>
    <member name="M:UnityEngine.Debug.Break">
      <summary>
        <para>Pauses the editor.</para>
        <para>This is useful when you want to check certain values on the
inspector and you are not able to pause it manually.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Debug.Log(System.Object)">
      <summary>
        <para>Logs <c>message</c> to the Unity Console.</para>
        <para>When you select the message in the console a connection to the context object will be drawn.
This can be useful for locating the object on which an error occurs.When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
    </member>
    <member name="M:UnityEngine.Debug.Log(System.Object,UnityEngine.Object)">
      <summary>
        <para>Logs <c>message</c> to the Unity Console.</para>
        <para>When you select the message in the console a connection to the context object will be drawn.
This can be useful for locating the object on which an error occurs.When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogError(System.Object)">
      <summary>
        <para>A variant of Debug.Log that logs an error message to the console.</para>
        <para>When you select the message in the console a connection to the context object will be drawn.
This is very useful if you want know on which object an error occurs.When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogError(System.Object,UnityEngine.Object)">
      <summary>
        <para>A variant of Debug.Log that logs an error message to the console.</para>
        <para>When you select the message in the console a connection to the context object will be drawn.
This is very useful if you want know on which object an error occurs.When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="M:UnityEngine.Debug.ClearDeveloperConsole">
      <summary>
        <para>Clears errors from the developer console.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Debug.LogException(System.Exception)">
      <summary>
        <para>A variant of Debug.Log that logs an error message to the console.</para>
        <para>When you select the message in the console a connection to the context object will be drawn.
This is very useful if you want know on which object an error occurs.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Debug.LogException(System.Exception,UnityEngine.Object)">
      <summary>
        <para>A variant of Debug.Log that logs an error message to the console.</para>
        <para>When you select the message in the console a connection to the context object will be drawn.
This is very useful if you want know on which object an error occurs.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Debug.LogWarning(System.Object)">
      <summary>
        <para>A variant of Debug.Log that logs a warning message to the console.</para>
        <para>When you select the message in the console a connection to the context object will be drawn.
This is very useful if you want know on which object a warning occurs.When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
    </member>
    <member name="M:UnityEngine.Debug.LogWarning(System.Object,UnityEngine.Object)">
      <summary>
        <para>A variant of Debug.Log that logs a warning message to the console.</para>
        <para>When you select the message in the console a connection to the context object will be drawn.
This is very useful if you want know on which object a warning occurs.When the message is a string, rich text markup can be used to add emphasis. See the manual page about rich text for details of the different markup tags available.</para>
      </summary>
      <param name="message">String or object to be converted to string representation for display.</param>
      <param name="context">Object to which the message applies.</param>
    </member>
    <member name="P:UnityEngine.Debug.developerConsoleVisible">
      <summary>
        <para>Opens or closes developer console.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Debug.isDebugBuild">
      <summary>
        <para>In the Build Settings dialog there is a check box called "Development Build".</para>
        <para>If it is checked isDebugBuild will be true.
In the editor isDebugBuild always returns true.
It is recommended to remove all calls to Debug.Log when deploying a game, this way you can
easily deploy beta builds with debug prints and final builds without.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Display">
      <summary>
        <para>Provides access to a display / screen for rendering operations.</para>
        <para>This feature is available for iPhone.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Display.SetRenderingResolution(System.Int32,System.Int32)">
      <summary>
        <para>Sets Rendering resolution for the display.</para>
      </summary>
      <param name="w">Rendering width.</param>
      <param name="h">Rendering height.</param>
    </member>
    <member name="F:UnityEngine.Display.displays">
      <summary>
        <para>The list of currently connected Displays. Contains at least one (main) display.</para>
        <para>It will be automatically updated should the display be connected/disconnected.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.renderingWidth">
      <summary>
        <para>Rendering Width.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.renderingHeight">
      <summary>
        <para>Rendering Height.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.systemWidth">
      <summary>
        <para>System Width.</para>
        <para>The native width of Display.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.systemHeight">
      <summary>
        <para>System Height.</para>
        <para>The native height of Display.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.colorBuffer">
      <summary>
        <para>Color RenderBuffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.depthBuffer">
      <summary>
        <para>Depth RenderBuffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Display.main">
      <summary>
        <para>Main Display.</para>
        <para>It is synonymous to Display.displays[0].</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Flash.ActionScript">
      <summary>
        <para>Inline ActionScript support.</para>
        <para>When targetting the Flash Player, it is often convenient to be able to execute some manually written ActionScript.
Examples of this would be: talking to some flash API (think networking, sockets), running some existing ActionScript code, or integrating with some 3rd party ActionScript library. You can call "handwritten" ActionScript methods, and get return values from them most easily like this:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Flash.ActionScript.Import(System.String)">
      <summary>
        <para>Causes an import directive to be emitted in the ActionScript code generated for the current type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Flash.ActionScript.Statement(System.String,System.Object[])">
      <summary>
        <para>Emits a block of ActionScript code in the current method translating variable and field references to their ActionScript names.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Flash.ActionScript.Expression``1(System.String,System.Object[])">
      <summary>
        <para>Emits an ActionScript expression translating variable and field references to their ActionScript names.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Flash.FlashPlayer">
      <summary>
        <para>Runtime FlashPlayer support.</para>
        <para>When targetting the Flash Player, this class can be used to perform runtime Flash specific features.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Flash.FlashPlayer.TargetVersion">
      <summary>
        <para>Get a string representing the version of the Flash Player which the current project has been compiled against.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Flash.FlashPlayer.TargetSwfVersion">
      <summary>
        <para>Get a string representing the version of the SWF which the current project has been compiled against.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.NotConvertedAttribute">
      <summary>
        <para>Instructs the build pipeline not to convert a type or member to the target platform.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotConvertedAttribute.#ctor" />
    <member name="T:UnityEngine.NotFlashValidatedAttribute">
      <summary>
        <para>Instructs the build pipeline not to try and validate a type or member for the flash platform.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotFlashValidatedAttribute.#ctor" />
    <member name="T:UnityEngine.NotRenamedAttribute">
      <summary>
        <para>Prevent name mangling of constructors, methods, fields and properties.</para>
        <para>When applied to a type prevents all its members of being renamed.It can be used to provide stable member names for access from handwritten ActionScript code or
to provide .net stubs for ActionScript types when combined with NotConvertedAttribute:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.NotRenamedAttribute.#ctor" />
    <member name="T:UnityEngine.MonoBehaviour">
      <summary>
        <para>MonoBehaviour is the base class every script derives from.</para>
        <para>Using Javascript every script automatically derives from MonoBehaviour.
When using C# or Boo you have to explicitly derive from MonoBehaviour.Note: The checkbox for disabling a MonoBehavior (on the editor) will only 
prevent Start(), Awake(), Update(), FixedUpdate(), and OnGUI() from executing. 
If none of these functions are present, the checkbox is not displayed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.Invoke(System.String,System.Single)">
      <summary>
        <para>Invokes the method <c>methodName</c> in time seconds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.InvokeRepeating(System.String,System.Single,System.Single)">
      <summary>
        <para>Invokes the method <c>methodName</c> in <c>time</c> seconds, then repeatedly every <c>repeatRate</c> seconds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.CancelInvoke">
      <summary>
        <para>Cancels all Invoke calls on this MonoBehaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.CancelInvoke(System.String)">
      <summary>
        <para>Cancels all Invoke calls with name <c>methodName</c> on this behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.IsInvoking(System.String)">
      <summary>
        <para>Is any invoke on <c>methodName</c> pending?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.IsInvoking">
      <summary>
        <para>Is any invoke pending on this MonoBehaviour?</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)">
      <summary>
        <para>Starts a coroutine.</para>
        <para>The execution of a coroutine can be paused at any point using the yield statement.
The yield return value specifies when the coroutine is resumed.
Coroutines are excellent when modelling behaviour over several frames.
Coroutines have virtually no performance overhead.
StartCoroutine function always returns immediately, however you can yield the result.
This will wait until the coroutine has finished execution.When using JavaScript it is not necessary to use StartCoroutine, the compiler will do this for you.
When writing C# code you must call StartCoroutine.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StartCoroutine(System.String,System.Object)">
      <summary>
        <para>Starts a coroutine named <c>methodName</c>.</para>
        <para>In most cases you want to use the StartCoroutine variation above.
However StartCoroutine using a string method name allows you to use StopCoroutine with a specific method name.
The downside is that the string version has a higher runtime overhead to start the coroutine and you can pass only one parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StartCoroutine(System.String)">
      <summary>
        <para>Starts a coroutine named <c>methodName</c>.</para>
        <para>In most cases you want to use the StartCoroutine variation above.
However StartCoroutine using a string method name allows you to use StopCoroutine with a specific method name.
The downside is that the string version has a higher runtime overhead to start the coroutine and you can pass only one parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StopCoroutine(System.String)">
      <summary>
        <para>Stops all coroutines named <c>methodName</c> running on this behaviour.</para>
        <para>Please note that only StartCoroutine using a string method name can be stopped using
StopCoroutine.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StopCoroutine(System.Collections.IEnumerator)">
      <summary>
        <para>Stops all coroutines named <c>methodName</c> running on this behaviour.</para>
        <para>Please note that only StartCoroutine using a string method name can be stopped using
StopCoroutine.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.MonoBehaviour.StopAllCoroutines">
      <summary>
        <para>Stops all coroutines running on this behaviour.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.MonoBehaviour.useGUILayout">
      <summary>
        <para>Disabling this lets you skip the GUI layout phase.</para>
        <para>It can only be used if you do not use GUI.Window and GUILayout inside of this OnGUI call.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.TouchPhase">
      <summary>
        <para>Describes phase of a finger touch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchPhase.Began">
      <summary>
        <para>A finger touched the screen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchPhase.Moved">
      <summary>
        <para>A finger moved on the screen.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchPhase.Stationary">
      <summary>
        <para>A finger is touching the screen but hasn't moved.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchPhase.Ended">
      <summary>
        <para>A finger was lifted from the screen. This is the final phase of a touch.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.TouchPhase.Canceled">
      <summary>
        <para>The system cancelled tracking for the touch.</para>
        <para>This might happen if, for example, the user puts the device to her face or simultaneously applies more touches than the system can track (the exact number varies with different platforms). This is the final phase of a touch.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.IMECompositionMode">
      <summary>
        <para>Controls IME input.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.IMECompositionMode.Auto">
      <summary>
        <para>Enable IME input only when a text field is selected (default).</para>
      </summary>
    </member>
    <member name="F:UnityEngine.IMECompositionMode.On">
      <summary>
        <para>Enable IME input.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.IMECompositionMode.Off">
      <summary>
        <para>Disable IME input.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Touch">
      <summary>
        <para>Structure describing the status of a finger touching the screen.</para>
        <para>Devices can track a number of different pieces of data about a touch on a touchscreen, including its phase (ie, whether it has just started, ended or moved), its position and whether the touch was a single contact or several taps. Furthermore, the continuity of a touch between frame updates can be detected by the device, so a consistent ID number can be reported across frames and used to determine how a particular finger is moving.The Touch struct is used by Unity to store data relating to a single touch instance and is returned by the Input.GetTouch function. Fresh calls to GetTouch will be required on each frame update to obtain the latest touch information from the device but the fingerID property can be used to identify the same touch between frames.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Touch.fingerId">
      <summary>
        <para>The unique index for the touch.</para>
        <para>All current touches are reported in the Input.touches array or by using the Input.GetTouch function with the equivalent array index. However, the array index is not guaranteed to be the same from one frame to the next. The fingerID value, however, consistently refers to the same touch across frames. This ID value is very useful when analysing gestures and is more reliable than identifying fingers by their proximity to previous position, etc.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Touch.position">
      <summary>
        <para>The position of the touch in pixel coordinates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Touch.rawPosition" />
    <member name="P:UnityEngine.Touch.deltaPosition">
      <summary>
        <para>The position delta since last change.</para>
        <para>The absolute position of the touch is recorded periodically and available in the position property. The deltaPosition value is a Vector2 that represents the difference between the touch position recorded on the most recent update and that recorded on the previous update. The deltaTime value gives the time that elapsed between the previous and current updates; you can calculate the touch's speed of motion by dividing deltaPosition.magnitude by deltaTime.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Touch.deltaTime">
      <summary>
        <para>Amount of time that has passed since the last recorded change in Touch values.</para>
        <para>Values for the various touch properties are updated periodically. The deltaTime value is simply the amount of time that elapsed between the previous update and the current one. This is primarily useful for determining the movement speed of the touch position with reference to deltaPosition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Touch.tapCount">
      <summary>
        <para>Number of taps.</para>
        <para>This is intended as a way to detect "double-clicks", etc, from the finger in a particular position. In some circumstances, two fingers may be tapped alternately and this may incorrectly register as a single finger tapping and simultaneously moving.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Touch.phase">
      <summary>
        <para>Describes the phase of the touch.</para>
        <para>The touch phase refers to the action the finger has taken on the most recent frame update. Since a touch is tracked over its "lifetime" by the device, the start and end of a touch and movements in between can be reported on the frames they occur. The phase property can be used as the basis of a "switch' statement or as part of a more sophisitcated state handling system.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.DeviceOrientation">
      <summary>
        <para>Describes physical orientation of the device as determined by the OS.</para>
        <para>If device is physically situated between discrete positions, as when (for
example) rotated diagonally, system will report Unknown orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceOrientation.Unknown">
      <summary>
        <para>The orientation of the device cannot be determined.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceOrientation.Portrait">
      <summary>
        <para>The device is in portrait mode, with the device held upright and the home button at the bottom.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceOrientation.PortraitUpsideDown">
      <summary>
        <para>The device is in portrait mode but upside down, with the device held upright and the home button at the top.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceOrientation.LandscapeLeft">
      <summary>
        <para>The device is in landscape mode, with the device held upright and the home button on the right side.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceOrientation.LandscapeRight">
      <summary>
        <para>The device is in landscape mode, with the device held upright and the home button on the left side.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceOrientation.FaceUp">
      <summary>
        <para>The device is held parallel to the ground with the screen facing upwards.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.DeviceOrientation.FaceDown">
      <summary>
        <para>The device is held parallel to the ground with the screen facing downwards.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AccelerationEvent">
      <summary>
        <para>Structure describing acceleration status of the device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AccelerationEvent.acceleration">
      <summary>
        <para>Value of acceleration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AccelerationEvent.deltaTime">
      <summary>
        <para>Amount of time passed since last accelerometer measurement.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Gyroscope">
      <summary>
        <para>Interface into the Gyroscope.</para>
        <para>Use this class to access gyroscope.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gyroscope.rotationRate">
      <summary>
        <para>Returns rotation rate as measured by the device's gyroscope.</para>
        <para>The rotation rate is given as a Vector3 representing the speed of rotation around each of the three
 axes in radians per second. This is the value as it is reported by the gyroscope hardware - a more
 accurate measurement that has been processed to remove "bias" can be obtained with the
 rotationRateUnbiased property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gyroscope.rotationRateUnbiased">
      <summary>
        <para>Returns unbiased rotation rate as measured by the device's gyroscope.</para>
        <para>The rotation rate is given as a Vector3 representing the speed of rotation around each of the three
 axes in radians per second. This value has been processed to remove "bias" and give a more accurate
 measurement. The raw value reported by the gyroscope hardware can be obtained with the
 rotationRate property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gyroscope.gravity">
      <summary>
        <para>Returns the gravity acceleration vector expressed in the device's reference frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gyroscope.userAcceleration">
      <summary>
        <para>Returns the acceleration that the user is giving to the device.</para>
        <para>The significance of this value is that the effect of gravity (which is also detected by the accelerometer)
 has been removed to leave just the acceleration from the user's movements.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gyroscope.attitude">
      <summary>
        <para>Returns the attitude (ie, orientation in space) of the device.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gyroscope.enabled">
      <summary>
        <para>Sets or retrieves the enabled status of this gyroscope.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Gyroscope.updateInterval">
      <summary>
        <para>Sets or retrieves gyroscope interval in seconds.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LocationInfo">
      <summary>
        <para>Structure describing device location.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocationInfo.latitude">
      <summary>
        <para>Geographical device location latitude.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocationInfo.longitude">
      <summary>
        <para>Geographical device location latitude.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocationInfo.altitude">
      <summary>
        <para>Geographical device location altitude.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocationInfo.horizontalAccuracy">
      <summary>
        <para>Horizontal accuracy of the location.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocationInfo.verticalAccuracy">
      <summary>
        <para>Vertical accuracy of the location.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocationInfo.timestamp">
      <summary>
        <para>Timestamp (in seconds since 1970) when location was last time updated.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LocationServiceStatus">
      <summary>
        <para>Describes location service status.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LocationServiceStatus.Stopped">
      <summary>
        <para>Location service is stopped.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LocationServiceStatus.Initializing">
      <summary>
        <para>Location service is initializing, some time later it will switch to.</para>
        <para>Running or Failed.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LocationServiceStatus.Running">
      <summary>
        <para>Location service is running and locations could be queried.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.LocationServiceStatus.Failed">
      <summary>
        <para>Location service failed (user denied access to location service).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.LocationService">
      <summary>
        <para>Interface into location functionality.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LocationService.Start(System.Single,System.Single)">
      <summary>
        <para>Starts location service updates.  Last location coordinates could be.</para>
        <para>Retrieved via Input.location.lastData.
Service does not start to send location data immediately. Code should
check Input.location.status for current service status.
desiredAccuracyInMeters - desired service accuracy in meters. Using
higher value like 500 usually does not require to turn GPS chip on and
thus saves battery power. Values like 5-10 could be used for getting
best accuracy. Default value is 10 meters.
updateDistanceInMeters - the minimum distance (measured in meters) a
device must move laterally before Input.location property is
updated. Higher values like 500 imply less overhead. Default is 10
meters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LocationService.Start(System.Single)">
      <summary>
        <para>Starts location service updates.  Last location coordinates could be.</para>
        <para>Retrieved via Input.location.lastData.
Service does not start to send location data immediately. Code should
check Input.location.status for current service status.
desiredAccuracyInMeters - desired service accuracy in meters. Using
higher value like 500 usually does not require to turn GPS chip on and
thus saves battery power. Values like 5-10 could be used for getting
best accuracy. Default value is 10 meters.
updateDistanceInMeters - the minimum distance (measured in meters) a
device must move laterally before Input.location property is
updated. Higher values like 500 imply less overhead. Default is 10
meters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LocationService.Start">
      <summary>
        <para>Starts location service updates.  Last location coordinates could be.</para>
        <para>Retrieved via Input.location.lastData.
Service does not start to send location data immediately. Code should
check Input.location.status for current service status.
desiredAccuracyInMeters - desired service accuracy in meters. Using
higher value like 500 usually does not require to turn GPS chip on and
thus saves battery power. Values like 5-10 could be used for getting
best accuracy. Default value is 10 meters.
updateDistanceInMeters - the minimum distance (measured in meters) a
device must move laterally before Input.location property is
updated. Higher values like 500 imply less overhead. Default is 10
meters.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.LocationService.Stop">
      <summary>
        <para>Stops location service updates. This could be useful for saving battery life.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocationService.isEnabledByUser">
      <summary>
        <para>Specifies whether location service is enabled in user settings.</para>
        <para>You should check this property before starting location updates to
determine if the user has location services enabled for the current
device.On iOS, if this property is false and you start location updates
anyway, the CoreLocation framework prompts the user with a confirmation
panel asking whether location services should be reenabled. The user
can enable or disable location services altogether from the Settings
application by toggling the switch in
Settings&amp;gt;General&amp;gt;LocationServices.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocationService.status">
      <summary>
        <para>Returns location service status.</para>
        <para>For the details about the return value please refer to documentation of
LocationServiceStatus enumeration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.LocationService.lastData">
      <summary>
        <para>Last measured device geographical location.</para>
        <para>Before accessing this property, make sure location service was started
via Input.location.Start().</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Compass">
      <summary>
        <para>Interface into compass functionality.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Compass.magneticHeading">
      <summary>
        <para>The heading in degrees relative to the magnetic North Pole. (Read Only)</para>
        <para>The value in this property is always measured relative to the top 
of the screen in its current orientation. 
 The heading of magnetic
 north is not exactly the same as true geographical north - to get
 the exact heading, use the trueHeading property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Compass.trueHeading">
      <summary>
        <para>The heading in degrees relative to the geographic North Pole. (Read Only)</para>
        <para>The value in this property is always measured relative to the top 
of the screen in its current orientation. 
Note, that if you want this property to contain a valid value, you 
must also enable location updates by calling 
Input.location.Start(). (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Compass.headingAccuracy">
      <summary>
        <para>Accuracy of heading reading in degrees.</para>
        <para>Negative value mean unreliable reading. If accuracy is not supported or not available, 0 is returned.
Not all platforms support this pricise accuracy, so the value may vary between few constant values.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Compass.rawVector">
      <summary>
        <para>The raw geomagnetic data measured in microteslas. (Read Only)</para>
        <para>The compass is actually a magnetometer that measures the magnetic
 field in the device's XYZ coordinates - in the absence of a stronger
 magnet, it will measure the Earth's field from which the compass heading
 can be found. This property can be used if you want to make non-standard
 use of the compass (eg, find the heading from the X or Z axis of the device).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Compass.timestamp">
      <summary>
        <para>Timestamp (in seconds since 1970) when the heading was last time updated. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Compass.enabled">
      <summary>
        <para>Used to enable or disable compass. Note, that if you want <c>Input.compass.trueHeading</c> property to contain a valid value, you must also enable location updates by calling <c>Input.location.Start()</c>.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Input">
      <summary>
        <para>Interface into the Input system.</para>
        <para>Use this class to read the axes set up in the Input Manager, and to access
multi-touch/accelerometer data on mobile devices.To read an axis use Input.GetAxis with one of the following default axes:
"Horizontal" and "Vertical" are mapped to joystick, A, W, S, D and the arrow keys.
"Mouse X" and "Mouse Y" are mapped to the mouse delta.
"Fire1", "Fire2" "Fire3" are mapped to Ctrl, Alt, Cmd keys and three mouse or joystick buttons.
New input axes can be added in the Input Manager.If you are using input for any kind of movement behaviour use Input.GetAxis.
It gives you smoothed and configurable input that can be mapped to keyboard, joystick or mouse.
Use Input.GetButton for action like events only. Don't use it for movement, Input.GetAxis will make the script code smaller and simpler.Note also that the Input flags are not reset until "Update()", so its suggested you make all the Input Calls in the Update Loop.Mobile Devices:iOS and Android devices are capable of tracking multiple fingers touching the screen simultaneously.
You can access data on the status of each finger touching screen during the last frame by accessing the Input.touches property array.As a device moves, its accelerometer hardware reports linear acceleration changes along the three primary axes in three-dimensional space.
You can use this data to detect both the current orientation of the device (relative to the ground) and any immediate changes to that orientation.Acceleration along each axis is reported directly by the hardware as G-force values.
A value of 1.0 represents a load of about +1g along a given axis while a value of -1.0 represents -1g.
If you hold the device upright (with the home button at the bottom) in front of you, the X axis is positive along the right,
the Y axis is positive directly up, and the Z axis is positive pointing toward you.You can read the Input.acceleration property to get the accelerometer reading.
You can also use the Input.deviceOrientation property to get a discrete evaluation of the device's orientation in three-dimensional space.
Detecting a change in orientation can be useful if you want to create game behaviors when the user rotates the device to hold it differently.Note that the accelerometer hardware can be polled more than once per frame.
To access all accelerometer samples since the last frame, you can read the Input.accelerationEvents property array.
This can be useful when reconstructing player motions, feeding acceleration data into a predictor, or implementing other precise motion analysis.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetAxis(System.String)">
      <summary>
        <para>Returns the value of the virtual axis identified by <c>axisName</c>.</para>
        <para>The value will be in the range -1...1 for keyboard and joystick input.
If the axis is setup to be delta mouse movement, the mouse delta is multiplied by the axis
sensitivity and the range is not -1...1.This is frame-rate independent; you do not need to be concerned about varying frame-rates when using this value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetAxisRaw(System.String)">
      <summary>
        <para>Returns the value of the virtual axis identified by <c>axisName</c> with no smoothing filtering applied.</para>
        <para>The value will be in the range -1...1 for keyboard and joystick input.
Since input is not smoothed, keyboard input will always be either -1, 0 or 1.
This is useful if you want to do all smoothing of keyboard input processing yourself.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetButton(System.String)">
      <summary>
        <para>Returns true while the virtual button identified by <c>buttonName</c> is held down.</para>
        <para>Think auto fire - this will return true as long as the button is held down.Use this only when implementing events that trigger an action, eg, shooting a weapon.
Use GetAxis for input that controls continuous movement.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetButtonDown(System.String)">
      <summary>
        <para>Returns true during the frame the user pressed down the virtual button identified by <c>buttonName</c>.</para>
        <para>You need to call this function from the Update function, since the state gets reset each frame.
It will not return true until the user has released the key and pressed it again.Use this only when implementing action like events IE: shooting a weapon.
Use Input.GetAxis for any kind of movement behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetButtonUp(System.String)">
      <summary>
        <para>Returns true the first frame the user releases the virtual button identified by <c>buttonName</c>.</para>
        <para>You need to call this function from the Update function, since the state gets reset each frame.	
It will not return true until the user has pressed the button and released it again.Use this only when implementing action like events IE: shooting a weapon.
Use Input.GetAxis for any kind of movement behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetKey(System.String)">
      <summary>
        <para>Returns true while the user holds down the key identified by <c>name</c>. Think auto fire.</para>
        <para>For the list of key identifiers see Input Manager.
When dealing with input it is recommended to use Input.GetAxis and Input.GetButton instead
since it allows end-users to configure the keys.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetKey(UnityEngine.KeyCode)">
      <summary>
        <para>Returns true while the user holds down the key identified by the <c>key</c><see cref="KeyCode">KeyCode</see> enum parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetKeyDown(System.String)">
      <summary>
        <para>Returns true during the frame the user starts pressing down the key identified by <c>name</c>.</para>
        <para>You need to call this function from the Update function, since the state gets reset each frame.		
It will not return true until the user has released the key and pressed it again.For the list of key identifiers see Input Manager.
When dealing with input it is recommended to use Input.GetAxis and Input.GetButton instead
since it allows end-users to configure the keys.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetKeyDown(UnityEngine.KeyCode)">
      <summary>
        <para>Returns true during the frame the user starts pressing down the key identified by the <c>key</c><see cref="KeyCode">KeyCode</see> enum parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetKeyUp(System.String)">
      <summary>
        <para>Returns true during the frame the user releases the key identified by <c>name</c>.</para>
        <para>You need to call this function from the Update function, since the state gets reset each frame.		
It will not return true until the user has pressed the key and released it again.For the list of key identifiers see Input Manager.
When dealing with input it is recommended to use Input.GetAxis and Input.GetButton instead
since it allows end-users to configure the keys.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetKeyUp(UnityEngine.KeyCode)">
      <summary>
        <para>Returns true during the frame the user releases the key identified by the <c>key</c><see cref="KeyCode">KeyCode</see> enum parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetJoystickNames">
      <summary>
        <para>Returns an array of strings describing the connected joysticks.</para>
        <para>This can be useful in user input configuration screens
- this way, instead of showing labels like "Joystick 1", you can show more meaningful names like "Logitech WingMan".
To read values from different joysticks, you need to assign respective axes for the number of joysticks you 
want to support in the input manager.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetMouseButton(System.Int32)">
      <summary>
        <para>Returns whether the given mouse button is held down.</para>
        <para>button values are 0 for left button, 1 for right button, 2 for the middle button.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetMouseButtonDown(System.Int32)">
      <summary>
        <para>Returns true during the frame the user pressed the given mouse button.</para>
        <para>You need to call this function from the Update function, since the state gets reset each frame.
It will not return true until the user has released the mouse button and pressed it again.
button values are 0 for left button, 1 for right button, 2 for the middle button.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetMouseButtonUp(System.Int32)">
      <summary>
        <para>Returns true during the frame the user releases the given mouse button.</para>
        <para>You need to call this function from the Update function, since the state gets reset each frame.	
It will not return true until the user has pressed the mouse button and released it again.
button values are 0 for left button, 1 for right button, 2 for the middle button.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.ResetInputAxes">
      <summary>
        <para>Resets all input. After ResetInputAxes all axes return to 0 and all buttons return to 0 for one frame.</para>
        <para>This can be useful when respawning the player and you don't want any input from keys that might still be held down.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetAccelerationEvent(System.Int32)">
      <summary>
        <para>Returns specific acceleration measurement which occurred during last frame. (Does not allocate temporary variables).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Input.GetTouch(System.Int32)">
      <summary>
        <para>Returns object representing status of a specific touch. (Does not allocate temporary variables).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.compensateSensors">
      <summary>
        <para>This property controls if input sensors should be compensated for screen orientation.</para>
        <para>Compensated sensors are accelerometer, compass, gyroscope.
Note : currently it fully affects iOS platform and partially Android platform (on Android compensation can't be turned off at the moment).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.gyro">
      <summary>
        <para>Returns default gyroscope.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.mousePosition">
      <summary>
        <para>The current mouse position in pixel coordinates. (Read Only)</para>
        <para>The bottom-left of the screen or window is at (0, 0).
The top-right of the screen or window is at (Screen.width, Screen.height).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.mouseScrollDelta">
      <summary>
        <para>The current mouse scroll delta. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.mousePresent" />
    <member name="P:UnityEngine.Input.simulateMouseWithTouches">
      <summary>
        <para>Enables/Disables mouse simulation with touches on Windows Store Apps and Windows Phone 8. By default this option is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.anyKey">
      <summary>
        <para>Is any key or mouse button currently held down? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.anyKeyDown">
      <summary>
        <para>Returns true the first frame the user hits any key or mouse button. (Read Only)</para>
        <para>You should be polling this variable from the Update function, since the state gets reset each frame.
It will not return true until the user has released all keys / buttons and pressed any key / buttons again.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.inputString">
      <summary>
        <para>Returns the keyboard input entered this frame. (Read Only)</para>
        <para>Only ASCII characters are contained in the inputString.The string can contain two special characters which should be handled:
Character "\b" represents backspace.
Character "\n" represents return or enter.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.acceleration">
      <summary>
        <para>Last measured linear acceleration of a device in three-dimensional space. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.accelerationEvents">
      <summary>
        <para>Returns list of acceleration measurements which occurred during the last frame. (Read Only) (Allocates temporary variables).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.accelerationEventCount">
      <summary>
        <para>Number of acceleration measurements which occurred during last frame.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.touches">
      <summary>
        <para>Returns list of objects representing status of all touches during last frame. (Read Only) (Allocates temporary variables).</para>
        <para>Each entry represents a status of a finger touching the screen.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.touchCount">
      <summary>
        <para>Number of touches. Guaranteed not to change throughout the frame. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.touchSupported">
      <summary>
        <para>Returns whether the device on which application is currently running supports touch input.</para>
        <para>Rather than checking the platform, use this property to determine whether your game should expect touch input, as some platforms can support multiple input methods.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.multiTouchEnabled">
      <summary>
        <para>Property indicating whether the system handles multiple touches.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.location">
      <summary>
        <para>Property for accessing device location (handheld devices only). (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.compass">
      <summary>
        <para>Property for accessing compass (handheld devices only). (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.deviceOrientation">
      <summary>
        <para>Device physical orientation as reported by OS. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.imeCompositionMode">
      <summary>
        <para>Controls enabling and disabling of IME input composition.</para>
        <para>Some languages use complex input methods which involve opening windows to insert characters.
Typically, this is not desirable while playing a game, as games may just interpret key strokes
as game input, not as text. By default, Unity will enable IME composition when in text fields,
and disable it otherwise. However, when you want to implement your own input GUI, you may want
to have control over this yourself, which is possible using the imeCompositionMode property. Set
it to Auto for the default behavior, or On or Off to explicitly enable or disable IME
composition.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.compositionString">
      <summary>
        <para>The current IME composition string being typed by the user.</para>
        <para>In some languages such as Chinese, Japanese or Korean, text is input by typing multiple keys to generate
one or multiple characters. These characters are visually composed on the screen as the user types.
When using Unity's built in GUI system for text input, Unity will take care of displaying the composition
strings as the users types. If you want to implement your own GUI, however, you need to take care of
displaying the string at the current cursor position. The composition string is only updated when IME
compositing is used. See Input.imeCompositionMode for more info.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.imeIsSelected">
      <summary>
        <para>Does the user have an IME keyboard input source selected?</para>
        <para>This returns true if the users keyboard is currently configured for IME input, and false otherwise.
Since users of asian languages can typically turn IME conversion on or off using a keystroke, it is useful
to provide some visual indication of IME being enabled. This can be done by checking Input.imeIsSelected.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Input.compositionCursorPos">
      <summary>
        <para>The current text input position used by IMEs to open windows.</para>
        <para>Some language IMEs such as Japanese will open windows while the user is typing text, to aid the user
in picking the correct input strings. These windows are expected to pop up at the current cursor position,
so the IME needs to know where input is displayed. When using Unity's built in GUI system for text input,
Unity will take care of setting the cursor position for the IME. However, if you wish to implement your 
own GUI for text input, you need to set this to the current text input position for IME windows to 
show up correctly.
</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Object">
      <summary>
        <para>Base class for all objects Unity can reference.</para>
        <para>Any public variable you make that derives from Object gets shown in the inspector as a drop target, 
allowing you to set the value from the GUI.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Object.GetHashCode" />
    <member name="M:UnityEngine.Object.GetInstanceID">
      <summary>
        <para>Returns the instance id of the object.</para>
        <para>The instance id of an object is always guaranteed to be unique.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(UnityEngine.Object,UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Clones the object <c>original</c> and returns the clone.</para>
        <para>This function makes a copy of an object in a similar way to the Duplicate command in the editor. If you are cloning a GameObject then you can also optionally specify its position and rotation (these will default to Vector3.zero and Quaternion.identity respectively). If you are cloning a Component then the GameObject is is attached to will also be cloned, again with an optional position and rotation.When you clone a GameObject or Component, all child objects and components will also be cloned with their properties set like those of the original object. However, the parent of the new object will be null, so it will not be a "sibling" of the original. However, you can still set the parent explicitly if you wish. Also, the active status of a GameObject at the time of cloning will be passed on, so if the original is inactive then the clone will be created in an inactive state too.</para>
      </summary>
      <param name="original">An existing object that you want to make a copy of.</param>
      <param name="position">Position for the new object.</param>
      <param name="rotation">Orientation of the new object.</param>
    </member>
    <member name="M:UnityEngine.Object.Instantiate(UnityEngine.Object)">
      <summary>
        <para>Clones the object <c>original</c> and returns the clone.</para>
        <para>This function makes a copy of an object in a similar way to the Duplicate command in the editor. If you are cloning a GameObject then you can also optionally specify its position and rotation (these will default to Vector3.zero and Quaternion.identity respectively). If you are cloning a Component then the GameObject is is attached to will also be cloned, again with an optional position and rotation.When you clone a GameObject or Component, all child objects and components will also be cloned with their properties set like those of the original object. However, the parent of the new object will be null, so it will not be a "sibling" of the original. However, you can still set the parent explicitly if you wish. Also, the active status of a GameObject at the time of cloning will be passed on, so if the original is inactive then the clone will be created in an inactive state too.</para>
      </summary>
      <param name="original">An existing object that you want to make a copy of.</param>
    </member>
    <member name="M:UnityEngine.Object.Destroy(UnityEngine.Object,System.Single)">
      <summary>
        <para>Removes a gameobject, component or asset.</para>
        <para>The object obj will be destroyed now or if a time is specified t seconds from now.
If obj is a Component it will remove the component from the GameObject and destroy it.
If obj is a GameObject it will destroy the GameObject, all its components and all transform children of the GameObject.
Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Object.Destroy(UnityEngine.Object)">
      <summary>
        <para>Removes a gameobject, component or asset.</para>
        <para>The object obj will be destroyed now or if a time is specified t seconds from now.
If obj is a Component it will remove the component from the GameObject and destroy it.
If obj is a GameObject it will destroy the GameObject, all its components and all transform children of the GameObject.
Actual object destruction is always delayed until after the current Update loop, but will always be done before rendering.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Object.DestroyImmediate(UnityEngine.Object,System.Boolean)">
      <summary>
        <para>Destroys the object <c>obj</c> immediately. You are strongly recommended to use Destroy instead.</para>
        <para>This function should only be used when writing editor code since the delayed destruction
will never be invoked in edit mode.
In game code you should use Object.Destroy instead. Destroy is always delayed (but
executed within the same frame).
Use this function with care since it can destroy assets permanently!
Also note that you should never iterate through arrays and destroy the elements you are iterating over.  This will cause serious problems (as a general programming practice, not just in Unity).</para>
      </summary>
      <param name="obj">Object to be destroyed.</param>
      <param name="allowDestroyingAssets">Set to true to allow assets to be destoyed.</param>
    </member>
    <member name="M:UnityEngine.Object.DestroyImmediate(UnityEngine.Object)">
      <summary>
        <para>Destroys the object <c>obj</c> immediately. You are strongly recommended to use Destroy instead.</para>
        <para>This function should only be used when writing editor code since the delayed destruction
will never be invoked in edit mode.
In game code you should use Object.Destroy instead. Destroy is always delayed (but
executed within the same frame).
Use this function with care since it can destroy assets permanently!
Also note that you should never iterate through arrays and destroy the elements you are iterating over.  This will cause serious problems (as a general programming practice, not just in Unity).</para>
      </summary>
      <param name="obj">Object to be destroyed.</param>
    </member>
    <member name="M:UnityEngine.Object.FindObjectsOfType(System.Type)">
      <summary>
        <para>Returns a list of all active loaded objects of Type <c>type</c>.</para>
        <para>It will return no assets (meshes, textures, prefabs, ...) or inactive objects.Please note that this function is very slow. It is not recommended to use this function every frame.
In most cases you can use the singleton pattern instead.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Object.FindObjectOfType(System.Type)">
      <summary>
        <para>Returns the first active loaded object of Type <c>type</c>.</para>
        <para>Please note that this function is very slow. It is not recommended to use this function every frame.
In most cases you can use the singleton pattern instead.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Object.DontDestroyOnLoad(UnityEngine.Object)">
      <summary>
        <para>Makes the object <c>target</c> not be destroyed automatically when loading a new scene.</para>
        <para>When loading a new level all objects in the scene are destroyed, then the objects in the new level are loaded.
In order to preserve an object during level loading call DontDestroyOnLoad on it.
If the object is a component or game object then its entire transform hierarchy will not be destroyed either.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Object.ToString">
      <summary>
        <para>Returns the name of the game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Object.name">
      <summary>
        <para>The name of the object.</para>
        <para>Components share the same name with the game object and all attached components.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Object.hideFlags">
      <summary>
        <para>Should the object be hidden, saved with the scene or modifiable by the user?</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Component">
      <summary>
        <para>Base class for everything attached to <see cref="GameObject">GameObject</see>s.</para>
        <para>Note that your code will never directly create a Component.  Instead, you write script code, and attach the script to a GameObject.
</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.GetComponent(System.Type)">
      <summary>
        <para>Returns the component of Type <c>type</c> if the game object has one attached, null if it doesn't.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponent``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.GetComponent(System.String)">
      <summary>
        <para>Returns the component with name <c>type</c> if the game object has one attached, null if it doesn't.</para>
        <para>It is better to use GetComponent with a Type instead of a string for performance reasons.
Sometimes you might not be able to get to the type however, for example when trying to access a C# script from Javascript.
In that case you can simply access the component by name instead of type.
Example:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.GetComponentInChildren(System.Type)">
      <summary>
        <para>Returns the component of Type <c>type</c> in the <see cref="GameObject">GameObject</see> or any of its children using depth first search.</para>
        <para>Only active components are returned.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentInChildren``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInChildren(System.Type)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the <see cref="GameObject">GameObject</see> or any of its children.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInChildren(System.Type,System.Boolean)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the <see cref="GameObject">GameObject</see> or any of its children.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInChildren``1(System.Boolean)">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInChildren``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.GetComponentInParent(System.Type)">
      <summary>
        <para>Returns the component of Type <c>type</c> in the <see cref="GameObject">GameObject</see> or any of its parents.</para>
        <para>Only active components are returned.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentInParent``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInParent(System.Type)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the <see cref="GameObject">GameObject</see> or any of its parents.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInParent(System.Type,System.Boolean)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the <see cref="GameObject">GameObject</see> or any of its parents.</para>
      </summary>
      <param name="t">The type of Component to retrieve.</param>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInParent``1(System.Boolean)">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
      <param name="includeInactive">Should inactive Components be included in the found set?</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponentsInParent``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.GetComponents(System.Type)">
      <summary>
        <para>Returns all components of Type <c>type</c> in the <see cref="GameObject">GameObject</see>.</para>
      </summary>
      <param name="type">The type of Component to retrieve.</param>
    </member>
    <member name="M:UnityEngine.Component.GetComponents``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Component.CompareTag(System.String)">
      <summary>
        <para>Is this game object tagged with /tag/?</para>
      </summary>
      <param name="tag">The tag to compare.</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessageUpwards(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object and on every ancestor of the behaviour.</para>
        <para>The receiving method can choose to ignore the argument by having zero arguments.
If the options parameter is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</para>
      </summary>
      <param name="methodName">Name of method to call.</param>
      <param name="value">Optional parameter value for the method.</param>
      <param name="options">Should an error be raised if the method does not exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessageUpwards(System.String,System.Object)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object and on every ancestor of the behaviour.</para>
        <para>The receiving method can choose to ignore the argument by having zero arguments.
If the options parameter is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</para>
      </summary>
      <param name="methodName">Name of method to call.</param>
      <param name="value">Optional parameter value for the method.</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessageUpwards(System.String)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object and on every ancestor of the behaviour.</para>
        <para>The receiving method can choose to ignore the argument by having zero arguments.
If the options parameter is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</para>
      </summary>
      <param name="methodName">Name of method to call.</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessageUpwards(System.String,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object and on every ancestor of the behaviour.</para>
        <para>The receiving method can choose to ignore the argument by having zero arguments.
If the options parameter is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</para>
      </summary>
      <param name="methodName">Name of method to call.</param>
      <param name="options">Should an error be raised if the method does not exist on the target object?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object.</para>
        <para>The receiving method can choose to ignore the argument by having zero arguments.
if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="value">Optional parameter for the method.</param>
      <param name="options">Should an error be raised if the target object doesn't implement the method for the message?</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessage(System.String,System.Object)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object.</para>
        <para>The receiving method can choose to ignore the argument by having zero arguments.
if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="value">Optional parameter for the method.</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessage(System.String)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object.</para>
        <para>The receiving method can choose to ignore the argument by having zero arguments.
if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
    </member>
    <member name="M:UnityEngine.Component.SendMessage(System.String,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object.</para>
        <para>The receiving method can choose to ignore the argument by having zero arguments.
if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.Note that messages will not be sent to inactive objects (ie, those that have been deactivated in the editor or with the GameObject.SetActive function).</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="options">Should an error be raised if the target object doesn't implement the method for the message?</param>
    </member>
    <member name="M:UnityEngine.Component.BroadcastMessage(System.String,System.Object,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object or any of its children.</para>
        <para>The receiving method can choose to ignore parameter by having zero arguments.
if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="parameter">Optional parameter to pass to the method (can be any value).</param>
      <param name="options">Should an error be raised if the method does not exist for a given target object?</param>
    </member>
    <member name="M:UnityEngine.Component.BroadcastMessage(System.String,System.Object)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object or any of its children.</para>
        <para>The receiving method can choose to ignore parameter by having zero arguments.
if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="parameter">Optional parameter to pass to the method (can be any value).</param>
    </member>
    <member name="M:UnityEngine.Component.BroadcastMessage(System.String)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object or any of its children.</para>
        <para>The receiving method can choose to ignore parameter by having zero arguments.
if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
    </member>
    <member name="M:UnityEngine.Component.BroadcastMessage(System.String,UnityEngine.SendMessageOptions)">
      <summary>
        <para>Calls the method named <c>methodName</c> on every <see cref="MonoBehaviour">MonoBehaviour</see> in this game object or any of its children.</para>
        <para>The receiving method can choose to ignore parameter by having zero arguments.
if options is set to SendMessageOptions.RequireReceiver an error is printed when the message is not picked up by any component.</para>
      </summary>
      <param name="methodName">Name of the method to call.</param>
      <param name="options">Should an error be raised if the method does not exist for a given target object?</param>
    </member>
    <member name="P:UnityEngine.Component.transform">
      <summary>
        <para>The <see cref="Transform">Transform</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.rigidbody">
      <summary>
        <para>The <see cref="Rigidbody">Rigidbody</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.rigidbody2D">
      <summary>
        <para>The Rigidbody2D that is attached to the Component's GameObject.</para>
        <para>This property will be null if no Rigidbody2D is attached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.camera">
      <summary>
        <para>The <see cref="Camera">Camera</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.light">
      <summary>
        <para>The <see cref="Light">Light</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.animation">
      <summary>
        <para>The <see cref="Animation">Animation</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.constantForce">
      <summary>
        <para>The <see cref="ConstantForce">ConstantForce</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.renderer">
      <summary>
        <para>The <see cref="Renderer">Renderer</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.audio">
      <summary>
        <para>The <see cref="AudioSource">AudioSource</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.guiText">
      <summary>
        <para>The <see cref="GUIText">GUIText</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.networkView">
      <summary>
        <para>The <see cref="NetworkView">NetworkView</see> attached to this <see cref="GameObject">GameObject</see> (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.guiTexture">
      <summary>
        <para>The <see cref="GUITexture">GUITexture</see> attached to this <see cref="GameObject">GameObject</see> (Read Only). (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.collider">
      <summary>
        <para>The <see cref="Collider">Collider</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.collider2D">
      <summary>
        <para>The Collider2D component attached to the object.</para>
        <para>This returns null if no Collider2D is attached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.hingeJoint">
      <summary>
        <para>The <see cref="HingeJoint">HingeJoint</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.particleEmitter">
      <summary>
        <para>The <see cref="ParticleEmitter">ParticleEmitter</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.particleSystem">
      <summary>
        <para>The <see cref="ParticleSystem">ParticleSystem</see> attached to this <see cref="GameObject">GameObject</see> (null if there is none attached).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.gameObject">
      <summary>
        <para>The game object this component is attached to. A component is always attached to a game object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Component.tag">
      <summary>
        <para>The tag of this game object.</para>
        <para>A tag can be used to identify a game object.
Tags must be declared in the tag manager before using them.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Light">
      <summary>
        <para>Script interface for <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Light.html">light components</see>.</para>
        <para>Use this to control all aspects of Unity's lights. The properties are an exact match for the
values shown in the Inspector.Usually lights are just created in the editor but sometimes you want to create a light from a script:</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.type">
      <summary>
        <para>The type of the light.</para>
        <para>Can be LightType.Spot, LightType.Directional, LightType.Point.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.color">
      <summary>
        <para>The color of the light.</para>
        <para>To modify the light intensity you change light's color luminance.
Lights always add illumination, so a light with a black color is the same
as no light at all.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.intensity">
      <summary>
        <para>The Intensity of a light is multiplied with the Light color.</para>
        <para>The value can be between 0 and 8. This allows you to create over bright lights.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadows">
      <summary>
        <para>How this light casts shadows</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowStrength">
      <summary>
        <para>Strength of light's shadows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowBias">
      <summary>
        <para>Shadow mapping bias.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowSoftness">
      <summary>
        <para>Softness of directional light's soft shadows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.shadowSoftnessFade">
      <summary>
        <para>Fadeout speed of directional light's soft shadows.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.range">
      <summary>
        <para>The range of the light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.spotAngle">
      <summary>
        <para>The angle of the light's spotlight cone in degrees.</para>
        <para>This is used primarily for Spot lights and has no effect for Point lights
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.cookieSize">
      <summary>
        <para>The size of a directional light's cookie.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.cookie">
      <summary>
        <para>The cookie texture projected by the light.</para>
        <para>If the cookie is a cube map, the light will become a Point light.
Note that cookies are only displayed for pixel lights.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.flare">
      <summary>
        <para>The <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Flare.html">flare asset</see> to use for this light.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.renderMode">
      <summary>
        <para>How to render the light.</para>
        <para>This can be LightRenderMode.Auto, LightRenderMode.ForceVertex or LightRenderMode.ForcePixel.Pixel lights render slower but look better, especially on not very highly tesselated geometry.
Some effects (e.g. bumpmapping) are only displayed for pixel lights.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.alreadyLightmapped">
      <summary>
        <para>Has the light already been lightmapped.</para>
        <para>When manually assembling a lightmapped scene set this property appropriately, so that the light doesn't affect lightmapped objects twice, but at the same time affects dynamic objects.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.cullingMask">
      <summary>
        <para>This is used to light certain objects in the scene selectively.</para>
        <para>A GameObject will only be illuminated by a light if that light's cullingMask/
includes the layer chosen for the GameObject (ie, the mask bit for the layer must be set to 1
for the object to receive any light).
See Layers for more information about layer masking.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Light.areaSize">
      <summary>
        <para>The size of the area light. Editor only.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Transform">
      <summary>
        <para>Position, rotation and scale of an object.</para>
        <para>Every object in a scene has a Transform.
It's used to store and manipulate the position, rotation and scale of the object.
Every Transform can have a parent, which allows you to apply position, rotation and scale hierarchically. This is the hierarchy seen in the Hierarchy pane.
They also support enumerators so you can loop through children using:</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.SetParent(UnityEngine.Transform,System.Boolean)">
      <summary>
        <para>Set the parent of the transform.</para>
        <para>This method is the same as the parent property except that it's possible to make the Transform keep its local orientation rather than its global orientation by setting the worldPositionStays parameter to false.</para>
      </summary>
      <param name="parent">The parent Transform to use.</param>
      <param name="worldPositionStays">If true, the parent-relative position, scale and rotation is modified such that the object keeps the same world space position, rotation and scale as before.</param>
    </member>
    <member name="M:UnityEngine.Transform.Translate(UnityEngine.Vector3)">
      <summary>
        <para>Moves the transform in the direction and distance of <c>translation</c>.</para>
        <para>If relativeTo is left out or set to Space.Self the movement is applied relative to the transform's local axes. (the x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the movement is applied relative to the world coordinate system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Space)">
      <summary>
        <para>Moves the transform in the direction and distance of <c>translation</c>.</para>
        <para>If relativeTo is left out or set to Space.Self the movement is applied relative to the transform's local axes. (the x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the movement is applied relative to the world coordinate system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Translate(System.Single,System.Single,System.Single)">
      <summary>
        <para>Moves the transform by <c>x</c> along the x axis, <c>y</c> along the y axis, and <c>z</c> along the z axis.</para>
        <para>If relativeTo is left out or set to Space.Self the movement is applied relative to the transform's local axes. (the x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the movement is applied relative to the world coordinate system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Space)">
      <summary>
        <para>Moves the transform by <c>x</c> along the x axis, <c>y</c> along the y axis, and <c>z</c> along the z axis.</para>
        <para>If relativeTo is left out or set to Space.Self the movement is applied relative to the transform's local axes. (the x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the movement is applied relative to the world coordinate system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Translate(UnityEngine.Vector3,UnityEngine.Transform)">
      <summary>
        <para>Moves the transform in the direction and distance of <c>translation</c>.</para>
        <para>The movement is applied relative to relativeTo's local coordinate system. 
If relativeTo is null, the movement is applied relative to the world coordinate system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Translate(System.Single,System.Single,System.Single,UnityEngine.Transform)">
      <summary>
        <para>Moves the transform by <c>x</c> along the x axis, <c>y</c> along the y axis, and <c>z</c> along the z axis.</para>
        <para>The movement is applied relative to relativeTo's local coordinate system.
If relativeTo is null, the movement is applied relative to the world coordinate system.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3)">
      <summary>
        <para>Applies a rotation of /eulerAngles.z/ degrees around the z axis, /eulerAngles.x/ degrees around the x axis, and /eulerAngles.y/ degrees around the y axis (in that order).</para>
        <para>If relativeTo is left out or set to Space.Self the rotation is applied around the transform's local axes. (The x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the rotation is applied around the world x, y, z axes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3,UnityEngine.Space)">
      <summary>
        <para>Applies a rotation of /eulerAngles.z/ degrees around the z axis, /eulerAngles.x/ degrees around the x axis, and /eulerAngles.y/ degrees around the y axis (in that order).</para>
        <para>If relativeTo is left out or set to Space.Self the rotation is applied around the transform's local axes. (The x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the rotation is applied around the world x, y, z axes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single)">
      <summary>
        <para>Applies a rotation of <c>zAngle</c> degrees around the z axis, <c>xAngle</c> degrees around the x axis, and <c>yAngle</c> degrees around the y axis (in that order).</para>
        <para>If relativeTo is left out or sot to Space.Self the rotation is applied around the transform's local axes. (The x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the rotation is applied around the world x, y, z axes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(System.Single,System.Single,System.Single,UnityEngine.Space)">
      <summary>
        <para>Applies a rotation of <c>zAngle</c> degrees around the z axis, <c>xAngle</c> degrees around the x axis, and <c>yAngle</c> degrees around the y axis (in that order).</para>
        <para>If relativeTo is left out or sot to Space.Self the rotation is applied around the transform's local axes. (The x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the rotation is applied around the world x, y, z axes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Rotates the transform around <c>axis</c> by <c>angle</c> degrees.</para>
        <para>If relativeTo is left out or set to Space.Self the axis parameter is relative to the transform's local axes. (The x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the axis parameter is relative to the world x, y, z axes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Rotate(UnityEngine.Vector3,System.Single,UnityEngine.Space)">
      <summary>
        <para>Rotates the transform around <c>axis</c> by <c>angle</c> degrees.</para>
        <para>If relativeTo is left out or set to Space.Self the axis parameter is relative to the transform's local axes. (The x, y and z axes shown when selecting the object inside the Scene View.)
If relativeTo is Space.World the axis parameter is relative to the world x, y, z axes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.RotateAround(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Rotates the transform about <c>axis</c> passing through <c>point</c> in world coordinates by <c>angle</c> degrees.</para>
        <para>This modifies both the position and the rotation of the transform.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Transform)">
      <summary>
        <para>Rotates the transform so the forward vector points at /target/'s current position.</para>
        <para>Then it rotates the transform to point its up direction vector in the direction hinted at by the worldUp vector.
If you leave out the worldUp parameter, the function will use the world y axis.
worldUp is only a hint vector. The up vector of the rotation will only match the worldUp vector if the forward direction is perpendicular to worldUp.</para>
      </summary>
      <param name="target">Object to point towards.</param>
    </member>
    <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Transform,UnityEngine.Vector3)">
      <summary>
        <para>Rotates the transform so the forward vector points at /target/'s current position.</para>
        <para>Then it rotates the transform to point its up direction vector in the direction hinted at by the worldUp vector.
If you leave out the worldUp parameter, the function will use the world y axis.
worldUp is only a hint vector. The up vector of the rotation will only match the worldUp vector if the forward direction is perpendicular to worldUp.</para>
      </summary>
      <param name="target">Object to point towards.</param>
      <param name="worldUp">Vector specifying the upward direction.</param>
    </member>
    <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Rotates the transform so the forward vector points at <c>worldPosition</c>.</para>
        <para>Then it rotates the transform to point its up direction vector in the direction hinted at by the worldUp vector.
If you leave out the worldUp parameter, the function will use the world y axis.
worldUp is only a hint vector. The up vector of the rotation will only match the worldUp vector if the forward direction is perpendicular to worldUp.</para>
      </summary>
      <param name="worldPosition">Point to look at.</param>
      <param name="worldUp">Vector specifying the upward direction.</param>
    </member>
    <member name="M:UnityEngine.Transform.LookAt(UnityEngine.Vector3)">
      <summary>
        <para>Rotates the transform so the forward vector points at <c>worldPosition</c>.</para>
        <para>Then it rotates the transform to point its up direction vector in the direction hinted at by the worldUp vector.
If you leave out the worldUp parameter, the function will use the world y axis.
worldUp is only a hint vector. The up vector of the rotation will only match the worldUp vector if the forward direction is perpendicular to worldUp.</para>
      </summary>
      <param name="worldPosition">Point to look at.</param>
    </member>
    <member name="M:UnityEngine.Transform.TransformDirection(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>direction</c> from local space to world space.</para>
        <para>This operation is not affected by scale or position of the transform.
The returned vector has the same length as direction.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.TransformDirection(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms direction <c>x</c>, <c>y</c>, <c>z</c> from local space to world space.</para>
        <para>This operation is not affected by scale or position of the transform.
The returned vector has the same length as direction.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformDirection(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a <c>direction</c> from world space to local space. The opposite of Transform.TransformDirection.</para>
        <para>This operation is unaffected by scale.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformDirection(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms the direction <c>x</c>, <c>y</c>, <c>z</c> from world space to local space. The opposite of Transform.TransformDirection.</para>
        <para>This operation is unaffected by scale.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.TransformVector(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>vector</c> from local space to world space.</para>
        <para>This operation is not affected by position of the transform, but is is affected by scale.
The returned vector may have a different length than vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.TransformVector(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms vector <c>x</c>, <c>y</c>, <c>z</c> from local space to world space.</para>
        <para>This operation is not affected by position of the transform, but is is affected by scale.
The returned vector may have a different length than vector.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformVector(UnityEngine.Vector3)">
      <summary>
        <para>Transforms a <c>vector</c> from world space to local space. The opposite of Transform.TransformVector.</para>
        <para>This operation is affected by scale.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformVector(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms the vector <c>x</c>, <c>y</c>, <c>z</c> from world space to local space. The opposite of Transform.TransformVector.</para>
        <para>This operation is affected by scale.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.TransformPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>position</c> from local space to world space.</para>
        <para>Note that the returned position is affected by scale. Use Transform.TransformDirection if you are dealing with directions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.TransformPoint(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms the position <c>x</c>, <c>y</c>, <c>z</c> from local space to world space.</para>
        <para>Note that the returned position is affected by scale. Use Transform.TransformDirection if you are dealing with directions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformPoint(UnityEngine.Vector3)">
      <summary>
        <para>Transforms <c>position</c> from world space to local space. The opposite of Transform.TransformPoint.</para>
        <para>Note that the returned position is affected by scale. Use Transform.InverseTransformDirection if you are dealing with directions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.InverseTransformPoint(System.Single,System.Single,System.Single)">
      <summary>
        <para>Transforms the position <c>x</c>, <c>y</c>, <c>z</c> from world space to local space. The opposite of Transform.TransformPoint.</para>
        <para>Note that the returned position is affected by scale. Use Transform.InverseTransformDirection if you are dealing with directions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.DetachChildren">
      <summary>
        <para>Unparents all children.</para>
        <para>Useful if you want to destroy the root of a hierarchy without destroying the children.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.SetAsFirstSibling">
      <summary>
        <para>Move the transform to the start of the local transfrom list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.SetAsLastSibling">
      <summary>
        <para>Move the transform to the end of the local transfrom list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.SetSiblingIndex(System.Int32)">
      <summary>
        <para>Sets the sibling index.</para>
      </summary>
      <param name="index">Index to set.</param>
    </member>
    <member name="M:UnityEngine.Transform.GetSiblingIndex">
      <summary>
        <para>Gets the sibling index.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.Find(System.String)">
      <summary>
        <para>Finds a child by <c>name</c> and returns it.</para>
        <para>If no child with name can be found, null is returned.
If name contains a '/' character it will traverse the hierarchy like a path name.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.IsChildOf(UnityEngine.Transform)">
      <summary>
        <para>Is this transform a child of /parent/?</para>
        <para>Returns a boolean value that indicates whether the transform is a child of a given transform.
true if this transform is a child, deep child (child of a child) or identical to this transform, otherwise false.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Transform.GetChild(System.Int32)">
      <summary>
        <para>Returns a transform child by index.</para>
      </summary>
      <param name="index">Index of the child transform to return. Must be smaller then Transform.childCount.</param>
    </member>
    <member name="P:UnityEngine.Transform.position">
      <summary>
        <para>The position of the transform in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localPosition">
      <summary>
        <para>Position of the transform relative to the parent transform.</para>
        <para>If the transform has no parent, it is the same as Transform.position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.eulerAngles">
      <summary>
        <para>The rotation as Euler angles in degrees.</para>
        <para>The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).Only use this variable to read and set the angles to absolute values. Don't increment them, as it will fail when the angle exceeds 360 degrees.
Use Transform.Rotate instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localEulerAngles">
      <summary>
        <para>The rotation as Euler angles in degrees relative to the parent transform's rotation.</para>
        <para>The x, y, and z angles represent a rotation z degrees around the z axis, x degrees around the x axis, and y degrees around the y axis (in that order).Only use this variable to read and set the angles to absolute values. Don't increment them, as it will fail when the angle exceeds 360 degrees.
Use Transform.Rotate instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.right">
      <summary>
        <para>The red axis of the transform in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.up">
      <summary>
        <para>The green axis of the transform in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.forward">
      <summary>
        <para>The blue axis of the transform in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.rotation">
      <summary>
        <para>The rotation of the transform in world space stored as a <see cref="Quaternion">Quaternion</see>.</para>
        <para>Unity stores rotations as Quaternions internally. To rotate an object, use Transform.Rotate.
Use Transform.eulerAngles for setting the rotation as euler angles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localRotation">
      <summary>
        <para>The rotation of the transform relative to the parent transform's rotation.</para>
        <para>Unity stores rotations as Quaternions internally. To rotate an object, use Transform.Rotate.
Use Transform.localEulerAngles for modifying the rotation as euler angles.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localScale">
      <summary>
        <para>The scale of the transform relative to the parent.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.parent">
      <summary>
        <para>The parent of the transform.</para>
        <para>Changing the parent will modify the parent-relative position, scale and rotation but keep the world space position, rotation and scale the same.
</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.worldToLocalMatrix">
      <summary>
        <para>Matrix that transforms a point from world space into local space (Read Only).</para>
        <para>If you're not familiar with using matrices for coordinate transformations, use Transform.InverseTransformPoint instead.IMPORTANT: If you're setting shader parameters you MUST use Renderer.worldToLocalMatrix instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.localToWorldMatrix">
      <summary>
        <para>Matrix that transforms a point from local space into world space (Read Only).</para>
        <para>If you're not familiar with using matrices for coordinate transformations, use Transform.TransformPoint instead.IMPORTANT: If you're setting shader parameters you MUST use Renderer.localToWorldMatrix instead.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.root">
      <summary>
        <para>Returns the topmost transform in the hierarchy.</para>
        <para>(This never returns null, if this Transform doesn't have a parent it returns itself.)</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.childCount">
      <summary>
        <para>The number of children the Transform has.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.lossyScale">
      <summary>
        <para>The global scale of the object (Read Only).</para>
        <para>Please note that if you have a parent transform with scale and a child that is arbitrarily rotated, the scale will be skewed.
Thus scale can not be represented correctly in a 3 component vector but only a 3x3 matrix.
Such a representation is quite inconvenient to work with however.
lossyScale is a convenience property that attempts to match the actual world scale as much as it can.
If your objects are not skewed the value will be completely correct and 
most likely the value will not be very different if it contains skew too.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Transform.hasChanged">
      <summary>
        <para>Has the transform changed since the last time the flag was set to 'false'?</para>
        <para>A change to the transform can be anything that can cause its matrix to be recalculated: any adjustment to its position, rotation or scale. Note that operations which can change the transform will not actually check if the old and new value are different before setting this flag. So setting, for instance, transform.position will always set hasChanged on the transform, regardless of there being any actual change.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Time">
      <summary>
        <para>The interface to get time information from Unity.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Time.#ctor" />
    <member name="P:UnityEngine.Time.time">
      <summary>
        <para>The time at the beginning of this frame (Read Only). This is the time in seconds since the start of the game.</para>
        <para>Returns the same value if called multiple times in a single frame. When called from inside MonoBehaviour's FixedUpdate, returns fixedTime property.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.timeSinceLevelLoad">
      <summary>
        <para>The time this frame has started (Read Only). This is the time in seconds since the last level has been loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.deltaTime">
      <summary>
        <para>The time in seconds it took to complete the last frame (Read Only).</para>
        <para>Use this function to make your game frame rate independent.If you add or subtract to a value every frame chances are you should multiply with Time.deltaTime.
When you multiply with Time.deltaTime you essentially express:
I want to move this object 10 meters per second instead of 10 meters per frame.When called from inside MonoBehaviour's FixedUpdate, returns the fixed framerate
delta time.Note that you should not rely on Time.deltaTime from inside OnGUI since OnGUI
can be called multiple times per frame and deltaTime would hold the same value each call, until
next frame where it would be updated again.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.fixedTime">
      <summary>
        <para>The time the latest <see cref="MonoBehaviour.FixedUpdate">FixedUpdate</see> has started (Read Only). This is the time in seconds since the start of the game.</para>
        <para>Fixed time is updated in regular intervals (equal to fixedDeltaTime) until 
time property is reached.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.unscaledTime">
      <summary>
        <para>The timeScale-independant time at the beginning of this frame (Read Only). This is the time in seconds since the start of the game.</para>
        <para>Returns the same value if called multiple times in a single frame. Unlike time this value is not affected by timeScale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.unscaledDeltaTime">
      <summary>
        <para>The timeScale-independent time in seconds it took to complete the last frame (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.fixedDeltaTime">
      <summary>
        <para>The interval in seconds at which physics and other fixed frame rate updates (like MonoBehaviour's <see cref="MonoBehaviour.FixedUpdate">FixedUpdate</see>) are performed.</para>
        <para>For reading the delta time it is recommended to use Time.deltaTime instead because it automatically
returns the right delta time if you are inside a FixedUpdate function or
Update function.Note that the fixedDeltaTime interval is with respect to the in-game time affected by timeScale.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.maximumDeltaTime">
      <summary>
        <para>The maximum time a frame can take. Physics and other fixed frame rate updates (like MonoBehaviour's <see cref="MonoBehaviour.FixedUpdate">FixedUpdate</see>).</para>
        <para>Will be performed only for this duration of time per frame.Use this function to avoid low frame rate spikes occurring due to combination of GarbageCollector and expensive physics or other fixed frame rate updates.If frame will take longer than specified value, then less physics and other fixed frame rate updates will be performed. That will temporarily 
slow down the gameplay, but will allow frame rate to catchup avoiding nasty stuttering.It is advisable to keep maximum time for frame between 1/10th and 1/3th of a second.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.smoothDeltaTime">
      <summary>
        <para>A smoothed out Time.deltaTime (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.timeScale">
      <summary>
        <para>The scale at which the time is passing. This can be used for slow motion effects.</para>
        <para>When timeScale is 1.0 the time is passing as fast as realtime.
When timeScale is 0.5 the time is passing 2x slower than realtime.When timeScale is set to zero the game is basically paused if all your functions are
frame rate independent.Except for realtimeSinceStartup, timeScale affects all the time and delta time measuring variables of the Time class.If you lower timeScale it is recommended to also lower Time.fixedDeltaTime by the same amount.FixedUpdate functions will not be called when timeScale is set to zero.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.frameCount">
      <summary>
        <para>The total number of frames that have passed (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.realtimeSinceStartup">
      <summary>
        <para>The real time in seconds since the game started (Read Only).</para>
        <para>In almost all cases you can and should use Time.time instead.realtimeSinceStartup returns the time since startup, not affected by Time.timeScale.
realtimeSinceStartup also keeps increasing while the player is paused (in the background).
Using realtimeSinceStartup is useful when you want to pause the game by setting Time.timeScale to zero,
but still want to be able to measure time somehow.Note that realtimeSinceStartup returns time as reported by system timer. Depending on
the platform and the hardware, it may report the same time even in several consecutive
frames. If you're dividing something by time difference, take this into account
(time difference may become zero!).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Time.captureFramerate">
      <summary>
        <para>Slows game playback time to allow screenshots to be saved between frames.</para>
        <para>If this property has a non-zero value then frame update will occur at an interval of (1.0 / captureFramerate) regardless of real time and the time required to render a frame. This is useful if you want to capture a movie where you need a constant frame rate and leave enough time between frames to save screen images.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Random">
      <summary>
        <para>Class for generating random data.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Random.Range(System.Single,System.Single)">
      <summary>
        <para>Returns a random float number between and <c>min</c> [inclusive] and <c>max</c> [inclusive] (Read Only).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Random.Range(System.Int32,System.Int32)">
      <summary>
        <para>Returns a random integer number between <c>min</c> [inclusive] and <c>max</c> [exclusive] (Read Only).</para>
        <para>If max equals min, min will be returned. The returned value will never be max unless min equals max.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.seed">
      <summary>
        <para>Sets the seed for the random number generator.</para>
        <para>The random number generator is not truly random but produces numbers in a preset sequence (the values in the sequence "jump" around the range in such a way that they appear random for most purposes).The point in the sequence where a particular run of pseudo-random values begins is selected using an integer called the seed value. The seed is normally set from some arbitrary value like the system clock before the random number functions are used. This prevents the same run of values from occurring each time a game is played and thus avoids predictable gameplay. However, it is sometimes useful to produce the same run of pseudo-random values on demand by setting the seed yourself.You might set your own seed, for example,  when you generate a game level procedurally. You can use randomly-chosen elements to make the scene look arbitrary and natural but set the seed to a preset value before generating. This will make sure that the same "random" pattern is produced each time the game is played. This can often be an effective way to reduce a game's storage requirements - you can generate as many levels as you like procedurally and store each one using nothing more than an integer seed value.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.value">
      <summary>
        <para>Returns a random number between 0.0 [inclusive] and 1.0 [inclusive] (Read Only).</para>
        <para>Both 0.0 and 1.0 may be returned by this property. This behaviour is different to that of many other random number generators which return a value less than but never exactly equal to 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.insideUnitSphere">
      <summary>
        <para>Returns a random point inside a sphere with radius 1 (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.insideUnitCircle">
      <summary>
        <para>Returns a random point inside a circle with radius 1 (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.onUnitSphere">
      <summary>
        <para>Returns a random point on the surface of a sphere with radius 1 (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.rotation">
      <summary>
        <para>Returns a random rotation (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Random.rotationUniform">
      <summary>
        <para>Returns a random rotation with uniform distribution (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEngine.YieldInstruction">
      <summary>
        <para>Base class for all <c>yield</c> instructions.</para>
        <para>See WaitForSeconds, WaitForFixedUpdate, Coroutine and MonoBehaviour.StartCoroutine for more information.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.YieldInstruction.#ctor" />
    <member name="T:UnityEngine.PlayerPrefsException">
      <summary>
        <para>An exception thrown by the <see cref="PlayerPrefs">PlayerPrefs</see> class in a  web player build.</para>
        <para>The exception is thrown when writing to a preference file exceeds the allotted storage space.  The storage space is 1MB for a web player.  This exception is not thrown on other platforms.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.PlayerPrefs">
      <summary>
        <para>Stores and accesses player preferences between game sessions.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.SetInt(System.String,System.Int32)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetInt(System.String,System.Int32)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetInt(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.SetFloat(System.String,System.Single)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetFloat(System.String,System.Single)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetFloat(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.SetString(System.String,System.String)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetString(System.String,System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.GetString(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.HasKey(System.String)">
      <summary>
        <para>Returns true if <c>key</c> exists in the preferences.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.DeleteKey(System.String)">
      <summary>
        <para>Removes <c>key</c> and its corresponding value from the preferences.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.DeleteAll">
      <summary>
        <para>Removes all keys and values from the preferences. Use with caution.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.PlayerPrefs.Save">
      <summary>
        <para>Writes all modified preferences to disk.</para>
        <para>By default Unity writes preferences to disk on Application Quit.
In case when the game crashes or otherwise prematuraly exits,
you might want to write the PlayerPrefs at sensible 'checkpoints' in your game.
This function will write to disk potentially causing a small hiccup, therefore it is not recommended to call during actual gameplay.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AndroidJNIHelper">
      <summary>
        <para>Helper interface for JNI interaction; signature creation and method lookups.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetConstructorID(System.IntPtr)">
      <summary>
        <para>Scans a particular Java class for a constructor method matching a signature.</para>
        <para>The signature comparison is done to allow for sub-/base-classes of the class types.
If no signature is provided the first constuctor found will be returned.</para>
      </summary>
      <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetConstructorID(System.IntPtr,System.String)">
      <summary>
        <para>Scans a particular Java class for a constructor method matching a signature.</para>
        <para>The signature comparison is done to allow for sub-/base-classes of the class types.
If no signature is provided the first constuctor found will be returned.</para>
      </summary>
      <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
      <param name="signature">Constructor method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID(System.IntPtr,System.String,System.String)">
      <summary>
        <para>Scans a particular Java class for a method matching a name and a signature.</para>
        <para>The signature comparison is done to allow sub-/base-classes of a class types.
If no signature is provided the first method with the correct name will be returned.</para>
      </summary>
      <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
      <param name="methodName">Name of the method as declared in Java.</param>
      <param name="signature">Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID(System.IntPtr,System.String)">
      <summary>
        <para>Scans a particular Java class for a method matching a name and a signature.</para>
        <para>The signature comparison is done to allow sub-/base-classes of a class types.
If no signature is provided the first method with the correct name will be returned.</para>
      </summary>
      <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
      <param name="methodName">Name of the method as declared in Java.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID(System.IntPtr,System.String,System.String,System.Boolean)">
      <summary>
        <para>Scans a particular Java class for a method matching a name and a signature.</para>
        <para>The signature comparison is done to allow sub-/base-classes of a class types.
If no signature is provided the first method with the correct name will be returned.</para>
      </summary>
      <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
      <param name="methodName">Name of the method as declared in Java.</param>
      <param name="signature">Method signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
      <param name="isStatic">Set to <c>true</c> for static methods; <c>false</c> for instance (nonstatic) methods.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetFieldID(System.IntPtr,System.String,System.String)">
      <summary>
        <para>Scans a particular Java class for a field matching a name and a signature.</para>
        <para>The signature comparison is done to allow sub-/base-classes of a class types.
If no signature is provided the first field with the correct name will be returned.</para>
      </summary>
      <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
      <param name="fieldName">Name of the field as declared in Java.</param>
      <param name="signature">Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetFieldID(System.IntPtr,System.String)">
      <summary>
        <para>Scans a particular Java class for a field matching a name and a signature.</para>
        <para>The signature comparison is done to allow sub-/base-classes of a class types.
If no signature is provided the first field with the correct name will be returned.</para>
      </summary>
      <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
      <param name="fieldName">Name of the field as declared in Java.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetFieldID(System.IntPtr,System.String,System.String,System.Boolean)">
      <summary>
        <para>Scans a particular Java class for a field matching a name and a signature.</para>
        <para>The signature comparison is done to allow sub-/base-classes of a class types.
If no signature is provided the first field with the correct name will be returned.</para>
      </summary>
      <param name="javaClass">Raw JNI Java class object (obtained by calling AndroidJNI.FindClass).</param>
      <param name="fieldName">Name of the field as declared in Java.</param>
      <param name="signature">Field signature (e.g. obtained by calling AndroidJNIHelper.GetSignature).</param>
      <param name="isStatic">Set to <c>true</c> for static fields; <c>false</c> for instance (nonstatic) fields.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.CreateJavaRunnable(UnityEngine.AndroidJavaRunnable)">
      <summary>
        <para>Creates a UnityJavaRunnable object (implements java.lang.Runnable).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.CreateJavaProxy(UnityEngine.AndroidJavaProxy)">
      <summary>
        <para>Creates a java proxy object which connects to the supplied proxy implementation.</para>
      </summary>
      <param name="proxy">An implementatinon of a java interface in c#.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.ConvertToJNIArray(System.Array)">
      <summary>
        <para>Creates a Java array from a managed array.</para>
      </summary>
      <param name="array">Managed array to be converted into a Java array object.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.CreateJNIArgArray(System.Object[])">
      <summary>
        <para>Creates the parameter array to be used as argument list when invoking Java code through CallMethod() in AndroidJNI.</para>
      </summary>
      <param name="args">An array of objects that should be converted to Call parameters.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.DeleteJNIArgArray(System.Object[],UnityEngine.jvalue[])">
      <summary>
        <para>Deletes any local jni references previously allocated by CreateJNIArgArray().</para>
      </summary>
      <param name="args">The array of arguments used as a parameter to CreateJNIArgArray().</param>
      <param name="jniArgs">The array returned by CreateJNIArgArray().</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetConstructorID(System.IntPtr,System.Object[])">
      <summary>
        <para>Get a JNI method ID for a constructor based on calling arguments.</para>
        <para>Scans a particular Java class for a constructor method matching a signature based on passed arguments.
The signature comparison is done to allow for sub-/base-classes of the class types.</para>
      </summary>
      <param name="args">Array with parameters to be passed to the constructor when invoked.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID(System.IntPtr,System.String,System.Object[],System.Boolean)">
      <summary>
        <para>Get a JNI method ID based on calling arguments.</para>
        <para>Generic parameter represents the method return type, and the regular method assumes 'void' return type.
Scans a particular Java class for a method matching a signature based on passed arguments.
The signature comparison is done to allow for sub-/base-classes of the class types.</para>
      </summary>
      <param name="methodName">Name of the method as declared in Java.</param>
      <param name="args">Array with parameters to be passed to the method when invoked.</param>
      <param name="isStatic">Set to <c>true</c> for static methods; <c>false</c> for instance (nonstatic) methods.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetSignature(System.Object)">
      <summary>
        <para>Creates the JNI signature string for particular object type.</para>
      </summary>
      <param name="obj">Object for which a signature is to be produced.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetSignature(System.Object[])">
      <summary>
        <para>Creates the JNI signature string for an object parameter list.</para>
      </summary>
      <param name="args">Array of object for which a signature is to be produced.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.ConvertFromJNIArray``1(System.IntPtr)">
      <summary>
        <para>Creates a managed array from a Java array.</para>
      </summary>
      <param name="array">Java array object to be converted into a managed array.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetMethodID``1(System.IntPtr,System.String,System.Object[],System.Boolean)">
      <summary>
        <para>Get a JNI method ID based on calling arguments.</para>
        <para>Generic parameter represents the method return type, and the regular method assumes 'void' return type.
Scans a particular Java class for a method matching a signature based on passed arguments.
The signature comparison is done to allow for sub-/base-classes of the class types.</para>
      </summary>
      <param name="methodName">Name of the method as declared in Java.</param>
      <param name="args">Array with parameters to be passed to the method when invoked.</param>
      <param name="isStatic">Set to <c>true</c> for static methods; <c>false</c> for instance (nonstatic) methods.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetFieldID``1(System.IntPtr,System.String,System.Boolean)">
      <summary>
        <para>Get a JNI field ID based on type detection. Generic parameter represents the field type.</para>
        <para>Scans a particular Java class for a field matching a signature of the field type.
The signature comparison is done to allow for sub-/base-classes of the class types.</para>
      </summary>
      <param name="fieldName">Name of the field as declared in Java.</param>
      <param name="isStatic">Set to <c>true</c> for static fields; <c>false</c> for instance (nonstatic) fields.</param>
    </member>
    <member name="M:UnityEngine.AndroidJNIHelper.GetSignature``1(System.Object[])">
      <summary>
        <para>Creates the JNI signature string for an object parameter list.</para>
      </summary>
      <param name="args">Array of object for which a signature is to be produced.</param>
    </member>
    <member name="P:UnityEngine.AndroidJNIHelper.debug">
      <summary>
        <para>Set <c>debug</c> to true to log calls through the AndroidJNIHelper.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AndroidJNI">
      <summary>
        <para>'Raw' JNI interface to Android Dalvik (Java) VM from Mono (CS/JS).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticFloatField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticDoubleField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticStringField(System.IntPtr,System.IntPtr,System.String)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
        <para>This is a convenience function that calls SetStaticObjectField() with the same parameters, but performs the necessary marshalling of the string value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticObjectField(System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
        <para>The value to set is a reference to either a java.lang.Object, or a subclass thereof.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticBooleanField(System.IntPtr,System.IntPtr,System.Boolean)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticByteField(System.IntPtr,System.IntPtr,System.Byte)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticCharField(System.IntPtr,System.IntPtr,System.Char)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticShortField(System.IntPtr,System.IntPtr,System.Int16)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticIntField(System.IntPtr,System.IntPtr,System.Int32)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticLongField(System.IntPtr,System.IntPtr,System.Int64)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticFloatField(System.IntPtr,System.IntPtr,System.Single)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStaticDoubleField(System.IntPtr,System.IntPtr,System.Double)">
      <summary>
        <para>This function ets the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToBooleanArray(System.Boolean[])">
      <summary>
        <para>Convert a managed array of System.Boolean to a Java array of <c>boolean</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToByteArray(System.Byte[])">
      <summary>
        <para>Convert a managed array of System.Byte to a Java array of <c>byte</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToCharArray(System.Char[])">
      <summary>
        <para>Convert a managed array of System.Char to a Java array of <c>char</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToShortArray(System.Int16[])">
      <summary>
        <para>Convert a managed array of System.Int16 to a Java array of <c>short</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToIntArray(System.Int32[])">
      <summary>
        <para>Convert a managed array of System.Int32 to a Java array of <c>int</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToLongArray(System.Int64[])">
      <summary>
        <para>Convert a managed array of System.Int64 to a Java array of <c>long</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToFloatArray(System.Single[])">
      <summary>
        <para>Convert a managed array of System.Single to a Java array of <c>float</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToDoubleArray(System.Double[])">
      <summary>
        <para>Convert a managed array of System.Double to a Java array of <c>double</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToObjectArray(System.IntPtr[])">
      <summary>
        <para>Convert a managed array of System.IntPtr, representing Java objects, to a Java array of <c>java.lang.Object</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromBooleanArray(System.IntPtr)">
      <summary>
        <para>Convert a Java array of <c>boolean</c> to a managed array of System.Boolean.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromByteArray(System.IntPtr)">
      <summary>
        <para>Convert a Java array of <c>byte</c> to a managed array of System.Byte.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromCharArray(System.IntPtr)">
      <summary>
        <para>Convert a Java array of <c>char</c> to a managed array of System.Char.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromShortArray(System.IntPtr)">
      <summary>
        <para>Convert a Java array of <c>short</c> to a managed array of System.Int16.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromIntArray(System.IntPtr)">
      <summary>
        <para>Convert a Java array of <c>int</c> to a managed array of System.Int32.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromLongArray(System.IntPtr)">
      <summary>
        <para>Convert a Java array of <c>long</c> to a managed array of System.Int64.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromFloatArray(System.IntPtr)">
      <summary>
        <para>Convert a Java array of <c>float</c> to a managed array of System.Single.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromDoubleArray(System.IntPtr)">
      <summary>
        <para>Convert a Java array of <c>double</c> to a managed array of System.Double.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromObjectArray(System.IntPtr)">
      <summary>
        <para>Convert a Java array of <c>java.lang.Object</c> to a managed array of System.IntPtr, representing Java objects.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetArrayLength(System.IntPtr)">
      <summary>
        <para>Returns the number of elements in the array.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewBooleanArray(System.Int32)">
      <summary>
        <para>Construct a new primitive array object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewByteArray(System.Int32)">
      <summary>
        <para>Construct a new primitive array object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewCharArray(System.Int32)">
      <summary>
        <para>Construct a new primitive array object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewShortArray(System.Int32)">
      <summary>
        <para>Construct a new primitive array object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewIntArray(System.Int32)">
      <summary>
        <para>Construct a new primitive array object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewLongArray(System.Int32)">
      <summary>
        <para>Construct a new primitive array object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewFloatArray(System.Int32)">
      <summary>
        <para>Construct a new primitive array object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewDoubleArray(System.Int32)">
      <summary>
        <para>Construct a new primitive array object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewObjectArray(System.Int32,System.IntPtr,System.IntPtr)">
      <summary>
        <para>Constructs a new array holding objects in class <c>clazz</c>. All elements are initially set to <c>obj</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetBooleanArrayElement(System.IntPtr,System.Int32)">
      <summary>
        <para>Returns the value of one element of a primitive array.</para>
        <para>This function is a special case of GetBooleanArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetByteArrayElement(System.IntPtr,System.Int32)">
      <summary>
        <para>Returns the value of one element of a primitive array.</para>
        <para>This function is a special case of GetByteArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetCharArrayElement(System.IntPtr,System.Int32)">
      <summary>
        <para>Returns the value of one element of a primitive array.</para>
        <para>This function is a special case of GetCharArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetShortArrayElement(System.IntPtr,System.Int32)">
      <summary>
        <para>Returns the value of one element of a primitive array.</para>
        <para>This function is a special case of GetShortArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetIntArrayElement(System.IntPtr,System.Int32)">
      <summary>
        <para>Returns the value of one element of a primitive array.</para>
        <para>This function is a special case of GetIntArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetLongArrayElement(System.IntPtr,System.Int32)">
      <summary>
        <para>Returns the value of one element of a primitive array.</para>
        <para>This function is a special case of GetLongArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetFloatArrayElement(System.IntPtr,System.Int32)">
      <summary>
        <para>Returns the value of one element of a primitive array.</para>
        <para>This function is a special case of GetFloatArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetDoubleArrayElement(System.IntPtr,System.Int32)">
      <summary>
        <para>Returns the value of one element of a primitive array.</para>
        <para>This function is a special case of GetDoubleArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetObjectArrayElement(System.IntPtr,System.Int32)">
      <summary>
        <para>Returns an element of an <c>Object</c> array.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetBooleanArrayElement(System.IntPtr,System.Int32,System.Byte)">
      <summary>
        <para>Sets the value of one element in a primitive array.</para>
        <para>This function is a special case of SetBooleanArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetByteArrayElement(System.IntPtr,System.Int32,System.SByte)">
      <summary>
        <para>Sets the value of one element in a primitive array.</para>
        <para>This function is a special case of SetByteArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetCharArrayElement(System.IntPtr,System.Int32,System.Char)">
      <summary>
        <para>Sets the value of one element in a primitive array.</para>
        <para>This function is a special case of SetCharArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetShortArrayElement(System.IntPtr,System.Int32,System.Int16)">
      <summary>
        <para>Sets the value of one element in a primitive array.</para>
        <para>This function is a special case of SetShortArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetIntArrayElement(System.IntPtr,System.Int32,System.Int32)">
      <summary>
        <para>Sets the value of one element in a primitive array.</para>
        <para>This function is a special case of SetIntArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetLongArrayElement(System.IntPtr,System.Int32,System.Int64)">
      <summary>
        <para>Sets the value of one element in a primitive array.</para>
        <para>This function is a special case of SetLongArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetFloatArrayElement(System.IntPtr,System.Int32,System.Single)">
      <summary>
        <para>Sets the value of one element in a primitive array.</para>
        <para>This function is a special case of SetFloatArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetDoubleArrayElement(System.IntPtr,System.Int32,System.Double)">
      <summary>
        <para>Sets the value of one element in a primitive array.</para>
        <para>This function is a special case of SetDoubleArrayRegion(), called with region size set to 1.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetObjectArrayElement(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>
        <para>Sets an element of an <c>Object</c> array.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.AttachCurrentThread">
      <summary>
        <para>Attaches the current thread to a Java (Dalvik) VM.</para>
        <para>A thread must be attached to the VM before any other JNI calls can be made.Returns 0 on success; returns a negative number on failure.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.DetachCurrentThread">
      <summary>
        <para>Detaches the current thread from a Java (Dalvik) VM.</para>
        <para>A thread must be detached from the VM before exiting.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetVersion">
      <summary>
        <para>Returns the version of the native method interface.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FindClass(System.String)">
      <summary>
        <para>This function loads a locally-defined class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromReflectedMethod(System.IntPtr)">
      <summary>
        <para>Converts a <c>java.lang.reflect.Method</c> or <c>java.lang.reflect.Constructor</c> object to a method ID.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FromReflectedField(System.IntPtr)">
      <summary>
        <para>Converts a <c>java.lang.reflect.Field</c> to a field ID.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToReflectedMethod(System.IntPtr,System.IntPtr,System.Boolean)">
      <summary>
        <para>Converts a method ID derived from clazz to a <c>java.lang.reflect.Method</c> or <c>java.lang.reflect.Constructor</c> object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ToReflectedField(System.IntPtr,System.IntPtr,System.Boolean)">
      <summary>
        <para>Converts a field ID derived from cls to a <c>java.lang.reflect.Field</c> object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetSuperclass(System.IntPtr)">
      <summary>
        <para>If <c>clazz</c> represents any class other than the class <c>Object</c>, then this function returns the object that represents the superclass of the class specified by <c>clazz</c>.</para>
        <para>If clazz specifies the class Object, or clazz represents an interface, this function returns NULL.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.IsAssignableFrom(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Determines whether an object of <c>clazz1</c> can be safely cast to <c>clazz2</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.Throw(System.IntPtr)">
      <summary>
        <para>Causes a <c>java.lang.Throwable</c> object to be thrown.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ThrowNew(System.IntPtr,System.String)">
      <summary>
        <para>Constructs an exception object from the specified class with the <c>message</c> specified by message and causes that exception to be thrown.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ExceptionOccurred">
      <summary>
        <para>Determines if an exception is being thrown.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ExceptionDescribe">
      <summary>
        <para>Prints an exception and a backtrace of the stack to the <c>logcat</c></para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.ExceptionClear">
      <summary>
        <para>Clears any exception that is currently being thrown.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.FatalError(System.String)">
      <summary>
        <para>Raises a fatal error and does not expect the VM to recover. This function does not return.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.PushLocalFrame(System.Int32)">
      <summary>
        <para>Creates a new local reference frame, in which at least a given number of local references can be created.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.PopLocalFrame(System.IntPtr)">
      <summary>
        <para>Pops off the current local reference frame, frees all the local references, and returns a local reference in the previous local reference frame for the given <c>result</c> object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewGlobalRef(System.IntPtr)">
      <summary>
        <para>Creates a new global reference to the object referred to by the <c>obj</c> argument.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.DeleteGlobalRef(System.IntPtr)">
      <summary>
        <para>Deletes the global reference pointed to by <c>obj</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewLocalRef(System.IntPtr)">
      <summary>
        <para>Creates a new local reference that refers to the same object as <c>obj</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.DeleteLocalRef(System.IntPtr)">
      <summary>
        <para>Deletes the local reference pointed to by <c>obj</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.IsSameObject(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Tests whether two references refer to the same Java object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.EnsureLocalCapacity(System.Int32)">
      <summary>
        <para>Ensures that at least a given number of local references can be created in the current thread.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.AllocObject(System.IntPtr)">
      <summary>
        <para>Allocates a new Java object without invoking any of the constructors for the object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewObject(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Constructs a new Java object. The method ID indicates which constructor method to invoke. This ID must be obtained by calling GetMethodID() with &amp;lt;init&amp;gt; as the method name and void (V) as the return type.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetObjectClass(System.IntPtr)">
      <summary>
        <para>Returns the class of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.IsInstanceOf(System.IntPtr,System.IntPtr)">
      <summary>
        <para>Tests whether an object is an instance of a class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetMethodID(System.IntPtr,System.String,System.String)">
      <summary>
        <para>Returns the method ID for an instance (nonstatic) method of a class or interface.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetFieldID(System.IntPtr,System.String,System.String)">
      <summary>
        <para>Returns the field ID for an instance (nonstatic) field of a class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticMethodID(System.IntPtr,System.String,System.String)">
      <summary>
        <para>Returns the method ID for a static method of a class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticFieldID(System.IntPtr,System.String,System.String)">
      <summary>
        <para>Returns the field ID for a static field of a class.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.NewStringUTF(System.String)">
      <summary>
        <para>Constructs a new <c>java.lang.String</c> object from an array of characters in modified UTF-8 encoding.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStringUTFLength(System.IntPtr)">
      <summary>
        <para>Returns the length in bytes of the modified UTF-8 representation of a string.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStringUTFChars(System.IntPtr)">
      <summary>
        <para>Returns a managed string object representing the string in modified UTF-8 encoding.</para>
        <para>This method is a modification of the original GetStringUTFChars, which returns a pointer to an array of bytes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStringMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
        <para>This is a convenience function that calls CallObjectMethod() with the same parameters, but creates a managed string from the result.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallObjectMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
        <para>This method returns a reference to a java.lang.Object, or a subclass thereof.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallIntMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallBooleanMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallShortMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallByteMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallCharMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallFloatMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallDoubleMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallLongMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallVoidMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Calls an instance (nonstatic) Java method defined by <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStringField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
        <para>This is a convenience function that calls GetObjectField() with the same parameters, but creates a managed string from the result.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetObjectField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
        <para>The result is a reference to a java.lang.Object, or a subclass thereof.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetBooleanField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetByteField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetCharField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetShortField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetIntField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetLongField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetFloatField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetDoubleField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetStringField(System.IntPtr,System.IntPtr,System.String)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
        <para>This is a convenience function that calls SetObjectField() with the same parameters, but performs the necessary marshalling of the string value.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetObjectField(System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
        <para>The value to set is a reference to either a java.lang.Object, or a subclass thereof.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetBooleanField(System.IntPtr,System.IntPtr,System.Boolean)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetByteField(System.IntPtr,System.IntPtr,System.Byte)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetCharField(System.IntPtr,System.IntPtr,System.Char)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetShortField(System.IntPtr,System.IntPtr,System.Int16)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetIntField(System.IntPtr,System.IntPtr,System.Int32)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetLongField(System.IntPtr,System.IntPtr,System.Int64)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetFloatField(System.IntPtr,System.IntPtr,System.Single)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.SetDoubleField(System.IntPtr,System.IntPtr,System.Double)">
      <summary>
        <para>This function sets the value of an instance (nonstatic) field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticStringMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
        <para>This is a convenience function that calls CallStaticObjectMethod() with the same parameters, but creates a managed string from the result.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticObjectMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
        <para>This method returns a reference to a java.lang.Object, or a subclass thereof.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticIntMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticBooleanMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticShortMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticByteMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticCharMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticFloatMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticDoubleMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticLongMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.CallStaticVoidMethod(System.IntPtr,System.IntPtr,UnityEngine.jvalue[])">
      <summary>
        <para>Invokes a static method on a Java object, according to the specified <c>methodID</c>, optionally passing an array of arguments (<c>args</c>) to the method.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticStringField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
        <para>This is a convenience function that calls GetStaticObjectField() with the same parameters, but creates a managed string from the result.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticObjectField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
        <para>The result is a reference to a java.lang.Object, or a subclass thereof.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticBooleanField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticByteField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticCharField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticShortField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticIntField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidJNI.GetStaticLongField(System.IntPtr,System.IntPtr)">
      <summary>
        <para>This function returns the value of a static field of an object.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AndroidInput">
      <summary>
        <para>AndroidInput provides support for off-screen touch input, such as a touchpad.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.AndroidInput.GetSecondaryTouch(System.Int32)">
      <summary>
        <para>Returns object representing status of a specific touch on a secondary touchpad (Does not allocate temporary variables).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AndroidInput.touchCountSecondary">
      <summary>
        <para>Number of secondary touches. Guaranteed not to change throughout the frame. (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AndroidInput.secondaryTouchEnabled">
      <summary>
        <para>Property indicating whether the system provides secondary touch input.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AndroidInput.secondaryTouchWidth">
      <summary>
        <para>Property indicating the width of the secondary touchpad.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.AndroidInput.secondaryTouchHeight">
      <summary>
        <para>Property indicating the height of the secondary touchpad.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Motion">
      <summary>
        <para>Base class for AnimationClips and BlendTrees.</para>
        <para>Motions are used by animation States in the Mecanim StateMachines.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Motion.#ctor" />
    <member name="M:UnityEngine.Motion.ValidateIfRetargetable(System.Boolean)" />
    <member name="P:UnityEngine.Motion.averageDuration" />
    <member name="P:UnityEngine.Motion.averageAngularSpeed" />
    <member name="P:UnityEngine.Motion.averageSpeed" />
    <member name="P:UnityEngine.Motion.apparentSpeed" />
    <member name="P:UnityEngine.Motion.isLooping" />
    <member name="P:UnityEngine.Motion.isAnimatorMotion" />
    <member name="P:UnityEngine.Motion.isHumanMotion" />
    <member name="T:UnityEngine.SamsungTV">
      <summary>
        <para>Interace into SamsungTV specific functionality.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.SamsungTV.touchPadMode">
      <summary>
        <para>The type of input the remote's touch pad produces.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.SamsungTV+TouchPadMode">
      <summary>
        <para>Types of input the remote's touchpad can produce.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SamsungTV+TouchPadMode.Dpad">
      <summary>
        <para>Swipe in a direction to get an arrow key event.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SamsungTV+TouchPadMode.Joystick">
      <summary>
        <para>Touchpad works like an analog joystick.</para>
        <para>Produces values from -1 to 1 on two axes.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.SamsungTV+TouchPadMode.Mouse">
      <summary>
        <para>Touchpad controls a mouse cursor like a laptop's touchpad.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ADBannerView+BannerWasClickedDelegate">
      <summary>
        <para>Will be fired when banner was clicked.</para>
        <para>Please note, that app will loose focus on banner click, so the delegate will be called on first frame after ad was shown.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ADBannerView+BannerWasLoadedDelegate">
      <summary>
        <para>Will be fired when banner loaded new ad.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.ADInterstitialAd+InterstitialWasLoadedDelegate">
      <summary>
        <para>Will be called when ad is ready to be shown.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioClip+PCMReaderCallback">
      <summary>
        <para>Delegate called each time <see cref="AudioClip">AudioClip</see> reads data.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.AudioClip+PCMSetPositionCallback">
      <summary>
        <para>Delegate called each time <see cref="AudioClip">AudioClip</see> changes read position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.RectTransform+ReapplyDrivenProperties">
      <summary>
        <para>Delegate used for the <see cref="RectTransform-reapplyDrivenProperties">reapplyDrivenProperties</see> event.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Font+FontTextureRebuildCallback">
      <summary>
        <para>Delegate used for Font.textureRebuildCallback.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.GUI+WindowFunction">
      <summary>
        <para>Callback to draw GUI within a window (used with <see cref="GUI.Window">GUI.Window</see>).</para>
        <para>This function takes the ID number of the window to be drawn. Its body should contains GUI calls to display the window, much like a standard OnGUI function. This function can then be passed as a parameter to GUI.Window to draw the appropriate contents.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Application+LogCallback">
      <summary>
        <para>Use this delegate type with RegisterLogCallback to monitor what gets logged.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Display+DisplaysUpdatedDelegate" />
    <member name="T:UnityEngine.AndroidJavaRunnable">
      <summary>
        <para>AndroidJavaRunnable is the Unity representation of a java.lang.Runnable object.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityAction">
      <summary>
        <para>Zero argument delegate used by UnityEvents.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityAction`1">
      <summary>
        <para>One argument delegate used by UnityEvents.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityAction`2">
      <summary>
        <para>Two argument delegate used by UnityEvents.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityAction`3">
      <summary>
        <para>Three argument delegate used by UnityEvents.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Events.UnityAction`4">
      <summary>
        <para>Four argument delegate used by UnityEvents.</para>
      </summary>
    </member>
  </members>
</doc>