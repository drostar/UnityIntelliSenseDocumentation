<!-- Generated by Intellisense Code Hints for Unity  - - -->
<doc>
  <assembly>
    <name>UnityEditor</name>
  </assembly>
  <members>
    <member name="T:UnityEditor.AnimationClipCurveData">
      <summary>
        <para>An AnimationClipCurveData object contains all the information needed to identify a specific curve in an AnimationClip. The curve animates a specific property of a component / material attached to a game object / animated bone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.path">
      <summary>
        <para>The path of the game object / bone being animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.type">
      <summary>
        <para>The type of the component / material being animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.propertyName">
      <summary>
        <para>The name of the property being animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.curve">
      <summary>
        <para>The actual animation curve.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorCurveBinding">
      <summary>
        <para>Defines how a curve is attached to an object that it controls.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorCurveBinding.path">
      <summary>
        <para>The transform path of the object that is animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorCurveBinding.propertyName">
      <summary>
        <para>The property of the object that is animated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimationUtility">
      <summary>
        <para>Editor utility functions for modifying animation clips.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimationClips(UnityEngine.Animation)">
      <summary>
        <para>Returns the array of AnimationClips that are referenced in the Animation component.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAnimationClips(UnityEngine.Animation,UnityEngine.AnimationClip[])">
      <summary>
        <para>Sets the array of AnimationClips to be referenced in the Animation component.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimatableBindings(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Returns all the animatable bindings that a specific game object has.</para>
        <para>Answers the question: "What can be animated?".The root GameObject does not need to be an actual root, but it must be higher in the hierarchy than the target. The target and root may also be the same GameObject.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimatedObject(UnityEngine.GameObject,UnityEditor.EditorCurveBinding)">
      <summary>
        <para>Returns the animated object that the binding is pointing to.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetCurveBindings(UnityEngine.AnimationClip)">
      <summary>
        <para>Returns all the float curve bindings currently stored in the clip.</para>
        <para>Answers the question: "Which float properties are animated by the clip?".Unity has two types of animation: Float and object reference. Float curve is a classic curve that animates float property over time. Object reference "curve" is a construct that animates object reference property over time.This method returns only the float curve bindings. See AnimationUtility.GetObjectReferenceCurveBindings for object reference curves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurveBindings(UnityEngine.AnimationClip)">
      <summary>
        <para>Returns all the object reference curve bindings currently stored in the clip.</para>
        <para>Answers the question: "Which object reference properties are animated by the clip?".Unity has two types of animation: Float and object reference. Float curve is a classic curve that animates float property over time. Object reference "curve" is a construct that animates object reference property over time.This method returns only the object reference bindings. See AnimationUtility.GetObjectReferenceCurveBindings for float curves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)">
      <summary>
        <para>Return the object reference curve that the binding is pointing to.</para>
        <para>Unlike float curves, the object reference curves do not have additional metadata. Thus array of keyframes is returned instead of a singular curve object.See also: AnimationUtility.GetEditorCurve.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetEditorCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)">
      <summary>
        <para>Return the float curve that the binding is pointing to.</para>
        <para>Unity automatic combines position curves, scale curves, rotation curves internally.Thus transform curves always get combined and their keyframes is always the union of all keyframe points.
In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.See also: AnimationUtility.GetObjectReferenceCurve.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetEditorCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEngine.AnimationCurve)">
      <summary>
        <para>Adds, modifies or removes an editor float curve in a given clip.</para>
        <para>Unity automatic combines position curves, scale curves, rotation curves internally. Thus transform curves always get combined and their keyframes is always the union of all keyframe points. In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.Unity has two types of animation: Float and object reference. Float curve is a classic curve that animates float property over time. Object reference "curve" is a construct that animates object reference property over time.This method is used for float curves. For object reference curves, see: AnimationUtility.SetObjectReferenceCurve.</para>
      </summary>
      <param name="clip">The animation clip to which the curve will be added.</param>
      <param name="binding">The bindings which defines the path and the property of the curve.</param>
      <param name="curve">The curve to add. Setting this to null will remove the curve.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEditor.ObjectReferenceKeyframe[])">
      <summary>
        <para>Adds, modifies or removes an object reference curve in a given clip.</para>
        <para>Unity has two types of animation: Float and object reference. Float curve is a classic curve that animates float property over time. Object reference "curve" is a construct that animates object reference property over time.This method is used for float curves. For object reference curves, see: AnimationUtility.SetObjectReferenceCurve.</para>
      </summary>
      <param name="keyframes">Setting this to null will remove the curve.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAllCurves(UnityEngine.AnimationClip)">
      <summary>
        <para>Retrieves all curves from a specific animation clip.</para>
        <para>If includeCurveData is false, all animation curves in returned results will be null. Use this when
you only want to get the list of curves, their types and names.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAllCurves(UnityEngine.AnimationClip,System.Boolean)">
      <summary>
        <para>Retrieves all curves from a specific animation clip.</para>
        <para>If includeCurveData is false, all animation curves in returned results will be null. Use this when
you only want to get the list of curves, their types and names.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetEditorCurve(UnityEngine.AnimationClip,System.String,System.Type,System.String)">
      <summary>
        <para>Return the float curve that the binding is pointing to.</para>
        <para>Unity automatic combines position curves, scale curves, rotation curves internally.Thus transform curves always get combined and their keyframes is always the union of all keyframe points.
In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.See also: AnimationUtility.GetObjectReferenceCurve.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimationEvents(UnityEngine.AnimationClip)">
      <summary>
        <para>Retrieves all animation events associated with the animation clip.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAnimationEvents(UnityEngine.AnimationClip,UnityEngine.AnimationEvent[])">
      <summary>
        <para>Replaces all animation events in the animation clip.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.CalculateTransformPath(UnityEngine.Transform,UnityEngine.Transform)">
      <summary>
        <para>Calculates path from root transform to target transform.</para>
        <para>Returns a string representing the path in a transform hierarchy from a given root transform down to a given target transform.The root transform does not need to be an actual root, but it must be higher in the hierarchy than the target transform. The target and root may also be the same transform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationUtility.onCurveWasModified">
      <summary>
        <para>Triggered when an animation curve inside an animation clip has been modified.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimationUtility+CurveModifiedType">
      <summary>
        <para>Describes the type of modification that caused OnCurveWasModified to fire.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimationMode">
      <summary>
        <para>AnimationMode is used by the AnimationWindow to store properties modifed by the AnimationClip playback.</para>
        <para>When exiting AnimationMode all properties are reverted to their default state. Animated properties are also highlighted by the inspector. Use AnimationMode.StartAnimationMode to enter animation mode. In Animation mode the editor is tinted to show that it is animating. Properties can be animated via AnimationMode.SampleAnimationClip.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.IsPropertyAnimated(UnityEngine.Object,System.String)">
      <summary>
        <para>Is the specified property currently in animation mode and being animated?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.StopAnimationMode">
      <summary>
        <para>Stops Animation mode, reverts all properties that were animated in animation mode.</para>
        <para>AnimationMode stores per property modifications. They are added either via AnimationMode.SampleClip or AnimationMode.AddPropertyModification. StopAnimationMode reverts all of these properties.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.InAnimationMode">
      <summary>
        <para>Are we currently in AnimationMode.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.StartAnimationMode">
      <summary>
        <para>Starts the animation mode.</para>
        <para>When the Animation Mode is enabled, the editor is tinted in a special color to indicated that animations are playing and recorded.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.SampleAnimationClip(UnityEngine.GameObject,UnityEngine.AnimationClip,System.Single)">
      <summary>
        <para>Samples an AnimationClip on the object and also records any modified properties in AnimationMode.</para>
        <para>This function must always be surrounded by AnimationMode.BeginSample and AnimationMode.EndSample. When a property is no longer sampled (through SampleAnimationClip or AddPropertyModification) between BeginSample and EndSample it will automatically revert to the original value when EndSample is called.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AnimationMode.animatedPropertyColor">
      <summary>
        <para>The color used to show that a property is currently being animated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.RemoveAssetOptions">
      <summary>
        <para>Options for removing assets</para>
      </summary>
    </member>
    <member name="F:UnityEditor.RemoveAssetOptions.MoveAssetToTrash">
      <summary>
        <para>The asset should be moved to trash.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.RemoveAssetOptions.DeleteAssets">
      <summary>
        <para>Delete the asset without moving it to the trash.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ImportAssetOptions">
      <summary>
        <para>Asset importing options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.Default">
      <summary>
        <para>Default import options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceUpdate">
      <summary>
        <para>User initiated asset import.</para>
        <para>This should be passed when asset import is caused by the user (e.g. by clicking Reimport).
Non-user initiated import happens when the asset modification time changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceSynchronousImport">
      <summary>
        <para>Import all assets synchronously.</para>
        <para>By default some assets can be imported asynchronously (e.g. scripts can be compiled in the background).
In some cases all importing needs to be synchronous; use this flag then. For example, when importing
a scripts + prefabs, scripts have to be fully compiled before prefab is serialized, otherwise
it might get old variables.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ImportRecursive">
      <summary>
        <para>When a folder is imported, import all its contents as well.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.DontDownloadFromCacheServer">
      <summary>
        <para>Force a full reimport but don't download the assets from the cache server.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceUncompressedImport">
      <summary>
        <para>Forces asset import as uncompressed for edition facilities.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetDatabase">
      <summary>
        <para>An Interface for accessing assets and performing operations on assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Contains(UnityEngine.Object)">
      <summary>
        <para>Is object an asset?</para>
        <para>Returns true when an object is an asset (corresponds to a file in the Assets folder), 
and false if it is not (for example object in the scene, or an object created at runtime).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Contains(System.Int32)">
      <summary>
        <para>Is object an asset?</para>
        <para>Returns true when an object is an asset (corresponds to a file in the Assets folder), 
and false if it is not (for example object in the scene, or an object created at runtime).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CreateFolder(System.String,System.String)">
      <summary>
        <para>Create a new folder.</para>
      </summary>
      <param name="parentFolder">The name of the parent folder.</param>
      <param name="newFolderName">The name of the new folder.</param>
      <returns>
        <para>The GUID of the newly created folder.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAsset(UnityEngine.Object)">
      <summary>
        <para>Is asset a main asset in the project window?</para>
        <para>For example an imported model has a game object as its root and several Meshes and child game objects
in expanded state. The root game object is the main asset in this case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAsset(System.Int32)">
      <summary>
        <para>Is asset a main asset in the project window?</para>
        <para>For example an imported model has a game object as its root and several Meshes and child game objects
in expanded state. The root game object is the main asset in this case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsSubAsset(UnityEngine.Object)">
      <summary>
        <para>Does the asset form part of another asset?</para>
        <para>Some assets may form part of another asset (for example, a procedural material can be part of a material package). This function tells if an asset is subordinated in this way.</para>
      </summary>
      <param name="obj">The asset Object to query.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsSubAsset(System.Int32)">
      <summary>
        <para>Does the asset form part of another asset?</para>
        <para>Some assets may form part of another asset (for example, a procedural material can be part of a material package). This function tells if an asset is subordinated in this way.</para>
      </summary>
      <param name="instanceID">Instance ID of the asset Object to query.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsForeignAsset(UnityEngine.Object)">
      <summary>
        <para>Is asset a foreign asset?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsForeignAsset(System.Int32)">
      <summary>
        <para>Is asset a foreign asset?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsNativeAsset(UnityEngine.Object)">
      <summary>
        <para>Is asset a native asset?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsNativeAsset(System.Int32)">
      <summary>
        <para>Is asset a native asset?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GenerateUniqueAssetPath(System.String)">
      <summary>
        <para>Creates a new unique path for an asset.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.StartAssetEditing">
      <summary>
        <para>Begin Asset importing. This lets you group several asset imports together into one larger import.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.StopAssetEditing">
      <summary>
        <para>Stop Asset importing. This lets you group several asset imports together into one larger import.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ValidateMoveAsset(System.String,System.String)">
      <summary>
        <para>Checks if an asset file can be moved from one folder to another. (Without actually moving the file).</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="oldPath">The path where the asset currently resides.</param>
      <param name="newPath">The path which the asset should be moved to.</param>
      <returns>
        <para>An empty string if the asset can be moved, otherwise an error message.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.MoveAsset(System.String,System.String)">
      <summary>
        <para>Move an asset file from one folder to another.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="oldPath">The path where the asset currently resides.</param>
      <param name="newPath">The path which the asset should be moved to.</param>
      <returns>
        <para>An empty string if the asset has been successfully moved, otherwise an error message.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.RenameAsset(System.String,System.String)">
      <summary>
        <para>Rename an asset file.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="pathName">The path where the asset currently resides.</param>
      <param name="newName">The new name which should be given to the asset.</param>
      <returns>
        <para>An empty string, if the asset has been successfully renamed, otherwise an error message.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.MoveAssetToTrash(System.String)">
      <summary>
        <para>Moves the asset at path to the trash.</para>
        <para>Returns true if the asset has been successfully removed, false if it doesn't exit or couldn't be moved to the trash.
All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.DeleteAsset(System.String)">
      <summary>
        <para>Deletes the asset file at path.</para>
        <para>Returns true if the asset has been successfully deleted, false if it doesn't exit or couldn't be removed.All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
      <param name="path">Filesystem path of the asset to be deleted.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String,UnityEditor.ImportAssetOptions)">
      <summary>
        <para>Import asset at path.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String)">
      <summary>
        <para>Import asset at path.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CopyAsset(System.String,System.String)">
      <summary>
        <para>Duplicates the asset at <c>path</c> and stores it at <c>newPath</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="path">Filesystem path of the source asset.</param>
      <param name="newPath">Filesystem path of the new asset to create.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.WriteImportSettingsIfDirty(System.String)">
      <summary>
        <para>Writes the import settings to disk.</para>
        <para>In order to make the cache server import assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetSubFolders(System.String)">
      <summary>
        <para>Given an absolute path to a directory, this method will return an array of all it's subdirectories.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsValidFolder(System.String)">
      <summary>
        <para>Given an absolute path to a folder, returns true if it exists, false otherwise.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CreateAsset(UnityEngine.Object,System.String)">
      <summary>
        <para>Creates a new asset at path.</para>
        <para>You must ensure that the path uses a supported extension ('.mat' for materials, '.cubemap' for cubemaps,
'.GUISkin' for skins, '.anim' for animations and '.asset' for arbitrary other assets.)You can add more assets to the file using AssetDatabase.AddObjectToAsset after the asset has been created.
If an asset already exists at path it will be deleted prior to creating a new asset.
All paths are relative to the project folder, for example: "Assets/MyStuff/hello.mat".Be aware that if adding multiple objects to an asset, the order in which the objects are added does not
really matter.  In other words, asset will not be special within the asset and not be any form of "root"
to objects added later.  The object displayed as the asset's main object in the project view is the one
that is considered most important (decided based on type) within the collection of objects.Note:You can not create an asset from GameObject, use the PrefabUtility class instead.</para>
      </summary>
      <param name="asset">Object to use in creating the asset.</param>
      <param name="path">Filesystem path for the new asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,System.String)">
      <summary>
        <para>Adds <c>objectToAdd</c> to an existing asset at <c>path</c>.</para>
        <para>Please note that you should only add assets to '.asset' assets, imported models or texture assets for example will lose their data.All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".Note:You can not add objectToAdd if it is GameObject, use PrefabUtility class instead.</para>
      </summary>
      <param name="objectToAdd">Object to add to the existing asset.</param>
      <param name="path">Filesystem path to the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Adds <c>objectToAdd</c> to an existing asset identified by <c>assetObject</c>.</para>
        <para>Please note that you should only add assets to '.asset' files, imported models or texture assets for example will lose their data when reimporting or quitting Unity.Note:You can not add objectToAdd if it is GameObject, use PrefabUtility class instead.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPath(UnityEngine.Object)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="assetObject">A reference to the asset.</param>
      <returns>
        <para>The asset path name, or null, or an empty string if the asset does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPath(System.Int32)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="instanceID">The instance ID of the asset.</param>
      <returns>
        <para>The asset path name, or null, or an empty string if the asset does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetOrScenePath(UnityEngine.Object)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"
When a game object is part of a scene, the scene path is returned.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetTextMetaDataPathFromAssetPath(System.String)">
      <summary>
        <para>Gets the path to the text .meta file associated with an asset.</para>
      </summary>
      <param name="path">The path to the asset.</param>
      <returns>
        <para>The path to the .meta text file or empty string if the file does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetTextMetaFilePathFromAssetPath(System.String)">
      <summary>
        <para>Gets the path to the text .meta file associated with an asset.</para>
      </summary>
      <param name="path">The path to the asset.</param>
      <returns>
        <para>The path to the .meta text file or empty string if the file does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPathFromTextMetaFilePath(System.String)">
      <summary>
        <para>Gets the path to the asset file associated with a text .meta file.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAssetAtPath(System.String,System.Type)">
      <summary>
        <para>Returns the first asset object of type <i>type</i> at given path <i>assetPath</i>.</para>
        <para>Some asset files may contain multiple objects. (such as a Maya file which may contain multiple Meshes and GameObjects).
All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".Note:
The assetPath parameter is not case sensitive.ALL asset names &amp;amp; paths in Unity use forward slashes, even on Windows.
This returns only asset object that is visible in the Project view.</para>
      </summary>
      <param name="assetPath">Path of the asset to load.</param>
      <param name="type">Data type of the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadMainAssetAtPath(System.String)">
      <summary>
        <para>Returns the main asset object at <c>assetPath</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
      <param name="assetPath">Filesystem path of the asset to load.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAllAssetRepresentationsAtPath(System.String)">
      <summary>
        <para>Returns all asset representations at <c>assetPath</c>.</para>
        <para>Asset representations are objects in the asset that are visible in the Project view.
All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAllAssetsAtPath(System.String)">
      <summary>
        <para>Returns an array of all asset objects at <c>assetPath</c>.</para>
        <para>Some asset files may contain multiple objects (such as a Maya file which may contain multiple Meshes and GameObjects).
All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".
This function returns all asset objects at a given path including hidden in the Project view.</para>
      </summary>
      <param name="assetPath">Filesystem path to the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Refresh(UnityEditor.ImportAssetOptions)">
      <summary>
        <para>Import any changed assets.</para>
        <para>This will import any assets that have changed their content modification data or have been added-removed to the project folder.This method implicitly triggers an asset garbage collection (see Resources.UnloadUnusedAssets).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Refresh">
      <summary>
        <para>Import any changed assets.</para>
        <para>This will import any assets that have changed their content modification data or have been added-removed to the project folder.This method implicitly triggers an asset garbage collection (see Resources.UnloadUnusedAssets).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(System.Int32,System.Int32)">
      <summary>
        <para>Opens the asset with associated application.</para>
        <para>Opens asset in an external editor, texture application or modelling tool depending on what type of asset it is.
If it is a text file, lineNumber instructs the text editor to go to that line.
Returns true if asset opened successfully.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object,System.Int32)">
      <summary>
        <para>Opens the asset with associated application.</para>
        <para>Opens asset in an external editor, texture application or modelling tool depending on what type of asset it is.
If it is a text file, lineNumber instructs the text editor to go to that line.
Returns true if asset opened successfully.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object[])">
      <summary>
        <para>Opens the asset(s) with associated application(s).</para>
        <para>Opens asset in an external editor, texture application or modelling tool depending on what type of asset it is.
Returns true if all assets opened successfully.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AssetPathToGUID(System.String)">
      <summary>
        <para>Get the GUID for the asset at <c>path</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="path">Filesystem path for the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GUIDToAssetPath(System.String)">
      <summary>
        <para>Translate a GUID to its current asset path.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.SaveAssets">
      <summary>
        <para>Writes all unsaved asset changes to disk.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetCachedIcon(System.String)">
      <summary>
        <para>Retrieves an icon for the asset at the given asset path.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.SetLabels(UnityEngine.Object,System.String[])">
      <summary>
        <para>Replaces that list of labels on an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetLabels(UnityEngine.Object)">
      <summary>
        <para>Returns all labels attached to a given asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ClearLabels(UnityEngine.Object)">
      <summary>
        <para>Removes all labels attached to an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAllAssetBundleNames">
      <summary>
        <para>Return all the AssetBundle names in the asset database.</para>
      </summary>
      <returns>
        <para>Array of asset bundle names.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetUnusedAssetBundleNames">
      <summary>
        <para>Return all the unused assetBundle names in the asset database.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.RemoveAssetBundleName(System.String,System.Boolean)">
      <summary>
        <para>Remove the assetBundle name from the asset database. The forceRemove flag is used to indicate if you want to remove it even it's in use.</para>
      </summary>
      <param name="assetBundleName">The assetBundle name you want to remove.</param>
      <param name="forceRemove">Flag to indicate if you want to remove the assetBundle name even it's in use.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.RemoveUnusedAssetBundleNames">
      <summary>
        <para>Remove all the unused assetBundle names in the asset database.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPathsFromAssetBundle(System.String)">
      <summary>
        <para>Get the paths of the assets which have been marked with the given assetBundle name.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPathsFromAssetBundleAndAssetName(System.String,System.String)">
      <summary>
        <para>Get the asset paths from the given assetBundle name and asset name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String[])">
      <summary>
        <para>Given an array of <i>pathNames</i>, returns the list of all assets that the assets depend on.</para>
        <para>The list returned will also include the input guid themselves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String)">
      <summary>
        <para>Exports the assets identified by <i>assetPathNames</i> to a unitypackage file in <i>fileName</i>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String,UnityEditor.ExportPackageOptions)">
      <summary>
        <para>Exports the assets identified by <i>assetPathNames</i> to a unitypackage file in <i>fileName</i>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String,UnityEditor.ExportPackageOptions)">
      <summary>
        <para>Exports the assets identified by <i>assetPathNames</i> to a unitypackage file in <i>fileName</i>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String)">
      <summary>
        <para>Exports the assets identified by <i>assetPathNames</i> to a unitypackage file in <i>fileName</i>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportPackage(System.String,System.Boolean)">
      <summary>
        <para>Imports package at <i>packagePath</i> into the current project.</para>
        <para>If interactive is true, an import package dialog will be opened, else all assets in the package will be imported into the current project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <returns>
        <para>True is the asset can be edited.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <returns>
        <para>True is the asset can be edited.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.FindAssets(System.String)">
      <summary>
        <para>Search the asset database using a search filter string.</para>
        <para>You can search for names, lables and types (classnames).'name': filter assets by their filename (without extension). Words separated by whitespace are treated as separate name searches. Use quotes for grouping multiple words into a single search.'labels': Use the keyword 'l'. Filtering by more than one label will return assets if just one asset label is matched (OR'ed)'types': Use the keyword 't'. Filtering by more than one type will return assets if just one type is matched (OR'ed).  Types can be either builtin types e.g 'Texture2D' or user script class names. If all assets are wanted: use 'Object' as all assets derive from Object.Searching is case insensitive
 
Use AssetDatabase.GUIDToAssetPath to get assetpaths and e.g AssetDatabase.LoadAssetAtPath to load an asset.</para>
      </summary>
      <param name="filter">The filter string can contain search data for: names, asset labels and types (class names).</param>
      <returns>
        <para>Array of matching asset GUIDs.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.FindAssets(System.String,System.String[])">
      <summary>
        <para>Search the asset database using a search filter string.</para>
        <para>You can search for names, lables and types (classnames).'name': filter assets by their filename (without extension). Words separated by whitespace are treated as separate name searches. Use quotes for grouping multiple words into a single search.'labels': Use the keyword 'l'. Filtering by more than one label will return assets if just one asset label is matched (OR'ed)'types': Use the keyword 't'. Filtering by more than one type will return assets if just one type is matched (OR'ed).  Types can be either builtin types e.g 'Texture2D' or user script class names. If all assets are wanted: use 'Object' as all assets derive from Object.Searching is case insensitive
 
Use AssetDatabase.GUIDToAssetPath to get assetpaths and e.g AssetDatabase.LoadAssetAtPath to load an asset.</para>
      </summary>
      <param name="filter">The filter string can contain search data for: names, asset labels and types (class names).</param>
      <param name="searchInFolders">Specifying one or more folders will limit the searching to these folders and their child folders (and is faster than searching all assets).</param>
      <returns>
        <para>Array of matching asset GUIDs.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.Animations.AvatarMask">
      <summary>
        <para>AvatarMask are used to mask out humanoid body parts and transforms.</para>
        <para>They can be used when importing animation or in an animator controller layer.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.#ctor">
      <summary>
        <para>Creates a new AvatarMask.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.GetHumanoidBodyPartActive(System.Int32)">
      <summary>
        <para>Returns true if the humanoid body part at the given index is active.</para>
      </summary>
      <param name="index">The index of the humanoid body part.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.SetHumanoidBodyPartActive(System.Int32,System.Boolean)">
      <summary>
        <para>Sets the humanoid body part at the given index to active or not.</para>
      </summary>
      <param name="index">The index of the humanoid body part.</param>
      <param name="value">Active or not.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.GetTransformPath(System.Int32)">
      <summary>
        <para>Returns the path of the transform at the given index.</para>
      </summary>
      <param name="index">The index of the transform.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.SetTransformPath(System.Int32,System.String)">
      <summary>
        <para>Sets the path of the transform at the given index.</para>
      </summary>
      <param name="index">The index of the transform.</param>
      <param name="path">The path of the transform.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.GetTransformActive(System.Int32)">
      <summary>
        <para>Returns true if the transform at the given index is active.</para>
      </summary>
      <param name="index">The index of the transform.</param>
    </member>
    <member name="M:UnityEditor.Animations.AvatarMask.SetTransformActive(System.Int32,System.Boolean)">
      <summary>
        <para>Sets the tranform at the given index to active or not.</para>
      </summary>
      <param name="index">The index of the transform.</param>
      <param name="value">Active or not.</param>
    </member>
    <member name="P:UnityEditor.Animations.AvatarMask.humanoidBodyPartCount">
      <summary>
        <para>The number of huamanoid body parts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AvatarMask.transformCount">
      <summary>
        <para>Number of transforms.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.BlendTreeType">
      <summary>
        <para>The type of blending algorithm that the blend tree uses.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.Simple1D">
      <summary>
        <para>Basic blending using a single parameter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.SimpleDirectional2D">
      <summary>
        <para>Best used when your motions represent different directions, such as "walk forward", "walk backward", "walk left", and "walk right", or "aim up", "aim down", "aim left", and "aim right".</para>
        <para>Optionally a single motion at position (0, 0) can be included, such as "idle" or "aim straight". In the Simple Directional type there should not be multiple motions in the same direction, such as "walk forward" and "run forward".</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.FreeformDirectional2D">
      <summary>
        <para>This blend type is used when your motions represent different directions, however you can have multiple motions in the same direction, for example "walk forward" and "run forward".</para>
        <para>In the Freeform Directional type the set of motions should always include a single motion at position (0, 0), such as "idle".</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.FreeformCartesian2D">
      <summary>
        <para>Best used when your motions do not represent different directions.</para>
        <para>With Freeform Cartesian your X parameter and Y parameter can represent different concepts, such as angular speed and linear speed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.BlendTreeType.Direct">
      <summary>
        <para>Direct control of blending weight for each node.</para>
        <para>Each blending weight can be controlled by a diferent parameter.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.ChildMotion">
      <summary>
        <para>Structure that represents a motion in the context of its parent blend tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.motion">
      <summary>
        <para>The motion itself.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.threshold">
      <summary>
        <para>The threshold of the child. Used in 1D blend trees.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.position">
      <summary>
        <para>The position of the child. Used in 2D blend trees.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.timeScale">
      <summary>
        <para>The relative speed of the child.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.cycleOffset">
      <summary>
        <para>Normalized time offset of the child.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.directBlendParameter">
      <summary>
        <para>The parameter used by the child when used in a BlendTree of type BlendTreeType.Direct.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildMotion.mirror">
      <summary>
        <para>Mirror of the child.</para>
        <para>Only valid when using humanoid animations.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.BlendTree">
      <summary>
        <para>Blend trees are used to blend continuously animation between their childs. They can either be 1D or 2D.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.AddChild(UnityEngine.Motion)">
      <summary>
        <para>Utility function to add a child motion to a blend trees.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The motion to add as child.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.AddChild(UnityEngine.Motion,UnityEngine.Vector2)">
      <summary>
        <para>Utility function to add a child motion to a blend trees.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The motion to add as child.</param>
      <param name="position">The position of the child. When using 2D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.AddChild(UnityEngine.Motion,System.Single)">
      <summary>
        <para>Utility function to add a child motion to a blend trees.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The motion to add as child.</param>
      <param name="threshold">The threshold of the child. When using 1D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.RemoveChild(System.Int32)">
      <summary>
        <para>Utility function to remove the child of a blend tree.</para>
        <para>If the blend tree is a sub asset of the blend tree, it will be deleted.
This function pushes an Undo operation.</para>
      </summary>
      <param name="index">The index of the blend tree to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.CreateBlendTreeChild(System.Single)">
      <summary>
        <para>Utility function to add a child blend tree to a blend tree.</para>
        <para>The blend tree asset that is created is added as a sub asset of the blend tree.
This function pushes an Undo operation.</para>
      </summary>
      <param name="threshold">The threshold of the child. When using 1D blend trees.</param>
    </member>
    <member name="M:UnityEditor.Animations.BlendTree.CreateBlendTreeChild(UnityEngine.Vector2)">
      <summary>
        <para>Utility function to add a child blend tree to a blend tree.</para>
        <para>The blend tree asset that is created is added as a sub asset of the blend tree.
This function pushes an Undo operation.</para>
      </summary>
      <param name="position">The position of the child. When using 2D blend trees.</param>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.blendParameter">
      <summary>
        <para>Parameter that is used to compute the blending weight of the childs in 1D blend trees or on the X axis of a 2D blend tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.blendParameterY">
      <summary>
        <para>Parameter that is used to compute the blending weight of the childs on the Y axis of a 2D blend tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.blendType">
      <summary>
        <para>The Blending type can be either 1D or different types of 2D.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.BlendTree.children">
      <summary>
        <para>The list of the blend tree child motions.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildOptions">
      <summary>
        <para>Building options. Multiple options can be combined together.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.None">
      <summary>
        <para>Perform the specified build without any special settings or extra tasks.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.Development">
      <summary>
        <para>Build a development version of the player.</para>
        <para>A development build includes debug symbols and enables the  Profiler. (To profile a webplayer you need to have the development version of the web player installed.  The unity3d file can be profiled only when the development webplayer is active.)Note that a development build of a webplayer means that the unity3d file created is not LZMA compressed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AutoRunPlayer">
      <summary>
        <para>Run the built player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ShowBuiltPlayer">
      <summary>
        <para>Show the built player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.BuildAdditionalStreamedScenes">
      <summary>
        <para>Build a compressed asset bundle that contains streamed scenes loadable with the WWW class.</para>
        <para>This allows you to on demand load scenes and their assets when needed instead of a simple linear progressing download.
The best way to build a streamed scene asset bundle is to use BuildPipeline.BuildStreamedSceneAssetBundle
</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AcceptExternalModificationsToPlayer">
      <summary>
        <para>Used when building Xcode (iPhone) or Eclipse (Android) projects.</para>
        <para>On iPhone, this setting will append an existing Xcode project. Existing Xcode project setting changes will be preserved.On Android, this setting will create a new Eclipse project. Existing Eclipse project setting changes will be discarded.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.WebPlayerOfflineDeployment">
      <summary>
        <para>Copy UnityObject.js alongside Web Player so it wouldn't have to be downloaded from internet.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ConnectWithProfiler">
      <summary>
        <para>Start the player with a connection to the profiler in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AllowDebugging">
      <summary>
        <para>Allow script debuggers to attach to the player remotely.</para>
        <para>Note that script debugging is not supported on the webplayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.SymlinkLibraries">
      <summary>
        <para>Symlink runtime libraries when generating iOS Xcode project. (Faster iteration time).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.UncompressedAssetBundle">
      <summary>
        <para>Don't compress the data when creating the asset bundle.</para>
        <para>This makes it faster to build &amp;amp; load, but since it is much bigger it will take longer to download.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.DeployOnline">
      <summary>
        <para>Generate online version of webplayer.</para>
        <para>Generate HTML for the webplayer which references the Unity-hosted version of UnityObject2.js.  When this option is not used the HTML will reference a copy of UnityObject2.js which will be dropped into the build folder alongside the HTML.  This version of UnityObject2.js is easier to work with, and allows you to debug Javascript locally.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.EnableHeadlessMode">
      <summary>
        <para>Build headless Linux standalone.</para>
        <para>Cannot be used to make a development build.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.BuildScriptsOnly">
      <summary>
        <para>Build only the scripts of a project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ForceEnableAssertions">
      <summary>
        <para>Include assertions in the build. By default, the assertions are only included in development builds.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildAssetBundleOptions">
      <summary>
        <para>Asset Bundle building options.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.None">
      <summary>
        <para>Build assetBundle without any special option.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.UncompressedAssetBundle">
      <summary>
        <para>Don't compress the data when creating the asset bundle.</para>
        <para>This makes it faster to build &amp;amp; load, but since it is much bigger it will take longer to download.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.CollectDependencies">
      <summary>
        <para>Includes all dependencies.</para>
        <para>This follows all references to any assets,
game objects or components and includes them in the build.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.CompleteAssets">
      <summary>
        <para>Forces inclusion of the entire asset.</para>
        <para>For example if you pass a Mesh into the BuildPipeline.BuildAssetBundle function and use CompleteAssets it would also include
the game object and any animation clips in the same asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DisableWriteTypeTree">
      <summary>
        <para>Do not include type information within the AssetBundle.</para>
        <para>Specifying this flag will make an AssetBundle susceptible to script or Unity version changes, but will make the file smaller and a bit faster to load.
This flag affects only AssetBundles for platforms that have type information included by default. Mobile and console platform always build without type information.
Type information must be present for Web platforms, therefore Unity will reject to build an AssetBundle if you specify this flag when building for BuildTarget.WebPlayer, for example.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DeterministicAssetBundle">
      <summary>
        <para>Builds an asset bundle using a hash for the id of the object stored in the asset bundle.</para>
        <para>This allows you to rebuild an asset bundle and reference assets in it directly.
When rebuilding the asset bundle the objects in it are guaranteed to have the same id
after rebuilding the asset bundle.
Due to it being a 32 bit hash space, if you have a lot of objects in the asset bundle it will increase the potential for hash conflicts. Unity will give an error and not build the asset bundle in that case.
The hash is based on the GUID of the asset and the local id of the object in the asset.
DeterministicAssetBundle are also slower to load from than normal asset bundles, this is because the threaded background loading API usually expects objects to be ordered in a way that makes reading reduce seeking.
With DeterministicAssetBundles that is not possible.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.ForceRebuildAssetBundle">
      <summary>
        <para>Force rebuild the assetBundles.</para>
        <para>This allows you to rebuild the assetBundle even if none of the included assets have changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.IgnoreTypeTreeChanges">
      <summary>
        <para>Ignore the type tree changes when doing the incremental build check.</para>
        <para>This allows you to ignore the type tree changes when doing the incremental build check. With this flag set, if the included assets haven't change but type trees have changed, the target assetBundle will not be rebuilt.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.AppendHashToAssetBundleName">
      <summary>
        <para>Append the hash to the assetBundle name.</para>
        <para>This allows you to append the hash to the assetBundle name.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetBundleBuild">
      <summary>
        <para>AssetBundle building map entry.</para>
        <para>This class is used with BuildPipeline.BuildAssetBundles to specify the name of a bundle and the names of the assets that it will contain. The array of AssetBundleBuild elements that is passed to the function is known as the "building map" and serves as an alternative to specifying the contents of bundles from the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetBundleBuild.assetBundleName">
      <summary>
        <para>AssetBundle name.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetBundleBuild.assetBundleVariant">
      <summary>
        <para>AssetBundle variant.</para>
        <para>Please refer to AssetImporter.assetBundleVariant for more information.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetBundleBuild.assetNames">
      <summary>
        <para>Asset names which belong to the given AssetBundle.</para>
        <para>Please use the asset path relative to the project folder, for example "Assets/MyPrefab.prefab".</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildPipeline">
      <summary>
        <para>Lets you programmatically build players or AssetBundles which can be loaded from the web.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.PushAssetDependencies">
      <summary>
        <para>Lets you manage cross-references and dependencies between different asset bundles and player builds.</para>
        <para>If a asset bundle has dependencies to other asset bundles, it is your responsibility to make sure the dependent asset bundles are loaded through the WWW class.When you push asset dependencies it will share all resources on that layer, pushing recursively always inherits the previous dependencies.
PushAssetDependencies and PopAssetDependencies must even each other out.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.PopAssetDependencies">
      <summary>
        <para>Lets you manage cross-references and dependencies between different asset bundles and player builds.</para>
        <para>If a asset bundle has dependencies to other asset bundles, it is your responsibility to make sure the dependent asset bundles are loaded through the WWW class.When you push asset dependencies it will share all resources on that layer, pushing recursively always inherits the previous dependencies.
PushAssetDependencies and PopAssetDependencies must even each other out.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildPlayer(System.String[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
      <summary>
        <para>Builds a player.</para>
        <para>Use this function to programatically create a build of your project.
Note that any references to GameObjects acquired in the editor script before the BuildPlayer call will be invalid after it and will need to be reacquired.</para>
      </summary>
      <param name="levels">The scenes to be included in the build. If empty, the currently open scene will be built. Paths are relative to the project folder (Assets/MyLevels/MyScene.unity).</param>
      <param name="locationPathName">The path where the application will be built.</param>
      <param name="target">The <see cref="BuildTarget">BuildTarget</see> to build.</param>
      <param name="options">Additional <see cref="BuildOptions">BuildOptions</see>, like whether to run the built player.</param>
      <returns>
        <para>An error message if an error occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
        <para>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file.The scene can be downloaded and loaded using the WWW class.
You can use WWW.LoadFromCacheOrDownload to cache the downloaded scene after it has been downloaded. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <param name="options">Build options. See <c>BuildOptions</c> for possible values.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
        <para>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file.The scene can be downloaded and loaded using the WWW class.
You can use WWW.LoadFromCacheOrDownload to cache the downloaded scene after it has been downloaded. The optional crc output parameter can be used to get a CRC checksum for the generated AssetBundle, which can be used to verify content when downloading AssetBundles using WWW.LoadFromCacheOrDownload.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle.</para>
        <para>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. This lets you stream resource data of any type, fully setup prefabs, textures, meshes, animations, any type of asset shown in the project window.
All paths are relative to the project folder. Like: "Assets / MyTextures / hello.png".Note that asset bundles built for standalone or webplayer targets cannot be loaded by
applications built for mobile platforms and vice versa. Furthermore, bundles are not
compatible between iOS and Android platforms.The function returns a boolean value which is true if the build succeeded and false otherwise.</para>
      </summary>
      <param name="mainAsset">Lets you specify a specific object that can be conveniently retrieved using <see cref="AssetBundle-mainAsset">AssetBundle.mainAsset</see>.</param>
      <param name="assets">An array of assets to write into the bundle.</param>
      <param name="pathName">The filename where to write the compressed asset bundle.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform to build the bundle for.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle.</para>
        <para>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. This lets you stream resource data of any type, fully setup prefabs, textures, meshes, animations, any type of asset shown in the project window.
All paths are relative to the project folder. Like: "Assets / MyTextures / hello.png".Note that asset bundles built for standalone or webplayer targets cannot be loaded by
applications built for mobile platforms and vice versa. Furthermore, bundles are not
compatible between iOS and Android platforms.The function returns a boolean value which is true if the build succeeded and false otherwise.</para>
      </summary>
      <param name="mainAsset">Lets you specify a specific object that can be conveniently retrieved using <see cref="AssetBundle-mainAsset">AssetBundle.mainAsset</see>.</param>
      <param name="assets">An array of assets to write into the bundle.</param>
      <param name="pathName">The filename where to write the compressed asset bundle.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String)">
      <summary>
        <para>Builds an asset bundle.</para>
        <para>Creates a compressed unity3d file that contains a collection of assets. AssetBundles can contain any asset found in the project folder. This lets you stream resource data of any type, fully setup prefabs, textures, meshes, animations, any type of asset shown in the project window.
All paths are relative to the project folder. Like: "Assets / MyTextures / hello.png".Note that asset bundles built for standalone or webplayer targets cannot be loaded by
applications built for mobile platforms and vice versa. Furthermore, bundles are not
compatible between iOS and Android platforms.The function returns a boolean value which is true if the build succeeded and false otherwise.</para>
      </summary>
      <param name="mainAsset">Lets you specify a specific object that can be conveniently retrieved using <see cref="AssetBundle-mainAsset">AssetBundle.mainAsset</see>.</param>
      <param name="assets">An array of assets to write into the bundle.</param>
      <param name="pathName">The filename where to write the compressed asset bundle.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets.</para>
        <para>The function returns a boolean value which is true if the build succeeded and false otherwise. 
Note: Specifying strings will increase the size of the asset bundle. The Built-in AssetBundle data shown in the build log refers to the string size.</para>
      </summary>
      <param name="assets">A collection of <c>assets</c> to be built into the asset bundle. Asset bundles can contain any asset found in the project folder.</param>
      <param name="assetNames">An array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use <see cref="BuildPipeline.BuildAssetBundle">BuildAssetBundle</see> to just use the asset's path names instead.</param>
      <param name="pathName">The location where the compressed asset bundle will be written to.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
      <param name="targetPlatform">The platform where the asset bundle will be used.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets.</para>
        <para>The function returns a boolean value which is true if the build succeeded and false otherwise. 
Note: Specifying strings will increase the size of the asset bundle. The Built-in AssetBundle data shown in the build log refers to the string size.</para>
      </summary>
      <param name="assets">A collection of <c>assets</c> to be built into the asset bundle. Asset bundles can contain any asset found in the project folder.</param>
      <param name="assetNames">An array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use <see cref="BuildPipeline.BuildAssetBundle">BuildAssetBundle</see> to just use the asset's path names instead.</param>
      <param name="pathName">The location where the compressed asset bundle will be written to.</param>
      <param name="assetBundleOptions">Automatically include dependencies or always include complete assets instead of just the exact referenced objects.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets.</para>
        <para>The function returns a boolean value which is true if the build succeeded and false otherwise. 
Note: Specifying strings will increase the size of the asset bundle. The Built-in AssetBundle data shown in the build log refers to the string size.</para>
      </summary>
      <param name="assets">A collection of <c>assets</c> to be built into the asset bundle. Asset bundles can contain any asset found in the project folder.</param>
      <param name="assetNames">An array of strings of the same size as the number of assets.
These will be used as asset names, which you can then pass to AssetBundle.Load to load a specific asset. Use <see cref="BuildPipeline.BuildAssetBundle">BuildAssetBundle</see> to just use the asset's path names instead.</param>
      <param name="pathName">The location where the compressed asset bundle will be written to.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Build all AssetBundles specified in the editor.</para>
        <para>From Unity 5.0, the editor lets you mark assets for inclusion in named AssetBundles (see the manual page about enhanced asset bundle workflow for further details). This function actually builds the bundles you have specified in the editor and will return true if the build was successful and false otherwise. Additionally, error messages are shown to explain most common build failures such as incorrect target folder paths.The outputPath is a path to a folder somewhere within the Assets folder where the built bundles will be saved (eg, "Assets/MyBundleFolder"). The folder will not be created automatically and the function will simply fail if it doesn't already exist.The optional assetBundleOptions modify the way the bundle is built while the targetPlatform selects which deployment target (standalone, mobile, etc) the bundle will be used with. Note that bundles built for standalone platforms are not compatible with those built for mobiles and so you may need to produce different versions of a given bundle. See the Asset Bundle FAQ in the manual for more information about bundle compatibility among platforms.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
      <param name="assetBundleOptions">AssetBundle building options.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String)">
      <summary>
        <para>Build all AssetBundles specified in the editor.</para>
        <para>From Unity 5.0, the editor lets you mark assets for inclusion in named AssetBundles (see the manual page about enhanced asset bundle workflow for further details). This function actually builds the bundles you have specified in the editor and will return true if the build was successful and false otherwise. Additionally, error messages are shown to explain most common build failures such as incorrect target folder paths.The outputPath is a path to a folder somewhere within the Assets folder where the built bundles will be saved (eg, "Assets/MyBundleFolder"). The folder will not be created automatically and the function will simply fail if it doesn't already exist.The optional assetBundleOptions modify the way the bundle is built while the targetPlatform selects which deployment target (standalone, mobile, etc) the bundle will be used with. Note that bundles built for standalone platforms are not compatible with those built for mobiles and so you may need to produce different versions of a given bundle. See the Asset Bundle FAQ in the manual for more information about bundle compatibility among platforms.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Build all AssetBundles specified in the editor.</para>
        <para>From Unity 5.0, the editor lets you mark assets for inclusion in named AssetBundles (see the manual page about enhanced asset bundle workflow for further details). This function actually builds the bundles you have specified in the editor and will return true if the build was successful and false otherwise. Additionally, error messages are shown to explain most common build failures such as incorrect target folder paths.The outputPath is a path to a folder somewhere within the Assets folder where the built bundles will be saved (eg, "Assets/MyBundleFolder"). The folder will not be created automatically and the function will simply fail if it doesn't already exist.The optional assetBundleOptions modify the way the bundle is built while the targetPlatform selects which deployment target (standalone, mobile, etc) the bundle will be used with. Note that bundles built for standalone platforms are not compatible with those built for mobiles and so you may need to produce different versions of a given bundle. See the Asset Bundle FAQ in the manual for more information about bundle compatibility among platforms.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
      <param name="assetBundleOptions">AssetBundle building options.</param>
      <param name="targetPlatform">Target build platform.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.AssetBundleBuild[],UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Build AssetBundles from a building map.</para>
        <para>This variant of the function lets you specify the names and contents of the bundles using a "building map" rather than with the details set in the editor. The map is simply an array of AssetBundleBuild objects, each of which contains a bundle name and a list of the names of asset files to be added to the named bundle.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
      <param name="assetBundleOptions">AssetBundle building options.</param>
      <param name="builds">AssetBundle building map.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.AssetBundleBuild[])">
      <summary>
        <para>Build AssetBundles from a building map.</para>
        <para>This variant of the function lets you specify the names and contents of the bundles using a "building map" rather than with the details set in the editor. The map is simply an array of AssetBundleBuild objects, each of which contains a bundle name and a list of the names of asset files to be added to the named bundle.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
      <param name="builds">AssetBundle building map.</param>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundles(System.String,UnityEditor.AssetBundleBuild[],UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Build AssetBundles from a building map.</para>
        <para>This variant of the function lets you specify the names and contents of the bundles using a "building map" rather than with the details set in the editor. The map is simply an array of AssetBundleBuild objects, each of which contains a bundle name and a list of the names of asset files to be added to the named bundle.</para>
      </summary>
      <param name="outputPath">Output path for the AssetBundles.</param>
      <param name="assetBundleOptions">AssetBundle building options.</param>
      <param name="targetPlatform">Target build platform.</param>
      <param name="builds">AssetBundle building map.</param>
    </member>
    <member name="P:UnityEditor.BuildPipeline.isBuildingPlayer">
      <summary>
        <para>Is a player currently being built?</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildTarget">
      <summary>
        <para>Target build platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXUniversal">
      <summary>
        <para>Build a universal OSX standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel">
      <summary>
        <para>Build an OS X standalone (Intel only).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneWindows">
      <summary>
        <para>Build a Windows standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WebPlayer">
      <summary>
        <para>Build a web player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WebPlayerStreamed">
      <summary>
        <para>Build a streamed web player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.iOS">
      <summary>
        <para>Build an iOS player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PS3">
      <summary>
        <para>Build a PS3 Standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.XBOX360">
      <summary>
        <para>Build a XBox Standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.Android">
      <summary>
        <para>Build an Android .apk standalone app.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinux">
      <summary>
        <para>Build a Linux standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneWindows64">
      <summary>
        <para>Build a Windows 64-bit standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WebGL">
      <summary>
        <para>WebGL.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WSAPlayer">
      <summary>
        <para>Build an Windows Store Apps player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinux64">
      <summary>
        <para>Build a Linux 64-bit standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinuxUniversal">
      <summary>
        <para>Build a Linux universal standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WP8Player">
      <summary>
        <para>Build a Windows Phone 8 player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel64">
      <summary>
        <para>Build an OSX Intel 64-bit standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.BlackBerry">
      <summary>
        <para>Build a BlackBerry 10 application.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.Tizen">
      <summary>
        <para>Build a Tizen player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PSP2">
      <summary>
        <para>Build a PS Vita Standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PS4">
      <summary>
        <para>Build a PS4 Standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.XboxOne">
      <summary>
        <para>Build a Xbox One Standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.SamsungTV">
      <summary>
        <para>Build to Samsung Smart TV platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.iPhone">
      <summary>
        <para>OBSOLETE: Use iOS. Build an iOS player.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildTargetGroup">
      <summary>
        <para>Build target group.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Unknown">
      <summary>
        <para>Unknown target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Standalone">
      <summary>
        <para>Mac/PC standalone target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WebPlayer">
      <summary>
        <para>Mac/PC webplayer target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.iPhone">
      <summary>
        <para>OBSOLETE: Use iOS. Apple iOS target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.iOS">
      <summary>
        <para>Apple iOS target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PS3">
      <summary>
        <para>Sony Playstation 3 target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.XBOX360">
      <summary>
        <para>Microsoft XBOX360 target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Android">
      <summary>
        <para>Android target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.GLESEmu">
      <summary>
        <para>GLESEmu target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WebGL">
      <summary>
        <para>WebGL.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WSA">
      <summary>
        <para>Windows Store Apps target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WP8">
      <summary>
        <para>Windows Phone 8 target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Tizen">
      <summary>
        <para>Samsung Tizen target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PSP2">
      <summary>
        <para>Sony PS Vita target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PS4">
      <summary>
        <para>Sony Playstation 4 target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.XboxOne">
      <summary>
        <para>Microsoft Xbox One target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.SamsungTV">
      <summary>
        <para>Samsung Smart TV target.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CallbackOrderAttribute">
      <summary>
        <para>Base class for Attributes that require a callback index.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.PostProcessBuildAttribute">
      <summary>
        <para>Add this attribute to a method to get a notification just after building the player.</para>
        <para>A method with this attribute will also get called when entering Playmode, when Application.LoadLevel or Application.LoadLevelAdditive is called.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.PostProcessSceneAttribute">
      <summary>
        <para>Add this attribute to a method to get a notification just before building the scene.</para>
        <para>PostProcessSceneAttribute has an option to provide an order index in the callback. This lets you change the  order in which the callback is invoked. (Builtin callbacks always have a value of 0).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.DidReloadScripts">
      <summary>
        <para>Add this attribute to a method to get a notification after scripts have been reloaded.</para>
        <para>DidReloadScripts has an option to provide an order index. This lets you change the  order in which the callback is invoked. (Builtin callbacks always have a value of 0).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.DidReloadScripts.#ctor">
      <summary>
        <para>DidReloadScripts attribute.</para>
        <para>The callbackOrder parameter determines the order in which the DidReloadScripts notifications will occur. Lower numbers will report earlier than higher numbers and Unity's internal processing has an order value of zero.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.DidReloadScripts.#ctor(System.Int32)">
      <summary>
        <para>DidReloadScripts attribute.</para>
        <para>The callbackOrder parameter determines the order in which the DidReloadScripts notifications will occur. Lower numbers will report earlier than higher numbers and Unity's internal processing has an order value of zero.</para>
      </summary>
      <param name="callbackOrder">Order in which separate attributes will be processed.</param>
    </member>
    <member name="T:UnityEditor.Callbacks.OnOpenAssetAttribute">
      <summary>
        <para>Callback attribute for opening an asset in Unity (e.g the callback is fired when double clicking an asset in the Project Browser).</para>
        <para>Adding this attribute to a static method will make the method be called when Unity is about to open an asset. The method should have the following signature:static bool OnOpenAsset(int instanceID, int line)
Return true if you handled the opening of the asset or false if an external tool should open it.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DefaultAsset">
      <summary>
        <para>DefaultAsset is used for assets that does not have a specific type (yet).</para>
        <para>Search for t:DefaultAsset in the project browser to see which assets are of that type.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DefaultAsset.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StaticEditorFlags">
      <summary>
        <para>Static Editor Flags.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.LightmapStatic">
      <summary>
        <para>Considered static for lightmapping.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OccluderStatic">
      <summary>
        <para>Considered static for occlusion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OccludeeStatic">
      <summary>
        <para>Considered static for occlusion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.BatchingStatic">
      <summary>
        <para>Consider for static batching.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.NavigationStatic">
      <summary>
        <para>Considered static for navigation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OffMeshLinkGeneration">
      <summary>
        <para>Auto-generate OffMeshLink.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.ReflectionProbeStatic">
      <summary>
        <para>Consider static for reflection probe.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication">
      <summary>
        <para>Main Application class.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.NewScene">
      <summary>
        <para>Create a new scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.NewEmptyScene">
      <summary>
        <para>Create a new absolutely empty scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenScene(System.String)">
      <summary>
        <para>Opens the scene at <c>path</c>.</para>
        <para>The scene that is currently open will not be saved, use SaveSceneIfUserWantsTo for that.
All paths are relative to the project folder. Like: "Assets/MyScenes/MyScene.unity".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenSceneAdditive(System.String)">
      <summary>
        <para>Opens the scene at <c>path</c> additively.</para>
        <para>All paths are relative to the project folder. Like: "Assets/MyScenes/MyScene.unity".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelInPlayMode(System.String)">
      <summary>
        <para>Load the given level in play mode.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelAdditiveInPlayMode(System.String)">
      <summary>
        <para>Load the given level additively in play mode.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelAsyncInPlayMode(System.String)">
      <summary>
        <para>Load the given level in play mode asynchronously.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LoadLevelAdditiveAsyncInPlayMode(System.String)">
      <summary>
        <para>Load the given level additively in play mode asynchronously</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveScene(System.String,System.Boolean)">
      <summary>
        <para>Save the open scene.</para>
        <para>All paths are relative to the project folder, such as: "Assets/MyScenes/MyScene.unity".
Folders specified in the path must already exist before calling the function.
If no path is specified, the path of the current open scene is used, except if it was never saved before, in which case a save dialog is shown.The function returns false if the save failed. This can happen if the specified path is invalid or if the user cancels in the case of a save dialog.When calling the function, the unsaved changes marker is cleared, just as when saving using the file menu.
(On Windows, the unsaved changes marker is an asterix after the file name in the window title.
On Mac OS X it's a dot inside the red close button of the window.)
When a path is specified, the currentScene is also changed to be the specified asset.When saveAsCopy is set to true however, neither the currentScene or the unsaved changes marker is changed.</para>
      </summary>
      <param name="path">The file path to save at. If empty, the current open scene will be overwritten, or if never saved before, a save dialog is shown.</param>
      <param name="saveAsCopy">If set to <c>true</c>, the scene will be saved without changing the <see cref="EditorApplication-currentScene">currentScene</see> and without clearing the unsaved changes marker.</param>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveScene(System.String)">
      <summary>
        <para>Save the open scene.</para>
        <para>All paths are relative to the project folder, such as: "Assets/MyScenes/MyScene.unity".
Folders specified in the path must already exist before calling the function.
If no path is specified, the path of the current open scene is used, except if it was never saved before, in which case a save dialog is shown.The function returns false if the save failed. This can happen if the specified path is invalid or if the user cancels in the case of a save dialog.When calling the function, the unsaved changes marker is cleared, just as when saving using the file menu.
(On Windows, the unsaved changes marker is an asterix after the file name in the window title.
On Mac OS X it's a dot inside the red close button of the window.)
When a path is specified, the currentScene is also changed to be the specified asset.When saveAsCopy is set to true however, neither the currentScene or the unsaved changes marker is changed.</para>
      </summary>
      <param name="path">The file path to save at. If empty, the current open scene will be overwritten, or if never saved before, a save dialog is shown.</param>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveScene">
      <summary>
        <para>Save the open scene.</para>
        <para>All paths are relative to the project folder, such as: "Assets/MyScenes/MyScene.unity".
Folders specified in the path must already exist before calling the function.
If no path is specified, the path of the current open scene is used, except if it was never saved before, in which case a save dialog is shown.The function returns false if the save failed. This can happen if the specified path is invalid or if the user cancels in the case of a save dialog.When calling the function, the unsaved changes marker is cleared, just as when saving using the file menu.
(On Windows, the unsaved changes marker is an asterix after the file name in the window title.
On Mac OS X it's a dot inside the red close button of the window.)
When a path is specified, the currentScene is also changed to be the specified asset.When saveAsCopy is set to true however, neither the currentScene or the unsaved changes marker is changed.</para>
      </summary>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveCurrentSceneIfUserWantsTo">
      <summary>
        <para>Ask the user if he wants to save the open scene.</para>
        <para>You might want to call this before opening another scene or creating a new scene.
A return value of true indicates that you may continue.
A return value of false indicates that the user cancelled the operation and you should not Open another Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenProject(System.String,System.String[])">
      <summary>
        <para>Open another project.</para>
        <para>Note that this function will not exit immediately. It will open another project after executing function returns.</para>
      </summary>
      <param name="projectPath">The path of a project to open.</param>
      <param name="args">Arguments to pass to command line.</param>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveAssets">
      <summary>
        <para>Saves all serializable assets that have not yet been written to disk (eg. Materials).</para>
        <para>Also makes sure the asset database is written.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.Step">
      <summary>
        <para>Perform a single frame step.</para>
        <para>As if you pressed the Step button in the main toolbar.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LockReloadAssemblies">
      <summary>
        <para>Prevents loading of assemblies when it is inconvenient.</para>
        <para>For example during drag operations you might want to prevent assembly reloading to not lose state during the drag.
Each LockReloadAssemblies must be matched by UnlockReloadAssemblies, otherwise scripts will never unload.
Unity automatically prevents reloading during mouse down.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.ExecuteMenuItem(System.String)">
      <summary>
        <para>Invokes the menu item in the specified path.</para>
        <para>This function also works with Editor Scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.UnlockReloadAssemblies">
      <summary>
        <para>Must be called after LockReloadAssemblies, to reenable loading of assemblies.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.Exit(System.Int32)">
      <summary>
        <para>Exit the Unity editor application.</para>
        <para>Calling this function will exit right away, without asking to save changes, so you may lose data!
This function is mostly useful for exiting out of a commandline process with a specific error.
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.MarkSceneDirty">
      <summary>
        <para>Explicitly mark the current opened scene as modified.</para>
        <para>Normally, an operation resulting in a scene file change should register itself with the undo system, which automatically handles scene dirty state tracking. However, if for whatever reason you can't make the operation undoable, you can use this function to explicitly mark the scene as modified, so that the user will be prompted to save the scene when it's being closed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.RepaintProjectWindow">
      <summary>
        <para>Can be used to ensure repaint of the ProjectWindow.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.RepaintHierarchyWindow">
      <summary>
        <para>Can be used to ensure repaint of the HierarchyWindow.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.DirtyHierarchyWindowSorting">
      <summary>
        <para>Set the hierarchy sorting method as dirty.</para>
        <para>Causes the hierarchy to reset the avaliable sorting methods.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.Beep">
      <summary>
        <para>Plays system beep sound.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.projectWindowItemOnGUI">
      <summary>
        <para>Delegate for OnGUI events for every visible list item in the ProjectWindow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.hierarchyWindowItemOnGUI">
      <summary>
        <para>Delegate for OnGUI events for every visible list item in the HierarchyWindow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.update">
      <summary>
        <para>Delegate for generic updates.</para>
        <para>Add your functions to this delegate to get an update callback at approximately 100 times per second.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.delayCall">
      <summary>
        <para>Delegate which is called once after all inspectors update.</para>
        <para>Add functions to this delegate in order to delay their execution until after inspectors have updated. Each function is only executed once after it is added.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.hierarchyWindowChanged">
      <summary>
        <para>A callback to be raised when an object in the hierarchy changes.

Each time an object is (or a group of objects are) created, renamed, parented, unparented or destroyed this callback is raised.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.projectWindowChanged">
      <summary>
        <para>Callback raised whenever the state of the Project window changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.searchChanged">
      <summary>
        <para>Callback raised whenever the contents of a window's search box are changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.modifierKeysChanged">
      <summary>
        <para>Delegate for changed keyboard modifier keys.</para>
        <para>Add your functions to this delegate to get a callback whenever the keyboard modifier keys have changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.playmodeStateChanged">
      <summary>
        <para>Delegate for play mode state changes.</para>
        <para>Add your functions to this delegate to get a callback whenever the playmode state changes (enter/exit play mode, pause).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.currentScene">
      <summary>
        <para>The path of the scene that the user has currently open (Will be an empty string if no scene is currently open). (Read Only)</para>
        <para>All paths are relative to the project folder. Like: "Assets/MyScenes/MyScene.unity".</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPlaying">
      <summary>
        <para>Is editor currently in play mode?</para>
        <para>Setting isPlaying delays the result until after all script code has completed for this frame.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPlayingOrWillChangePlaymode">
      <summary>
        <para>Is editor either currently in play mode, or about to switch to it? (Read Only)</para>
        <para>This will return true when editor will switch to play mode after finishing some tasks (e.g. after scripts
will be recompiled).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPaused">
      <summary>
        <para>Is editor currently paused?</para>
        <para>Lets you change pause state programmatically, like pressing the Pause button in the main toolbar.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isCompiling">
      <summary>
        <para>Is editor currently compiling scripts? (Read Only)</para>
        <para>Editor Window that tells you if Unity is compiling scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isUpdating">
      <summary>
        <para>Is editor currently updating? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isRemoteConnected">
      <summary>
        <para>Is editor currently connected to Unity Remote 4 client app.</para>
        <para>This lets you to check if editor has successfully connected to Unity Remote 4 client, and data is being transferred between them.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.applicationContentsPath">
      <summary>
        <para>Path to the Unity editor contents folder. (Read Only)</para>
        <para>The contents folder contains several items internally required by the editor for building players.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.applicationPath">
      <summary>
        <para>Returns the path to the Unity editor application. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isSceneDirty">
      <summary>
        <para>Is true if the currently open scene in the editor contains unsaved modifications.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.timeSinceStartup">
      <summary>
        <para>The time since the editor was started. (Read Only)</para>
        <para>This property contains the time since the editor was started, in seconds. 
Unlike Time.realtimeSinceStartup, this is not reset when starting play mode.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUI">
      <summary>
        <para>These work pretty much like the normal GUI functions - and also have matching implementations in <see cref="EditorGUILayout">EditorGUILayout</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Object,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene.
If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. 
See example in Editor class.Object field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,System.String,UnityEngine.Vector2)">
      <summary>
        <para>Make an X &amp;amp; Y field for entering a <see cref="Vector2">Vector2</see>.</para>
        <para>Vector2 field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector2)">
      <summary>
        <para>Make an X &amp;amp; Y field for entering a <see cref="Vector2">Vector2</see>.</para>
        <para>Vector2 field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,System.String,UnityEngine.Vector3)">
      <summary>
        <para>Make an X, Y &amp;amp; Z field for entering a <see cref="Vector3">Vector3</see>.</para>
        <para>Vector3 field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector3)">
      <summary>
        <para>Make an X, Y &amp;amp; Z field for entering a <see cref="Vector3">Vector3</see>.</para>
        <para>Vector3 field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector4Field(UnityEngine.Rect,System.String,UnityEngine.Vector4)">
      <summary>
        <para>Make an X, Y, Z &amp;amp; W field for entering a <see cref="Vector4">Vector4</see>.</para>
        <para>Vector4 field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.Rect)">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
        <para>Rect field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,System.String,UnityEngine.Rect)">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
        <para>Rect field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rect)">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
        <para>Rect field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.Bounds)">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
        <para>Bounds field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Bounds)">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
        <para>Bounds field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiFloatField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent[],System.Single[])">
      <summary>
        <para>Make a multi-control with text fields for entering multiple floats in the same line.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="values">Array with the values to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiFloatField(UnityEngine.Rect,UnityEngine.GUIContent[],System.Single[])">
      <summary>
        <para>Make a multi-control with text fields for entering multiple floats in the same line.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="values">Array with the values to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiPropertyField(UnityEngine.Rect,UnityEngine.GUIContent[],UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a multi-control with several property fields in the same line.</para>
        <para>The array of labels determine how many properties are shown. No more than 4 properties should be used. The displayed SerializedProperties must be consecutive. The one provided in the valuesIterator argument should be the first of them.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the multi-property field.</param>
      <param name="valuesIterator">The SerializedProperty of the first property to make a control for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiPropertyField(UnityEngine.Rect,UnityEngine.GUIContent[],UnityEditor.SerializedProperty)">
      <summary>
        <para>Make a multi-control with several property fields in the same line.</para>
        <para>The array of labels determine how many properties are shown. No more than 4 properties should be used. The displayed SerializedProperties must be consecutive. The one provided in the valuesIterator argument should be the first of them.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the multi-property field.</param>
      <param name="valuesIterator">The SerializedProperty of the first property to make a control for.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.Color)">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
        <para>Color field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The color to edit.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,System.String,UnityEngine.Color)">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
        <para>Color field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Color)">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
        <para>Color field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Curve field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The curve to edit.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Curve field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Curve field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Curve field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Curve field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Curve field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>The titlebar has a foldout arrow, a help icon, and a settings menu that depends on the type of the object supplied.Inspector titlebar in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) or objects that the titlebar is for.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object[])">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>The titlebar has a foldout arrow, a help icon, and a settings menu that depends on the type of the object supplied.Inspector titlebar in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ProgressBar(UnityEngine.Rect,System.Single,System.String)">
      <summary>
        <para>Make a progress bar.</para>
        <para>Value goes from 0 to 1, where 0 means 0% of the bar filled and 1
means the bar is at 100%  fully filledProgress bar in an Editor Window.</para>
      </summary>
      <param name="value">Value that is shown.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HelpBox(UnityEngine.Rect,System.String,UnityEditor.MessageType)">
      <summary>
        <para>Make a help box with a message to the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the help box within.</param>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Prefix Label in an Editor Window.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel takes a rect that's the rect for the entire control, including the label, and returns a rect that's for just the control itself, without the label.PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The ID of the linked control can optionally be specified, or if no ID is given, the label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="label">Label to show in front of the control.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Prefix Label in an Editor Window.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel takes a rect that's the rect for the entire control, including the label, and returns a rect that's for just the control itself, without the label.PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The ID of the linked control can optionally be specified, or if no ID is given, the label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="label">Label to show in front of the control.</param>
      <param name="style">Style to use for the label.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Prefix Label in an Editor Window.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel takes a rect that's the rect for the entire control, including the label, and returns a rect that's for just the control itself, without the label.PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The ID of the linked control can optionally be specified, or if no ID is given, the label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="label">Label to show in front of the control.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Prefix Label in an Editor Window.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel takes a rect that's the rect for the entire control, including the label, and returns a rect that's for just the control itself, without the label.PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The ID of the linked control can optionally be specified, or if no ID is given, the label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="label">Label to show in front of the control.</param>
      <param name="style">Style to use for the label.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginProperty(UnityEngine.Rect,UnityEngine.GUIContent,UnityEditor.SerializedProperty)">
      <summary>
        <para>Create a Property wrapper, useful for making regular GUI controls work with <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>Most EditorGUI and EditorGUILayout GUI controls already have overloads that work with SerializedProperty.
However, for GUI controls that don't handle SerializedProperty you can wrap them inside BeginProperty and EndProperty as shown in the example below.
You can use this for your own custom GUI controls too.BeginProperty and EndProperty automatically handle default labels, bold font for prefab overrides, revert to prefab right click menu, and setting showMixedValue to true if the values of the property are different when multi-object editing.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use for the control, including label if applicable.</param>
      <param name="label">Optional label in front of the slider. Use null to use the name from the SerializedProperty. Use GUIContent.none to not display a label.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <returns>
        <para>The actual label to use for the control.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndProperty">
      <summary>
        <para>Ends a Property wrapper started with <see cref="EditorGUI.BeginProperty">BeginProperty</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FocusTextInControl(System.String)">
      <summary>
        <para>Move keyboard focus to a named text field and begin editing of the content.</para>
        <para>In Editor GUI, text fields can have keyboard focus without the text being edited. For example you may switch focus between text fields or other controls by using the up and down arrow keys. Once you click inside the text field, editing of the text itself begins and the arrow keys are then used to navigate the text content. EditorGUI.FocusTextInControl is like GUI.FocusControl in that it gives keyboard focus to a control, but it also begins editing of the text itself.</para>
      </summary>
      <param name="name">Name set using <see cref="GUI.SetNextControlName">GUI.SetNextControlName</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginDisabledGroup(System.Boolean)">
      <summary>
        <para>Create a group of controls that can be disabled.</para>
        <para>If disabled is true, the controls inside the group will be disabled.
If false, the enabled/disabled state will not be changed.</para>
      </summary>
      <param name="disabled">Boolean specifying if the controls inside the group should be disabled.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndDisabledGroup">
      <summary>
        <para>Ends a disabled group started with BeginDisabledGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginChangeCheck">
      <summary>
        <para>Check if any control was changed inside a block of code.</para>
        <para>When needing to check if GUI.changed is set to true inside a block of code,
wrap the code inside BeginChangeCheck () and EndChangeCheck () like this:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndChangeCheck">
      <summary>
        <para>Ends a change check started with BeginChangeCheck ().</para>
      </summary>
      <returns>
        <para>True if GUI.changed was set to true, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution.Shadow Label in and editor window.</para>
      </summary>
      <param name="position">Where to show the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution.Shadow Label in and editor window.</para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show
@style style to use.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution.Shadow Label in and editor window.</para>
      </summary>
      <param name="position">Where to show the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution.Shadow Label in and editor window.</para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show
@style style to use.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Make a toggle.</para>
        <para>Toggle control in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean)">
      <summary>
        <para>Make a toggle.</para>
        <para>Toggle control in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle.</para>
        <para>Toggle control in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle.</para>
        <para>Toggle control in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a toggle.</para>
        <para>Toggle control in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle.</para>
        <para>Toggle control in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
        <para>Slider in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.String,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
        <para>Slider in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
        <para>Slider in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,System.String)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
        <para>Int Slider in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
        <para>Int Slider in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
        <para>Int Slider in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene.
If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. 
See example in Editor class.Object field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene.
If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. 
See example in Editor class.Object field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,System.String,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene.
If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. 
See example in Editor class.Object field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,System.String,UnityEngine.Object,System.Type)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene.
If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. 
See example in Editor class.Object field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene.
If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object. 
See example in Editor class.Object field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in an editor window with the seconds since the editor started.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in an editor window with the seconds since the editor started.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in an editor window with the seconds since the editor started.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in an editor window with the seconds since the editor started.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in an editor window with the seconds since the editor started.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in an editor window with the seconds since the editor started.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in an editor window with the seconds since the editor started.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in an editor window with the seconds since the editor started.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>EditorGUI.ToggleLeft is similar to GUI.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>EditorGUI.ToggleLeft is similar to GUI.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>EditorGUI.ToggleLeft is similar to GUI.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>EditorGUI.ToggleLeft is similar to GUI.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Text field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Text field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Text field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Text field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Text field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Text field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUI.TextArea, but correctly responds to select all, copy, paste etc. in the editor.Text Area in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUI.TextArea, but correctly responds to select all, copy, paste etc. in the editor.Text Area in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">The text to show.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">The text to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Password Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="password">The password to edit.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Password Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Password Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Password Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Password Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Password Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single)">
      <summary>
        <para>Make a text field for entering floats.</para>
        <para>Float Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering floats.</para>
        <para>Float Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.String,System.Single)">
      <summary>
        <para>Make a text field for entering floats.</para>
        <para>Float Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.String,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering floats.</para>
        <para>Float Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single)">
      <summary>
        <para>Make a text field for entering floats.</para>
        <para>Float Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering floats.</para>
        <para>Float Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.Double)">
      <summary>
        <para>Make a text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.String,System.Double)">
      <summary>
        <para>Make a text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,System.String,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,UnityEngine.GUIContent,System.Double)">
      <summary>
        <para>Make a text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DoubleField(UnityEngine.Rect,UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering doubles.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the double field.</param>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32)">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Int Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Int Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Int Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Int Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Int Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Int Field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,System.String,System.Int64,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int64)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LongField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int64,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the long field.</param>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Popup in and Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Popup in and Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Popup in and Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Popup in and Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Popup in and Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Popup in and Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Popup in and Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Popup in and Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.
Enum Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.
Enum Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.
Enum Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.
Enum Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.
Enum Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.
Enum Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Int Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Int Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Int Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Int Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Int Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Int Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[])">
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct	mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent)">
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct	mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="label">Optional label in front of the field.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Int Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Int Popup in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Tag field in an Editor window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="tag">The tag the field shows.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Tag field in an Editor window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Tag field in an Editor window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Tag field in an Editor window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Tag field in an Editor window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Tag field in an Editor window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32)">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Layer field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Layer field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Layer field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Layer field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Layer field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Layer field in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[])">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[])">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="mask">The current mask to display.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum)">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum)">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Foldout in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Foldout in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Foldout in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Foldout in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Foldout in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Foldout in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Foldout in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Foldout in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a label for some control.</para>
        <para>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its Rect explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label for some control.</para>
        <para>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its Rect explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label for some control.</para>
        <para>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its Rect explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Single)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map
and the fallback blit material will be chosen otherwise.Preview Texture in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map
and the fallback blit material will be chosen otherwise.Preview Texture in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map
and the fallback blit material will be chosen otherwise.Preview Texture in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode,System.Single)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map
and the fallback blit material will be chosen otherwise.Preview Texture in an Editor Window.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Get the height needed for a <see cref="EditorGUI.PropertyField">PropertyField</see> control.</para>
        <para>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children
if the includeChildren parameter is set to true, which is the default.
If the property has a custom PropertyDrawer, the function will return the height returned by that drawer.
The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</para>
      </summary>
      <param name="property">Height of the property area.</param>
      <param name="label">Descriptive text or image.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)">
      <summary>
        <para>Get the height needed for a <see cref="EditorGUI.PropertyField">PropertyField</see> control.</para>
        <para>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children
if the includeChildren parameter is set to true, which is the default.
If the property has a custom PropertyDrawer, the function will return the height returned by that drawer.
The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</para>
      </summary>
      <param name="property">Height of the property area.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Get the height needed for a <see cref="EditorGUI.PropertyField">PropertyField</see> control.</para>
        <para>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children
if the includeChildren parameter is set to true, which is the default.
If the property has a custom PropertyDrawer, the function will return the height returned by that drawer.
The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</para>
      </summary>
      <param name="property">Height of the property area.</param>
      <param name="label">Descriptive text or image.</param>
      <param name="includeChildren">Should the returned height include the height of child properties?</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Boolean)">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.EditorGUI.showMixedValue">
      <summary>
        <para>Makes the following controls give the appearance of editing multiple different values.</para>
        <para>This is sometimes useful when creating custom editors and you want to represent
a value in a non-standard way in the GUI while also supporting multi-object editing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.actionKey">
      <summary>
        <para>Is the platform-dependent "action" modifier key held down? (Read Only)</para>
        <para>The key is Command on Mac OS X, Control on Windows.Action Key usage, key not pressed/key pressed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.indentLevel">
      <summary>
        <para>The indent level of the field labels.</para>
        <para>Shows info of the selected object.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUI+DisabledGroupScope">
      <summary>
        <para>Create a group of controls that can be disabled.</para>
        <para>If disabled is true, the controls inside the group will be disabled.
If false, the enabled/disabled state will not be changed.The group cannot be used to enable controls that would otherwise be disabled to begin with.
The groups can be nested and the controls within a child group will be disabled
both if that child group is itself disabled or if a parent group is.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUI+PropertyScope">
      <summary>
        <para>Create a Property wrapper, useful for making regular GUI controls work with <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>Most EditorGUI and EditorGUILayout GUI controls already have overloads that work with SerializedProperty.
However, for GUI controls that don't handle SerializedProperty you can wrap them inside BeginProperty and EndProperty as shown in the example below.
You can use this for your own custom GUI controls too.BeginProperty and EndProperty automatically handle default labels, bold font for prefab overrides, revert to prefab right click menu, and setting showMixedValue to true if the values of the property are different when multi-object editing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI+PropertyScope.content">
      <summary>
        <para>The actual label to use for the control.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUILayout">
      <summary>
        <para>Auto-layouted version of <see cref="EditorGUI">EditorGUI</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Set the layer of the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Set the layer of the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Set the layer of the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Set the layer of the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
        <para>Simple window that shows the mask field.</para>
      </summary>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
        <para>Simple window that shows the enum mask field.</para>
      </summary>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>You can assign objects either by drag and drop or by selecting an object using the Object Picker.Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene.If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object.See the example in the Editor class for further information.Search for a help page by selecting the GameObject in the Object Field.</para>
      </summary>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(System.String,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>You can assign objects either by drag and drop or by selecting an object using the Object Picker.Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene.If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object.See the example in the Editor class for further information.Search for a help page by selecting the GameObject in the Object Field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>You can assign objects either by drag and drop or by selecting an object using the Object Picker.Ensure that the allowSceneObjects parameter is false if the object reference is stored as part of an asset, since assets can't store references to objects in a scene.If the ObjectField is part of a custom Editor for a script component, use EditorUtility.IsPersistent() to check if the component is on an asset or a scene object.See the example in the Editor class for further information.Search for a help page by selecting the GameObject in the Object Field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector2Field(System.String,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X &amp;amp; Y field for entering a <see cref="Vector2">Vector2</see>.</para>
        <para>Measure the distance between 2 points.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector2Field(UnityEngine.GUIContent,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X &amp;amp; Y field for entering a <see cref="Vector2">Vector2</see>.</para>
        <para>Measure the distance between 2 points.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector3Field(System.String,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y &amp;amp; Z field for entering a <see cref="Vector3">Vector3</see>.</para>
        <para>Measure the distance between 2 GameObjects or 2 positions in 3D space.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector3Field(UnityEngine.GUIContent,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y &amp;amp; Z field for entering a <see cref="Vector3">Vector3</see>.</para>
        <para>Measure the distance between 2 GameObjects or 2 positions in 3D space.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector4Field(System.String,UnityEngine.Vector4,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, Z &amp;amp; W field for entering a <see cref="Vector4">Vector4</see>.</para>
        <para>Modify X,Y,Z and W values directly of a GameObject.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
        <para>''Modify Another's window position and size values.''</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(System.String,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
        <para>''Modify Another's window position and size values.''</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.GUIContent,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
        <para>''Modify Another's window position and size values.''</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(System.String,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.GUIContent,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
        <para>Change the color of the selected GameObjects.</para>
      </summary>
      <param name="value">The color to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(System.String,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
        <para>Change the color of the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.GUIContent,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
        <para>Change the color of the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Create an animation on the different axis and assign it to a GameObject.</para>
      </summary>
      <param name="value">The curve to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Create an animation on the different axis and assign it to a GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Create an animation on the different axis and assign it to a GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Create an animation on the different axis and assign it to a GameObject.</para>
      </summary>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Create an animation on the different axis and assign it to a GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
        <para>Create an animation on the different axis and assign it to a GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>Create a custom inspector that shows the X,Y,Z,W quaternion components on the rotation.</para>
      </summary>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) or objects that the titlebar is for.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object[])">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>Create a custom inspector that shows the X,Y,Z,W quaternion components on the rotation.</para>
      </summary>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType)">
      <summary>
        <para>Make a help box with a message to the user.</para>
      </summary>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType,System.Boolean)">
      <summary>
        <para>Make a help box with a message to the user.</para>
      </summary>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
      <param name="wide">If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Space">
      <summary>
        <para>Make a small space between the previous control and the following.</para>
        <para>Custom inspector that shows the X,Y,Z,W quaternion components of a transform.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(System.String,System.Boolean)">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
      <returns>
        <para>The enabled state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
      <returns>
        <para>The enabled state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndToggleGroup">
      <summary>
        <para>Close a group started with <see cref="EditorGUILayout.BeginToggleGroup">BeginToggleGroup</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a horizontal group and get its rect back.</para>
        <para>This is an extension to GUILayout.BeginHorizontal. It can be used for making compound controlsHorizontal Compound group.</para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a horizontal group and get its rect back.</para>
        <para>This is an extension to GUILayout.BeginHorizontal. It can be used for making compound controlsHorizontal Compound group.</para>
      </summary>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndHorizontal">
      <summary>
        <para>Close a group started with BeginHorizontal.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical group and get its rect back.</para>
        <para>This is an extension to GUILayout.BeginVertical. It can be used for making compound controlsVertical Compound group.</para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical group and get its rect back.</para>
        <para>This is an extension to GUILayout.BeginVertical. It can be used for making compound controlsVertical Compound group.</para>
      </summary>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndVertical">
      <summary>
        <para>Close a group started with BeginVertical.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editorLabel inside a scroll view.</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editorLabel inside a scroll view.</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editorLabel inside a scroll view.</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editorLabel inside a scroll view.</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndScrollView">
      <summary>
        <para>Ends a scrollview started with a call to BeginScrollView.</para>
        <para>Label inside a scroll view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a Rect as parameter, similar to the controls in the EditorGUI class. This ensures the control can also be used in for example a PropertyDrawer, which does not allow GUILayout.Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a Rect as parameter, similar to the controls in the EditorGUI class. This ensures the control can also be used in for example a PropertyDrawer, which does not allow GUILayout.Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a Rect as parameter, similar to the controls in the EditorGUI class. This ensures the control can also be used in for example a PropertyDrawer, which does not allow GUILayout.Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is <see cref="EditorGUIUtility-singleLineHeight">EditorGUIUtility.singleLineHeight</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a Rect as parameter, similar to the controls in the EditorGUI class. This ensures the control can also be used in for example a PropertyDrawer, which does not allow GUILayout.Once a non-layout version of the control is implemented, a layout version can easily be made as well, which simply calls into the non-layout version. In order to get a rect fitting for the control, the GetControlRect function can be used.</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is <see cref="EditorGUIUtility-singleLineHeight">EditorGUIUtility.singleLineHeight</see>.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see> to use for the control.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginFadeGroup(System.Single)">
      <summary>
        <para>Begins a group that can be be hidden/shown and the transition will be animated.</para>
      </summary>
      <param name="value">A value between 0 and 1, 0 being hidden, and 1 being fully visible.</param>
      <returns>
        <para>If the group is visible or not.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndFadeGroup">
      <summary>
        <para>Closes a group started with BeginFadeGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Create a foldable menu that hides/shows the selected transform.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Create a foldable menu that hides/shows the selected transform.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Create a foldable menu that hides/shows the selected transform.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.Create a foldable menu that hides/shows the selected transform.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Simple window that shows the prefix label.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Simple window that shows the prefix label.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Simple window that shows the prefix label.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Simple window that shows the prefix label.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Simple window that shows the prefix label.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
        <para>Simple window that shows the prefix label.Note that most editor controls already have built-in optional labels that can be specified as one of the parameters. PrefixLabel can be used when there is no such built-in label available, or when you're creating your own editor control from scratch. PrefixLabel also ensures that when the label is clicked, the linked control will get keyboard focus (if the control supports keyboard focus). The label is automatically linked to the following control coming after it.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in the editor (Label) with the seconds since the editor started (Label2).</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in the editor (Label) with the seconds since the editor started (Label2).</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in the editor (Label) with the seconds since the editor started (Label2).</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in the editor (Label) with the seconds since the editor started (Label2).</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in the editor (Label) with the seconds since the editor started (Label2).</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in the editor (Label) with the seconds since the editor started (Label2).</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in the editor (Label) with the seconds since the editor started (Label2).</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
        <para>Shows a label in the editor (Label) with the seconds since the editor started (Label2).</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
        <para>Show a button if the toggle control is selected.</para>
      </summary>
      <param name="value">The shown state of the toggle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
        <para>Show a button if the toggle control is selected.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
        <para>Show a button if the toggle control is selected.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
        <para>Show a button if the toggle control is selected.</para>
      </summary>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
        <para>Show a button if the toggle control is selected.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
        <para>Show a button if the toggle control is selected.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>EditorGUILayout.ToggleLeft is similar to GUILayout.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>EditorGUILayout.ToggleLeft is similar to GUILayout.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>EditorGUILayout.ToggleLeft is similar to GUILayout.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>EditorGUILayout.ToggleLeft is similar to GUILayout.Toggle but respects the EditorGUI.showMixedValue property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Changes the name of the selected GameObject.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Changes the name of the selected GameObject.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Changes the name of the selected GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Changes the name of the selected GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Changes the name of the selected GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.Changes the name of the selected GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUILayout.TextArea, but correctly responds to select all, copy, paste etc. in the editor.Quick script editor.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUILayout.TextArea, but correctly responds to select all, copy, paste etc. in the editor.Quick script editor.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="text">The text to show.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="text">The text to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Simple window that visualizes what you have typed in the password field.</para>
      </summary>
      <param name="password">The password to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Simple window that visualizes what you have typed in the password field.</para>
      </summary>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Simple window that visualizes what you have typed in the password field.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Simple window that visualizes what you have typed in the password field.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Simple window that visualizes what you have typed in the password field.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.Simple window that visualizes what you have typed in the password field.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
        <para>Multiply the scale of the selected GameObject.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
        <para>Multiply the scale of the selected GameObject.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
        <para>Multiply the scale of the selected GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
        <para>Multiply the scale of the selected GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
        <para>Multiply the scale of the selected GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
        <para>Multiply the scale of the selected GameObject.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.String,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(System.String,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.DoubleField(UnityEngine.GUIContent,System.Double,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering double values.</para>
      </summary>
      <param name="label">Optional label to display in front of the double field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Clone the Selected object a number of times.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Clone the Selected object a number of times.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Clone the Selected object a number of times.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Clone the Selected object a number of times.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Clone the Selected object a number of times.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
        <para>Clone the Selected object a number of times.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.Int64,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.String,System.Int64,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(System.String,System.Int64,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(UnityEngine.GUIContent,System.Int64,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LongField(UnityEngine.GUIContent,System.Int64,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the long field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
        <para>Scale the selected object between a range.</para>
      </summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(System.String,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
        <para>Scale the selected object between a range.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEngine.GUIContent,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
        <para>Scale the selected object between a range.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
        <para>Create a grid of cloned Objects.</para>
      </summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.String,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
        <para>Create a grid of cloned Objects.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
        <para>Create a grid of cloned Objects.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Create a primitive depending on the option selected.</para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Create a primitive depending on the option selected.</para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Create a primitive depending on the option selected.</para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Create a primitive depending on the option selected.</para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Create a primitive depending on the option selected.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Create a primitive depending on the option selected.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Create a primitive depending on the option selected.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.Create a primitive depending on the option selected.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.Creates a primitive selected by the user.</para>
      </summary>
      <param name="selected">The enum option the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.Creates a primitive selected by the user.</para>
      </summary>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.Creates a primitive selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.Creates a primitive selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.Creates a primitive selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.Creates a primitive selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Rescales the current selected GameObject.</para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Rescales the current selected GameObject.</para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Rescales the current selected GameObject.</para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Rescales the current selected GameObject.</para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Rescales the current selected GameObject.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Rescales the current selected GameObject.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Rescales the current selected GameObject.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.Rescales the current selected GameObject.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Assign tags on the selected GameObjects.</para>
      </summary>
      <param name="tag">The tag the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Assign tags on the selected GameObjects.</para>
      </summary>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Assign tags on the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Assign tags on the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Assign tags on the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
        <para>Assign tags on the selected GameObjects.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Set the layer of the selected GameObjects.</para>
      </summary>
      <param name="layer">The layer shown in the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
        <para>Set the layer of the selected GameObjects.</para>
      </summary>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.EditorGUILayout+ToggleGroupScope">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout+ToggleGroupScope.enabled">
      <summary>
        <para>The enabled state selected by the user.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUILayout+HorizontalScope">
      <summary>
        <para>Disposable helper class for managing <see cref="EditorGUILayout.BeginHorizontal">BeginHorizontal</see> / <see cref="EditorGUILayout.EndHorizontal">EndHorizontal</see>.</para>
        <para>This is an extension to GUILayout.HorizontalScope. It can be used for making compound controlsHorizontal Compound group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout+HorizontalScope.rect">
      <summary>
        <para>The rect of the horizontal group.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUILayout+VerticalScope">
      <summary>
        <para>Disposable helper class for managing <see cref="EditorGUILayout.BeginVertical">BeginVertical</see> / <see cref="EditorGUILayout.EndVertical">EndVertical</see>.</para>
        <para>This is an extension to GUILayout.VerticalScope. It can be used for making compound controlsVertical Compound group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout+VerticalScope.rect">
      <summary>
        <para>The rect of the vertical group.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUILayout+ScrollViewScope">
      <summary>
        <para>Disposable helper class for managing <see cref="EditorGUILayout.BeginScrollView">BeginScrollView</see> / <see cref="EditorGUILayout.EndScrollView">EndScrollView</see>.</para>
        <para>These work just like GUILayout.ScrollViewScope but feel more application-like and should be used in the editorLabel inside a scroll view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout+ScrollViewScope.scrollPosition">
      <summary>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout+ScrollViewScope.handleScrollWheel">
      <summary>
        <para>Whether this ScrollView should handle scroll wheel events. (default: true).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUILayout+FadeGroupScope">
      <summary>
        <para>Begins a group that can be be hidden/shown and the transition will be animated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUILayout+FadeGroupScope.visible">
      <summary>
        <para>Whether the group is visible.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUIUtility">
      <summary>
        <para>Miscellaneous helper stuff for <see cref="EditorGUI">EditorGUI</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor)">
      <summary>
        <para>Add a custom mouse pointer to a control.</para>
      </summary>
      <param name="position">The rectangle the control should be shown within.</param>
      <param name="mouse">The mouse cursor to use.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor,System.Int32)">
      <summary>
        <para>Add a custom mouse pointer to a control.</para>
      </summary>
      <param name="position">The rectangle the control should be shown within.</param>
      <param name="mouse">The mouse cursor to use.</param>
      <param name="controlID">ID of a target control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.ShowObjectPicker``1(UnityEngine.Object,System.Boolean,System.String,System.Int32)">
      <summary>
        <para>Show the object picker from code.</para>
        <para>Once the user interacts with the Object Picker, it will respond by sending ExecuteCommand events back to the calling OnGUI that called this function. The messages are:ObjectSelectorUpdated - The selected object was changed. The selected object can be read by calling GetObjectPickerObject
ObjectSelectorClosed - The user closed the object picker.</para>
      </summary>
      <param name="obj">The object to be selected by default.</param>
      <param name="allowSceneObjects">Is selection of scene objects allowed, or should it only show assets.</param>
      <param name="searchFilter">Default search filter to apply.</param>
      <param name="controlID">The id of the control to set. This is useful if you are showing more than one of these. You can get the value at a later time.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerObject">
      <summary>
        <para>The object currently selected in the object picker.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerControlID">
      <summary>
        <para>The controlID of the currently showing object picker.</para>
        <para>See ShowObjectPicker.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IconContent(System.String)">
      <summary>
        <para>Fetch the GUIContent from the Unity builtin resources with the given name.</para>
      </summary>
      <param name="name">Content name.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IconContent(System.String,System.String)">
      <summary>
        <para>Fetch the GUIContent from the Unity builtin resources with the given name.</para>
      </summary>
      <param name="name">Content name.</param>
      <param name="tooltip">Tooltip.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.ObjectContent(UnityEngine.Object,System.Type)">
      <summary>
        <para>Return a GUIContent object with the name and icon of an Object.</para>
        <para>If the object is null, the icon will be picked according to type.Object Content usage.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.HasObjectThumbnail(System.Type)">
      <summary>
        <para>Does a given class have per-object thumbnails?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.SetIconSize(UnityEngine.Vector2)">
      <summary>
        <para>Set icons rendered as part of <see cref="GUIContent">GUIContent</see> to be rendered at a specific size.</para>
        <para>Set the size to Vector2.zero to use the default behaviour where the size is determined by the available space.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetIconSize">
      <summary>
        <para>Get the size that has been set using <see cref="EditorGUIUtility.SetIconSize">SetIconSize</see>.</para>
        <para>The default size is Vector2.zero where the size is determined by the available space.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.FindTexture(System.String)">
      <summary>
        <para>Get a texture from its source filename.</para>
        <para>Checks the path of a texture.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetBuiltinSkin(UnityEditor.EditorSkin)">
      <summary>
        <para>Get one of the built-in GUI skins, which can be the game view, inspector or scene view skin as chosen by the parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LoadRequired(System.String)">
      <summary>
        <para>Load a built-in resource that has to be there.</para>
        <para>This function will look in Assets/Editor Default Resources/whatever for the resource.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.Load(System.String)">
      <summary>
        <para>Load a built-in resource.</para>
        <para>This function will look in Assets/Editor Default Resources/ + path for the resource.
If not there, it will try the built-in editor resources by name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PingObject(UnityEngine.Object)">
      <summary>
        <para>Ping an object in a window like clicking it in an inspector.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PingObject(System.Int32)">
      <summary>
        <para>Ping an object in a window like clicking it in an inspector.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.RenderGameViewCameras(UnityEngine.Rect,System.Boolean,System.Boolean)">
      <summary>
        <para>Render all ingame cameras.</para>
      </summary>
      <param name="cameraRect">The device coordinates to render all game cameras into.</param>
      <param name="gizmos">Show gizmos as well.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.RenderGameViewCameras(UnityEngine.Rect,UnityEngine.Rect,System.Boolean,System.Boolean)">
      <summary>
        <para>Render all ingame cameras.</para>
      </summary>
      <param name="cameraRect">The device coordinates to render all game cameras into.</param>
      <param name="gizmos">Show gizmos as well.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.QueueGameViewInputEvent(UnityEngine.Event)">
      <summary>
        <para>Send an input event into the game.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls(System.Single)">
      <summary>
        <para>Make all <see cref="EditorGUI">EditorGUI</see> look like regular controls.</para>
        <para>This will make the default styles used by EditorGUI look like controls (e.g. EditorGUI.Popup becomes a full popup menu).Editor window with "LookLikeControls" look.</para>
      </summary>
      <param name="labelWidth">Width to use for prefixed labels.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls">
      <summary>
        <para>Make all <see cref="EditorGUI">EditorGUI</see> look like regular controls.</para>
        <para>This will make the default styles used by EditorGUI look like controls (e.g. EditorGUI.Popup becomes a full popup menu).Editor window with "LookLikeControls" look.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls(System.Single,System.Single)">
      <summary>
        <para>Make all <see cref="EditorGUI">EditorGUI</see> look like regular controls.</para>
        <para>This will make the default styles used by EditorGUI look like controls (e.g. EditorGUI.Popup becomes a full popup menu).Editor window with "LookLikeControls" look.</para>
      </summary>
      <param name="labelWidth">Width to use for prefixed labels.</param>
      <param name="fieldWidth">Width of text entries.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeInspector">
      <summary>
        <para>Make all <see cref="EditorGUI">EditorGUI</see> look like simplified outline view controls.</para>
        <para>This will make the default styles used by EditorGUI look like it does in the inspector.Editor window with "LookLikeInspector" look.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.CommandEvent(System.String)">
      <summary>
        <para>Creates an event.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawColorSwatch(UnityEngine.Rect,UnityEngine.Color)">
      <summary>
        <para>Draw a color swatch.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="color">The color to draw.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Draw a curve swatch.</para>
        <para>Pass in the curve to draw either with the curve parameter or with the property parameter.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="curve">The curve to draw.</param>
      <param name="property">The curve to draw as a SerializedProperty.</param>
      <param name="color">The color to draw the curve with.</param>
      <param name="bgColor">The color to draw the background with.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw a curve swatch.</para>
        <para>Pass in the curve to draw either with the curve parameter or with the property parameter.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="curve">The curve to draw.</param>
      <param name="property">The curve to draw as a SerializedProperty.</param>
      <param name="color">The color to draw the curve with.</param>
      <param name="bgColor">The color to draw the background with.</param>
      <param name="curveRanges">Optional parameter to specify the range of the curve which should be included in swatch.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw swatch with a filled region between two SerializedProperty curves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw swatch with a filled region between two curves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.HSVToRGB(System.Single,System.Single,System.Single)">
      <summary>
        <para>Convert a set of HSV values to an RGB Color.</para>
        <para>All values are in the range 0 - 1.</para>
      </summary>
      <returns>
        <para>The RGB color calculated from the HSV values passed into the function. The alpha value of the color will be 1.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.singleLineHeight">
      <summary>
        <para>Get the height used for a single Editor control such as a one-line EditorGUI.TextField or EditorGUI.Popup.</para>
        <para>When creating your own multi-line controls, such as controls for custom classes with multiple fields, you can use EditorGUILayout.GetControlRect and pass in a height value that is a multiple of EditorGUIUtility.singleLineHeight. This is advisable over hardcoding specific pixel values.
</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.standardVerticalSpacing">
      <summary>
        <para>Get the height used by default for vertical spacing between controls.</para>
        <para>When creating GUI without GUILayout, such as is for instance required by PropertyDrawers, and you need to place several controls under each other, you can use standardVerticalSpacing to ensure there's the proper standard spacing between the controls. This is advisable over hardcoding specific pixel values.
</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.isProSkin">
      <summary>
        <para>Is the user currently using the pro skin? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.whiteTexture">
      <summary>
        <para>Get a white texture.</para>
        <para>White texture in an Editor Window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.editingTextField">
      <summary>
        <para>Is a text field currently editing text?</para>
        <para>In Editor GUI, text fields can have focus without the text being edited. For example you may switch focus between text fields or other controls by using the up and down arrow keys. Once you click inside the text field, editing of the text itself begins and the arrow keys are then used to navigate the text content. editingTextField is true when a text field is in this text editing mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.hierarchyMode">
      <summary>
        <para>Is the Editor GUI is hierarchy mode?</para>
        <para>In hierarchy mode, EditorGUI.Foldout controls are positioned with the foldout triangle to the left of the specified Rect for the control, rather than being inside the Rect. This way, the label of the foldout is aligned together with labels of other Editor GUI controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.wideMode">
      <summary>
        <para>Is the Editor GUI currently in wide mode?</para>
        <para>Wide mode is a mode for Editor GUI where the controls for structs such as Vector3 and Rect are inlined so they take up less vertical space. For example, in wide mode a Vector3Field takes up one line height instead of two, and a RectField takes up two line heights instead of three.When creating your own multi-line controls, you can query wideMode and make the layout of your control follow the same logic.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.currentViewWidth">
      <summary>
        <para>The width of the GUI area for the current EditorWindow or other view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.labelWidth">
      <summary>
        <para>The width in pixels reserved for labels of Editor GUI controls.</para>
        <para>Editor GUI controls have a certain width allocated for labels. This width can be changed by setting labelWidth to a different value. Setting it to 0 will reset the label width to the default value. The default value can vary, for example depending on the width of the Inspector window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.fieldWidth">
      <summary>
        <para>The minimum width in pixels reserved for the fields of Editor GUI controls.</para>
        <para>Most Editor GUI controls consist of a label as well as the control field itself. The minimum width of the field is controlled by the fieldWidth value. Fields often appear wider than the minimum width, since Editor GUI controls are usually set to occupy a Rect that expands to fill the available horizontal space. Within this Rect, the field will take up all the space not used by the EditorGUIUtility.labelWidth.The fieldWidth also controls the width of the text field in EditorGUI.Slider controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.systemCopyBuffer">
      <summary>
        <para>The system copy buffer.</para>
        <para>Use this to make Copy and Paste work for your own stuff.have more than 1 saved "copy" command.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MessageType">
      <summary>
        <para>User message types.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.None">
      <summary>
        <para>Neutral message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.Info">
      <summary>
        <para>Info message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.Warning">
      <summary>
        <para>Warning message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.Error">
      <summary>
        <para>Error message.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorSkin">
      <summary>
        <para>Enum that selects which skin to return from EditorGUIUtility.GetBuiltinSkin.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Game">
      <summary>
        <para>The skin used for game views.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Inspector">
      <summary>
        <para>The skin used for inspectors.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Scene">
      <summary>
        <para>The skin used for scene views.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MouseCursor">
      <summary>
        <para>Custom mouse cursor shapes used with EditorGUIUtility.AddCursorRect.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Arrow">
      <summary>
        <para>Normal pointer arrow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Text">
      <summary>
        <para>Text cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeVertical">
      <summary>
        <para>Vertical resize arrows.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeHorizontal">
      <summary>
        <para>Horizontal resize arrows.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Link">
      <summary>
        <para>Arrow with a Link badge (for assigning pointers).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SlideArrow">
      <summary>
        <para>Arrow with small arrows for indicating sliding at number fields.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeUpRight">
      <summary>
        <para>Resize up-right for window edges.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeUpLeft">
      <summary>
        <para>Resize up-Left for window edges.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.MoveArrow">
      <summary>
        <para>Arrow with the move symbol next to it for the sceneview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.RotateArrow">
      <summary>
        <para>Arrow with the rotate symbol next to it for the sceneview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ScaleArrow">
      <summary>
        <para>Arrow with the scale symbol next to it for the sceneview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ArrowPlus">
      <summary>
        <para>Arrow with the plus symbol next to it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ArrowMinus">
      <summary>
        <para>Arrow with the minus symbol next to it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Pan">
      <summary>
        <para>Cursor with a dragging hand for pan.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Orbit">
      <summary>
        <para>Cursor with an eye for orbit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Zoom">
      <summary>
        <para>Cursor with a magnifying glass for zoom.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.FPS">
      <summary>
        <para>Cursor with an eye and stylized arrow keys for FPS navigation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.CustomCursor">
      <summary>
        <para>The current user defined cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SplitResizeUpDown">
      <summary>
        <para>Up-Down resize arrows for window splitters.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SplitResizeLeftRight">
      <summary>
        <para>Left-Right resize arrows for window splitters.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Handles">
      <summary>
        <para>Custom 3D GUI controls and drawing in the scene view.</para>
        <para>Handles are the 3D controls that Unity uses to manipulate items in the scene view. There are a number of built-in Handle GUIs, such as the familiar tools to position, scale and rotate an object via the Transform component. However, it is also possible to define your own Handle GUIs to use with custom component editors. Such GUIs can be a very useful way to edit procedurally-generated scene content, "invisible" items and groups of related objects, such as waypoints and location markers.You can also supplement the 3D Handle GUI in the scene with 2D buttons and other controls overlaid on the scene view. This is done by enclosing standard Unity GUI calls in a Handles.BeginGUI / EndGUI pair within the //OnSceneGUI// function. You can use HandleUtility.GUIPointToWorldRay and HandleUtility.WorldToGUIPoint to convert coordinates between 2D GUI and 3D world coordinates.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Camera)">
      <summary>
        <para>Set the current camera so all Handles and Gizmos are draw with its settings.</para>
        <para>Sets Camera.current to be camera and sets its pixelRect.. This does not draw the camera, only sets it to be "active". To draw it use DrawCamera.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Set the current camera so all Handles and Gizmos are draw with its settings.</para>
        <para>Sets Camera.current to be camera and sets its pixelRect.. This does not draw the camera, only sets it to be "active". To draw it use DrawCamera.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.BeginGUI">
      <summary>
        <para>Begin a 2D GUI block inside the 3D handle GUI.</para>
        <para>Begin a 2D GUI block on top of the current handle camera.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.BeginGUI(UnityEngine.Rect)">
      <summary>
        <para>Begin a 2D GUI block inside the 3D handle GUI.</para>
        <para>Begin a 2D GUI block on top of the current handle camera.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.EndGUI">
      <summary>
        <para>End a 2D GUI block and get back to the 3D handle GUI.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.MakeBezierPoints(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Int32)">
      <summary>
        <para>Retuns an array of points to representing the bezier curve. See <see cref="Handles.DrawBezier">Handles.DrawBezier</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.PositionHandle(UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Make a 3D Scene view position handle.</para>
        <para>This will behave like the built-in move tool in Unity. 
If you have assigned something to Undo.SetSnapshotTarget, it will work fully with Undo. 
If you have assigned a non-null value to ignoreRaycastObjects, the center handle will support full raycast placement.
To control the orientation of the handle, set Handles.matrix prior to calling this function.Make the object look always to the position handle.</para>
      </summary>
      <param name="position">Center of the handle in 3D space.</param>
      <returns>
        <para>The new position. If the user has not performed any operation, it will return the same value as you passed it in postion.

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.RotationHandle(UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Make a Scene view rotation handle.</para>
        <para>This will behave like the built-in rotation tool in Unity. If you have assigned something to Undo.SetSnapshotTarget, it will work fully with Undo.Rotate the attached object from the Rotation Handle.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <returns>
        <para>The modified rotation

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.ScaleHandle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Make a Scene view scale handle.</para>
        <para>This will behave like the built-in scale toolScale handle that will appear whenever you select the GameObject.</para>
      </summary>
      <param name="scale">Scale to modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle.</param>
      <returns>
        <para>The new scale vector.

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single,System.Boolean)">
      <summary>
        <para>Make a Scene view radius handle.</para>
        <para>RadiusHandle on the Scene View.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="radius">Radius to modify.</param>
      <returns>
        <para>The modified radius

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Make a Scene view radius handle.</para>
        <para>RadiusHandle on the Scene View.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="radius">Radius to modify.</param>
      <returns>
        <para>The modified radius

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Make a 3D slider.</para>
        <para>This will draw a 3D-draggable handle on the screen. The handle is constrained to sliding along a direction vector in 3D space.Slider handle in the Scene View.</para>
      </summary>
      <param name="position">The position of the current point.</param>
      <param name="direction">The direction of the sliding.</param>
    </member>
    <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single)">
      <summary>
        <para>Make a 3D slider.</para>
        <para>This will draw a 3D-draggable handle on the screen. The handle is constrained to sliding along a direction vector in 3D space.Slider handle in the Scene View.</para>
      </summary>
      <param name="position">The position of the current point.</param>
      <param name="direction">The direction of the sliding.</param>
      <param name="size">3D size the size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">The snap value (see Handles.SnapValue).

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>
        <para>The new handle position

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>
        <para>The new handle position

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>
        <para>The new handle position

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>
        <para>The new handle position

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>
        <para>The new handle position

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>
        <para>The new handle position

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>
        <para>The new handle position

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>
        <para>The new handle position

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.FreeRotateHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Make an unconstrained rotation handle.</para>
        <para>The handle can rotate freely on all axes.FreeRotate handle seen in the Scene View.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="size">The size of the handle.

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.FreeMoveHandle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Vector3,UnityEditor.Handles.DrawCapFunction)">
      <summary>
        <para>Make an unconstrained movement handle.</para>
        <para>This can move freely in all directions. Hold down CMD to snap, CMD-SHIFT to raysnap agains colliders in the scene.Free Move handle on the Scene View.</para>
      </summary>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle. this defines the space along.</param>
      <param name="size">The size of the handle.</param>
      <param name="capFunc">The function to use for drawing the handle, eg, Handles.RectangleCap

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.ScaleSlider(System.Single,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
      <summary>
        <para>Make a directional scale slider.</para>
        <para>Scale slider handle in the Scene View.</para>
      </summary>
      <param name="scale">The value the user can modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="direction">The direction of the handle.</param>
      <param name="rotation">The rotation of whole object.</param>
      <param name="size">The size of the handle.</param>
      <param name="snap">The new value after the user has modified it. 

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.ScaleValueHandle(System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single)">
      <summary>
        <para>Make a single-float draggable handle.</para>
        <para>This is used to make the center scale handle. The user can click and drag to scale a single float up and down.Scale Value handle in the scene view with an arrow cap as the handle.</para>
      </summary>
      <param name="value">The value the user can modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle.</param>
      <param name="capFunc">The function to use for drawing the handle e.g. Handles.RectangleCap.</param>
      <param name="snap">The new value after the user has modified it. 

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Disc(UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean,System.Single)">
      <summary>
        <para>Make a 3D disc that can be dragged with the mouse.</para>
        <para>Disc Handle on the Scene View.</para>
      </summary>
      <param name="rotation">The rotation of the disc.</param>
      <param name="position">The center of the disc.</param>
      <param name="axis">The axis to rotate around.</param>
      <param name="size">The size of the disc in world space See Also:HandleUtility.GetHandleSize.</param>
      <param name="cutoffPlane">If true, only the front-facing half of the circle is draw / draggable. This is useful when you have many overlapping rotation axes (like in the default rotate tool) to avoid clutter.</param>
      <param name="snap">The new value after the user has modified it.

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Button(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEditor.Handles.DrawCapFunction)">
      <summary>
        <para>Make a 3D Button.</para>
        <para>This works like a normal GUI.Button, but it has a 3D position and is drawn by a handle functionNote: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Button Handle as a rectangle in the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.SnapValue(System.Single,System.Single)">
      <summary>
        <para>Rounds the value <i>val</i> to the closest multiple of <i>snap</i> (snap can only be posiive).</para>
      </summary>
      <returns>
        <para>The rounded value, if <i>snap</i> is positive, and <i>val</i> otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.CubeCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a cube. Pass this into handle functions.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Cube Cap on the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.SphereCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a Sphere. Pass this into handle functions.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Sphere Cap on the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.ConeCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a Cone. Pass this into handle functions.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Cone Cap in the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.CylinderCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a Cylinder. Pass this into handle functions.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Cylinder Cap in the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.SelectionFrame(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a camera facing selection frame.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DotCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a camera-facing dot. Pass this into handle functions.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Dot Cap in the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.CircleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a camera-facing Circle. Pass this into handle functions.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Circle Cap in the scene view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.ArrowCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw an arrow like those used by the move tool.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Arrow Cap in the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a line from <i>p1</i> to <i>p2</i>.</para>
        <para>Draw Line in the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Draw a line going through the list of all <c>points</c>.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.PolyLine that connects all the objects in the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawDottedLine(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw a dotted line from <i>p1</i> to <i>p2</i>.</para>
      </summary>
      <param name="p1">The start point.</param>
      <param name="p2">The end point.</param>
      <param name="screenSpaceSize">The size in pixels for the lengths of the line segments and the gaps between them.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Anti-Aliased line in the Scene View.</para>
      </summary>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Anti-Aliased line in the Scene View.</para>
      </summary>
      <param name="width">The width of the line. <i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Anti-Aliased line in the Scene View.</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,System.Int32,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Anti-Aliased line in the Scene View.</para>
      </summary>
      <param name="width">The width of the line. <i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,System.Single,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Anti-Aliased line in the Scene View.</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="width">The width of the line. <i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAConvexPolygon(UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased convex polygon specified with point array.</para>
      </summary>
      <param name="points">List of points describing the convex polygon.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Texture2D,System.Single)">
      <summary>
        <para>Draw textured bezier line through start and end points with the given tangents.  To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.  The bezier curve will be swept using this texture.</para>
        <para>Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.Bezier Line in the Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw the outline of a flat disc in 3D space.</para>
        <para>Wire Disc in the Scene View.</para>
      </summary>
      <param name="center">The center of the dics.</param>
      <param name="normal">The normal of the disc.</param>
      <param name="radius">The radius of the dics

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Draw a circular arc in 3D space.</para>
        <para>Wire Arc in the Scene View.</para>
      </summary>
      <param name="center">The center of the circle.</param>
      <param name="normal">The normal of the circle.</param>
      <param name="from">The direction of the point on the circle circumference, relative to the center, where the arc begins.</param>
      <param name="angle">The angle of the arc, in degrees.</param>
      <param name="radius">The radius of the circle

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidRectangleWithOutline(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Draw a solid outlined rectangle in 3D space.</para>
        <para>Solid rectangle with a black outline in the Scene View.</para>
      </summary>
      <param name="verts">The 4 vertices of the rectangle in world coordinates.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw a solid flat disc in 3D space.</para>
        <para>Solid Disc in the Scene View.</para>
      </summary>
      <param name="center">The center of the dics.</param>
      <param name="normal">The normal of the disc.</param>
      <param name="radius">The radius of the dics

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Draw a circular sector (pie piece) in 3D space.</para>
        <para>Solid Arc in the Scene View.</para>
      </summary>
      <param name="center">The center of the circle.</param>
      <param name="normal">The normal of the circle.</param>
      <param name="from">The direction of the point on the circumference, relative to the center, where the sector begins.</param>
      <param name="angle">The angle of the sector, in degrees.</param>
      <param name="radius">The radius of the circle

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. Label in the Scene View.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.Texture)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. Label in the Scene View.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="image">Texture to display on the label.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. Label in the Scene View.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="content">Text, image and tooltip for this label.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. Label in the Scene View.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current GUISkin is used.

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style. Label in the Scene View.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current GUISkin is used.

<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.GetMainGameViewSize">
      <summary>
        <para>Get the width and height of the main game view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.ClearCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Clears the camera.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Draws a camera inside a rectangle.</para>
        <para>This function alse sets Camera.current to camera. It sets the camera's pixelRect to position.Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="position">The area to draw the camera within in GUI coordinates.</param>
      <param name="camera">The camera to draw.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera,UnityEditor.DrawCameraMode)">
      <summary>
        <para>Draws a camera inside a rectangle.</para>
        <para>This function alse sets Camera.current to camera. It sets the camera's pixelRect to position.Note: Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </summary>
      <param name="position">The area to draw the camera within in GUI coordinates.</param>
      <param name="camera">The camera to draw.</param>
      <param name="drawMode">How the camera is drawn (textured, wireframe, etc.).</param>
    </member>
    <member name="P:UnityEditor.Handles.xAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the X coordinate of something.</para>
        <para>This is for used for example in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.yAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the Y coordinate of something.</para>
        <para>This is for used for example in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.zAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the Z coordinate of something.</para>
        <para>This is for used for example in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.centerColor">
      <summary>
        <para>Color to use for handles that represent the center of something.</para>
        <para>This is for used for example in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.selectedColor">
      <summary>
        <para>Color to use for the currently active handle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.secondaryColor">
      <summary>
        <para>Soft color to use for for general things.</para>
        <para>This is for used for example to draw the arc selection while dragging the rotation gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.lighting">
      <summary>
        <para>Are handles lit?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.color">
      <summary>
        <para>Colors of the handles.</para>
        <para>Magenta slider that points to 0,0,0.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.matrix">
      <summary>
        <para>Matrix for all handle operations.</para>
        <para>To make all Handle routines work in an Object's local coordinate space, set this to Transform.localToWorldMatrix.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.inverseMatrix">
      <summary>
        <para>The inverse of the matrix for all handle operations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.currentCamera">
      <summary>
        <para>Setup viewport and stuff for a current camera.</para>
        <para>The camera used for deciding where 3D handles end up.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.HandleUtility">
      <summary>
        <para>Helper functions for Scene View style 3D GUI.</para>
        <para>These are mainly mathematical functions that assist in converting between the 3D scene space and the 2D GUI. The functions are used in the construction of the Unity editor itself and so using them is a good way to make your own Handle GUIs consistent with Unity's.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.CalcLineTranslation(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Map a mouse drag onto a movement along a line in 3D space.</para>
        <para>Certain types of Handles (such as arrows) involve movement along a line in 3D space. For example, the Transform's position arrows move the object along its local X, Y or Z axis as the mouse is dragged. The CalcLineTranslation function converts the movement of the mouse into constrained movement along a 3D line in the familiar way used by Unity's built-in tools.</para>
      </summary>
      <param name="src">The source point of the drag.</param>
      <param name="dest">The destination point of the drag.</param>
      <param name="srcPosition">The 3D position the dragged object had at <c>src</c> ray.</param>
      <param name="constraintDir">3D direction of constrained movement.</param>
      <returns>
        <para>The distance travelled along constraintDir.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.PointOnLineParameter(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns the parameter for the projection of the <c>point</c> on the given line.</para>
        <para>The return value can be negative if the projected point is in negative lineDirection relative to the linePoint/
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ProjectPointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Project <c>point</c> onto a line.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Calculate distance between a point and a line.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Calculate distance between a point and a Bezier curve.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Pixel distance from mouse pointer to line.</para>
        <para>Calculates the screen space distance from the mouse pointer to the line between p1 and p2/
world space points.Uses the current camera to determine the distance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToCircle(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to camera facing circle.</para>
        <para>Calculates the screen space distance from the mouse pointer to the circle at given world
space position with the given radius. The circle is assumed to be facing the camera.Uses the current camera to determine the distance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToRectangle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a rectangle on screen.</para>
        <para>Calculates the screen space distance from the mouse pointer to the rectangle.Uses the current camera to determine the distance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Distance from a point <c>p</c> in 2d to a line defined by two points <c>a</c> and <c>b</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointToLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Distance from a point <c>p</c> in 2d to a line segment defined by two points <c>a</c> and <c>b</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a 3D disc.</para>
        <para>Calculates the screen space distance from the mouse pointer to the disc (circle) at given world
space position with the given radius and normal.Uses the current camera to determine the distance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Get the point on an disc (in 3D space) which is closest to the current mouse position.</para>
        <para>This function takes the disc defined by its parameters and "flattens" it into screen space. The closest point between the flattened disc and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D disc. This is useful for Handle GUIs that involve rotation of an object around the center of the disc; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a 3D section of a disc.</para>
        <para>Calculates the screen space distance from the mouse pointer to the disc section at given world
space position with the given radius and normal. The disc section is defined by
from vector and the angle in degrees.Uses the current camera to determine the distance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Get the point on an arc (in 3D space) which is closest to the current mouse position.</para>
        <para>This function takes the arc defined by its parameters and "flattens" it into screen space. The closest point between the flattened arc and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D arc. This is useful for Handle GUIs that involve rotation of an object around the center of the arc; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Pixel distance from mouse pointer to a polyline.</para>
        <para>Calculates the screen space distance from the mouse pointer to the multi segment line
that goes through the given world space points.Uses the current camera to determine the distance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Get the point on a polyline (in 3D space) which is closest to the current mouse position.</para>
        <para>A polyline is simply a zigzag line defined by a set of points connected in sequence. The ClosestPointToPolyLine function takes the polyline defined by a point array and "flattens" it into screen space. The closest point between the flattened line and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D polyline. This is useful for Handle GUIs that involve manipulating an arbitrary 3D shape using the mouse; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools. An example of where this might be used is a racetrack defined by a set of waypoints - a position along the track line could be selected via the mouse using ClosestPointToPolyLine.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.AddControl(System.Int32,System.Single)">
      <summary>
        <para>Record a distance measurement from a handle.</para>
        <para>All handles call this with their controlID during layout, then use nearestControl to check if they got the mouseDown.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.AddDefaultControl(System.Int32)">
      <summary>
        <para>Add the ID for a default control. This will be picked if nothing else is.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.GetHandleSize(UnityEngine.Vector3)">
      <summary>
        <para>Get world space size of a manipulator handle at given position.</para>
        <para>Uses the current camera to calculate suitable size.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.WorldToGUIPoint(UnityEngine.Vector3)">
      <summary>
        <para>Convert world space point to a 2D GUI position.</para>
        <para>Uses the current camera to calculate the projection.</para>
      </summary>
      <param name="world">Point in world space.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.GUIPointToWorldRay(UnityEngine.Vector2)">
      <summary>
        <para>Convert 2D GUI position to a world space ray.</para>
        <para>Uses the current camera to calculate the ray.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.WorldPointToSizedRect(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Calculate a rectangle to display a 2D GUI element near a projected point in 3D space.</para>
        <para>This function is useful when 3D objects need labels or other 2D controls that follow them around in 3D space as the camera moves.</para>
      </summary>
      <param name="position">The world-space position to use.</param>
      <param name="content">The content to make room for.</param>
      <param name="style">The style to use. The style's alignment.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickRectObjects(UnityEngine.Rect)">
      <summary>
        <para>Pick GameObjects that lie within a specified screen rectangle.</para>
        <para>This is useful for implementing multi-select tools that allow the user to drag a rectangle around the desired objects.</para>
      </summary>
      <param name="rect">An screen rectangle specified with pixel coordinates.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickGameObject(UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Pick game object closest to specified position.</para>
      </summary>
      <param name="selectPrefabRoot">Select prefab.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PushCamera(UnityEngine.Camera)">
      <summary>
        <para>Store all camera settings.</para>
        <para>The camera settings will be added to a so-called "stack" list, where they will stay until retrieved by a call to PopCamera. The settings will be stored in the reverse of the order in which they were added, so a call to PopCamera will retrieve the most recently stored Camera data and then remove it from the stack. A subsequent call to PopCamera will then retrieve the next most recently pushed data and so on.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.PopCamera(UnityEngine.Camera)">
      <summary>
        <para>Retrieve all camera settings.</para>
        <para>A call to PopCamera will retrieve the most recently stored Camera settings added to a "stack" structure by PushCamera. This allows for easy saving and restoration of temporary camera changes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.RaySnap(UnityEngine.Ray)">
      <summary>
        <para>Casts <c>ray</c> against the scene and report if an object lies in its path.</para>
      </summary>
      <returns>
        <para>A boxed RaycastHit, null if nothing hit it.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.Repaint">
      <summary>
        <para>Repaint the current view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.acceleration">
      <summary>
        <para>Get standard acceleration for dragging values (Read Only).</para>
        <para>Normal acceleration is 1.0. When Shift is pressed, it is 4.0; when Alt is pressed, acceleration is 0.25.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.niceMouseDelta">
      <summary>
        <para>Get nice mouse delta to use for dragging a float value (Read Only).</para>
        <para>This will autodetect the users preference for X / Y axis dragging and give you back
a float that is measured accordingly. This also handles modifier keys correctly, i.e.
the delta is already multiplied by acceleration.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.niceMouseDeltaZoom">
      <summary>
        <para>Get nice mouse delta to use for zooming (Read Only).</para>
        <para>This will autodetect the users preference for X / Y axis dragging and give you back
a float that is measured accordingly. This also handles modifier keys correctly, i.e.
the delta is already multiplied by acceleration.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpritePackerMode">
      <summary>
        <para>Sprite Packer mode for the current project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.Disabled">
      <summary>
        <para>Doesn't pack sprites.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.BuildTimeOnly">
      <summary>
        <para>Updates sprite atlas cache when building player/bundles.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.AlwaysOn">
      <summary>
        <para>Always maintain an up-to-date sprite atlas cache.</para>
        <para>Updates sprite atlas cache when going into Play mode or building player/bundles.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SemanticMergeMode">
      <summary>
        <para>Behavior of semantic merge.</para>
        <para>How the semantic merge of scene and prefab assets should behave.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SemanticMergeMode.Off">
      <summary>
        <para>Disable use of semantic merging.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorWindow">
      <summary>
        <para>Derive from this class to create an editor window.</para>
        <para>Create your own custom editor window that can float free or be docked as a tab, just like the native windows in the Unity interface.Editor windows are typically opened using a menu item.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.Simple Empty non-dockable window.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.Simple Empty non-dockable window.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.Simple Empty non-dockable window.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.Simple Empty non-dockable window.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position rect and returns the instance of it.Create an empty 100x150px window at the upper left corner of the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position rect and returns the instance of it.Create an empty 100x150px window at the upper left corner of the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position rect and returns the instance of it.Create an empty 100x150px window at the upper left corner of the screen.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.BeginWindows">
      <summary>
        <para>Mark the beginning area of all popup windows.</para>
        <para>GUI.Window behaves somewhat differently in the editor than inside your games. In games, GUI.Window pops up a window on your screen. In the editor, 
GUI.Window shows a subwindow inside one of your editor windows. Begin/EndWindows is used to determine where these can go.
You need to have all calls to GUI.Window or GUILayout.Window inside a BeginWindows / EndWindows pair. Like this:Simple editor Window with a window and a button inside.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.EndWindows">
      <summary>
        <para>Close a window group started with <see cref="EditorWindow.BeginWindows">EditorWindow.BeginWindows</see>.</para>
        <para>Simple editor Window with a window and a button inside.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowNotification(UnityEngine.GUIContent)">
      <summary>
        <para>Show a notification message.</para>
        <para>Displays notification message on the window. Unlike message boxes or log messages notification will fade out automatically after some time. 
Call RemoveNotification to remove it immediately.Show a notification in an editor window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.RemoveNotification">
      <summary>
        <para>Stop showing notification message.</para>
        <para>Notification message fades away automatically after some time. This function will remove it immediately.Show a notification in an editor window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Focus">
      <summary>
        <para>Moves keyboard focus to this EditorWindow.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowUtility">
      <summary>
        <para>Show the EditorWindow as a floating utility window.</para>
        <para>Utility windows will always be in front of normal windows, and will be hidden when user switches to another application.Note: You dont need to use EditorWindow.GetWindow() before using this function to show the window.Floating window utility that lets you randomize the rotation of the selected objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowPopup">
      <summary>
        <para>Used for popup style windows.</para>
        <para>On mac this means light shadow and no titlebarDelete specific components from the selected objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowAsDropDown(UnityEngine.Rect,UnityEngine.Vector2)">
      <summary>
        <para>Show window with dropdown behaviour (e.g. window is closed when it loses focus) and having.</para>
        <para>Appearance as 'ShowMode.PopupMenu' (no frame). 
Note this function auto fits the window to screen while trying to place it first below then above.
So windowSize might change when fitting it to screen therefore make sure to get 'position' afterwards 
to check size was cropped.</para>
      </summary>
      <param name="buttonRect">Is used for positioning the window.</param>
      <param name="windowSize">Is used for setting up initial size of the window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.Show">
      <summary>
        <para>Show the EditorWindow.</para>
        <para>Empty editor window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Show(System.Boolean)">
      <summary>
        <para>Show the EditorWindow.</para>
        <para>Empty editor window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowAuxWindow">
      <summary>
        <para>Show the editor window in the auxiliary window.</para>
        <para>The single auxiliary window can be re-used by different editor windows at different times.
Showing an editor window in the auxiliary window can be useful to avoid clutter of many small windows.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.
The created window will attempt to be docked next to the first founds specified window type.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.
The created window will attempt to be docked next to the first founds specified window type.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Boolean,System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.
The created window will attempt to be docked next to the first founds specified window type.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen(System.Type)">
      <summary>
        <para>Focuses the first found EditorWindow of specified type if it is open.</para>
        <para>If there is no open window of such type, nothing happens.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen``1">
      <summary>
        <para>Focuses the first found EditorWindow of type <c>T</c> if it is open.</para>
        <para>If there is no open window of such type, nothing happens.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position rect and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position rect and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position rect and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position rect and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.Close">
      <summary>
        <para>Close the editor window.</para>
        <para>This will destroy the editor windowSimple window that lets you delete components from the selected Game Objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Repaint">
      <summary>
        <para>Make the window repaint.</para>
        <para>Randomize the rotation of the Selected Objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.SendEvent(UnityEngine.Event)">
      <summary>
        <para>Sends an Event to a window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.wantsMouseMove">
      <summary>
        <para>Does the GUI in this editor window want MouseMove events?</para>
        <para>If set to true, the window recieves an OnGUI call whenever the mouse is moved over the window.Note: This function does not trigger Repaint() Automatically.Editor Window that detects mouse moves when the toggle button is activated and the mouse is over the window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.autoRepaintOnSceneChange">
      <summary>
        <para>Does the window automatically repaint whenever the scene has changed?</para>
        <para>Editor Window that renders what the main camera is "seeing".</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.maximized">
      <summary>
        <para>Is this window maximized.</para>
        <para>Set this value to maximize / unmaximize a window. If the window is undocked, this value will always be false and setting it will have no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.focusedWindow">
      <summary>
        <para>The EditorWindow which currently has keyboard focus. (Read Only)</para>
        <para>focusedWindow can be null if no window has focus.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.mouseOverWindow">
      <summary>
        <para>The EditorWindow currently under the mouse cursor. (Read Only)</para>
        <para>mouseOverWindow can be null if there is no window under the cursor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.minSize">
      <summary>
        <para>The minimum size of this window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.maxSize">
      <summary>
        <para>The maximum size of this window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.title">
      <summary>
        <para>The title of this window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.titleContent">
      <summary>
        <para>The GUIContent used for drawing the title of EditorWindows.</para>
        <para>The icon of titleContent will be shown as the tab icon when the window is docked. It is recommended to set it in OnEnable (and not in the constructor) if an icon is used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.position">
      <summary>
        <para>The position of the window in screen space.</para>
        <para>Setting this value will undock the window if it's dockedCreate an empty editor window of 200x200px.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CustomEditor">
      <summary>
        <para>Tells an Editor class which run-time type it's an editor for.</para>
        <para>When you make a custom editor for a component, you need put this attribute on the editor class.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomEditor.#ctor(System.Type)">
      <summary>
        <para>Defines which object type the custom editor class can edit.</para>
      </summary>
      <param name="inspectedType">Type that this editor can edit.</param>
    </member>
    <member name="M:UnityEditor.CustomEditor.#ctor(System.Type,System.Boolean)">
      <summary>
        <para>Defines which object type the custom editor class can edit.</para>
      </summary>
      <param name="inspectedType">Type that this editor can edit.</param>
      <param name="editorForChildClasses">If true, child classes of inspectedType will also show this editor. Defaults to false.</param>
    </member>
    <member name="P:UnityEditor.CustomEditor.isFallback">
      <summary>
        <para>If true, match this editor only if all non-fallback editors do not match. Defaults to false.</para>
        <para>Unity does a two-pass match to hook up editors with inspected types. First the non-fallback editors are tested, and if none match, then the fallbacks are tested for a match. Setting this flag lets you set up a default editor for a given type, while still permitting another editor type to override it.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CanEditMultipleObjects">
      <summary>
        <para>Attribute used to make a custom editor support multi-object editing.</para>
        <para>When multiple objects are selected, Editors that don't have this attribute will show the message "Multi-object editing not supported".
See the Editor class documentation on how to make an Editor support multi-object editing.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Editor">
      <summary>
        <para>Base class to derive custom Editors from. Use this to create your own custom inspectors and editors for your objects.</para>
        <para>Consider a script MyPlayer with variables for armor, damage, and a reference to a gun GameObject:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object)">
      <summary>
        <para>Make a custom editor for <c>targetObject</c> or <c>targetObjects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute.
If an editorType is specified, an editor of that type is created instead.
Use this if you have created multiple custom editors where each editor shows different properties of the object.
Returns NULL if objects are of different types or if no approprate editor was found.Consider a script WaypointPathEditor for editing  the Transforms of a wayPoint array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object,System.Type)">
      <summary>
        <para>Make a custom editor for <c>targetObject</c> or <c>targetObjects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute.
If an editorType is specified, an editor of that type is created instead.
Use this if you have created multiple custom editors where each editor shows different properties of the object.
Returns NULL if objects are of different types or if no approprate editor was found.Consider a script WaypointPathEditor for editing  the Transforms of a wayPoint array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[],System.Type)">
      <summary>
        <para>Make a custom editor for <c>targetObject</c> or <c>targetObjects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute.
If an editorType is specified, an editor of that type is created instead.
Use this if you have created multiple custom editors where each editor shows different properties of the object.
Returns NULL if objects are of different types or if no approprate editor was found.Consider a script WaypointPathEditor for editing  the Transforms of a wayPoint array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[])">
      <summary>
        <para>Make a custom editor for <c>targetObject</c> or <c>targetObjects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute.
If an editorType is specified, an editor of that type is created instead.
Use this if you have created multiple custom editors where each editor shows different properties of the object.
Returns NULL if objects are of different types or if no approprate editor was found.Consider a script WaypointPathEditor for editing  the Transforms of a wayPoint array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.DrawDefaultInspector">
      <summary>
        <para>Draw the built-in inspector.</para>
        <para>Call this function from inside OnInspectorGUI method to draw the automatic inspector.
It is useful you don't want to redo the entire inspector, but you want to add
a few buttons to it.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.OnInspectorGUI">
      <summary>
        <para>Implement this function to make a custom inspector.</para>
        <para>Inside this function you can add your own custom GUI for the inspector of a specific object class.Note: This function has to be overrided in order to work. Check the example:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.RequiresConstantRepaint">
      <summary>
        <para>Does this edit require to be repainted constantly in its current state?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.Repaint">
      <summary>
        <para>Repaint any inspectors that shows this editor.</para>
        <para>Useful when you want to make sure the inspector updates to show changes made in OnSceneGUI.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.HasPreviewGUI">
      <summary>
        <para>Override this method in subclasses if you implement OnPreviewGUI.</para>
        <para>You can also use it to disable or enable preview depending on the target asset.
The default implementation simply returns false, so if you override OnPreviewGUI you have to override this method as well.Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector.
This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
      <returns>
        <para>True if this component can be Previewed in its current state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Editor.GetPreviewTitle">
      <summary>
        <para>Override this method if you want to change the label of the Preview area.</para>
        <para>If null is returned the default text "Preview" will be used.Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector.
This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.RenderStaticPreview(System.String,UnityEngine.Object[],System.Int32,System.Int32)">
      <summary>
        <para>Override this method if you want to render a static preview that shows.</para>
        <para>If null is returned the builtin icon for the class type is used.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.</para>
        <para>If you implement OnInteractivePreviewGUI then this will only be called for non-interactive custom previews.
The overidden method should use the rectangle passed in and render a preview of the asset into it.
The default implementation is a no-op.Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector.
This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.</para>
        <para>Implement this instead of OnPreviewGUI if you only want to display interactive custom previews (you can implement both if some previews are interactive and others aren't).
The overidden method should use the rectangle passed in and render a preview of the asset into it.
The default implementation is a no-op.Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector.
This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.Editor.OnPreviewSettings">
      <summary>
        <para>Override this method if you want to show custom controls in the preview header.</para>
        <para>The default implementation is a no-op.Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector.
This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.GetInfoString">
      <summary>
        <para>Implement this method to show asset information on top of the asset preview.</para>
        <para>You will also have to implement HasPreviewGUI and OnPreviewGUI in addition to this method.
The default implementation just returns an empty string, which disables the feature.Note: Inspector previews are limited to the primary editor of persistent objects (assets), e.g., GameObjectInspector, MaterialEditor, TextureInspector.
This means that it is currently not possible for a component to have its own inspector preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.DrawHeader">
      <summary>
        <para>Call this function to draw the header of the editor.</para>
        <para>This function is relevant if you are creating and managing your own Editor objects.
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.DrawPreview(UnityEngine.Rect)">
      <summary>
        <para>The first entry point for Preview Drawing.</para>
        <para>Draws a grid of previews if there are multiple targets available. Override this method if you want to customize this behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.UseDefaultMargins">
      <summary>
        <para>Override this method in subclasses to return false if you don't want default margins.</para>
        <para>By default, content in the Inspector has a large left margin and a small right margin. This is because the entire Editor.OnInspectorGUI callback is wrapped in a vertical group with the EditorStyles.inspectorDefaultMargins style. For a consistent look, these default margins should be used for most GUI with regular controls.However, some special GUI elements may benefit from occupying the full width of the Inspector, with only a small margin in both sides. To disable the default margins, override the Editor.UseDefaultMargins method in your custom Editor and make it return false. Then you can wrap your GUI content inside a vertical groups to your liking. For example, you can wrap some of the GUI inside a vertical group with the EditorStyles.inspectorFullWidthMargins style and wrap other parts of the GUI inside a vertical group with the EditorStyles.inspectorDefaultMargins style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.target">
      <summary>
        <para>The object being inspected.</para>
        <para>For editors that support multi-object editing, the target property should not be used inside OnInspectorGUI since it only refers to the first of the edited objects.
It should still be used in OnSceneGUI and OnPreviewGUI, which will be called once for each of the selected objects with the target property referring to each of them in turn.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.targets">
      <summary>
        <para>An array of all the object being inspected.</para>
        <para>For editors that support multi-object editing, the targets property can be used in OnInspectorGUI, but usually it is better to handle things through the serializedObject instead as described on the page about the Editor class.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.serializedObject">
      <summary>
        <para>A <see cref="SerializedObject">SerializedObject</see> representing the object or objects being inspected.</para>
        <para>The serializedObject can be used inside the OnInspectorGUI function of a custom Editor as described on the page about the Editor class.The serializedObject should not be used inside OnSceneGUI or OnPreviewGUI. Use the target property directly in those callback functions instead.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ReplacePrefabOptions">
      <summary>
        <para>Flags for the PrefabUtility.ReplacePrefab function.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.Default">
      <summary>
        <para>Replaces prefabs by matching pre-existing connections to the prefab.</para>
        <para>If the game object hierarchy was not connected to the prefab before all game objects / components will be new
and thus overrides in prefab instances will be lost.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.ConnectToPrefab">
      <summary>
        <para>Connects the passed objects to the prefab after uploading the prefab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.ReplaceNameBased">
      <summary>
        <para>Replaces the prefab using name based lookup in the transform hierarchy.</para>
        <para>This is internally used by the model importer and is useful for relating game object hierarchy built 
from scratch to an existing prefab without breaking connections.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PrefabType">
      <summary>
        <para>The type of a prefab object as returned by EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.None">
      <summary>
        <para>The object is not a prefab nor an instance of a prefab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.Prefab">
      <summary>
        <para>The object is a user created prefab asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.ModelPrefab">
      <summary>
        <para>The object is an imported 3D model asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.PrefabInstance">
      <summary>
        <para>The object is an instance of a user created prefab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.ModelPrefabInstance">
      <summary>
        <para>The object is an instance of an imported 3D model.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.MissingPrefabInstance">
      <summary>
        <para>The object was an instance of a prefab, but the original prefab could not be found.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.DisconnectedPrefabInstance">
      <summary>
        <para>The object is an instance of a user created prefab, but the connection is broken.</para>
        <para>For example, adding or removing a component from the instance breaks connection between the instance and the prefab.
</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.DisconnectedModelPrefabInstance">
      <summary>
        <para>The object is an instance of an imported 3D model, but the connection is broken.</para>
        <para>For example, adding or removing a component from the instance breaks connection between the instance and the prefab.
</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PropertyModification">
      <summary>
        <para>Defines a single modified property.</para>
        <para>Used by the prefab system to track any changes applied to an instance.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.target">
      <summary>
        <para>Object that will be modified.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.propertyPath">
      <summary>
        <para>Property path of the property being modified (Matches as SerializedProperty.propertyPath).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.value">
      <summary>
        <para>The value being applied.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.objectReference">
      <summary>
        <para>The value being applied when it is a object reference (which can not be represented as a string).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PrefabUtility">
      <summary>
        <para>Utility class for any prefab related operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabParent(UnityEngine.Object)">
      <summary>
        <para>Returns the parent asset object of <c>source</c>, or null if it can't be found.</para>
        <para>Use this function to get a prefab asset object the source was instantiated from.
This also returns the prefab parent if the prefab has become disconnected, which can then be used to reconnect the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabObject(UnityEngine.Object)">
      <summary>
        <para>Retrieves the enclosing prefab for any object contained within.</para>
        <para>Given an asset/object, this function returns the prefab it is a child of.</para>
      </summary>
      <param name="targetObject">An object contained within a prefab object.</param>
      <returns>
        <para>The prefab the object is contained in.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPropertyModifications(UnityEngine.Object)">
      <summary>
        <para>Extract all modifications that are applied to the prefab instance compared to the parent prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.SetPropertyModifications(UnityEngine.Object,UnityEditor.PropertyModification[])">
      <summary>
        <para>Assigns all modifications that are applied to the prefab instance compared to the parent prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiateAttachedAsset(UnityEngine.Object)">
      <summary>
        <para>Instantiate an asset that is referenced by a prefab and use it on the prefab instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.RecordPrefabInstancePropertyModifications(UnityEngine.Object)">
      <summary>
        <para>Force record property modifications by comparing against the parent prefab.</para>
        <para>This is done automatically and you will not have to call this function manually.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.MergeAllPrefabInstances(UnityEngine.Object)">
      <summary>
        <para>Force re-merging all prefab instances of this prefab.</para>
        <para>This is done automatically and you will not have to call this function manually.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.DisconnectPrefabInstance(UnityEngine.Object)">
      <summary>
        <para>Disconnects the prefab instance from its parent prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiatePrefab(UnityEngine.Object)">
      <summary>
        <para>Instantiates the given prefab.</para>
        <para>This is similar to Instantiate but creates a prefab connection to the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreateEmptyPrefab(System.String)">
      <summary>
        <para>Creates an empty prefab at given path.</para>
        <para>If a prefab at the path already exists it will be deleted and replaced with an empty prefab.
Returns a reference to the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject,UnityEditor.ReplacePrefabOptions)">
      <summary>
        <para>Creates a prefab from a game object hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject)">
      <summary>
        <para>Creates a prefab from a game object hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object,UnityEditor.ReplacePrefabOptions)">
      <summary>
        <para>Replaces the <c>targetPrefab</c> with a copy of the game object hierarchy <c>go</c>.</para>
        <para>Returns the prefab game object after it has been created.
If connectToPrefab is enabled go will be made an instance of the created prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object)">
      <summary>
        <para>Replaces the <c>targetPrefab</c> with a copy of the game object hierarchy <c>go</c>.</para>
        <para>Returns the prefab game object after it has been created.
If connectToPrefab is enabled go will be made an instance of the created prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindRootGameObjectWithSameParentPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Returns the topmost game object that has the same prefab parent as <c>target</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindValidUploadPrefabInstanceRoot(UnityEngine.GameObject)">
      <summary>
        <para>Returns root game object of the prefab instance if that root prefab instance is a parent of the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReconnectToLastPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Connects the game object to the prefab that it was last connected to.</para>
        <para>Returns true if the game object has never been a prefab instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ResetToPrefabState(UnityEngine.Object)">
      <summary>
        <para>Resets the properties of the component or game object to the parent prefab state.</para>
        <para>All overrides will be cleared. However the transform.position and rotation of a root game object in a prefab instance 
will never be cleared.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.RevertPrefabInstance(UnityEngine.GameObject)">
      <summary>
        <para>Resets the properties of all objects in the prefab, including child game objects and components that were added to the prefab instance.</para>
        <para>All overrides will be cleared. However the transform.position and rotation of a root game object in a prefab instance 
will never be cleared.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabType(UnityEngine.Object)">
      <summary>
        <para>Given an object, returns its prefab type (None, if it's not a prefab).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindPrefabRoot(UnityEngine.GameObject)">
      <summary>
        <para>Helper function to find the prefab root of an object (used for picking niceness).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabUtility.prefabInstanceUpdated">
      <summary>
        <para>Called after prefab instances in the scene have been updated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UndoPropertyModification">
      <summary>
        <para>See Also: Undo.postprocessModifications.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Undo">
      <summary>
        <para>Lets you register undo operations on specific objects you are about to perform changes on.</para>
        <para>The Undo system stores delta changes in the undo stack.Undo operations are automatically combined together based on events, e.g. mouse down events will split undo groups. Grouped undo operations will appear and work as a single undo. To control grouping manually use Undo.IncrementCurrentGroup.By default, the name shown in the UI will be selected from the actions belonging to the group using a hardcoded ordering of the different kinds of actions. To manually set the name, use Undo.SetCurrentGroupName.Undo operations store either per property or per object state. This way they scale well with any scene size.The most important operations are outlined below.Modifying a single property:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.SetTransformParent(UnityEngine.Transform,UnityEngine.Transform,System.String)">
      <summary>
        <para>Sets the parent of transform to the new parent and records an undo operation.</para>
        <para>This is equivalent to calling transform.parent = newParent, but it additionally records the undo operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.RegisterCreatedObjectUndo(UnityEngine.Object,System.String)">
      <summary>
        <para>Register an undo operations for a newly created object.</para>
        <para>When the undo is performed the object will be destroyed. All newly created objects that are part of undoable state should be registered with this function.Note: Object destruction works the same way as it does for Object.Destroy (except for the delay).  This means that GameObjects will be destroyed along with all their child GameObjects.</para>
      </summary>
      <param name="objectToUndo">The object that was created.</param>
      <param name="name">The name of the action to undo. Think "Undo ...." in the main menu.</param>
    </member>
    <member name="M:UnityEditor.Undo.DestroyObjectImmediate(UnityEngine.Object)">
      <summary>
        <para>Destroys the object and records an undo operation so that it can be recreated.</para>
        <para>Destroys the object with the same behaviour as DestroyImmediate (objectToUndo, true); Also stores all destroyed objects in the undo buffer so that they can be fully recreated.</para>
      </summary>
      <param name="objectToUndo">The object that will be destroyed.</param>
    </member>
    <member name="M:UnityEditor.Undo.RecordObject(UnityEngine.Object,System.String)">
      <summary>
        <para>Records any changes done on the object after the RecordObject function.</para>
        <para>Almost all property changes can be recorded with this function. The transform parent, AddComponent, object destruction  can not be recorded with this function, for that you should use the dedicated functions. Internally this will create a temporary copy of the objects state and at the end of the frame Unity will diff the state and thus detect what exactly has changed. The changed properties are then recorded on the undo stack. If nothing has actually changed (Binary exact comparison is used for all properties), no undo operation will be stored on the stack.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.RecordObjects(UnityEngine.Object[],System.String)">
      <summary>
        <para>Records multiple undoable objects in a single call. This is the same as calling Undo.RecordObject multiple times.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.ClearUndo(UnityEngine.Object)">
      <summary>
        <para>Removes all Undo operation for the identifier object registered using Undo.RegisterCompleteObjectUndo from the undo stack.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.PerformUndo">
      <summary>
        <para>Perform an Undo operation.</para>
        <para>This performs a undo operation. It is the same as clicking on the Edit-&amp;gt;Undo menu.
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.PerformRedo">
      <summary>
        <para>Perform an Redo operation.</para>
        <para>This performs a redo operation. It is the same as clicking on the Edit-&amp;gt;Redo menu.
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.IncrementCurrentGroup">
      <summary>
        <para>Unity automatically groups undo operations by the current group index.</para>
        <para>The current group is automatically incremented based on events eg. mouse down events, executing a menu item increments the current group. But sometimes it is necessary to manually group undo operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.GetCurrentGroup">
      <summary>
        <para>Unity automatically groups undo operations by the current group index.</para>
        <para>The current group index is automatically increased on mouse down, clicking on menu items and other operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.GetCurrentGroupName">
      <summary>
        <para>Get the name that will be shown in the UI for the current undo group.</para>
        <para>By default, this name is inferred from the actions in the group. To set the name manually, use Undo.SetCurrentGroupName.</para>
      </summary>
      <returns>
        <para>Name of the current group or an empty string if the current group is empty.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Undo.SetCurrentGroupName(System.String)">
      <summary>
        <para>Set the name of the current undo group.</para>
        <para>Setting a name manually will override an implicitly generated name for the group.</para>
      </summary>
      <param name="name">New name of the current undo group.</param>
    </member>
    <member name="M:UnityEditor.Undo.RevertAllInCurrentGroup">
      <summary>
        <para>Performs the last undo operation but does not record a redo operation.</para>
        <para>This is useful when you want to simply revert the last performed action. In Unity the escape is commonly used to execute this function.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.RevertAllDownToGroup(System.Int32)">
      <summary>
        <para>Performs all undo operations up to the group index without storing a redo operation in the process.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.CollapseUndoOperations(System.Int32)">
      <summary>
        <para>Collapses all undo operation up to group index together into one step.</para>
        <para>This is used by the color picked to combine all color modifications into a single step once the color picker is closed, while they are seperate operations when the color picker is still open.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.FlushUndoRecordObjects">
      <summary>
        <para>Ensure objects recorded using <see cref="Undo.RecordObject">RecordObject</see> or ::ref:RecordObjects are registered as an undoable action. In most cases there is no reason to invoke <see cref="Undo.FlushUndoRecordObjects">FlushUndoRecordObjects</see> since it's automatically done right after mouse-up and certain other events that conventionally marks the end of an action.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Undo.undoRedoPerformed">
      <summary>
        <para>Callback that is triggered after an undo or redo was executed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Undo.willFlushUndoRecord">
      <summary>
        <para>Invoked before the Undo system performs a flush.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ExportPackageOptions">
      <summary>
        <para>Export package option. Multiple options can be combined together using the | operator.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Default">
      <summary>
        <para>Default mode. Will not include dependencies or subdirectories nor include Library assets unless specifically included in the asset list.</para>
        <para>The export process will happen synchronously, ie. the ExportPackage function will not return until the package is fully exported.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Interactive">
      <summary>
        <para>The export operation will be run asynchronously and reveal the exported package file in a file browser window after the export is finished.</para>
        <para>Note. When interactive mode is enabled, ExportPackage will return immediately before the package file has been created.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Recurse">
      <summary>
        <para>Will recurse through any subdirectories listed and include all assets inside them.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.IncludeDependencies">
      <summary>
        <para>In addition to the assets paths listed, all dependent assets will be included as well.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.IncludeLibraryAssets">
      <summary>
        <para>The exported package will include all library assets, ie. the project settings located in the Library folder of the project.</para>
        <para>This is useful for exporting an entire project in a single unitypackage:</para>
      </summary>
    </member>
    <member name="T:UnityEditor.FileUtil">
      <summary>
        <para>Lets you do <i>move</i>, <i>copy</i>, <i>delete</i> operations over files or directories.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.DeleteFileOrDirectory(System.String)">
      <summary>
        <para>Deletes a file or a directory given a path.</para>
        <para>This function's path is relative to the project root folder but it can also accept absolute paths.All file separators should be forward ones "/" (Unix style).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.CopyFileOrDirectory(System.String,System.String)">
      <summary>
        <para>Copies a file or a directory.</para>
        <para>This function's path can be relative to the project root folder or be an absolute path.All file separators should be forward ones "/".Make sure to include the name of the files or directories at the end of the "to" argument.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.CopyFileOrDirectoryFollowSymlinks(System.String,System.String)">
      <summary>
        <para>Copies the file or directory.</para>
        <para>Copies from from path to the destination, to, path.In presence of symbolic links (OS X only), the actual files to
which symbolic links point to are copied, not the symbolic links themselves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.MoveFileOrDirectory(System.String,System.String)">
      <summary>
        <para>Moves a file or a directory from a given path to another path.</para>
        <para>This function's path is relative to the project root folder but it can also accept absolute paths.All file separators should be forward ones "/".Make sure to include the name of the files or directories at the end of the "to" argument.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.GetUniqueTempPathInProject">
      <summary>
        <para>Returns a unique path in the Temp folder within your current project.</para>
        <para>The returned path is relative to the project folder.The returned path is of a form Temp/UnityTempFile-uniqueID, where uniqueID is guaranteed to be
unique over space and time.You can use it to create temporary files/folders and be sure that
you are not overriding somebody else's files, plus you don't have to
keep track of the unique IDs yourself.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.ReplaceFile(System.String,System.String)">
      <summary>
        <para>Replaces a file.</para>
        <para>Replaces the file located at dst with the file located at src.
if dst doesnt exists it just copies the file. If dst exists
then it deletes it and copies the file at src to dst
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.ReplaceDirectory(System.String,System.String)">
      <summary>
        <para>Replaces a directory.</para>
        <para>Replaces the directory located at dst with the directory located at src.
if dst doesnt exists it copies the file. If dst exists
then it deletes it and copies the directory at src to dst
</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PSP2BuildSubtarget">
      <summary>
        <para>Target PS Vita build type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PSP2BuildSubtarget.PCHosted">
      <summary>
        <para>For general development, creates a build stored on the host PC which the Vita reads from.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PSP2BuildSubtarget.Package">
      <summary>
        <para>For building a PS Vita package that can be installed on a PS Vita memory card.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SCEBuildSubtarget">
      <summary>
        <para>Target PS3 or PS4 build type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SCEBuildSubtarget.PCHosted">
      <summary>
        <para>Build package that it's hosted on the PC.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SCEBuildSubtarget.HddTitle">
      <summary>
        <para>Build a package suited for DLC Submission.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SCEBuildSubtarget.BluRayTitle">
      <summary>
        <para>Build a package suited for BluRay Submission.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.XboxBuildSubtarget">
      <summary>
        <para>Target Xbox build type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Development">
      <summary>
        <para>Development player.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Master">
      <summary>
        <para>Master player (submission-proof).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Debug">
      <summary>
        <para>Debug player (for building with source code).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.XboxRunMethod">
      <summary>
        <para>Xbox 360 run method.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxRunMethod.HDD">
      <summary>
        <para>Copy to hard drive.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxRunMethod.DiscEmuFast">
      <summary>
        <para>Disc emulation (Fast).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxRunMethod.DiscEmuAccurate">
      <summary>
        <para>Disc emulation (Accurate).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.XboxOneDeployMethod">
      <summary>
        <para>An enumeration that describes how you would like your test build deployed to the console.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOneDeployMethod.Push">
      <summary>
        <para>Copy the build to the console in full and do not serve any files off my local machine.</para>
        <para>This can have a long build time because all files are copied to the kit.  Load times will be more like what players will experience.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOneDeployMethod.Pull">
      <summary>
        <para>Serve files off a PC, copying the minimal set of files to the console.</para>
        <para>This can improve build times by reducing the time it takes to get the game to the devkit.  Load times can be negatively impacted due to network latency and errors.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOneDeployMethod.Package">
      <summary>
        <para>Build the project as a package which is installed onto the console.</para>
        <para>A package build is required for certification submissions.  Games that take up a certain amount of disk space will be required to build as a streaming package.  Smaller games will be able to build as a non-streaming package if desired.  Please see the XDK documentation for more details.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOneDeployMethod.PackageStreaming">
      <summary>
        <para>Build the project as a package which is partially installed onto the console at first, and then has more chunks downloaded and installed while the game is running.</para>
        <para>A package build is required for certification submissions.  Games that take up a certain amount of disk space will be required to build as a streaming package.  Smaller games will be able to build as a non-streaming package if desired.  Please see the XDK documentation for more details.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MobileTextureSubtarget">
      <summary>
        <para>Compressed texture format for target build platform.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.Generic">
      <summary>
        <para>Don't override texture compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.DXT">
      <summary>
        <para>S3 texture compression, nonspecific to DXT variant. Supported on devices running Nvidia Tegra2 platform, including Motorala Xoom, Motorola Atrix, Droid Bionic, and others.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.PVRTC">
      <summary>
        <para>PowerVR texture compression. Available in devices running PowerVR SGX530/540 GPU, such as Motorola DROID series; Samsung Galaxy S, Nexus S, and Galaxy Tab; and others.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ATC">
      <summary>
        <para>ATI texture compression. Available on devices running Adreno GPU, including HTC Nexus One, Droid Incredible, EVO, and others.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ETC">
      <summary>
        <para>ETC1 texture compression (or RGBA16 for textures with alpha), supported by all devices.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ETC2">
      <summary>
        <para>ETC2 texture compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MobileTextureSubtarget.ASTC">
      <summary>
        <para>ASTC texture compression.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.WSASDK">
      <summary>
        <para>Specifies Windows SDK which used when building Windows Store Apps.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BlackBerryBuildType">
      <summary>
        <para>Build types available for BlackBerry.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BlackBerryBuildType.Debug">
      <summary>
        <para>Build type for local testing purposes.</para>
        <para>This BuildType requires a debug token to be imported in the editor and deployed to the device.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BlackBerryBuildType.Submission">
      <summary>
        <para>Signed build used for submission to BlackBerry AppWorld.</para>
        <para>This build should only be used for final submission.  When using submission builds you will not have access to any log files.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorUserBuildSettings">
      <summary>
        <para>User build settings for the Editor</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SwitchActiveBuildTarget(UnityEditor.BuildTarget)">
      <summary>
        <para>Select a new build target to be active.</para>
        <para>Has the same effect as changing the build target via the Build Player dialog in the editor.Changing the currently active build target will recompile all script files for the new platform and will reimport assets that are affected by the current platform setting (textures with platform-specific settings, for example).If the given target is a standalone target, calling SwitchActiveBuildTarget will also affect EditorUserBuildSettings.selectedStandaloneTarget.Note: This method is not available when running the Editor in batch mode.  This is because changing the build target requires recompiling script code for the given target which cannot be done while script code is executing (not a problem in in the editor as the operation is simply deferred but batch mode will immediately exit after having executed the designated script code).  To set the build target to use in batch mode, use the buildTarget command-line switch.</para>
      </summary>
      <returns>
        <para>True if the build target was successfully switched, false otherwise (for example, if license checks fail, files are missing, or if the user has cancelled the operation via the UI).</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.GetBuildLocation(UnityEditor.BuildTarget)">
      <summary>
        <para>Get the current location for the build.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SetBuildLocation(UnityEditor.BuildTarget,System.String)">
      <summary>
        <para>Set a new location for the build.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorUserBuildSettings.activeBuildTargetChanged">
      <summary>
        <para>Triggered in response to SwitchActiveBuildTarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.selectedBuildTargetGroup">
      <summary>
        <para>The currently selected build target group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.selectedStandaloneTarget">
      <summary>
        <para>The currently selected target for a standalone build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.psmBuildSubtarget">
      <summary>
        <para>PSM Build Subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.psp2BuildSubtarget">
      <summary>
        <para>PS Vita Build subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.ps4BuildSubtarget">
      <summary>
        <para>PS4 Build Subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.sceBuildSubtarget">
      <summary>
        <para>SCE Build subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.explicitNullChecks">
      <summary>
        <para>Are null references actively checked?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.needSubmissionMaterials">
      <summary>
        <para>Build submission materials.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.compressWithPsArc">
      <summary>
        <para>Build data compressed with PSArc.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.forceInstallation">
      <summary>
        <para>Force installation of package, even if error.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.enableHeadlessMode">
      <summary>
        <para>Enables a Linux headless build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.buildScriptsOnly">
      <summary>
        <para>Is build script only enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxBuildSubtarget">
      <summary>
        <para>Xbox Build subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxRunMethod">
      <summary>
        <para>Selected Xbox Run Method.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.streamingInstallLaunchRange">
      <summary>
        <para>When building an Xbox One Streaming Install package (makepkg.exe) The layout generation code in Unity will assign each scene and associated assets to individual chunks. Unity will mark scene 0 as being part of the launch range, IE the set of chunks required to launch the game, you may include additional scenes in this launch range if you desire, this specifies a range of scenes (starting at 0) to be included in the launch set.</para>
        <para>(NOTE: This option is meaningless for those using their own layout file, using a custom layout file is considered the correct way of handling more advanced packaging requirements).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxOneDeployMethod">
      <summary>
        <para>The currently selected Xbox One Deploy Method.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.androidBuildSubtarget">
      <summary>
        <para>Android platform options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.wsaGenerateReferenceProjects">
      <summary>
        <para>Generate and reference C# projects from your main solution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.blackberryBuildSubtarget">
      <summary>
        <para>The texture compression type to be used when building.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.blackberryBuildType">
      <summary>
        <para>The build type to be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.tizenBuildSubtarget">
      <summary>
        <para>The texture compression type to be used when building.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerStreamed">
      <summary>
        <para>Select the streaming option for a webplayer build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerOfflineDeployment">
      <summary>
        <para>Build the webplayer along with the UnityObject.js file (so it doesn't need to be downloaded).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.activeBuildTarget">
      <summary>
        <para>The currently active build target.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.activeScriptCompilationDefines">
      <summary>
        <para>DEFINE directives for the compiler.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.development">
      <summary>
        <para>Enables a development build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webGLOptimizationLevel">
      <summary>
        <para>Optimization level for WebGL.</para>
        <para>This is the optimization level passed to the emscripten compiler for WebGL builds (-On command line option). 1 results in slow performance but faster builds (recommended for iterating on problems). 2 results in fast performance but takes longer to build. 3 is slightly faster then 2, but takes very long to build (only recommended for final release builds).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.connectProfiler">
      <summary>
        <para>Start the player with a connection to the profiler.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.allowDebugging">
      <summary>
        <para>Enable source-level debuggers to connect.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.exportAsGoogleAndroidProject">
      <summary>
        <para>Export Android Project for use wih Android Studio or Eclipse.</para>
        <para>Best combined with Split Application Binary to ensure Streaming Assets are not compressed when building the final application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.symlinkLibraries">
      <summary>
        <para>Symlink runtime libraries with an iOS Xcode project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.installInBuildFolder">
      <summary>
        <para>Place the built player in the build folder.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetMoveResult">
      <summary>
        <para>Result of Asset move</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.DidNotMove">
      <summary>
        <para>Tells the internal implementation that the asset was not moved physically on disk by the script.</para>
        <para>This means that it is safe for the internal implementation to move the asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.FailedMove">
      <summary>
        <para>Tells the internal implementation that the script could not move the assets.</para>
        <para>Unity should not attempt to move the asset nor should it update its internal representation of the assets position on disk.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.DidMove">
      <summary>
        <para>Tells the internal implementation that the script moved the asset physically on disk.</para>
        <para>The internal implementation will not try to move the asset on disk, but will move it in the internal database to keep consistency.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetDeleteResult">
      <summary>
        <para>Result of Asset delete operation</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.DidNotDelete">
      <summary>
        <para>Tells the internal implementation that the callback did not delete the asset. The asset will be delete by the internal implementation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.FailedDelete">
      <summary>
        <para>Tells Unity that the file cannot be deleted and Unity should leave it alone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.DidDelete">
      <summary>
        <para>Tells Unity that the asset was deleted by the callback. Unity will not try to delete the asset, but will delete the cached version and preview file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ClipAnimationMaskType">
      <summary>
        <para>AnimationClip mask options for <see cref="ModelImporterClipAnimation">ModelImporterClipAnimation</see>.</para>
        <para>Mask can be used to specify which transforms animation should be imported when generating the clip.
</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.CreateFromThisModel">
      <summary>
        <para>A mask containing all the transform in the file will be created internally.</para>
        <para>For Humanoid rig, unity will convert all the transforms animation into muscle animation, these transforms cannot be edited in the mask.
</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.CopyFromOther">
      <summary>
        <para>Use a mask from your project to specify which transforms animation should be imported.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ClipAnimationInfoCurve">
      <summary>
        <para>Stores a curve and its name that will be used to create additionnal curves during the import process.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationInfoCurve.name">
      <summary>
        <para>The name of the animation curve.</para>
        <para>The curve is automatically binded to the animator controller parameter that has the same name.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationInfoCurve.curve">
      <summary>
        <para>The animation curve.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterClipAnimation">
      <summary>
        <para>Animation clips to split animation into.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.takeName">
      <summary>
        <para>Take name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.name">
      <summary>
        <para>Clip name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.firstFrame">
      <summary>
        <para>First frame of the clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lastFrame">
      <summary>
        <para>Last frame of the clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.wrapMode">
      <summary>
        <para>The wrap mode of the animation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loop">
      <summary>
        <para>Is the clip a looping animation?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.rotationOffset">
      <summary>
        <para>Offset in degrees to the root rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.heightOffset">
      <summary>
        <para>Offset to the vertical root position.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.cycleOffset">
      <summary>
        <para>Offset to the cycle of a looping animation, if a different time in it is desired to be the start.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loopTime">
      <summary>
        <para>Enable to make the clip loop.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loopPose">
      <summary>
        <para>Enable to make the motion loop seamlessly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootRotation">
      <summary>
        <para>Enable to make root rotation be baked into the movement of the bones. Disable to make root rotation be stored as root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootHeightY">
      <summary>
        <para>Enable to make vertical root motion be baked into the movement of the bones. Disable to make vertical root motion be stored as root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootPositionXZ">
      <summary>
        <para>Enable to make horizontal root motion be baked into the movement of the bones. Disable to make horizontal root motion be stored as root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalOrientation">
      <summary>
        <para>Keeps the vertical position as it is authored in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionY">
      <summary>
        <para>Keeps the vertical position as it is authored in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionXZ">
      <summary>
        <para>Keeps the vertical position as it is authored in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.heightFromFeet">
      <summary>
        <para>Keeps the feet aligned with the root transform position.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.mirror">
      <summary>
        <para>Mirror left and right in this clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskType">
      <summary>
        <para>Define mask type.</para>
        <para>A mask can be used to discard transform when importing a clip to reduce memory footprint for this clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskSource">
      <summary>
        <para>The AvatarMask used to mask transforms during the import process.</para>
        <para>A mask can be used to discard transform when importing a clip to reduce memory footprint for this clip. A source mask is only needed if ModelImporterClipAnimation.maskType is set to ClipAnimationMaskType.CopyFromOther
</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.events">
      <summary>
        <para>AnimationEvents that will be added during the import process.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.curves">
      <summary>
        <para>Additionnal curves that will be that will be added during the import process.</para>
        <para>They are automatically binded to the animator controller parameter that have the same name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskNeedsUpdating">
      <summary>
        <para>Returns true when the source AvatarMask has changed. This only happens when  <see cref="ModelImporterClipAnimation-maskType">ModelImporterClipAnimation.maskType</see> is set to <see cref="ClipAnimationMaskType.CopyFromOther">ClipAnimationMaskType.CopyFromOther</see>
To force a reload of the mask, simply set  <see cref="ModelImporterClipAnimation-maskSource">ModelImporterClipAnimation.maskSource</see> to the desired <see cref="Animations.AvatarMask">AvatarMask</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterGenerateMaterials">
      <summary>
        <para>Material generation options for <see cref="ModelImporter">ModelImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateMaterials.None">
      <summary>
        <para>Do not generate materials.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateMaterials.PerTexture">
      <summary>
        <para>Generate a material for each texture used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateMaterials.PerSourceMaterial">
      <summary>
        <para>Generate a material for each material in the source asset.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMaterialName">
      <summary>
        <para>Material naming options for <see cref="ModelImporter">ModelImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnTextureName">
      <summary>
        <para>Use material names in the form &amp;lt;textureName&amp;gt;.mat.</para>
        <para>Material names will be accepted in the form &amp;lt;textureName&amp;gt;.mat (ie, the diffuse texture name of the imported material) when searching for existing materials or creating new ones.If the imported material doesn't have a diffuse texture assigned then a name in the form &amp;lt;materialName&amp;gt;.mat will be used instead.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnMaterialName">
      <summary>
        <para>Use a material name of the form <i>&amp;lt;materialName&amp;gt;.mat</i>.</para>
        <para>Material names will be accepted in the form &amp;lt;materialName&amp;gt;.mat when searching for existing materials or creating new ones.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnModelNameAndMaterialName">
      <summary>
        <para>Use material names in the form <i>&amp;lt;modelFileName&amp;gt;-&amp;lt;materialName&amp;gt;.mat</i>.</para>
        <para>Material names will be accepted in the form &amp;lt;modelFileName&amp;gt;-&amp;lt;materialName&amp;gt;.mat when searching for existing materials or creating new ones.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnTextureName_Or_ModelNameAndMaterialName">
      <summary>
        <para>&amp;lt;textureName&amp;gt;.mat or &amp;lt;modelFileName&amp;gt;-&amp;lt;materialName&amp;gt;.mat material name.</para>
        <para>Name materials &amp;lt;textureName&amp;gt;.mat (i.e. diffuse texture name of imported material) when searching for existing or creating new materials. If material
doesn't have a texture or texture doesn't exist in Unity project folder in one of Textures folders, then material will be named
&amp;lt;modelFileName&amp;gt;-&amp;lt;materialName&amp;gt;.mat instead. This option has behaviour compatible with Unity 3.4 and earlier versions
(i.e. same behaviour as ModelImporterGenerateMaterials.PerTexture).
</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMaterialSearch">
      <summary>
        <para>Material search options for <see cref="ModelImporter">ModelImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.Local">
      <summary>
        <para>Searh in local Materials forlder.</para>
        <para>Unity will try to locate the material in local Materials folder, i.e. in path modelFilePath/Materials.
For example: if model is Assets/Model/MyModel.fbx, then it will try to locate the material in Assets/Model/Materials folder.
</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.RecursiveUp">
      <summary>
        <para>Recursive-up search in Materials forlders.</para>
        <para>Unity will perform a recursive-up search for the material in all Materials folders up to the Assets folder.
For example: if model is Assets/Model/MyModel.fbx, then it will try to locate the material in these folders in this order:
Assets/Model/Materials, Assets/Materials.
</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.Everywhere">
      <summary>
        <para>Searh in all project.</para>
        <para>Unity will search for the material in all folders of Unity project.
</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterTangentSpaceMode">
      <summary>
        <para>Animation generation options for <see cref="ModelImporter">ModelImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangentSpaceMode.Import">
      <summary>
        <para>Import normals/tangents from file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangentSpaceMode.Calculate">
      <summary>
        <para>Calculate normals/tangents.</para>
        <para>It is recommended to use Import mode as long as you can - use Calculate
only if you don't have normals/tangents in your file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangentSpaceMode.None">
      <summary>
        <para>Strip normals/tangents.</para>
        <para>If normals/tangents are not needed by all shaders, this can be a simple
way to reduce build size a little.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMeshCompression">
      <summary>
        <para>Mesh compression options for <see cref="ModelImporter">ModelImporter</see>.</para>
        <para>Compressing meshes saves space in the built game, but more compression
introduces more artifacts in vertex data.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Off">
      <summary>
        <para>No mesh compression (default).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Low">
      <summary>
        <para>Low amount of mesh compression.</para>
        <para>Vertex positions, normals/tangents and UVs will be quantized to
respectively 20, 8, 16 bits per component. Skinning information
will be compressed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Medium">
      <summary>
        <para>Medium amount of mesh compression.</para>
        <para>Vertex positions, normals/tangents and UVs will be quantized to
respectively 16, 8, 10 bits per component. Skinning information
will be compressed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.High">
      <summary>
        <para>High amount of mesh compression.</para>
        <para>Vertex positions, normals/tangents and UVs will be quantized to
respectively 10, 6, 8 bits per component. Skinning information
will be compressed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterAnimationCompression">
      <summary>
        <para>Animation compression options for <see cref="ModelImporter">ModelImporter</see>.</para>
        <para>Compressing animations saves space in the built game, but more compression
introduces more artifacts in the animations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.Off">
      <summary>
        <para>No animation compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReduction">
      <summary>
        <para>Perform keyframe reduction.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReductionAndCompression">
      <summary>
        <para>Perform keyframe reduction and compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.Optimal">
      <summary>
        <para>Perform keyframe reduction and choose the best animation curve representation at runtime to reduce memory footprint (default).</para>
        <para>Optimal is only available for generic and humanoid rig type.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterGenerateAnimations">
      <summary>
        <para>Animation generation options for <see cref="ModelImporter">ModelImporter</see>. These options relate to the legacy Animation system, they should only be used when ModelImporter.animationType==ModelImporterAnimationType.Legacy.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.None">
      <summary>
        <para>Do not generate animations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.GenerateAnimations">
      <summary>
        <para>Default animation import mode (All animations are stored in the root object).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InRoot">
      <summary>
        <para>Generate animations in the transform root objects.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InOriginalRoots">
      <summary>
        <para>Generate animations in the root objects of the animation package.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InNodes">
      <summary>
        <para>Generate animations in the objects that animate.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterAnimationType">
      <summary>
        <para>Animation mode for <see cref="ModelImporter">ModelImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.None">
      <summary>
        <para>Generate no animation data.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Legacy">
      <summary>
        <para>Generate a legacy animation type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Generic">
      <summary>
        <para>Generate a generic animator.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Human">
      <summary>
        <para>Generate a human animator.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TakeInfo">
      <summary>
        <para>A Takeinfo object contains all the information needed to describe a take.</para>
        <para>SA ModelImporter.importedTakeInfos.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.name">
      <summary>
        <para>Take name as define from imported file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.defaultClipName">
      <summary>
        <para>This is the default clip name for the clip generated for this take.</para>
        <para>Normally it should be the same than TakeInfo.name unless you are using the @ convention. In this case the default clip name should be set to the same value than the name after @ convention. Example: For Dude@run.fbx the default clip name will be run.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.startTime">
      <summary>
        <para>Start time in second.</para>
        <para>This is always the time of the first key in this take.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.stopTime">
      <summary>
        <para>Stop time in second.</para>
        <para>This is always the time of the last key in this take.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.bakeStartTime">
      <summary>
        <para>Start time in second.</para>
        <para>This is eiter the time of the first key or the start time for this take as define in your DCC tools.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.bakeStopTime">
      <summary>
        <para>Stop time in second.</para>
        <para>This is eiter the time of the last key or the stop time for this take as define in your DCC tools.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TakeInfo.sampleRate">
      <summary>
        <para>Sample rate of the take.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporter">
      <summary>
        <para>Model importer lets you modify <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Mesh.html">model</see> import settings from editor scripts.</para>
        <para>Settings of this class match the ones exposed in Mesh Import Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateMaterials">
      <summary>
        <para>Material generation options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importMaterials">
      <summary>
        <para>Import materials from file.</para>
        <para>When set to false ModelImporter will use default material (Default-Diffuse.mat) instead of imported materials,
otherwise it will find existing or create new materials based on materialName and materialSearch options.
</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.materialName">
      <summary>
        <para>Material naming setting.</para>
        <para>When importing new model Unity will generate material name based on this setting and then it will try to locate
existing material with such name, if no such material exists Unity will create a new material by that name.
</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.materialSearch">
      <summary>
        <para>Existing material search setting.</para>
        <para>When importing new model Unity will try to find existing materials in a set of folders based on this setting.
</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.globalScale">
      <summary>
        <para>Global scale factor for importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isUseFileUnitsSupported">
      <summary>
        <para>Is useFileUnits supported for this asset.</para>
        <para>UseFileUnits is supported only on .max files.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.useFileUnits">
      <summary>
        <para>Detect file units and import as 1FileUnit=1UnityUnit, otherwise it will import as 1cm=1UnityUnit.</para>
        <para>This setting is used only for .max files. It was introduced for backwards compatibility:
there is a bug in some FBX 2011 plugins - they fail to pick up file units and export everything
as 1unit=1cm. We fixed that problem by setting the units manually, but that breaks
projects which were built with FBX 2011 plugins already, so useFileUnits was introduced as a
solution. Set it to false if you want to default to centimeters in FBX exporter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.fileScale">
      <summary>
        <para>File scale factor (if available) or default one. (Read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isFileScaleUsed">
      <summary>
        <para>Is FileScale was used when importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importBlendShapes">
      <summary>
        <para>Controls import of BlendShapes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.addCollider">
      <summary>
        <para>Add <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-MeshCollider.html">mesh colliders</see> to imported meshes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.normalSmoothingAngle">
      <summary>
        <para>Smoothing angle (in degrees) for calculating normals.</para>
        <para>How sharp the edge has to be to be turned into a hard edge when calculating normals.
This setting is only used when normalImportMode is set to Calculate.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.splitTangentsAcrossSeams">
      <summary>
        <para>Should tangents be split across UV seams.</para>
        <para>This setting is only used when tangentImportMode is set to Calculate.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.swapUVChannels">
      <summary>
        <para>Swap primary and secondary UV channels when importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateSecondaryUV">
      <summary>
        <para>Generate secondary UV set for lightmapping.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVAngleDistortion">
      <summary>
        <para>Threshold for angle distortion (in degrees) when generating secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVAreaDistortion">
      <summary>
        <para>Threshold for area distortion when generating secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVHardAngle">
      <summary>
        <para>Hard angle (in degrees) for generating secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVPackMargin">
      <summary>
        <para>Margin to be left between charts when packing secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateAnimations">
      <summary>
        <para>Animation generation options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importedTakeInfos">
      <summary>
        <para>Generates the list of all imported take.</para>
        <para>SA TakeInfo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.transformPaths">
      <summary>
        <para>Generates the list of all imported Transforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.referencedClips">
      <summary>
        <para>Generates the list of all imported Animations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isReadable">
      <summary>
        <para>Are mesh vertices and indices accessible from script?</para>
        <para>Making a mesh readable will keep two copies of it in memory, one for rendering and one
in system memory for script access. Setting isReadable to false therefore saves memory.
Scaling a mesh with different amounts along the three axes (i.e. non-uniform scaling)
requires the mesh to be readable for correct lighting.In the Unity editor access is always permitted when not in play mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.optimizeMesh">
      <summary>
        <para>Vertex optimization setting.</para>
        <para>The vertices and indices will be reordered for better GPU performance.
Techniques that require strict vertex ordering like mesh morphing or special particle mesh emitter effects should have this option disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.normalImportMode">
      <summary>
        <para>Normals import mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.tangentImportMode">
      <summary>
        <para>Tangents import mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.bakeIK">
      <summary>
        <para>Bake Inverse Kinematics (IK) when importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isBakeIKSupported">
      <summary>
        <para>Is Bake Inverse Kinematics (IK) supported by this importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isTangentImportSupported">
      <summary>
        <para>Is import of tangents supported by this importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.meshCompression">
      <summary>
        <para>Mesh compression setting.</para>
        <para>Compressing meshes saves space in the built game, but more compression
introduces more artifacts in vertex data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importAnimation">
      <summary>
        <para>Import animation from file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.optimizeGameObjects">
      <summary>
        <para>Animation optimization setting.</para>
        <para>In the GameObjects hierarchy of a character, the GameObjects which only contain Transform component, will be optimized out unless they are specified in extraExposedTransformPaths for better CPU performance. The remaining GameObjects hierarchy will be flattened.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.extraExposedTransformPaths">
      <summary>
        <para>Animation optimization setting.</para>
        <para>Specify the paths of the Transforms which are not supposed to be optimized out when optimizeGameObjects is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationCompression">
      <summary>
        <para>Animation compression setting.</para>
        <para>Compressing animations saves space in the built game, but more compression
introduces more artifacts in the animation data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationRotationError">
      <summary>
        <para>Allowed error of animation rotation compression.</para>
        <para>Allowed error is defined in angle (in degrees) between compressed and
original quaternions on a curve. This settings used only when animation keyframe
reduction is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationPositionError">
      <summary>
        <para>Allowed error of animation position compression.</para>
        <para>Allowed error is defined in distance (in percents) between compressed and
original positions on a curve. This settings used only when animation keyframe
reduction is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationScaleError">
      <summary>
        <para>Allowed error of animation scale compression.</para>
        <para>Allowed error is defined in distance (in percents) between compressed and
original scale on a curve. This settings used only when animation keyframe
reduction is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationWrapMode">
      <summary>
        <para>The default wrap mode for the generated animation clips.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationType">
      <summary>
        <para>Animator generation mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.motionNodeName">
      <summary>
        <para>The path of the transform used to generation the motion of the animation.</para>
        <para>Path should look like this : "Reference/Root".</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.sourceAvatar">
      <summary>
        <para>Imports the HumanDescription from the given Avatar.</para>
        <para>This is the same as using Copy from Other Avatar in the inspector. The Avatar must be attached to an importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.humanDescription">
      <summary>
        <para>The human description that is used to generate an Avatar during the import process.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.clipAnimations">
      <summary>
        <para>Animation clips to split animation into.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.defaultClipAnimations">
      <summary>
        <para>Generate a list of all default animation clip based on TakeInfo.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterFormat">
      <summary>
        <para>Imported texture format for <see cref="TextureImporter">TextureImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticCompressed">
      <summary>
        <para>Choose a compressed format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.Automatic16bit">
      <summary>
        <para>Choose a 16 bit format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticTruecolor">
      <summary>
        <para>Choose a Truecolor format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticCrunched">
      <summary>
        <para>Choose a crunched format automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT1">
      <summary>
        <para>DXT1 compresed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT5">
      <summary>
        <para>DXT5 compresed texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGB16">
      <summary>
        <para>RGB 16 bit texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGB24">
      <summary>
        <para>RGB 24 bit texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.Alpha8">
      <summary>
        <para>Alpha 8 bit texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ARGB16">
      <summary>
        <para>RGBA 16 bit texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBA32">
      <summary>
        <para>RGBA 32 bit texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ARGB32">
      <summary>
        <para>ARGB 32 bit texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBA16">
      <summary>
        <para>RGBA 16 bit (4444) texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT1Crunched">
      <summary>
        <para>DXT1 compresed texture format with crunch compression for small storage sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT5Crunched">
      <summary>
        <para>DXT5 compresed texture format with crunch compression for small storage sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB2">
      <summary>
        <para>PowerVR (iPhone) 2 bits/pixel compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA2">
      <summary>
        <para>PowerVR (iPhone) 2 bits/pixel compressed with alpha channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB4">
      <summary>
        <para>PowerVR (iPhone) 4 bits/pixel compressed color texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA4">
      <summary>
        <para>PowerVR (iPhone) 4 bits/pixel compressed with alpha channel texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC_RGB4">
      <summary>
        <para>ETC (GLES2.0) 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATC_RGB4">
      <summary>
        <para>ATC (Android) 4 bits/pixel compressed RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATC_RGBA8">
      <summary>
        <para>ATC (Android) 8 bits/pixel compressed RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_R">
      <summary>
        <para>ETC2/EAC compressed 4 bits / pixel unsigned R texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_R_SIGNED">
      <summary>
        <para>ETC2/EAC compressed 4 bits / pixel signed R texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_RG">
      <summary>
        <para>ETC2/EAC compressed 8 bits / pixel unsigned RG texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_RG_SIGNED">
      <summary>
        <para>ETC2/EAC compressed 4 bits / pixel signed RG texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4">
      <summary>
        <para>ETC2 compressed 4 bits / pixel RGB texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA">
      <summary>
        <para>ETC2 compressed 4 bits / pixel RGB + 1-bit alpha texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGBA8">
      <summary>
        <para>ETC2 compressed 8 bits / pixel RGBA texture format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_4x4">
      <summary>
        <para>ASTC compressed RGB texture format, 4x4 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_5x5">
      <summary>
        <para>ASTC compressed RGB texture format, 5x5 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_6x6">
      <summary>
        <para>ASTC compressed RGB texture format, 6x6 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_8x8">
      <summary>
        <para>ASTC compressed RGB texture format, 8x8 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_10x10">
      <summary>
        <para>ASTC compressed RGB texture format, 10x10 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_12x12">
      <summary>
        <para>ASTC compressed RGB texture format, 12x12 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_4x4">
      <summary>
        <para>ASTC compressed RGBA texture format, 4x4 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_5x5">
      <summary>
        <para>ASTC compressed RGBA texture format, 5x5 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_6x6">
      <summary>
        <para>ASTC compressed RGBA texture format, 6x6 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_8x8">
      <summary>
        <para>ASTC compressed RGBA texture format, 8x8 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_10x10">
      <summary>
        <para>ASTC compressed RGBA texture format, 10x10 block size.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_12x12">
      <summary>
        <para>ASTC compressed RGBA texture format, 12x12 block size.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterMipFilter">
      <summary>
        <para>Mip map filter for <see cref="TextureImporter">TextureImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterMipFilter.BoxFilter">
      <summary>
        <para>Box mipmap filter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterMipFilter.KaiserFilter">
      <summary>
        <para>Kaiser mipmap filter.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterGenerateCubemap">
      <summary>
        <para>Cubemap generation mode for <see cref="TextureImporter">TextureImporter</see>.</para>
        <para>Cubemap textures can be generated from 2D texture using one of these modes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.None">
      <summary>
        <para>Do not generate cubemap (default).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.Spheremap">
      <summary>
        <para>Generate cubemap from spheremap texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.Cylindrical">
      <summary>
        <para>Generate cubemap from cylindrical texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.FullCubemap">
      <summary>
        <para>Generate cubemap from vertical or horizontal cross texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.AutoCubemap">
      <summary>
        <para>Automatically determine type of cubemap generation from the source image.</para>
        <para>This picks cylindrical, spheremap, cross or 6-face layout based on the aspect ratio of the source image.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterNPOTScale">
      <summary>
        <para>Scaling mode for non power of two textures in <see cref="TextureImporter">TextureImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.None">
      <summary>
        <para>Keep non power of two textures as is.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToNearest">
      <summary>
        <para>Scale to nearest power of two.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToLarger">
      <summary>
        <para>Scale to larger power of two.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToSmaller">
      <summary>
        <para>Scale to smaller power of two.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterNormalFilter">
      <summary>
        <para>Normal map filtering mode for <see cref="TextureImporter">TextureImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNormalFilter.Standard">
      <summary>
        <para>Standard normal map filter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNormalFilter.Sobel">
      <summary>
        <para>Sobel normal map filter.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterType">
      <summary>
        <para>Select this to set basic parameters depending on the purpose of your texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Image">
      <summary>
        <para>This is the most common setting used for all the textures in general.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Bump">
      <summary>
        <para>Select this to turn the color channels into a format suitable for real-time normal mapping.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.GUI">
      <summary>
        <para>Use this if your texture is going to be used on any HUD/GUI Controls.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Sprite">
      <summary>
        <para>Select this if you will be using your texture for Sprite graphics.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Cursor">
      <summary>
        <para>Use this if your texture is going to be used as a cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Cubemap">
      <summary>
        <para>This converts your texture into Cubemap suitable for Skyboxes, Environment Reflections or Image Based Lighting (IBL).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Cookie">
      <summary>
        <para>This sets up your texture with the basic parameters used for the Cookies of your lights.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Lightmap">
      <summary>
        <para>This sets up your texture with the parameters used by the lightmap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Advanced">
      <summary>
        <para>Select this when you want to have specific parameters on your texture and you want to have total control over your texture.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpriteImportMode">
      <summary>
        <para>Texture importer modes for Sprite import.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.None">
      <summary>
        <para>Graphic is not a Sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.Single">
      <summary>
        <para>Sprite is a single image section extracted automatically from the texture.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpriteMetaData">
      <summary>
        <para>Editor data used in producing a Sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.name">
      <summary>
        <para>Name of the Sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.rect">
      <summary>
        <para>Bounding rectangle of the sprite's graphic within the atlas image.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.alignment">
      <summary>
        <para>Edge-relative alignment of the sprite graphic.</para>
        <para>The possible values relate to the SpriteAlignment enum as follows:Center = 0, TopLeft = 1, TopCenter = 2, TopRight = 3, LeftCenter = 4, RightCenter = 5, BottomLeft = 6, BottomCenter = 7, BottomRight = 8, Custom = 9.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.pivot">
      <summary>
        <para>Pivot point of the Sprite relative to its bounding rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.border">
      <summary>
        <para>Edge border size for a sprite (in pixels).</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporter">
      <summary>
        <para>Texture importer lets you modify <see cref="Texture2D">Texture2D</see> import settings from editor scripts.</para>
        <para>Settings of this class match the ones exposed in Texture Import Settings.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat,System.Int32)">
      <summary>
        <para>Set specific target platform settings.</para>
        <para>The options for the platform string can be found by referencing the BuildTarget page.  String-encode the member names.</para>
      </summary>
      <param name="platform">The platforms whose settings are to be changed (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format for the texture.</param>
      <param name="compressionQuality">Value from 0..100, equivalent to the standard JPEG quality setting.</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat)">
      <summary>
        <para>Set specific target platform settings.</para>
        <para>The options for the platform string can be found by referencing the BuildTarget page.  String-encode the member names.</para>
      </summary>
      <param name="platform">The platforms whose settings are to be changed (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format for the texture.</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.ClearPlatformTextureSettings(System.String)">
      <summary>
        <para>Clear specific target platform settings.</para>
        <para>The options for the platform string are "Web", "Standalone", "iPhone" and "Android".</para>
      </summary>
      <param name="platform">The platform whose settings are to be cleared (see below).</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.DoesSourceTextureHaveAlpha">
      <summary>
        <para>Does textures source image have alpha channel.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.DoesSourceTextureHaveColor">
      <summary>
        <para>Does textures source image have RGB channels.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.ReadTextureSettings(UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Read texture settings into <see cref="TextureImporterSettings">TextureImporterSettings</see> class.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetTextureSettings(UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Set texture importers settings from <see cref="TextureImporterSettings">TextureImporterSettings</see> class.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureFormat">
      <summary>
        <para>Format of imported texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.maxTextureSize">
      <summary>
        <para>Maximum texture size.</para>
        <para>Larger textures will be scaled down to this size at import time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.compressionQuality">
      <summary>
        <para>Quality of Texture Compression in the range [0..100].</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.grayscaleToAlpha">
      <summary>
        <para>Generate alpha channel from intensity?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.generateCubemap">
      <summary>
        <para>Cubemap generation mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.npotScale">
      <summary>
        <para>Scaling mode for non power of two textures.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.isReadable">
      <summary>
        <para>Is texture data readable from scripts.</para>
        <para>Texture has to be set as "readable" in order for Texture2D.GetPixel, Texture2D.GetPixels and similar functions
to work. Textures are not set as readable by default.When texture is not readable, it consumes much less memory, because a system-memory copy does not have
to be kept around after texture is uploaded to the graphics API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapEnabled">
      <summary>
        <para>Generate mip maps for the texture?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.borderMipmap">
      <summary>
        <para>Keep texture borders the same when generating mipmaps?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.linearTexture">
      <summary>
        <para>When in linear rendering should this texture be sampled with hardware gamma correction (sRGB) or without (linear)?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFilter">
      <summary>
        <para>Mipmap filtering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.fadeout">
      <summary>
        <para>Fade out mip levels to gray color?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceStart">
      <summary>
        <para>Mip level where texture begins to fade out.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceEnd">
      <summary>
        <para>Mip level where texture is faded out completely.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.generateMipsInLinearSpace">
      <summary>
        <para>Should mip maps be generated with gamma correction?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.convertToNormalmap">
      <summary>
        <para>Convert heightmap to normal map?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.normalmap">
      <summary>
        <para>Is this texture a normal map?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.normalmapFilter">
      <summary>
        <para>Normal map filtering mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.heightmapScale">
      <summary>
        <para>Amount of bumpyness in the heightmap.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.lightmap">
      <summary>
        <para>Is this texture a lightmap?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.anisoLevel">
      <summary>
        <para>Anisotropic filtering level of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.filterMode">
      <summary>
        <para>Filtering mode of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.wrapMode">
      <summary>
        <para>Wrap mode (Repeat or Clamp) of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipMapBias">
      <summary>
        <para>Mip map bias of the texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.qualifiesForSpritePacking">
      <summary>
        <para>Returns true if this <see cref="TextureImporter">TextureImporter</see> is setup for Sprite packing.</para>
        <para>If it returns true, texture is imported uncompressed for Sprite packing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spriteImportMode">
      <summary>
        <para>Selects Single or Manual import mode for Sprite textures.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritesheet">
      <summary>
        <para>Array representing the sections of the atlas corresponding to individual sprite graphics.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePackingTag">
      <summary>
        <para>Selects the <see cref="Sprite">Sprite</see> packing tag.</para>
        <para>Sprites with compatible tags are packed into atlases.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePixelsPerUnit">
      <summary>
        <para>The number of pixels in the sprite that correspond to one unit in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePixelsToUnits">
      <summary>
        <para>Scale factor for mapping pixels in the graphic to units in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePivot">
      <summary>
        <para>The point in the Sprite object's coordinate space where the graphic is located.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spriteBorder">
      <summary>
        <para>Border sizes of the generated sprites.</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureType">
      <summary>
        <para>Which type of texture are we dealing with here.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterSettings">
      <summary>
        <para>Stores settings of a <see cref="TextureImporter">TextureImporter</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.Equal(UnityEditor.TextureImporterSettings,UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Test texture importer settings for equality.</para>
        <para>Objects are reported equal if either the references or the values are equal.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.CopyTo(UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Copy parameters into another TextureImporterSettings object.</para>
      </summary>
      <param name="target">TextureImporterSettings object to copy settings to.</param>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.ApplyTextureType(UnityEditor.TextureImporterType,System.Boolean)">
      <summary>
        <para>Configure parameters to import a texture for a purpose of <i>type</i>, as described <see cref="TextureImporterType">here</see>.</para>
      </summary>
      <param name="type">Texture type. See <see cref="TextureImporterType">TextureImporterType</see>.</param>
      <param name="applyAll">If <c>false</c>, change only specific properties. Exactly which, depends on <i>type</i>.</param>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.rgbm">
      <summary>
        <para>RGBM encoding mode for HDR textures in <see cref="TextureImporter">TextureImporter</see>.</para>
        <para>HDR texture data (i.e. coming from .exr or .hdr files) can be encoded into RGBM format by Unity. This setting controls how the encoding is done. Default is "Auto", which means do RGBM encoding when source data is HDR.RGBM encoding packs [0;8] range into [0;1] with multiplier stored in the alpha channel. Final value is RGB*A*8.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.cubemapConvolution">
      <summary>
        <para>Convolution mode.</para>
        <para>Defines if Cubemap texture is useful for skybox, image based diffuse lighting or specular reflections.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.cubemapConvolutionSteps">
      <summary>
        <para>Defines how many different Phong exponents to store in mip maps. Higher value will give better transition between glossy and rough reflections, but will need higher texture resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.cubemapConvolutionExponent">
      <summary>
        <para>Defines how fast Phong exponent wears off in mip maps. Higher value will apply less blur to high resolution mip maps.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteMode">
      <summary>
        <para>Sprite texture import mode.</para>
        <para>This value corresponds to the SpriteImportMode enum as follows:None = 0, Single = 1, Manual = 2.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePixelsPerUnit">
      <summary>
        <para>The number of pixels in the sprite that correspond to one unit in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePixelsToUnits">
      <summary>
        <para>Scale factor between pixels in the sprite graphic and world space units.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteExtrude">
      <summary>
        <para>The number of blank pixels to leave between the edge of the graphic and the mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteAlignment">
      <summary>
        <para>Edge-relative alignment of the sprite graphic.</para>
        <para>The possible values relate to the SpriteAlignment enum as follows:Center = 0, TopLeft = 1, TopCenter = 2, TopRight = 3, LeftCenter = 4, RightCenter = 5, BottomLeft = 6, BottomCenter = 7, BottomRight = 8, Custom = 9.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePivot">
      <summary>
        <para>Pivot point of the Sprite relative to its graphic's rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteBorder">
      <summary>
        <para>Border sizes of the generated sprites.</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AudioSampleRateSetting">
      <summary>
        <para>The sample rate setting used within the AudioImporter. This defines the sample rate conversion of audio on import.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioSampleRateSetting.PreserveSampleRate">
      <summary>
        <para>Do not change the sample rate of the imported audio file. The sample rate will be preserved for the imported AudioClip.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioSampleRateSetting.OptimizeSampleRate">
      <summary>
        <para>Let Unity deduce the optimal sample rate for the AudioClip being imported. The audio file will be analysed and a minimal sample rate chosen while still preserving audio quality.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioSampleRateSetting.OverrideSampleRate">
      <summary>
        <para>Override the sample rate of the imported audio file with a custom value.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AudioImporterSampleSettings">
      <summary>
        <para>This structure contains a collection of settings used to define how an AudioClip should be imported.

This  structure is used with the AudioImporter to define how the AudioClip should be imported and treated during loading within the scene.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.loadType">
      <summary>
        <para>LoadType defines how the imported AudioClip data should be loaded.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.sampleRateSetting">
      <summary>
        <para>Defines how the sample rate is modified (if at all) of the importer audio file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.sampleRateOverride">
      <summary>
        <para>Target sample rate to convert to when samplerateSetting is set to OverrideSampleRate.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.compressionFormat">
      <summary>
        <para>CompressionFormat defines the compression type that the audio file is encoded to. Different compression types have different performance and audio artifact characteristics.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterSampleSettings.quality">
      <summary>
        <para>Audio compression quality (0-1)

Amount of compression. The value roughly corresponds to the ratio between the resulting and the source file sizes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AudioImporter">
      <summary>
        <para>Audio importer lets you modify <see cref="AudioClip">AudioClip</see> import settings from editor scripts.</para>
        <para>Settings of this class match the ones exposed in Audio Import Settings.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AudioImporter.ContainsSampleSettingsOverride(System.String)">
      <summary>
        <para>Returns whether a given build target has its sample settings currently overridden.</para>
        <para>The options for the platform string are "WebPlayer", "Standalone", "iOS", "Android", "WebGL", "PS3", "PS4", "PSP2", "XBox360", "XBoxOne", "WP8", "Samsung TV".</para>
      </summary>
      <param name="platform">The platform to query if this AudioImporter has an override for.</param>
      <returns>
        <para>Returns true if the platform is currently overriden in this AudioImporter.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AudioImporter.GetOverrideSampleSettings(System.String)">
      <summary>
        <para>Return the current override settings for the given platform.</para>
        <para>If there is no override for the passed platform, a defaults translated settings will be returned.The translated settings are what settings will be used by default for the given platform. For example, on some platforms, the compressionFormat will be different to capitalise on hardware decoders.The options for the platform string are "WebPlayer", "Standalone", "iOS", "Android", "WebGL", "PS3", "PS4", "PSP2", "XBox360", "XBoxOne", "WP8", "Samsung TV".</para>
      </summary>
      <param name="platform">The platform to get the override settings for.</param>
      <returns>
        <para>The override sample settings for the given platform.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AudioImporter.SetOverrideSampleSettings(System.String,UnityEditor.AudioImporterSampleSettings)">
      <summary>
        <para>Sets the override sample settings for the given platform.</para>
        <para>For some target platforms, it is desirable to override the audio importer settings to performance or other reasons. This function allows a given platform to have override settings registered.The options for the platform string are "WebPlayer", "Standalone", "iOS", "Android", "WebGL", "PS3", "PS4", "PSP2", "XBox360", "XBoxOne", "WP8", "Samsung TV".</para>
      </summary>
      <param name="platform">The platform which will have the sample settings overridden.</param>
      <param name="settings">The override settings for the given platform.</param>
      <returns>
        <para>Returns true if the settings were successfully overriden. Some setting overrides are not possible for the given platform, in which case false is returned and the settings are not registered.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AudioImporter.ClearSampleSettingOverride(System.String)">
      <summary>
        <para>Clears the sample settings override for the given platform.</para>
        <para>This reverts the given platform override sample override settings, making that platform use the defaultSampleSettings.The options for the platform string are "WebPlayer", "Standalone", "iOS", "Android", "WebGL", "PS3", "PS4", "PSP2", "XBox360", "XBoxOne", "WP8", "Samsung TV".</para>
      </summary>
      <param name="platform">The platform to clear the overrides for.</param>
      <returns>
        <para>Returns true if any overrides were actually cleared.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.AudioImporter.defaultSampleSettings">
      <summary>
        <para>The default sample settings for the AudioClip importer.</para>
        <para>These are the default settings for the AudioClip. If there are no overrides defined for a given build target, these settings will be used as the baseline for that platform.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.forceToMono">
      <summary>
        <para>Force this clip to mono?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.loadInBackground">
      <summary>
        <para>Corresponding to the "Load In Background" flag in the AudioClip inspector, when this flag is set, the loading of the clip will happen delayed without blocking the main thread.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.preloadAudioData">
      <summary>
        <para>Preloads audio data of the clip when the clip asset is loaded. When this flag is off, scripts have to call AudioClip.LoadAudioData() to load the data before the clip can be played. Properties like length, channels and format are available before the audio data has been loaded.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.compressionBitrate">
      <summary>
        <para>Compression bitrate.</para>
        <para>This value is in bits/second, e.g. 128000 would be 128 kbps.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MovieImporter">
      <summary>
        <para>AssetImporter for importing MovieTextures.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.quality">
      <summary>
        <para>Quality setting to use when importing the movie. This is a float value from 0 to 1.</para>
        <para>0 uses strongest compression for small download sizes.
1 uses best quality resulting in larger files.
This corresponds directly to the slider in the MovieImporter inspector. The default value is 0.5.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.linearTexture">
      <summary>
        <para>Is this a linear texture or an sRGB texture (Only used when performing linear rendering).</para>
        <para>The default value is sRGB.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.duration">
      <summary>
        <para>Duration of the Movie to be imported in seconds.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.FontTextureCase">
      <summary>
        <para>Texture case constants for TrueTypeFontImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.Dynamic">
      <summary>
        <para>Render characters into font texture at runtime as needed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.Unicode">
      <summary>
        <para>Import a set of Unicode characters common for latin scripts.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCII">
      <summary>
        <para>Import basic ASCII character set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCIIUpperCase">
      <summary>
        <para>Only import upper case ASCII character set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCIILowerCase">
      <summary>
        <para>Only import lower case ASCII character set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.CustomSet">
      <summary>
        <para>Custom set of characters.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.FontRenderingMode">
      <summary>
        <para>Font rendering mode constants for TrueTypeFontImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.Smooth">
      <summary>
        <para>Use Anti-Aliased Font rendering. When using dynamic fonts, this is the mode which is fastest in rendering font textures.</para>
        <para>This mode looks very similar to the font rendering on Mac OS X.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.HintedSmooth">
      <summary>
        <para>Use Anti-Aliased Font rendering with hinting. This forces character lines to run along pixel boundaries, and generally produces.</para>
        <para>A crisper output then FontRenderingMode.Smooth, more similar to the font rendering used on Windows. It is slower to render
textures then when using smooth mode, but may be easier to read for small font sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.HintedRaster">
      <summary>
        <para>Use hinted font rendering without anti-aliasing. This is the crispest font rendering option, and may be most readable for small.</para>
        <para>Font sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.OSDefault">
      <summary>
        <para>Use the OS default font rendering mode. This selects either <see cref="FontRenderingMode.HintedSmooth">FontRenderingMode.HintedSmooth</see> or.</para>
        <para>FontRenderingMode.HintedRaster on Windows, and either FontRenderingMode.Smooth or
FontRenderingMode.HintedRaster on Mac OS X, depending on the system preferences. This mode
is only available for dynamic fonts, as static fonts are generated at build time.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MeshUtility">
      <summary>
        <para>Various utilities for mesh manipulation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MeshUtility.SetPerTriangleUV2(UnityEngine.Mesh,UnityEngine.Vector2[])">
      <summary>
        <para>Will insert per-triangle uv2 in mesh and handle vertex splitting etc.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MeshUtility.SetMeshCompression(UnityEngine.Mesh,UnityEditor.ModelImporterMeshCompression)">
      <summary>
        <para>Change the mesh compression setting for a mesh.</para>
        <para>This allows you to enable mesh compression for meshes created from scripting, which have not been generated by the ModelImporter. That way you can generate compressed mesh assets from code.</para>
      </summary>
      <param name="mesh">The mesh to set the compression mode for.</param>
      <param name="compression">The compression mode to set.</param>
    </member>
    <member name="M:UnityEditor.MeshUtility.GetMeshCompression(UnityEngine.Mesh)">
      <summary>
        <para>Returns the mesh compression setting for a Mesh.</para>
      </summary>
      <param name="mesh">The mesh to get information on.</param>
    </member>
    <member name="M:UnityEditor.MeshUtility.Optimize(UnityEngine.Mesh)">
      <summary>
        <para>Optimizes the mesh for GPU access.</para>
        <para>This operation might take a while but will make the geometry displayed be faster.
You should use it if you generate a mesh from scratch procedurally and you want to trade better runtime performance against higher load time. 
Internally it converts the mesh to triangle list and optimizes the triangles and vertices for both pre and post transform cache locality.
For imported models you should never call this as the import pipeline already does it for you.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ArrayUtility">
      <summary>
        <para>Helpers for builtin arrays ...</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ArrayUtility.ArrayEquals``1(``0[],``0[])">
      <summary>
        <para>Compares two arrays.</para>
      </summary>
      <returns>
        <para>True if both have the same number of elements and the contents are equal.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>
        <para>Find the index of the first element that satisfies the predicate.</para>
      </summary>
      <returns>
        <para>The zero-based index of the first occurrence of the element, if found; otherwise, ï¿½1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.IndexOf``1(``0[],``0)">
      <summary>
        <para>Index of first element with value <i>value</i>.</para>
      </summary>
      <returns>
        <para>The zero-based index of the element, if found; otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.LastIndexOf``1(``0[],``0)">
      <summary>
        <para>Index of the last element with value <i>value</i>.</para>
      </summary>
      <returns>
        <para>The zero-based index of the element, if found; otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Contains``1(``0[],``0)">
      <summary>
        <para>Determines if the array contains the item.</para>
      </summary>
      <returns>
        <para>True if <i>item</i> is in <i>array</i>, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.UnwrapParam">
      <summary>
        <para>Unwrapping settings.</para>
        <para>Use them only if you fully understand what they mean.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.angleError">
      <summary>
        <para>Maximum allowed angle distortion (0..1).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.areaError">
      <summary>
        <para>Maximum allowed area distortion (0..1).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.hardAngle">
      <summary>
        <para>This angle (in degrees) or greater between triangles will cause seam to be created.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.packMargin">
      <summary>
        <para>How much uv-islands will be padded.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Unwrapping">
      <summary>
        <para>This class holds everything you may need in regard to uv-unwrapping.</para>
        <para>WARNING: preliminary interface, will be changed in future versions
e.g. in future it will contain possibility to pack your uvs optimally etc.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh)">
      <summary>
        <para>Will generate per-triangle uv (3 uv pairs for each triangle) with default settings.</para>
        <para>You'll need to merge them yourself.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
      <summary>
        <para>Will generate per-triangle uv (3 uv pairs for each triangle) with provided settings.</para>
        <para>You'll need to merge them yourself.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh)">
      <summary>
        <para>Will auto generate uv2 with default settings for provided mesh, and fill them in.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
      <summary>
        <para>Will auto generate uv2 with provided settings for provided mesh, and fill them in.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StaticOcclusionCulling">
      <summary>
        <para>StaticOcclusionCulling lets you perform static occlusion culling operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.GenerateInBackground">
      <summary>
        <para>Used to compute static occlusion culling data asynchronously.</para>
        <para>The memory limit (specified in bytes) is a hint to the PVS baking system about the likely memory requirements.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.Cancel">
      <summary>
        <para>Used to cancel asynchronous generation of static occlusion culling data.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.Clear">
      <summary>
        <para>Clears the PVS of the opened scene.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.isRunning">
      <summary>
        <para>Used to check if asynchronous generation of static occlusion culling data is still running.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.doesSceneHaveManualPortals">
      <summary>
        <para>Does the scene contain any occlusion portals that were added manually rather than automatically?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.umbraDataSize">
      <summary>
        <para>Returns the size in bytes that the PVS data is currently taking up in this scene on disk.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StaticOcclusionCullingVisualization">
      <summary>
        <para>Used to visualize static occlusion culling at development time in scene view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showOcclusionCulling">
      <summary>
        <para>If set to true, visualization of target volumes is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPreVisualization">
      <summary>
        <para>If set to true, the visualization lines of the PVS volumes will show all cells rather than cells after culling.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showViewVolumes">
      <summary>
        <para>If set to true, visualization of view volumes is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPortals">
      <summary>
        <para>If set to true, visualization of portals is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showVisibilityLines">
      <summary>
        <para>If set to true, visualization of portals is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showGeometryCulling">
      <summary>
        <para>If set to true, culling of geometry is enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PluginImporter">
      <summary>
        <para>Represents plugin importer.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithAnyPlatform(System.Boolean)">
      <summary>
        <para>Set compatiblity with any platform.</para>
        <para>When checking if plugin is compatible, Unity will first check PluginImporter.GetCompatibleWithAnyPlatform value, if it returns false - PluginImporter.GetCompatibleWithPlatform will be used instead.
</para>
      </summary>
      <param name="enable">Is plugin compatible with any platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithAnyPlatform">
      <summary>
        <para>Is plugin comptabile with any platform.</para>
        <para>When checking if plugin is compatible, Unity will first check PluginImporter.GetCompatibleWithAnyPlatform value, if it returns false - PluginImporter.GetCompatibleWithPlatform will be used instead.
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithEditor(System.Boolean)">
      <summary>
        <para>Set compatiblity with any editor.</para>
      </summary>
      <param name="enable">Is plugin compatible with editor.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithEditor">
      <summary>
        <para>Is plugin compatible with editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithPlatform(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Set compatiblity with specified platform.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="enable">Is plugin compatible with specified platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithPlatform(UnityEditor.BuildTarget)">
      <summary>
        <para>Is plugin compatible with specified platform.</para>
      </summary>
      <param name="platform">Target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetCompatibleWithPlatform(System.String,System.Boolean)">
      <summary>
        <para>Set compatiblity with specified platform.</para>
      </summary>
      <param name="enable">Is plugin compatible with specified platform.</param>
      <param name="platformName">Target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetCompatibleWithPlatform(System.String)">
      <summary>
        <para>Is plugin compatible with specified platform.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetPlatformData(UnityEditor.BuildTarget,System.String,System.String)">
      <summary>
        <para>Set platform specific data.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="key">Key value for data.</param>
      <param name="value">Data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetPlatformData(UnityEditor.BuildTarget,System.String)">
      <summary>
        <para>Get platform specific data.</para>
      </summary>
      <param name="platform">Target platform.</param>
      <param name="key">Key value for data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetPlatformData(System.String,System.String,System.String)">
      <summary>
        <para>Set platform specific data.</para>
      </summary>
      <param name="key">Key value for data.</param>
      <param name="value">Data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetPlatformData(System.String,System.String)">
      <summary>
        <para>Get platform specific data.</para>
      </summary>
      <param name="key">Key value for data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.SetEditorData(System.String,System.String)">
      <summary>
        <para>Set editor specific data.</para>
      </summary>
      <param name="key">Key value for data.</param>
      <param name="value">Data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetEditorData(System.String)">
      <summary>
        <para>Returns editor specific data for specified key.</para>
      </summary>
      <param name="key">Key value for data.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetAllImporters">
      <summary>
        <para>Returns all plugin importers for all platforms.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetImporters(System.String)">
      <summary>
        <para>Returns all plugin importers for specfied platform.</para>
      </summary>
      <param name="platformName">Name of the target platform.</param>
    </member>
    <member name="M:UnityEditor.PluginImporter.GetImporters(UnityEditor.BuildTarget)">
      <summary>
        <para>Returns all plugin importers for specfied platform.</para>
      </summary>
      <param name="platform">Target platform.</param>
    </member>
    <member name="P:UnityEditor.PluginImporter.isNativePlugin">
      <summary>
        <para>Is plugin native or managed? Note: C++ libraries with CLR support are treated as native plugins, because Unity cannot load such libraries. You can still access them via P/Invoke.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ShaderUtil">
      <summary>
        <para>Utility functions to assist with working with shaders from the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyCount(UnityEngine.Shader)">
      <summary>
        <para>Get the number of properties in Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyDescription(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Get the description of the shader propery at index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyName(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Get the name of the shader propery at index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyType(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Get the ShaderProperyType of the shader propery at index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetRangeLimits(UnityEngine.Shader,System.Int32,System.Int32)">
      <summary>
        <para>Get Limits for a range property at index propertyIdx of Shader s.</para>
      </summary>
      <param name="defminmax">Which value to get: 0 = default, 1 = min, 2 = max.</param>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetTexDim(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Gets the ShaderPropertyTexDim of the texture at property index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.IsShaderPropertyHidden(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Is the shader propery at index propertyIdx of Shader s hidden?</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="P:UnityEditor.ShaderUtil.hardwareSupportsRectRenderTexture">
      <summary>
        <para>Does the current hardware support render textues.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ShaderUtil+ShaderPropertyType">
      <summary>
        <para>Type of a given texture property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Color">
      <summary>
        <para>Color Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Vector">
      <summary>
        <para>Vector Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Float">
      <summary>
        <para>Float Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Range">
      <summary>
        <para>Range Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.TexEnv">
      <summary>
        <para>Texture Property.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ShaderUtil+ShaderPropertyTexDim">
      <summary>
        <para>Representation of the texture dimensions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimUnknown">
      <summary>
        <para>Unknown Texture dimension.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDim2D">
      <summary>
        <para>2D Texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDim3D">
      <summary>
        <para>3D Texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimCUBE">
      <summary>
        <para>Texure Cube (Cubemap).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimAny">
      <summary>
        <para>Any texture dimension (catch all).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimRECT">
      <summary>
        <para>Texture Rect.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ResolutionDialogSetting">
      <summary>
        <para>Resolution dialog setting.</para>
        <para>This enum is used when setting the behaviour of the resolution dialog in PlayerSettings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.Disabled">
      <summary>
        <para>Never show the resolution dialog.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.Enabled">
      <summary>
        <para>Show the resolution dialog on first launch.</para>
        <para>A setting in the dialog allows the user to hide it. The user can see the dialog subsequently by holding the option/alt key (Mac) or shift key (Windows) at application launch.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.HiddenByDefault">
      <summary>
        <para>Hide the resolution dialog on first launch.</para>
        <para>The user can see the dialog subsequently by holding the option/alt key (Mac) or shift key (Window) at application launch.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptingImplementation">
      <summary>
        <para>Scripting implementation (backend).</para>
        <para>Certain platforms might offer multiple scripting backends.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.Mono2x">
      <summary>
        <para>The standard Mono 2.6 runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.IL2CPP">
      <summary>
        <para>Unity's .NET runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.WinRTDotNET">
      <summary>
        <para>Microsoft's .NET runtime.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AspectRatio">
      <summary>
        <para>Aspect ratio.</para>
        <para>This enum is used when modifying and inspecting supported aspect ratios in PlayerSettings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.AspectOthers">
      <summary>
        <para>Undefined aspect ratios.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect4by3">
      <summary>
        <para>4:3 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect5by4">
      <summary>
        <para>5:4 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect16by10">
      <summary>
        <para>16:10 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect16by9">
      <summary>
        <para>16:9 aspect ratio.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MacFullscreenMode">
      <summary>
        <para>Mac fullscreen mode.</para>
        <para>This defines how fullscreen mode is handled on Mac OS X Standalones.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.CaptureDisplay">
      <summary>
        <para>Capture the display.</para>
        <para>In this mode Unity will capture the display and change the hardware resolution to the requested mode.
No other UI content can appear, and it is not possible to switch to other applications while in fullscreen mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
        <para>In this mode, Unity will create a window which is covering the whole screen. It will always run at desktop
resolution, and other requested resolutions will be scaled up. OS UI will correctly show on top of the fullscreen
window (such as IME input windows, GameCenter or Mac App Store UI, Battery warnings, etc).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindowWithDockAndMenuBar">
      <summary>
        <para>Fullscreen window with Dock and Menu bar.</para>
        <para>Same as Fullscreen window mode, but Unity will also show the Menu bar and Dock if the cursor moves to the 
edges of the screen, like other OS X fullscreen Apps. It is possible to switch between fullscreen and windowed 
modes using the fullscreen button in the window title bar (or in the menu bar in fullscreen mode), and it is possible to switch to other Applications using trackpad swipes or Cmd-Tab.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.D3D9FullscreenMode">
      <summary>
        <para>Direct3D 9 fullscreen mode.</para>
        <para>This defines how fullscreen mode is handled in Windows standalone builds when using Direct3D 9.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D9FullscreenMode.ExclusiveMode">
      <summary>
        <para>Exclusive mode.</para>
        <para>In this mode Unity will change the monitor resolution and claim exclusive use of the target display.
Note that monitor selection is not available from the startup dialog when using exclusive mode. Also, run in background is not supported when the player is minimized.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D9FullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
        <para>In this mode, Unity will create a window which is covering the whole screen. It will always run at desktop resolution, and other requested resolutions will be scaled up. OS UI will correctly show on top of the fullscreen window (such as IME input windows).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.D3D11FullscreenMode">
      <summary>
        <para>Direct3D 11 fullscreen mode.</para>
        <para>This defines how fullscreen mode is handled in Windows standalone builds when using Direct3D 11.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D11FullscreenMode.ExclusiveMode">
      <summary>
        <para>Exclusive mode.</para>
        <para>In this mode Unity will change the monitor resolution and claim exclusive use of the target display.
Note that monitor selection is not available from the startup dialog when using exclusive mode. Also, run in background is not supported when the player is minimized.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D11FullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
        <para>In this mode, Unity will create a window which is covering the whole screen. It will always run at desktop resolution, and other requested resolutions will be scaled up. OS UI will correctly show on top of the fullscreen window (such as IME input windows).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StrippingLevel">
      <summary>
        <para>Managed code stripping level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.Disabled">
      <summary>
        <para>Managed code stripping is disabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.StripAssemblies">
      <summary>
        <para>Unused parts of managed code are stripped away.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.StripByteCode">
      <summary>
        <para>Managed method bodies are stripped away. AOT platforms only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.UseMicroMSCorlib">
      <summary>
        <para>Lightweight mscorlib version will be used at expense of limited compatibility.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptCallOptimizationLevel">
      <summary>
        <para>Script call optimization level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptCallOptimizationLevel.SlowAndSafe">
      <summary>
        <para>Default setting.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptCallOptimizationLevel.FastButNoExceptions">
      <summary>
        <para>Script method call overhead decreased at the expense of limited compatibility.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSSdkVersion">
      <summary>
        <para>Supported iOS SDK versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSSdkVersion.DeviceSDK">
      <summary>
        <para>Device SDK.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSSdkVersion.SimulatorSDK">
      <summary>
        <para>Simulator SDK.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSTargetOSVersion">
      <summary>
        <para>Supported iOS deployment versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_0">
      <summary>
        <para>iOS 4.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_1">
      <summary>
        <para>iOS 4.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_2">
      <summary>
        <para>iOS 4.2.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_3">
      <summary>
        <para>iOS 4.3.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_5_0">
      <summary>
        <para>iOS 5.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_5_1">
      <summary>
        <para>iOS 5.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_6_0">
      <summary>
        <para>iOS 6.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_7_0">
      <summary>
        <para>iOS 7.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_7_1">
      <summary>
        <para>iOS 7.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_8_0">
      <summary>
        <para>iOS 8.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_8_1">
      <summary>
        <para>iOS 8.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.Unknown">
      <summary>
        <para>Unknown iOS version, managed by user.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSTargetDevice">
      <summary>
        <para>Target iOS device.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPhoneOnly">
      <summary>
        <para>iPhone/iPod Only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPadOnly">
      <summary>
        <para>iPad Only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPhoneAndiPad">
      <summary>
        <para>Universal : iPhone/iPod + iPad.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSShowActivityIndicatorOnLoading">
      <summary>
        <para>Activity Indicator on loading.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.WhiteLarge">
      <summary>
        <para>White Large.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.White">
      <summary>
        <para>White.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.Gray">
      <summary>
        <para>Gray.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.DontShow">
      <summary>
        <para>Don't Show.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidTargetDevice">
      <summary>
        <para>Target Android device architecture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.FAT">
      <summary>
        <para>All supported architectures.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.ARMv7">
      <summary>
        <para>ARMv7 only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.x86">
      <summary>
        <para>Intel only.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidSdkVersions">
      <summary>
        <para>Supported Android SDK versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel9">
      <summary>
        <para>Android 2.3.1, "Gingerbread", API level 9.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel10">
      <summary>
        <para>Android 2.3.3, "Gingerbread", API level 10.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel11">
      <summary>
        <para>Android 3.0, "Honeycomb", API level 11.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel12">
      <summary>
        <para>Android 3.1, "Honeycomb", API level 12.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel13">
      <summary>
        <para>Android 3.2, "Honeycomb", API level 13.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel14">
      <summary>
        <para>Android 4.0, "Ice Cream Sandwich", API level 14.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel15">
      <summary>
        <para>Android 4.0.3, "Ice Cream Sandwich", API level 15.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel16">
      <summary>
        <para>Android 4.1, "Jelly Bean", API level 16.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel17">
      <summary>
        <para>Android 4.2, "Jelly Bean", API level 17.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel18">
      <summary>
        <para>Android 4.3, "Jelly Bean", API level 18.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel19">
      <summary>
        <para>Android 4.4, "KitKat", API level 19.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel21">
      <summary>
        <para>Android 5.0, "Lollipop", API level 21.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidPreferredInstallLocation">
      <summary>
        <para>Preferred application install location.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.Auto">
      <summary>
        <para>Let the OS decide, app doesn't have any preferences.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.PreferExternal">
      <summary>
        <para>Prefer external, if possible. Install to internal otherwise.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.ForceInternal">
      <summary>
        <para>Force installation into internal memory. Needed for things like Live Wallpapers.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidShowActivityIndicatorOnLoading">
      <summary>
        <para>Application should show ActivityIndicator when loading.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Large">
      <summary>
        <para>Large.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedLarge">
      <summary>
        <para>Inversed Large.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Small">
      <summary>
        <para>Small.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedSmall">
      <summary>
        <para>Inversed Small.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.DontShow">
      <summary>
        <para>Don't Show.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidGamepadSupportLevel">
      <summary>
        <para>Gamepad support level for Android TV.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidGamepadSupportLevel.SupportsDPad">
      <summary>
        <para>Game is fully operational with a D-pad, no gamepad needed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidGamepadSupportLevel.SupportsGamepad">
      <summary>
        <para>Works with a gamepad, but does not require it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidGamepadSupportLevel.RequiresGamepad">
      <summary>
        <para>Requires a gamepad for gameplay.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSTargetResolution">
      <summary>
        <para>Deployment target iOS device resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.Native">
      <summary>
        <para>Native device resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.ResolutionAutoPerformance">
      <summary>
        <para>Auto (Best Performane).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.ResolutionAutoQuality">
      <summary>
        <para>Auto (Best Quality).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.Resolution320p">
      <summary>
        <para>320p (iPhone).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.Resolution640p">
      <summary>
        <para>640p (iPhone Retina Display).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.Resolution768p">
      <summary>
        <para>768p (iPad).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UIOrientation">
      <summary>
        <para>Default mobile device orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.Portrait">
      <summary>
        <para>Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.PortraitUpsideDown">
      <summary>
        <para>Portrait upside down.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.LandscapeRight">
      <summary>
        <para>Landscape: clockwise from Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.LandscapeLeft">
      <summary>
        <para>Landscape : counter-clockwise from Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.AutoRotation">
      <summary>
        <para>Auto Rotation Enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSStatusBarStyle">
      <summary>
        <para>iOS status bar style.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.Default">
      <summary>
        <para>Default.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.BlackTranslucent">
      <summary>
        <para>Black translucent.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.BlackOpaque">
      <summary>
        <para>Black opaque.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidSplashScreenScale">
      <summary>
        <para>Android splash screen scale modes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.Center">
      <summary>
        <para>Center.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFit">
      <summary>
        <para>Scale to fit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFill">
      <summary>
        <para>Scale to fill.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ApiCompatibilityLevel">
      <summary>
        <para>.NET API compatibility level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0">
      <summary>
        <para>.NET 2.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0_Subset">
      <summary>
        <para>.NET 2.0 Subset.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.XboxOneEncryptionLevel">
      <summary>
        <para>A set of encryption levels that can be passed to makepkg.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOneEncryptionLevel.None">
      <summary>
        <para>Equivalent to passing the /lu flag to makepkg.</para>
        <para>Use this to request no encryption be used when constructing your streaming install package.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOneEncryptionLevel.DevkitCompatible">
      <summary>
        <para>Equivalent to the default encryption settings for makepkg.</para>
        <para>This is a testing option useful for testing a fully ship ready streaming install package. This is however not to be considered shippable.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOneEncryptionLevel.FullEncryption">
      <summary>
        <para>Equivalent to passing /l to makepkg.exe.</para>
        <para>This is retail level encryption and should be used on your ready to ship product.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.XboxOnePackageUpdateGranularity">
      <summary>
        <para>The update granularity types a package can be built with.</para>
        <para>This cooresponds to the parameters for the makepkg tool's /updcompat option.  Please see the XDK documentation for details.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOnePackageUpdateGranularity.Chunk">
      <summary>
        <para>Package is built so updates occur per chunk.  The same as "/updcompat 1" for makepkg.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOnePackageUpdateGranularity.File">
      <summary>
        <para>Package is built so updates occur per file.  The same as "/updcompat 2" for makepkg.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ActionOnDotNetUnhandledException">
      <summary>
        <para>The behavior in case of unhandled .NET exception.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ActionOnDotNetUnhandledException.SilentExit">
      <summary>
        <para>Silent exit in case of unhandled .NET exception (no Crash Report generated).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ActionOnDotNetUnhandledException.Crash">
      <summary>
        <para>Crash in case of unhandled .NET exception (Crash Report will be generated).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings">
      <summary>
        <para>Player Settings is where you define various parameters for the final game that you will build in Unity. Some of these values are used in the Resolution Dialog that launches when you open a standalone game.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetIconsForTargetGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns the list of assigned icons for the specified platform.</para>
        <para>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform.
Each texture in the returned array correspond to the corresponding entry in the list of icon sizes returned by GetIconSizesForTargetGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetIconsForTargetGroup(UnityEditor.BuildTargetGroup,UnityEngine.Texture2D[])">
      <summary>
        <para>Assign a list of icons for the specified platform.</para>
        <para>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform.
The list will only be assigned if it has the same length as the list of icon sizes returned by GetIconSizesForTargetGroup
and if the specified platform is supported in this editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetIconSizesForTargetGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a list of icon sizes for the specified platform.</para>
        <para>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform.
Use this function to get the sizes to use for the specified platform, where each size specifies both the width and height in pixels.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetGraphicsAPIs(UnityEditor.BuildTarget)">
      <summary>
        <para>Get graphics APIs to be used on a build platform.</para>
        <para>By default each platform is using "automatic" graphics API detection and picks the best available one (see GetUseDefaultGraphicsAPIs). However it is possible to change that to explicitly limit the graphics APIs used via SetGraphicsAPIs.</para>
      </summary>
      <param name="platform">Platform to get APIs for.</param>
      <returns>
        <para>Array of graphics APIs.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetGraphicsAPIs(UnityEditor.BuildTarget,UnityEngine.Rendering.GraphicsDeviceType[])">
      <summary>
        <para>Set graphics APIs to be used on a build platform.</para>
        <para>By default each platform is using "automatic" graphics API detection and picks the best available one (see SetUseDefaultGraphicsAPIs). However it is possible to change that to explicitly limit the graphics APIs used. The passed APIs will be tried in the order they are given, and first available one will be used.</para>
      </summary>
      <param name="platform">Platform to set APIs for.</param>
      <param name="apis">Array of graphics APIs.</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget)">
      <summary>
        <para>Is a build platform using automatic graphics API choice?</para>
        <para>By default each platform is using "automatic" graphics API detection and picks the best available one. However it is possible to change that to explicitly limit the graphics APIs used, see SetGraphicsAPIs.</para>
      </summary>
      <param name="platform">Platform to get the flag for.</param>
      <returns>
        <para>Should best available graphics API be used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetUseDefaultGraphicsAPIs(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Should a build platform use automatic graphics API choice.</para>
        <para>By default each platform is using "automatic" graphics API detection and picks the best available one. However it is possible to change that to explicitly limit the graphics APIs used, see SetGraphicsAPIs.</para>
      </summary>
      <param name="platform">Platform to set the flag for.</param>
      <param name="automatic">Should best available graphics API be used?</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Get user-specified symbols for script compilation for the given build target group.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup,System.String)">
      <summary>
        <para>Set user-specified symbols for script compilation for the given build target group.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetPropertyInt(System.String,System.Int32)">
      <summary>
        <para>Sets a PlayerSettings named int property.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value of the property (int).</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetPropertyInt(System.String,System.Int32,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Sets a PlayerSettings named int property.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value of the property (int).</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyInt(System.String)">
      <summary>
        <para>Returns a PlayerSettings named int property (with an optional build target it should apply to).</para>
      </summary>
      <param name="name">Name of the property.</param>
      <returns>
        <para>The current value of the property.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyInt(System.String,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a PlayerSettings named int property (with an optional build target it should apply to).</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
      <returns>
        <para>The current value of the property.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetPropertyBool(System.String,System.Boolean)">
      <summary>
        <para>Sets a PlayerSettings named bool property.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value of the property (bool).</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetPropertyBool(System.String,System.Boolean,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Sets a PlayerSettings named bool property.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value of the property (bool).</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyBool(System.String)">
      <summary>
        <para>Returns a PlayerSettings named bool property (with an optional build target it should apply to).</para>
      </summary>
      <param name="name">Name of the property.</param>
      <returns>
        <para>The current value of the property.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyBool(System.String,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a PlayerSettings named bool property (with an optional build target it should apply to).</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
      <returns>
        <para>The current value of the property.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetPropertyString(System.String,System.String)">
      <summary>
        <para>Sets a PlayerSettings named string property.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value of the property (string).</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetPropertyString(System.String,System.String,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Sets a PlayerSettings named string property.</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="value">Value of the property (string).</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyString(System.String)">
      <summary>
        <para>Returns a PlayerSettings named string property (with an optional build target it should apply to).</para>
      </summary>
      <param name="name">Name of the property.</param>
      <returns>
        <para>The current value of the property.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetPropertyString(System.String,UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a PlayerSettings named string property (with an optional build target it should apply to).</para>
      </summary>
      <param name="name">Name of the property.</param>
      <param name="target">BuildTarget for which the property should apply (use default value BuildTargetGroup.Unknown to apply to all targets).</param>
      <returns>
        <para>The current value of the property.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.PlayerSettings.HasAspectRatio(UnityEditor.AspectRatio)">
      <summary>
        <para>Returns whether or not the specified aspect ratio is enabled.</para>
        <para>Aspect Ratios selectable in the Resolution Dialog will be monitor-supported resolutions of enabled items from this list.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetAspectRatio(UnityEditor.AspectRatio,System.Boolean)">
      <summary>
        <para>Enables the specified aspect ratio.</para>
        <para>Aspect Ratios selectable in the Resolution Dialog will be monitor-supported resolutions of enabled items from this list.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.companyName">
      <summary>
        <para>The name of your company.</para>
        <para>This is used to locate the preferences file.Custom player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.productName">
      <summary>
        <para>The name of your product.</para>
        <para>This will appear on the menu bar when your game is running and is used to locate the preferences file.Custom player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.showUnitySplashScreen">
      <summary>
        <para>Should the builtin Unity splash screen be shown?</para>
        <para>When true and for platforms with Professional License, the Unity splash screen (without Personal Edition mark) will show before your first level is loaded and run.Note: When building to a platform in which you do not have a Unity Professional license, the player will always show the Unity splash screen with Personal Edition mark, regardless of this property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.cloudProjectId">
      <summary>
        <para>A unique cloud project identifier. It is unique for every project (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.colorSpace">
      <summary>
        <para>Set the color space for the current project.</para>
        <para>This is a slow process and may cause a reimport of some assets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultScreenWidth">
      <summary>
        <para>Default horizontal dimension of stand-alone player window.</para>
        <para>Custom player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultScreenHeight">
      <summary>
        <para>Default vertical dimension of stand-alone player window.</para>
        <para>Custom player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultWebScreenWidth">
      <summary>
        <para>Default horizontal dimension of web player window.</para>
        <para>Custom player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultWebScreenHeight">
      <summary>
        <para>Default vertical dimension of web player window.</para>
        <para>Custom player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.displayResolutionDialog">
      <summary>
        <para>Defines the behaviour of the Resolution Dialog on product launch.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultIsFullScreen">
      <summary>
        <para>If enabled, the game will default to fullscreen mode.</para>
        <para>The Windowed checkbox on the Resolution Dialog will be disabled by default when this setting is enabled.Custom player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.runInBackground">
      <summary>
        <para>If enabled, your game will continue to run after lost focus.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.captureSingleScreen">
      <summary>
        <para>Defines if fullscreen games should darken secondary displays.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.usePlayerLog">
      <summary>
        <para>Write a log file with debugging information.</para>
        <para>This is useful to find out what happened if there are problems with your game.
When publishing games for Apple's Mac App Store, it is recommended to turn this off,
because Apple may reject your submission otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.resizableWindow">
      <summary>
        <para>Use resizable window in standalone player builds.</para>
        <para>By default standalone Windows, Mac and Linux builds use a non-resizable
game window. Enabling this makes the window resizable.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bakeCollisionMeshes">
      <summary>
        <para>Pre bake collision meshes on player build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useMacAppStoreValidation">
      <summary>
        <para>Enable receipt validation for the Mac App Store.</para>
        <para>This enables receipt validation for the Mac App Store. If this is enabled, your game will
only run when it contains a valid receipt from the Mac App Store. Use this when submitting
games to Apple for publishing on the App Store. This prevents people from running the game
on any computer then the one it was purchased on.Note that this feature does not implement any strong copy protection. In particular, any potential
crack against one Unity game would work against any other Unity content. For this reason, it is
recommended that you implement your own receipt validation code on top of this using Unity's
plugin feature. However, since Apple requires plugin validation to initially happen before showing
the screen setup dialog, you should still enable this check, or Apple might reject your submission.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.macFullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in Mac OS X standalones.</para>
        <para>Set this to change how fullscreen mode is handled in Mac OS X standalone games. See MacFullscreenMode
for description on the possible modes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.d3d9FullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in Windows standalones (Direct3D 9 mode).</para>
        <para>Set this to change how fullscreen mode is handled in Windows standalone builds with Direct3D 9. See D3D9FullscreenMode for descriptions of the possible modes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.d3d11FullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in Windows standalones (Direct3D 11 mode).</para>
        <para>Set this to change how fullscreen mode is handled in Windows standalone builds with Direct3D 11. See D3D11FullscreenMode for descriptions of the possible modes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.virtualRealitySupported">
      <summary>
        <para>Enable virtual reality support.</para>
        <para>When enabled, the virtual reality module is used if possible.  This causes a reload of graphics resources.  Extra VR specific dependencies are included in platform builds which support VR.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.visibleInBackground">
      <summary>
        <para>On Windows, show the application in the background if Fullscreen Windowed mode is used.</para>
        <para>This setting is used with the Fullscreen Windowed mode. If this setting is false and you Alt-Tab out of the application, it will minimize. If this setting is true, the application will not minimize and remain visible behind other windows.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.forceSingleInstance">
      <summary>
        <para>Restrict standalone players to a single concurrent running instance.</para>
        <para>This detects at startup whether another instance of the same player is already running,
and aborts with an error message if so.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.firstStreamedLevelWithResources">
      <summary>
        <para>First level to have access to all Resources.Load assets in Streamed Web Players.</para>
        <para>Use this variable to specify the index of the first level that will have access to all Resources.Load assets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.resolutionDialogBanner">
      <summary>
        <para>The image to display in the Resolution Dialog window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iPhoneBundleIdentifier">
      <summary>
        <para>The bundle identifier of the iPhone application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.keystorePass">
      <summary>
        <para>Password used for interacting with the Android Keystore.</para>
        <para>This is the password for retrieving and updating the keys inside a particular keystore (known as [-storepass &amp;lt;storepass&amp;gt;] on the keytool/jarsigner command line).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.keyaliasPass">
      <summary>
        <para>Password for the key used for signing an Android application.</para>
        <para>This is the password for signing an application with a particular key (known as [-keypass &amp;lt;keypass&amp;gt;] on the keytool/jarsigner command line).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxTitleId">
      <summary>
        <para>Xbox 360 title id.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxImageXexFilePath">
      <summary>
        <para>Xbox 360 ImageXex override configuration file path.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxSpaFilePath">
      <summary>
        <para>Xbox 360 SPA file path.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxGenerateSpa">
      <summary>
        <para>Xbox 360 auto-generation of _SPAConfig.cs.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectResources">
      <summary>
        <para>Xbox 360 Kinect resource file deployment.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectHeadOrientation">
      <summary>
        <para>Xbox 360 Kinect Head Orientation file deployment.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectHeadPosition">
      <summary>
        <para>Xbox 360 Kinect Head Position file deployment.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxSplashScreen">
      <summary>
        <para>Xbox 360 splash screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableKinect">
      <summary>
        <para>Xbox 360 Kinect title flag - if false, the Kinect APIs are inactive.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableKinectAutoTracking">
      <summary>
        <para>Xbox 360 Kinect automatic skeleton tracking.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableSpeech">
      <summary>
        <para>Xbox 360 Kinect Enable Speech Engine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxSpeechDB">
      <summary>
        <para>Xbox 360 Kinect Speech DB.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.gpuSkinning">
      <summary>
        <para>Enable GPU skinning on capable platforms.</para>
        <para>DX11, OpenGL ES 3.0 and Xbox 360 can do mesh skinning on the GPU.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableAvatar">
      <summary>
        <para>Xbox 360 Avatars.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.enableInternalProfiler">
      <summary>
        <para>Enables internal profiler.</para>
        <para>Enables the internal profiler which collects performance data of the application and prints a report to the console. The report contains the number of milliseconds that it took for each Unity subsystem to execute on each frame. The data is averaged across 30 frames.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.actionOnDotNetUnhandledException">
      <summary>
        <para>Sets the crash behavior on .NET unhandled exception.</para>
        <para>The options are `ActionOnDotNetUnhandledException.Crash` (the application crashes hardly and forces iOS to generate a crash report that can be submitted to iTunes by app users and inspected by developers) and `ActionOnDotNetUnhandledException.Silent Exit` (the application exits gracefully).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.logObjCUncaughtExceptions">
      <summary>
        <para>Are ObjC uncaught exceptions logged?</para>
        <para>Enables a custom Objective-C Uncaught Exception handler, which will print exception information to console.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.enableCrashReportAPI">
      <summary>
        <para>Enables CrashReport API.</para>
        <para>Enables a custom crash reporter to capture crashes. Crash logs will be available to scripts via CrashReport API.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.locationUsageDescription">
      <summary>
        <para>Describes the reason for access to the user's location data.</para>
        <para>When the OS prompts the user to allow access to the location data, this text is displayed as part of the dialog box.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bundleIdentifier">
      <summary>
        <para>Application bundle identifier shared between iOS &amp;amp; Android platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bundleVersion">
      <summary>
        <para>Application bundle version shared between iOS &amp;amp; Android platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.statusBarHidden">
      <summary>
        <para>Should status bar be hidden. Shared between iOS &amp;amp; Android platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.strippingLevel">
      <summary>
        <para>Managed code stripping level.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultInterfaceOrientation">
      <summary>
        <para>Default screen orientation for mobiles.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortrait">
      <summary>
        <para>Is auto-rotation to portrait supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortraitUpsideDown">
      <summary>
        <para>Is auto-rotation to portrait upside-down supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeRight">
      <summary>
        <para>Is auto-rotation to landscape right supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeLeft">
      <summary>
        <para>Is auto-rotation to landscape left supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useAnimatedAutorotation">
      <summary>
        <para>Let the OS autorotate the screen as the device orientation changes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.use32BitDisplayBuffer">
      <summary>
        <para>32-bit Display Buffer is used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.targetIOSGraphics">
      <summary>
        <para>iOS Graphics API.</para>
        <para>Please note, that if you pick non-automatic (i.e. forced graphics API), UIRequiredDeviceCapabilities in Info.plist would also be updated and the device selection will be limited on the App Store.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.apiCompatibilityLevel">
      <summary>
        <para>.NET API compatibility level.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stripUnusedMeshComponents">
      <summary>
        <para>Should unused <see cref="Mesh">Mesh</see> components be excluded from game build?</para>
        <para>When this setting is on, Mesh components (e.g. tangent vectors, vertex colors etc.)
that are not in use will be removed. This is good for game data size and runtime performance.However, be aware of this flag if you're switching shaders on some objects at runtime.
For example, if a mesh uses a simple Diffuse shader when building the game, Unity will remove
tangent vectors since they are not needed. If you'd want to switch to a bumpmapped shader
on this mesh at runtime, you will not get proper tangent data since it was removed!</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.advancedLicense">
      <summary>
        <para>Is the advanced version being used?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.aotOptions">
      <summary>
        <para>Additional AOT compilation options. Shared by AOT platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.accelerometerFrequency">
      <summary>
        <para>Accelerometer update frequency.</para>
        <para>Note: build-time option. Has no effect if changed when application is already running.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.MTRendering">
      <summary>
        <para>Is multi-threaded rendering enabled?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.renderingPath">
      <summary>
        <para>Which rendering path is enabled?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useDirect3D11">
      <summary>
        <para>Should Direct3D 11 be used when available?</para>
        <para>Using DX11 enables more modern graphics features, like Compute Shaders,
tessellation shaders and other shader model 4.0-5.0 features.This flag is specific to Windows Editor, Standalone and Web Player builds.When set to true, Unity will try to use the Direct3D 11 graphics API (which works on Windows Vista
or later OS, and DX10+ level GPU). If that is not available (e.g. DX9 level GPU or Windows XP),
Direct3D 9 will be used instead.When set to false, Direct3D 9 API will be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stereoscopic3D">
      <summary>
        <para>Should player render in stereoscopic 3d on supported hardware?</para>
        <para>This means player will attempt to use Direct3D 11.1 stereoscopic rendering feature and split the main camera into two virtual eyes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+XboxOne">
      <summary>
        <para>Xbox One Specific Player Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.ProductId">
      <summary>
        <para>Xbox One Product ID to use when building a streaming install package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.UpdateKey">
      <summary>
        <para>Xbox One makepkg.exe option. Specifies the update key required when building game updates.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.SandboxId">
      <summary>
        <para>Xbox One makepkg option. Specifies the Sandbox ID to be used when building a streaming install package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.ContentId">
      <summary>
        <para>Xbox One Content ID to be used in constructing game package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.TitleId">
      <summary>
        <para>The TitleID uniquely identifying your title to Xbox Live services.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.SCID">
      <summary>
        <para>The service configuration ID for your title.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.EnableVariableGPU">
      <summary>
        <para>Turns on notifications that you are gaining/losing GPU resources.</para>
        <para>By opting in you are potentially gaining access to an additional 5% of GPU resources. An example of this being when a snapped app is opened or closed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.DisableKinectGpuReservation">
      <summary>
        <para>Disabling the kinect frees up additional GPU resources for use.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.GameOsOverridePath">
      <summary>
        <para>(optional override) Location of Xbox One Game OS image file to link into ERA package being created.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.PackagingOverridePath">
      <summary>
        <para>Xbox One optional parameter that causes the makepkg process to use your specified layout file rather than generating one for you. Required if working with asset bundles.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.PackagingEncryption">
      <summary>
        <para>Xbox One optional parameter that causes the makepkg process to encrypt the package for performance testing or with final retail encryption.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.PackageUpdateGranularity">
      <summary>
        <para>The update granularity the package will be built with.</para>
        <para>This cooresponds to the makepkg tool's /updcompat option.  Please see the XDK documentation for details.The default value is XboxOnePackageUpdateGranularity.File.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.AppManifestOverridePath">
      <summary>
        <para>Xbox One optional parameter that lets you use a specified Manifest file rather than generated for you.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.IsContentPackage">
      <summary>
        <para>Indicates if the game is a standalone game or a content package to an existing game.</para>
        <para>The properties in the manifest file will be different between the two options. When this is true you will be building a content package and the properties will contain a Content Manifest section. When it is unchecked there will be a Application Manifest section instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.Version">
      <summary>
        <para>Xbox One Version Identifier used in the Application Manifest.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.Description">
      <summary>
        <para>A friendly description that can be displayed to users.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.SocketNames">
      <summary>
        <para>Get the names of the socket descriptions for the project.</para>
        <para>The returned list will have the names you see in Player Settings &amp;gt; Xbox One &amp;gt; Publishing Settings &amp;gt; Configured Sockets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.AllowedProductIds">
      <summary>
        <para>Get the list of projects that can load this content package.  This setting is only available for content packages.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+XboxOne.PersistentLocalStorageSize">
      <summary>
        <para>Sets the size of the persistent local storage.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PS3">
      <summary>
        <para>PS3 specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.ps3SplashScreen">
      <summary>
        <para>Texture to use for PS3 Splash Screen on boot.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.videoMemoryForVertexBuffers">
      <summary>
        <para>The amount of video memory (in MB) that is set aside for vertex data allocations. Allocations which do not fit into the area are allocated from system memory.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.videoMemoryForAudio">
      <summary>
        <para>Amount of video memory (in MB) to use as audio storage.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.EnableVerboseMemoryStats">
      <summary>
        <para>Toggle for verbose memory statistics.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.UseSPUForUmbra">
      <summary>
        <para>UseSPUForUmbra</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.EnableMoveSupport">
      <summary>
        <para>EnableMoveSupport</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.DisableDolbyEncoding">
      <summary>
        <para>DisableDolbyEncoding</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.titleConfigPath">
      <summary>
        <para>titleConfigPath</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.dlcConfigPath">
      <summary>
        <para>dlcConfigPath</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.thumbnailPath">
      <summary>
        <para>thumbnailPath</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.backgroundPath">
      <summary>
        <para>backgroundPath</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.soundPath">
      <summary>
        <para>soundPath</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.npTrophyCommId">
      <summary>
        <para>npTrophyCommId</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.npAgeRating">
      <summary>
        <para>npAgeRating</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.npCommunicationPassphrase">
      <summary>
        <para>npCommunicationPassphrase</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.npTrophyCommSig">
      <summary>
        <para>npTrophyCommSig</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.npTrophyPackagePath">
      <summary>
        <para>npTrophyPackagePath</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.bootCheckMaxSaveGameSizeKB">
      <summary>
        <para>bootCheckMaxSaveGameSizeKB</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.trialMode">
      <summary>
        <para>TrialMode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.saveGameSlots">
      <summary>
        <para>saveGameSlots</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PS4">
      <summary>
        <para>Player Settings for the Playstation4.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.npTrophyPackPath">
      <summary>
        <para>Path specifying where to copy a trophy pack from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.npAgeRating">
      <summary>
        <para>PSN Age rating.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.npTitleSecret">
      <summary>
        <para>PS4 TitleSecret value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.parentalLevel">
      <summary>
        <para>PS4 parental level.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.applicationParameter1">
      <summary>
        <para>User-defined parameter 1.</para>
        <para>Application specific data , accessed from scripts by UnityEngine.PS4.Utility.GetApplicationParameter(1).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.applicationParameter2">
      <summary>
        <para>User-defined parameter 2.</para>
        <para>This is application specific data , accessed from scripts by UnityEngine.PS4.Utility.GetApplicationParameter(2).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.applicationParameter3">
      <summary>
        <para>User-defined parameter 3.</para>
        <para>This is application specific data , accessed from scripts by UnityEngine.PS4.Utility.GetApplicationParameter(3).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.applicationParameter4">
      <summary>
        <para>User-defined parameter 4.</para>
        <para>This is application specific data , accessed from scripts by UnityEngine.PS4.Utility.GetApplicationParameter(4).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.passcode">
      <summary>
        <para>Package passcode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.monoEnv">
      <summary>
        <para>PS4 Mono and .NET runtime environment variables.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.playerPrefsSupport">
      <summary>
        <para>Enables PlayerPrefs support using PS4 SDK SaveDataMemory system.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.contentID">
      <summary>
        <para>The applications content ID.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.category">
      <summary>
        <para>The package build category.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.appType">
      <summary>
        <para>PS4 package application type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.masterVersion">
      <summary>
        <para>PS4 content master version.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.appVersion">
      <summary>
        <para>The PS4 application version.</para>
        <para>For first release this should always = 01.00
For patch releases this should be incremented, i.e. 01.01, 01.02, etc.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.remotePlayKeyAssignment">
      <summary>
        <para>Remote Play key assignment.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.enterButtonAssignment">
      <summary>
        <para>Choice of controller button to be used as enter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.paramSfxPath">
      <summary>
        <para>Path specifying where to copy the package parameter file (param.sfx) from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.videoOutPixelFormat">
      <summary>
        <para>PS4 video output format.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.videoOutResolution">
      <summary>
        <para>PS4 video output resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.PronunciationXMLPath">
      <summary>
        <para>Path to pronunciation.xml file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.PronunciationSIGPath">
      <summary>
        <para>Path to pronunciation.sig file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.BackgroundImagePath">
      <summary>
        <para>Background image path.</para>
        <para>Path to PNG to use for background to the installation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.StartupImagePath">
      <summary>
        <para>Startup Image path.</para>
        <para>Path to PNG displayed when application is started.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.SaveDataImagePath">
      <summary>
        <para>Save Data Image path.</para>
        <para>Path to PNG displayed when managing game saves.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.BGMPath">
      <summary>
        <para>Path the background music used by package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.ShareFilePath">
      <summary>
        <para>Path to the share parameter file, as generated by the share file editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.NPtitleDatPath">
      <summary>
        <para>Path to nptitle.dat.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.pnSessions">
      <summary>
        <para>PS4 NPToolkit sessions push notifications.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.pnPresence">
      <summary>
        <para>PS4 NPToolkit presence push notifications.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.pnFriends">
      <summary>
        <para>PS4 NPToolkit friends push notifications.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.pnGameCustomData">
      <summary>
        <para>PS4 NPToolkit game custom data push notifications.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS4.garlicHeapSize">
      <summary>
        <para>Initial heap size for Garlic (GPU) memory.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PS4+PS4AppCategory">
      <summary>
        <para>PS4 application category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PS4+PS4AppCategory.Application">
      <summary>
        <para>Application.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PS4+PS4RemotePlayKeyAssignment">
      <summary>
        <para>Remote Play key assignment.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PS4+PS4RemotePlayKeyAssignment.None">
      <summary>
        <para>No Remote play key assignment.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PS4+PS4RemotePlayKeyAssignment.PatternA">
      <summary>
        <para>Remote Play key layout configuration A.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PS4+PS4RemotePlayKeyAssignment.PatternB">
      <summary>
        <para>Remote Play key layout configuration B.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PS4+PS4RemotePlayKeyAssignment.PatternC">
      <summary>
        <para>Remote Play key layout configuration C.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PS4+PS4RemotePlayKeyAssignment.PatternD">
      <summary>
        <para>Remote Play key layout configuration D.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PS4+PS4EnterButtonAssignment">
      <summary>
        <para>PS4 enter button assignment.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PS4+PS4EnterButtonAssignment.CircleButton">
      <summary>
        <para>Circle button.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PS4+PS4EnterButtonAssignment.CrossButton">
      <summary>
        <para>Cross button.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PSVita">
      <summary>
        <para>PS Vita specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.npTrophyPackPath">
      <summary>
        <para>Path specifying wher to copy a trophy pack from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.powerMode">
      <summary>
        <para>PS Vita power mode.</para>
        <para>The power mode that is set when the application boots.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.acquireBGM">
      <summary>
        <para>Aquire PS Vita background music.</para>
        <para>If true then music playing on the PS Vita is stopped when the applications boots.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.npSupportGBMorGJP">
      <summary>
        <para>Support Game Boot Message or Game Joining Presence.</para>
        <para>Set to true if your application supports.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.tvBootMode">
      <summary>
        <para>PS Vita TV boot mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.tvDisableEmu">
      <summary>
        <para>PS Vita TV Disable Emu flag.</para>
        <para>If true then touch panel emulation is disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.upgradable">
      <summary>
        <para>Indicates that this is an upgradable (trial) type application which can be converted to a full application by purchasing an upgrade.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.healthWarning">
      <summary>
        <para>Specifies whether or not a health warning will be added to the software manual.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.useLibLocation">
      <summary>
        <para>Indicates that the application makes use of libLocation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.infoBarOnStartup">
      <summary>
        <para>Specifies whether or not to show the PS Vita information bar when the application starts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.infoBarColor">
      <summary>
        <para>Specifies the color of the PS Vita information bar, true = white, false = black.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.enterButtonAssignment">
      <summary>
        <para>Specifies whether circle or cross will be used as the default enter button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.saveDataQuota">
      <summary>
        <para>Save data quota.</para>
        <para>The applications save data quota in KB.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.parentalLevel">
      <summary>
        <para>PS Vita parental level.</para>
        <para>A value in the range 0-11.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.shortTitle">
      <summary>
        <para>The applications short title.</para>
        <para>This is the title that appears under the applications icon on the PS Vita's home screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.contentID">
      <summary>
        <para>The applications content ID.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.category">
      <summary>
        <para>The package build category.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.masterVersion">
      <summary>
        <para>PS Vita content master version.</para>
        <para>Should always = 01.00.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.appVersion">
      <summary>
        <para>The PS Vita application version.</para>
        <para>For first release this should always = 01.00
For patch releases this should be incremented, i.e. 01.01, 01.02, etc.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.AllowTwitterDialog">
      <summary>
        <para>Allow Twitter Dialog.</para>
        <para>If 'true' then use of the twitter dialog is allowed. 
If 'false' then attempting to post messages to twitter will result in an error message.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.npAgeRating">
      <summary>
        <para>PSN Age rating.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.npTitleDatPath">
      <summary>
        <para>PS Vita NP Title Data File.</para>
        <para>Required if your application connects to the PlaystationÂ®Network.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.npCommunicationsID">
      <summary>
        <para>PS Vita NP Communications ID.</para>
        <para>The communcations ID is now taken from the package parameters filer (param.sfx).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.npCommsPassphrase">
      <summary>
        <para>PS Vita NP Passphrase.</para>
        <para>Required if your application connects to the PlaystationÂ®Network.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.npCommsSig">
      <summary>
        <para>PS Vita NP Signature.</para>
        <para>Required if your application connects to the PlaystationÂ®Network.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.paramSfxPath">
      <summary>
        <para>Path specifying where to copy the package parameter file (param.sfx) from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.manualPath">
      <summary>
        <para>PS Vita sofware manual.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.liveAreaGatePath">
      <summary>
        <para>PS Vita Live area gate image.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.liveAreaBackroundPath">
      <summary>
        <para>PS Vita Live area background image.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.liveAreaPath">
      <summary>
        <para>PS Vita Live area path.</para>
        <para>The path of the folder containing the applications live area data, specifying a path overrides the paths set for the live area background and gate in the player settings allowing a fully customizable live area.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.liveAreaTrialPath">
      <summary>
        <para>PS Vita Live area trial path.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.patchChangeInfoPath">
      <summary>
        <para>For cumlative patch packages.</para>
        <para>Specifies the folder where the patches change info data is stored.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.patchOriginalPackage">
      <summary>
        <para>For building cumulative patch packages.</para>
        <para>Specifies the file path to the package that was originally published, i.e. version 01.00.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.packagePassword">
      <summary>
        <para>32 character password for use if you want to access the contents of a package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.keystoneFile">
      <summary>
        <para>Keystone file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.memoryExpansionMode">
      <summary>
        <para>PS Vita memory expansion mode.</para>
        <para>Expands the amount of main memory available to the application by 29MB or 77MB.When enabled all other applications will be terminated when your application is launched and running another application while your application is running is not possible.If the 77MB mode is selected then your application cannot run the modal internet browser, e.g. Application.OpenURL() cannot be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.drmType">
      <summary>
        <para>PS Vita DRM Type.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.storageType">
      <summary>
        <para>PS Vita media type.</para>
        <para>0 = No VC\MC-MCThis application is NOT distributed by PS Vita card(VC). This application is distributed by network and installed\nonto memory card(MC).1 = VC-VCThis application is distributed by PS Vita card(VC).
This application may be distributed by network and installed\nonto memory card(MC).In the case of VC distribution.
The VC has rewritable(R/W) area, and Patches/Additional Contents/Save Data are stored on R/W area of the VC.
MC is not required to run this application.2 = VC-MC.This application is distributed by PS Vita card(VC).
This application may be distributed by network and installed onto memory card(MC).In the case of VC distribution.
The VC does NOT have rewritable(R/W) area, and Patches/Additional Contents/Save Data are stored on MC.
MC is REQUIRED to run this application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PSVita.mediaCapacity">
      <summary>
        <para>Should always = 01.00.</para>
        <para>If psp2StorageType = 0 (No VC\MC-MC) then valid values are...0 - No MediaIf psp2StorageType = 1 (VC\VC) then valid values are...1 - VC 2GB (RO:1312Mib, RW:480Mib)
2 - VC 2GB (RO:1504Mib, RW:288Mib)
3 - VC 2GB (RO:1696Mib, RW:96Mib)
4 - VC 4GB (RO:2624Mib, RW:960Mib)
5 - VC 4GB (RO:3008Mib, RW:576Mib)
6 - VC 4GB (RO:3392Mib, RW:192Mib)If psp2StorageType = 2 (VC\MC) then valid values are...7 - VC 2GB (RO:1792Mib, RW:On MC)
8 - VC 4GB (RO:3584Mib, RW:On MC).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PSVita+PSVitaPowerMode">
      <summary>
        <para>Power mode enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaPowerMode.ModeA">
      <summary>
        <para>Mode A - default.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaPowerMode.ModeB">
      <summary>
        <para>Mode B - GPU High - No WLAN or COM.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaPowerMode.ModeC">
      <summary>
        <para>Mode C - GPU High - No Camera, OLED Low brightness.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PSVita+PSVitaTvBootMode">
      <summary>
        <para>PS Vita TV boot mode enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaTvBootMode.Default">
      <summary>
        <para>Default (Managed by System Software) (SCEE or SCEA).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaTvBootMode.PSVitaBootablePSVitaTvBootable">
      <summary>
        <para>PS Vita Bootable, PS Vita TV Bootable (SCEJ or SCE Asia).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaTvBootMode.PSVitaBootablePSVitaTvNotBootable">
      <summary>
        <para>PS Vita Bootable, PS Vita TV Not Bootable (SCEJ or SCE Asia).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PSVita+PSVitaEnterButtonAssignment">
      <summary>
        <para>Enter button assignment enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaEnterButtonAssignment.Default">
      <summary>
        <para>Default.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaEnterButtonAssignment.CircleButton">
      <summary>
        <para>Circle button.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaEnterButtonAssignment.CrossButton">
      <summary>
        <para>Cross button.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PSVita+PSVitaAppCategory">
      <summary>
        <para>Application package category enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaAppCategory.Application">
      <summary>
        <para>An application package.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaAppCategory.ApplicationPatch">
      <summary>
        <para>Application patch package.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PSVita+PSVitaMemoryExpansionMode">
      <summary>
        <para>Memory expansion mode enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaMemoryExpansionMode.None">
      <summary>
        <para>Memory expansion disabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaMemoryExpansionMode.ExpandBy29MB">
      <summary>
        <para>Enable 29MB memory expansion mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaMemoryExpansionMode.ExpandBy77MB">
      <summary>
        <para>Enable 77MB memory expansion mode.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PSVita+PSVitaDRMType">
      <summary>
        <para>DRM type enum.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaDRMType.PaidFor">
      <summary>
        <para>Paid for content.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+PSVita+PSVitaDRMType.Free">
      <summary>
        <para>Free content.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+Android">
      <summary>
        <para>Android specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.disableDepthAndStencilBuffers">
      <summary>
        <para>Disable Depth and Stencil Buffers.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.use24BitDepthBuffer">
      <summary>
        <para>24-bit Depth Buffer is used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.bundleVersionCode">
      <summary>
        <para>Android bundle version code.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.minSdkVersion">
      <summary>
        <para>Minimal Android SDK version.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.preferredInstallLocation">
      <summary>
        <para>Preferred application install location.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.forceInternetPermission">
      <summary>
        <para>Force internet permission flag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.forceSDCardPermission">
      <summary>
        <para>Force SD card permission.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.androidTVCompatibility">
      <summary>
        <para>Provide a build that is Android TV compatible.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.androidIsGame">
      <summary>
        <para>Publish the build as a game rather than a regular application. This option affects devices running Android 5.0 Lollipop and later</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.targetDevice">
      <summary>
        <para>Android target device.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.splashScreenScale">
      <summary>
        <para>Android splash screen scale mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.keystoreName">
      <summary>
        <para>Android keystore name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.keystorePass">
      <summary>
        <para>Android keystore password.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.keyaliasName">
      <summary>
        <para>Android key alias name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.keyaliasPass">
      <summary>
        <para>Android key alias password.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.licenseVerification">
      <summary>
        <para>License verification flag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.useAPKExpansionFiles">
      <summary>
        <para>Use APK Expansion Files.</para>
        <para>When enabled the player executable and data will be split up, with a generated .apk consisting only of the executable (Java and Native) code (~10MB), and the data for the first scene.
The application data will be serialized separately to an APK Expansion File (.obb).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.showActivityIndicatorOnLoading">
      <summary>
        <para>Application should show ActivityIndicator when loading.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+iOS">
      <summary>
        <para>iOS specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.applicationDisplayName">
      <summary>
        <para>iOS application display name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.scriptCallOptimization">
      <summary>
        <para>Script calling optimization.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.sdkVersion">
      <summary>
        <para>Active iOS SDK version used for build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.targetOSVersion">
      <summary>
        <para>Deployment minimal version of iOS.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.targetDevice">
      <summary>
        <para>Targeted device.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.targetResolution">
      <summary>
        <para>Targeted resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.prerenderedIcon">
      <summary>
        <para>Icon is prerendered.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.requiresPersistentWiFi">
      <summary>
        <para>Application requires persistent WiFi.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.statusBarStyle">
      <summary>
        <para>Status bar style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.exitOnSuspend">
      <summary>
        <para>Application should exit when suspended to background.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.showActivityIndicatorOnLoading">
      <summary>
        <para>Application should show ActivityIndicator when loading.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.overrideIPodMusic">
      <summary>
        <para>Determines iPod playing behavior.</para>
        <para>If true, the application will silence userâ€™s iPod music. Otherwise userâ€™s iPod music will continue playing in the background.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+WSACompilationOverrides">
      <summary>
        <para>Compilation overrides for C# files.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+WSACompilationOverrides.None">
      <summary>
        <para>C# files are compiled using Mono compiler.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+WSACompilationOverrides.UseNetCore">
      <summary>
        <para>C# files are compiled using Microsoft compiler and .NET Core, you can use Windows Runtime API, but classes implemented in C# files aren't accessible from JS or Boo languages.</para>
        <para>Note: when using API from Windows Runtime, it's advisable to wrap the code with NETFX_CORE define, because the API is only avaible when building to Windows Store Apps, and it's not available in Unity Editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+WSACompilationOverrides.UseNetCorePartially">
      <summary>
        <para>C# files not located in Plugins, Standard Assets, Pro Standard Assets folders are compiled using Microsoft compiler and .NET Core, all other C# files are compiled using Mono compiler. The advantage is that classes implemented in C# are accessible from JS and Boo languages.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+BlackBerry">
      <summary>
        <para>BlackBerry specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.deviceAddress">
      <summary>
        <para>The address used when accessing the device.</para>
        <para>The device address can be found on the device by accessing: Settings/About/Network
Either the USB or WiFi address can be used (USB recommended).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.devicePassword">
      <summary>
        <para>The password used when accessing the device.</para>
        <para>The device password is needed when performing following actions:
-Uploading a Debug Token
-Deploying an application to the device
-Retrieving a log from the device.The device address is required when Development Mode is enabled on the device.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenPath">
      <summary>
        <para>File system path to the debug token that the editor is currently sourcing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenExpires">
      <summary>
        <para>The date in which the debug token is set to expire.</para>
        <para>The debug token can be renewed by pressing 'Renew' in the Publishing Section.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenAuthor">
      <summary>
        <para>The plaintext name of the author that is associated with the application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.cskPassword">
      <summary>
        <para>The keystore password used when communicating with BlackBerry.</para>
        <para>This is used for encrypting communications with the RIM Signing Authority. It is required only when signing applications or when creating debug tokens.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.saveLogPath">
      <summary>
        <para>The file system path that the device log will be saved to when it is downloaded.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+Tizen">
      <summary>
        <para>Tizen specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Tizen.productDescription">
      <summary>
        <para>Description of your project to be displayed in the Tizen Store.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Tizen.productURL">
      <summary>
        <para>URL of your project to be displayed in the Tizen Store.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Tizen.signingProfileName">
      <summary>
        <para>Name of the security profile to code sign Tizen applications with.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+SamsungTV">
      <summary>
        <para>Samsung Smart TV specific Player Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+SamsungTV.deviceAddress">
      <summary>
        <para>The address used when accessing the device.</para>
        <para>The device address can be found when running Unity Launcher on the main screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+SamsungTV.productDescription">
      <summary>
        <para>The description of the created product.</para>
        <para>When building the game a config.xml that Samsung requires for game publishing is created. This property fills out the description tag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+SamsungTV.productAuthor">
      <summary>
        <para>Author of the created product.</para>
        <para>When building the game a config.xml that Samsung requires for game publishing is created. This property fills out the author name field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+SamsungTV.productAuthorEmail">
      <summary>
        <para>Product author's e-mail.</para>
        <para>When building the game a config.xml that Samsung requires for game publishing is created. This property fills out the author email field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+SamsungTV.productLink">
      <summary>
        <para>The author's website link.</para>
        <para>When building the game a config.xml that Samsung requires for game publishing is created. This property fills out the author link tag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+SamsungTV.productCategory">
      <summary>
        <para>The category of the created product.</para>
        <para>When building the game a config.xml that Samsung requires for game publishing is created. This property fills out the category tag. Accepts enum values from SamsungTVProductCategories.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+SamsungTV+SamsungTVProductCategories">
      <summary>
        <para>Types of available product categories.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+SamsungTV+SamsungTVProductCategories.Games">
      <summary>
        <para>The games category (default).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+SamsungTV+SamsungTVProductCategories.Videos">
      <summary>
        <para>The videos category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+SamsungTV+SamsungTVProductCategories.Sports">
      <summary>
        <para>The sports category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+SamsungTV+SamsungTVProductCategories.Lifestyle">
      <summary>
        <para>The lifestyle category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+SamsungTV+SamsungTVProductCategories.Information">
      <summary>
        <para>The information category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+SamsungTV+SamsungTVProductCategories.Education">
      <summary>
        <para>The education category.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PlayerSettings+SamsungTV+SamsungTVProductCategories.Kids">
      <summary>
        <para>The kids category.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PreferenceItem">
      <summary>
        <para>The PreferenceItem attribute allows you to add preferences sections to the Preferences Window.</para>
        <para>The PreferenceItem attribute turns any static function into an OnGUI callback. Only static functions can use the PreferenceItem attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PreferenceItem.#ctor(System.String)">
      <summary>
        <para>Creates a section in the Preferences Window called <c>name</c> and invokes the static function following it for the section's GUI.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptableWizard">
      <summary>
        <para>Derive from this class to create an editor wizard.</para>
        <para>Editor wizards are typically opened using a menu item.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button OnWizardCreate function will be called.
DisplayWizard will only show one wizard for every wizard class.Simple Wizard Window that copies a GameObject several times.</para>
      </summary>
      <typeparam name="T">The class implementing the wizard. It has to derive from <see cref="ScriptableWizard">ScriptableWizard</see>.</typeparam>
      <param name="title">The title shown at the top of the wizard window.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button OnWizardCreate function will be called.
DisplayWizard will only show one wizard for every wizard class.</para>
      </summary>
      <typeparam name="T">The class implementing the wizard. It has to derive from <see cref="ScriptableWizard">ScriptableWizard</see>.</typeparam>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String,System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button OnWizardCreate function will be called.
DisplayWizard will only show one wizard for every wizard class.</para>
      </summary>
      <typeparam name="T">The class implementing the wizard. It has to derive from <see cref="ScriptableWizard">ScriptableWizard</see>.</typeparam>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <param name="otherButtonName">The text shown on the optional other button. Leave this parameter out to leave the button out.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type,System.String)">
      <summary>
        <para>TODO.</para>
      </summary>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type)">
      <summary>
        <para>TODO.</para>
      </summary>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type,System.String,System.String)">
      <summary>
        <para>TODO.</para>
      </summary>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.helpString">
      <summary>
        <para>Allows you to set the help text of the wizard.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.errorString">
      <summary>
        <para>Allows you to set the error text of the wizard.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.isValid">
      <summary>
        <para>Allows you to enable and disable the wizard create button, so that the user can not click it.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedPropertyType">
      <summary>
        <para>Type of a <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Integer">
      <summary>
        <para>Integer property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Boolean">
      <summary>
        <para>Boolean property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Float">
      <summary>
        <para>Float property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.String">
      <summary>
        <para>String property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Color">
      <summary>
        <para>Color property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.ObjectReference">
      <summary>
        <para>Reference to another object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.LayerMask">
      <summary>
        <para>
          <see cref="LayerMask">LayerMask</see> property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Enum">
      <summary>
        <para>Enumeration property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector2">
      <summary>
        <para>2D vector property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector3">
      <summary>
        <para>3D vector property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector4">
      <summary>
        <para>4D vector property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Rect">
      <summary>
        <para>Rectangle property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.ArraySize">
      <summary>
        <para>Array size property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Character">
      <summary>
        <para>Character property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.AnimationCurve">
      <summary>
        <para>AnimationCurve property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Bounds">
      <summary>
        <para>Bounds property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Gradient">
      <summary>
        <para>Gradient property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Quaternion">
      <summary>
        <para>Quaternion property.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedObject">
      <summary>
        <para>SerializedObject and <see cref="SerializedProperty">SerializedProperty</see> are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</para>
        <para>SerializedObject is used in conjunction with SerializedProperty and Editor classes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object)">
      <summary>
        <para>Create SerializedObject for inspected object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object[])">
      <summary>
        <para>Create SerializedObject for inspected object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.Update">
      <summary>
        <para>Update serialized object's representation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.SetIsDifferentCacheDirty">
      <summary>
        <para>Update <c>hasMultipleDifferentValues</c> cache on the next /Update()/ call.</para>
        <para>Normally, you should not need to call this, as the SerializedProperty setters take care of this.
However, when you change an object bypassing the SerializedProperty class, you will need to manually call this
to force the difference cache to be updated.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.UpdateIfDirtyOrScript">
      <summary>
        <para>Update serialized object's representation, only if the object has been modified since the last call to Update or if it is a script.</para>
        <para>In which case it is not safe to assume that SetDirty has been called.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.GetIterator">
      <summary>
        <para>Get the first serialized property.</para>
        <para>You can use this to go over all properties of the target object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.FindProperty(System.String)">
      <summary>
        <para>Find serialized property by name.</para>
        <para>You can use this to find a specific property in the target object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.ApplyModifiedProperties">
      <summary>
        <para>Apply property modifications.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.CopyFromSerializedProperty(UnityEditor.SerializedProperty)">
      <summary>
        <para>Copies a value from a SerializedProperty to the same serialized property on this serialized object.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.targetObject">
      <summary>
        <para>The inspected object (Read Only).</para>
        <para>When multi-object editing, the targetObject property will just return the first of the edited objects.
To get all the objects, use the targetObjects property instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.targetObjects">
      <summary>
        <para>The inspected objects (Read Only).</para>
        <para>The serialized object can represent multiple objects simultaneously when multi-object editing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.isEditingMultipleObjects">
      <summary>
        <para>Does the serialized object represents multiple objects due to multi-object editing? (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedProperty">
      <summary>
        <para>SerializedProperty and <see cref="SerializedObject">SerializedObject</see> are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</para>
        <para>SerializedProperty is used in conjunction with SerializedObject and Editor classes.
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEndProperty">
      <summary>
        <para>Retrieves the SerializedProperty that defines the end range of this property.</para>
        <para>It's the first property that's not a child or grandchild of this property.
The end property can be used to iterate over all children of a property by using EqualContents.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEndProperty(System.Boolean)">
      <summary>
        <para>Retrieves the SerializedProperty that defines the end range of this property.</para>
        <para>It's the first property that's not a child or grandchild of this property.
The end property can be used to iterate over all children of a property by using EqualContents.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEnumerator">
      <summary>
        <para>Retrieves an iterator that allows you to iterator over the current nexting of a serialized property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Returns the element at the specified index in the array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.InsertArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Insert an empty element at the specified index in the array.</para>
        <para>The value of the inserted element is undefined and should be explicitly set after calling this function.
</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DeleteArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Delete the element at the specified index in the array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.ClearArray">
      <summary>
        <para>Remove all elements from the array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.MoveArrayElement(System.Int32,System.Int32)">
      <summary>
        <para>Move an array element from srcIndex to dstIndex.</para>
        <para>The SerializedProperty must be pointed to an array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.EqualContents(UnityEditor.SerializedProperty,UnityEditor.SerializedProperty)">
      <summary>
        <para>See if contained serialized properties are equal.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Next(System.Boolean)">
      <summary>
        <para>Move to next property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.NextVisible(System.Boolean)">
      <summary>
        <para>Move to next visible property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Reset">
      <summary>
        <para>Move to first property of the object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.CountRemaining">
      <summary>
        <para>Count remaining visible properties.</para>
        <para>This is useful for allocating height for drawing this property and all the following ones.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.CountInProperty">
      <summary>
        <para>Count visible children of this property, including this property itself.</para>
        <para>This is useful for allocating height for drawing this property including its children.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Copy">
      <summary>
        <para>Returns a copy of the SerializedProperty iterator in its current state. This is useful if you want to keep a reference to the current property but continue with the iteration.</para>
        <para>Note that if you keep a reference to an array property and that array is subsequently resized then the stored reference is no longer reliable and should not be used.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DuplicateCommand">
      <summary>
        <para>Duplicates the serialized property.</para>
        <para>The serialized property can't be used anymore after calling this function. A new iterator must be created in that case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DeleteCommand">
      <summary>
        <para>Deletes the serialized property.</para>
        <para>The serialized property can't be used anymore after calling this function. A new iterator must be created in that case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.FindPropertyRelative(System.String)">
      <summary>
        <para>Retrieves the SerializedProperty at a relative path to the current property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.serializedObject">
      <summary>
        <para>
          <see cref="SerializedObject">SerializedObject</see> this property belongs to (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasMultipleDifferentValues">
      <summary>
        <para>Does this property represent multiple different values due to multi-object editing? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.displayName">
      <summary>
        <para>Nice display name of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.name">
      <summary>
        <para>Name of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.type">
      <summary>
        <para>Type name of the property. (Read Only)</para>
        <para>Returns C# type name of the property for all SerializedPropertyType values, except for SerializedPropertyType.ObjectReference and other internal values of SerializedPropertyType, where the internal serialization type name is returned.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.tooltip">
      <summary>
        <para>Tooltip of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.depth">
      <summary>
        <para>Nesting depth of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.propertyPath">
      <summary>
        <para>Full path of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.editable">
      <summary>
        <para>Is this property editable? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isExpanded">
      <summary>
        <para>Is this property expanded in the inspector?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasChildren">
      <summary>
        <para>Does it have child properties? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasVisibleChildren">
      <summary>
        <para>Does it have visible child properties? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isInstantiatedPrefab">
      <summary>
        <para>Is property part of a prefab instance? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.prefabOverride">
      <summary>
        <para>Is property's value different from the prefab it belongs to?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.propertyType">
      <summary>
        <para>Type of this property (Read Only).</para>
        <para>Property type determines which of the "value" variable accessors are valid.
For example, only boolValue is valid for SerializedPropertyType.Boolean
Both intValue and longValue are valid for SerializedPropertyType.Integer.Â 
Both floatValue and doubleValue are valid for SerializedPropertyType.Float.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.intValue">
      <summary>
        <para>Value of an integer property.</para>
        <para>Contains a valid value when propertyType is SerializedPropertyType.Integer.
          For accessing sbyte, byte, short, ushort, int and uint properties. If you are accessing long or ulong properties use longValue instead. 
          When assigning a value to intValue, the value is clamped in the range of the property's declared type. For example, a property that is declared as a byte is clamped between 0 and 255.           </para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.longValue">
      <summary>
        <para>Value of a integer property as a long.</para>
        <para>Contains a valid value when propertyType is SerializedPropertyType.Integer.
          For accessing sbyte, byte, short, ushort, int, uint, long and ulong properties. 
          When assigning a value to intValue, the value is clamped in the range of the property's declared type. For example, a property that is declared as a byte is clamped between 0 and 255.           </para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.boolValue">
      <summary>
        <para>Value of a boolean property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.floatValue">
      <summary>
        <para>Value of a float property.</para>
        <para>Contains a valid value when propertyType is SerializedPropertyType.Float.
          For accessing float properties. If you are accessing double properties use doubleValue instead.           </para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.doubleValue">
      <summary>
        <para>Value of a float property as a double.</para>
        <para>Contains a valid value when propertyType is SerializedPropertyType.Float.
          For accessing float and double properties. When assigning a float to doubleValue, the value is clamped to the range of a float.             </para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.stringValue">
      <summary>
        <para>Value of a string property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.colorValue">
      <summary>
        <para>Value of a color property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.animationCurveValue">
      <summary>
        <para>Value of a animation curve property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.objectReferenceValue">
      <summary>
        <para>Value of an object reference property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumValueIndex">
      <summary>
        <para>Enum index of an enum property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumNames">
      <summary>
        <para>Names of enumeration of an enum property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumDisplayNames">
      <summary>
        <para>Display-friendly names of enumeration of an enum property.</para>
        <para>Similar to enumNames, but formatted with spaces and capitalization.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector2Value">
      <summary>
        <para>Value of a 2D vector property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector3Value">
      <summary>
        <para>Value of a 3D vector property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector4Value">
      <summary>
        <para>Value of a 4D vector property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.quaternionValue">
      <summary>
        <para>Value of a quaternion property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.rectValue">
      <summary>
        <para>Value of a rectangle property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.boundsValue">
      <summary>
        <para>Value of bounds property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isArray">
      <summary>
        <para>Is this property an array? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.arraySize">
      <summary>
        <para>The number of elements in the array. If the SerializedObject contains multiple objects it will return the smallest number of elements. So it is always possible to iterate through the SerializedObject and only get properties found in all objects.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SubstanceImporter">
      <summary>
        <para>The SubstanceImporter class lets you access the imported ProceduralMaterial instances.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetPrototypeNames">
      <summary>
        <para>Get a list of the names of the ProceduralMaterial prototypes in the package.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialCount">
      <summary>
        <para>Get the number of ProceduralMaterial instances.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterials">
      <summary>
        <para>Get an array with the ProceduralMaterial instances.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.CloneMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Clone an existing ProceduralMaterial instance.</para>
        <para>NOTE: This requires a re-import to actually create the new instance !</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.InstantiateMaterial(System.String)">
      <summary>
        <para>Instantiate a new ProceduralMaterial instance from a prototype.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.DestroyMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Destroy an existing ProceduralMaterial instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.ResetMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Reset the ProceduralMaterial to its default values.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.RenameMaterial(UnityEngine.ProceduralMaterial,System.String)">
      <summary>
        <para>Rename an existing ProceduralMaterial instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.OnShaderModified(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>After modifying the shader of a ProceduralMaterial, call this function to apply the changes to the importer.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialOffset(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Get the material offset, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetMaterialOffset(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
      <summary>
        <para>Set the material offset, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialScale(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Get the material scale, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetMaterialScale(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
      <summary>
        <para>Set the material scale, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetGenerateAllOutputs(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Check if the ProceduralMaterial needs to force generation of all its outputs.</para>
        <para>If enabled, the ProceduralMaterial will generate all its outputs.
If disabled, the ProceduralMaterial will generate only the outputs required by the shader.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetGenerateAllOutputs(UnityEngine.ProceduralMaterial,System.Boolean)">
      <summary>
        <para>Specify if the ProceduralMaterial needs to force generation of all its outputs.</para>
        <para>If enabled, the ProceduralMaterial will generate all its outputs.
If disabled, the ProceduralMaterial will generate only the outputs required by the shader.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetAnimationUpdateRate(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Get the ProceduralMaterial animation update rate in millisecond.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetAnimationUpdateRate(UnityEngine.ProceduralMaterial,System.Int32)">
      <summary>
        <para>Set the ProceduralMaterial animation update rate in millisecond.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetGenerateMipMaps(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Return true if the mipmaps are generated for this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetGenerateMipMaps(UnityEngine.ProceduralMaterial,System.Boolean)">
      <summary>
        <para>Force the generation of mipmaps for this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String)">
      <summary>
        <para>Get the alpha source of the given texture in the ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String,UnityEngine.ProceduralOutputType)">
      <summary>
        <para>Set the alpha source of the given texture in the ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetPlatformTextureSettings(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Set the import settings for the input ProceduralMaterial for the input platform (width and height, RAW/Compressed format, loading behavior).</para>
      </summary>
      <param name="materialName">The name of the Procedural Material.</param>
      <param name="platform">The name of the platform (can be empty).</param>
      <param name="maxTextureWidth">The maximum texture width for this Procedural Material.</param>
      <param name="maxTextureHeight">The maximum texture height for this Procedural Material.</param>
      <param name="textureFormat">The texture format (0=Compressed, 1=RAW) for this Procedural Material.</param>
      <param name="loadBehavior">The load behavior for this Procedural Material.
Values match the ProceduralMaterial::ProceduralLoadingBehavior enum.</param>
    </member>
    <member name="T:UnityEditor.SubstanceArchive">
      <summary>
        <para>Class for Substance Archive handling.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SelectionMode">
      <summary>
        <para>SelectionMode can be used to tweak the selection returned by Selection.GetTransforms.</para>
        <para>The default transform selection mode is: SelectionMode.TopLevel | SelectionMode.ExcludePrefab | SelectionMode.Editable.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Unfiltered">
      <summary>
        <para>Return the whole selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.TopLevel">
      <summary>
        <para>Only return the topmost selected transform. A selected child of another selected transform will be filtered out.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Deep">
      <summary>
        <para>Return the selection and all child transforms of the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.ExcludePrefab">
      <summary>
        <para>Excludes any prefabs from the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Editable">
      <summary>
        <para>Excludes any objects which shall not be modified.</para>
        <para>This will filter generated prefabs from an imported fbx file but not user created prefabs.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Assets">
      <summary>
        <para>Only return objects that are assets in the Asset directory.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.DeepAssets">
      <summary>
        <para>If the selection contains folders, also include all assets and subfolders within that folder in the file hierarchy.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Selection">
      <summary>
        <para>Access to the selection in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Selection.Contains(System.Int32)">
      <summary>
        <para>Returns whether an object is contained in the current selection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Selection.Contains(UnityEngine.Object)">
      <summary>
        <para>Returns whether an object is contained in the current selection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Selection.GetTransforms(UnityEditor.SelectionMode)">
      <summary>
        <para>Allows for fine grained control of the selection type using the <see cref="SelectionMode">SelectionMode</see> bitmask.</para>
      </summary>
      <param name="mode">Options for refining the selection.</param>
    </member>
    <member name="M:UnityEditor.Selection.GetFiltered(System.Type,UnityEditor.SelectionMode)">
      <summary>
        <para>Returns the current selection filtered by type and mode.</para>
        <para>For a selected GameObject that has multiple Components of type, only the first one will be included in the results. 
if type is a subclass of Component or GameObject the full SelectionMode is supported. 
if type does not subclass from Component or GameObject (eg. Mesh or ScriptableObject) only SelectionMode.ExcludePrefab and SelectionMode.Editable are supported.</para>
      </summary>
      <param name="type">Only objects of this type will be retrieved.</param>
      <param name="mode">Further options to refine the selection.</param>
    </member>
    <member name="P:UnityEditor.Selection.transforms">
      <summary>
        <para>Returns the top level selection, excluding prefabs.</para>
        <para>This is the most common selection type when working with scene objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeTransform">
      <summary>
        <para>Returns the active transform. (The one shown in the inspector).</para>
        <para>This will never return prefabs or non-modifyable objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.gameObjects">
      <summary>
        <para>Returns the actual game object selection. Includes prefabs, non-modifyable objects.</para>
        <para>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.transforms instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeGameObject">
      <summary>
        <para>Returns the active game object. (The one shown in the inspector).</para>
        <para>It will also return game objects that might be prefabs or non-modifiable objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeObject">
      <summary>
        <para>Returns the actual object selection. Includes prefabs, non-modifyable objects.</para>
        <para>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.activeTransform instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeInstanceID">
      <summary>
        <para>Returns the instanceID of the actual object selection. Includes prefabs, non-modifyable objects.</para>
        <para>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.activeTransform instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.objects">
      <summary>
        <para>The actual unfiltered selection from the Scene.</para>
        <para>All objects  will be returned, including assets in projects.  You can also assign objects to the selection.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.instanceIDs">
      <summary>
        <para>The actual unfiltered selection from the Scene returned as instance ids instead of <see cref="Selection-objects">objects</see>.</para>
        <para>All objects  will be returned, including assets in projects. You can also assign objects to the selection.The instance ID of an object is always guaranteed to be unique.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.assetGUIDs">
      <summary>
        <para>Returns the guids of the selected assets.</para>
        <para>When working with asset selection it is recommended to use this property since it also handles if folders were selected in the first column in the Project Browser (in Two Column Mode).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorUtility">
      <summary>
        <para>Editor utility functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetDirty(UnityEngine.Object)">
      <summary>
        <para>Marks <c>target</c> object as dirty.</para>
        <para>Unity internally uses the dirty flag to find out when assets have changed and need to be saved to disk.E.g. if you modify a prefab's MonoBehaviour or ScriptableObject variables, you must tell Unity that the value has changed.
Unity builtin components internally call SetDirty whenever a property changes.
MonoBehaviour or ScriptableObject don't do this automatically so if you want your value to be saved you need to call SetDirty.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.IsPersistent(UnityEngine.Object)">
      <summary>
        <para>Determines if an object is stored on disk.</para>
        <para>Typically assets like prefabs, textures, audio clips, animation clips, materials are stored on disk.Returns false if the object lives in the scene. Typically this is a game object or component but
it could also be a material that was created from code and not stored in an asset but instead
stored in the scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog.</para>
        <para>Use it for displaying message boxes in the editor.ok and cancel are labels to be displayed on the dialog buttons. If cancel is empty (the default), then only
one button is displayed. DisplayDialog returns true if ok button is pressed.</para>
      </summary>
      <param name="title">The title of the message box.</param>
      <param name="message">The text of the message.</param>
      <param name="ok">Label displayed on the OK dialog button.</param>
      <param name="cancel">Label displayed on the Cancel dialog button.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog.</para>
        <para>Use it for displaying message boxes in the editor.ok and cancel are labels to be displayed on the dialog buttons. If cancel is empty (the default), then only
one button is displayed. DisplayDialog returns true if ok button is pressed.</para>
      </summary>
      <param name="title">The title of the message box.</param>
      <param name="message">The text of the message.</param>
      <param name="ok">Label displayed on the OK dialog button.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialogComplex(System.String,System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog with three buttons.</para>
        <para>Use it for displaying message boxes in the editor.Similar to DisplayDialog, only this version shows a dialog with three buttons. ok, cancel and alt/
are labels to be displayed on the buttons. DisplayDialogComplex returns an integer 0, 1 or 2 corresponding to
ok, cancel and alt buttons.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFilePanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "open file" dialog and returns the selected path name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFilePanel(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save file" dialog and returns the selected path name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.NaturalCompare(System.String,System.String)">
      <summary>
        <para>Human-like sorting.</para>
        <para>Sorts strings alphabetically, but with numbers in strings numerically, so "xx11" comes after "xx2".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFolderPanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "open folder" dialog and returns the selected path name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFolderPanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save folder" dialog and returns the selected path name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFilePanelInProject(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save file" dialog in the Assets folder of the project and returns the selected path name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.InstanceIDToObject(System.Int32)">
      <summary>
        <para>Translates an instance ID to a reference to an object.</para>
        <para>If the object is not loaded from disk, loads it from disk.Editor Window to enter the instance ID and print the name of the object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,System.Int32)">
      <summary>
        <para>Compress a texture.</para>
        <para>Use this function to explicitly compress a texture into specified format.If you want to do texture compression in-game, use Texture2D.Compress function, which
will use faster but lower quality DXT compression.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,UnityEngine.TextureCompressionQuality)">
      <summary>
        <para>Compress a texture.</para>
        <para>Use this function to explicitly compress a texture into specified format.If you want to do texture compression in-game, use Texture2D.Compress function, which
will use faster but lower quality DXT compression.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CopySerialized(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Copy all settings of a Unity Object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CollectDependencies(UnityEngine.Object[])">
      <summary>
        <para>Calculates and returns a list of all assets the assets listed in <c>roots</c> depend on.</para>
        <para>Editor window that shows the next example.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CollectDeepHierarchy(UnityEngine.Object[])">
      <summary>
        <para>Collect all objects in the hierarchy rooted at each of the given objects.</para>
        <para>This is most useful for linearizing entire GameObject hierarchies including all their components.
Note that the traversal will not include assets referenced from within the hierarchy. For example, having a MeshFilter component in the hierarchy will not cause the referenced Mesh to be included in the resulting list.</para>
      </summary>
      <param name="roots">Array of objects where the search will start.</param>
      <returns>
        <para>Array of objects heirarchically attached to the search array.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorUtility.UnloadUnusedAssetsImmediate">
      <summary>
        <para>Unloads assets that are not used.</para>
        <para>An asset is deemed to be unused if it isn't reached after walking the whole game object hierarchy, including script components. Static variables are also examined.By passing in an additional parameter, asset references from script properties and static variables can optionaly be ignored. The unloaded assets will be loaded again on first use.This method differs from Resources.UnloadUnusedAssets in that it will wait for asset garbage collection to finish before returning.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayPopupMenu(UnityEngine.Rect,System.String,UnityEditor.MenuCommand)">
      <summary>
        <para>Displays a popup menu.</para>
        <para>Menu is shown at position pos, generated from a submenu specified by menuItemPath using a
MenuCommand as menu context.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.FocusProjectWindow">
      <summary>
        <para>Brings the project window to the front and focuses it.</para>
        <para>This is commonly called after a menu item that creates and selects an asset is invoked.Changes the color of the selected GameObjects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.FormatBytes(System.Int32)">
      <summary>
        <para>Returns a text for a number of bytes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayProgressBar(System.String,System.String,System.Single)">
      <summary>
        <para>Displays or updates a progress bar.</para>
        <para>The window title will be set to title and the info will be set to info.
Progress should be set to a value between 0.0 and 1.0, where 0 means nothing done and 1.0 means 100% completed.This is useful if you perform any lengthy operations in your editor scripts or wizards,
and want to notify the user about the progress.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayCancelableProgressBar(System.String,System.String,System.Single)">
      <summary>
        <para>Displays or updates a progress bar that has a cancel button.</para>
        <para>The window title will be set to title and the info will be set to info.
Progress should be set to a value between 0.0 and 1.0, where 0 means nothing done and 1.0 means 100% completed.This is useful if you perform any lengthy operations in your editor scripts or wizards,
and want to notify the user about the progress.Return argument of this function tells if user had pressed the cancel button.
It is then your responsibility to stop the task you were doing.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.ClearProgressBar">
      <summary>
        <para>Removes progress bar.</para>
        <para>Will remove any progress bar previously shown using EditorUtility.DisplayProgressBar.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.GetObjectEnabled(UnityEngine.Object)">
      <summary>
        <para>Is the object enabled (0 disabled, 1 enabled, -1 has no enabled button).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetObjectEnabled(UnityEngine.Object,System.Boolean)">
      <summary>
        <para>Set the enabled state of the object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetSelectedWireframeHidden(UnityEngine.Renderer,System.Boolean)">
      <summary>
        <para>Set whether the renderer's wireframe will be hidden when the renderer's gameobject is selected.</para>
        <para>Cube with the wireframe hidden/shown.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.ExtractOggFile(UnityEngine.Object,System.String)">
      <summary>
        <para>Saves an AudioClip or MovieTexture to a file.</para>
        <para>Will save an Ogg Vorbis or Ogg Theora file at the specified path.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CreateGameObjectWithHideFlags(System.String,UnityEngine.HideFlags,System.Type[])">
      <summary>
        <para>Creates a game object with <see cref="HideFlags">HideFlags</see> and specified components.</para>
        <para>This is very similar to creating a GameObject the usual way, except it
sets the specified HideFlags immediately.Editor Window that shows how does the example looks.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Menu">
      <summary>
        <para>Menu class to manipulate the menu item.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Menu.#ctor">
      <summary>
        <para>Default constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Menu.SetChecked(System.String,System.Boolean)">
      <summary>
        <para>Set the check status of the given menu.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Menu.GetChecked(System.String)">
      <summary>
        <para>Get the check status of the given menu.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MenuItem">
      <summary>
        <para>The MenuItem attribute allows you to add menu items to the main menu and inspector context menus.</para>
        <para>The MenuItem attribute turns any static function into a menu command. Only static functions can use the MenuItem attribute.To create a hotkey you can use the following special characters: % (ctrl on Windows, cmd on OS X), # (shift), &amp;amp; (alt), &amp;lt;b&amp;gt;_&amp;lt;/b&amp;gt; (no key modifiers). For example to create a menu with hotkey shift-alt-g use "MyMenu/Do Something #&amp;amp;g". To create a menu with hotkey g and no key modifiers pressed use "MyMenu/Do Something _g".Some special keyboard keys are supported as hotkeys, for example "#LEFT" would map to shift-left. The keys supported like this are: LEFT, RIGHT, UP, DOWN, F1 .. F12, HOME, END, PGUP, PGDN.A hotkey text must be preceded with a space character ("MyMenu/Do_g" won't be interpreted as hotkey, while "MyMenu/Do _g" will).When adding menu items to the "GameObject/" menu for creating custom game objects be sure to call GameObjectUtility.SetParentAndAlign to ensure that the new GameObject is reparented correctly in the case of a context click (see example below). Your function should also call Undo.RegisterCreatedObjectUndo to make the creation undoable and set Selection.activeObject to the newly created object. Also note that in order for a menu item in "GameObject/" to be propagated to the hierarchy Create dropdown and hierarchy context menu, it must be grouped with the other GameObject creation menu items. This can be achieved by setting its priority to 10 (see example below). Note that for legacy purposes MenuItems in "GameObject/Create Other" with no explicit priority set will receive a priority of 10 instead of the default 1000 - we encourage using a more descriptive category name than "Create Other" and explicitly setting the priority to 10.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
        <para>The itemName is the menu item represented like a pathname. Eg. "GameObject/Do Something".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
        <para>The itemName is the menu item represented like a pathname. Eg. "GameObject/Do Something"
If isValidateFunction is true, this is a validation function and will be called before invoking the menu function with the same name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String,System.Boolean,System.Int32)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
        <para>The itemName is the menu item represented like a pathname. Eg. "GameObject/Do Something"
If isValidateFunction is true, this is a validation function and will be called before invoking the menu function with the same name.
Priority defines the order by which menu items are displayed in the menu bar.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MenuCommand">
      <summary>
        <para>Used to extract the context for a <see cref="MenuItem">MenuItem</see>. MenuCommand objects are passed to custom menu item functions defined using the <see cref="MenuItem">MenuItem</see> attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuCommand.#ctor(UnityEngine.Object,System.Int32)">
      <summary>
        <para>Creates a new MenuCommand object.</para>
        <para>Context and userData will be initialized to inContext and inUserdata respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuCommand.#ctor(UnityEngine.Object)">
      <summary>
        <para>Creates a new MenuCommand object.</para>
        <para>Context will be initialized to inContext and userdata will be set to 0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MenuCommand.context">
      <summary>
        <para>Context is the object that is the target of a menu command.</para>
        <para>Usually the context is the current selection or the item under
the mouse when invoking a context menu.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MenuCommand.userData">
      <summary>
        <para>An integer for passing custom information to a menu item.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GizmoType">
      <summary>
        <para>Determines how a gizmo is drawn or picked in the Unity editor.</para>
        <para>The types can be combined together with an OR operator.
</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Pickable">
      <summary>
        <para>The gizmo can be picked in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.NotInSelectionHierarchy">
      <summary>
        <para>Draw the gizmo if it is not selected and also no parent/ancestor is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.NonSelected">
      <summary>
        <para>Draw the gizmo if it is not selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Selected">
      <summary>
        <para>Draw the gizmo if it is selected.</para>
        <para>It is recommended to always use GizmoType.InSelectionHierarchy instead.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Active">
      <summary>
        <para>Draw the gizmo if it is active (shown in the inspector).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.InSelectionHierarchy">
      <summary>
        <para>Draw the gizmo if it is selected or it is a child/descendent of the selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DrawGizmo">
      <summary>
        <para>The DrawGizmo attribute allows you to supply a gizmo renderer for any <see cref="Component">Component</see>.</para>
        <para>The renderer function must be static, and take two parameters: the object for which the gizmo is being drawn, and a GizmoType parameter which indicates the context in which the gizmo is being drawn.		  The renderer function can be defined in any class, including editor scripts. This allows you to keep your gizmo-drawing code out of your component scripts so that it is not included in builds.
	  
		</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DrawGizmo.#ctor(UnityEditor.GizmoType)">
      <summary>
        <para>Defines when the gizmo should be invoked for drawing.</para>
      </summary>
      <param name="gizmo">Flags to denote when the gizmo should be drawn.</param>
    </member>
    <member name="M:UnityEditor.DrawGizmo.#ctor(UnityEditor.GizmoType,System.Type)">
      <summary>
        <para>Same as above. <c>drawnGizmoType</c> determines of what type the object we are drawing the gizmo of has to be.</para>
        <para>If drawnGizmoType is null, the type will be determined from the first parameter of the draw gizmo method.
		If drawnGizmoType is not null, it must be the same type as, or a subtype of, the type of the first parameter.</para>
      </summary>
      <param name="gizmo">Flags to denote when the gizmo should be drawn.</param>
      <param name="drawnGizmoType">Type of object for which the gizmo should be drawn.</param>
    </member>
    <member name="T:UnityEditor.EditorPrefs">
      <summary>
        <para>Stores and accesses Unity editor preferences.</para>
        <para>On Mac OS X, EditorPrefs are stored in ~/Library/Preferences/com.unity3d.UnityEditor.plist.On Windows, EditorPrefs are stored in the registry under the HKCU\Software\Unity Technologies\UnityEditor key.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetInt(System.String,System.Int32)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c> as an integer.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetInt(System.String,System.Int32)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If the value doesn't already exist in the preference file the function will return defaultValue.
        
        </para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetInt(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If the value doesn't already exist in the preference file the function will return defaultValue.
        
        </para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetFloat(System.String,System.Single)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String,System.Single)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetString(System.String,System.String)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
        <para>Quick notes that last between Unity Sessions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetString(System.String,System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.Quick notes that last between Unity Sessions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetString(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.Quick notes that last between Unity Sessions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetBool(System.String,System.Boolean)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
        <para>Round rotations/positions and remember the active option.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetBool(System.String,System.Boolean)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.Round rotations/positions and remember the active option.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetBool(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return defaultValue.Round rotations/positions and remember the active option.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.HasKey(System.String)">
      <summary>
        <para>Returns true if <c>key</c> exists in the preferences.</para>
        <para>Quick notes that last between Unity Sessions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.DeleteKey(System.String)">
      <summary>
        <para>Removes <c>key</c> and its corresponding value from the preferences.</para>
        <para>Removes a user entered editor preference, if it doesnt exists it prints a message.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.DeleteAll">
      <summary>
        <para>Removes all keys and values from the preferences. Use with caution.</para>
        <para>Clears all editor prefs keys.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Help">
      <summary>
        <para>Helper class to access Unity documentation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.HasHelpForObject(UnityEngine.Object)">
      <summary>
        <para>Is there a help page for this object?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.GetHelpURLForObject(UnityEngine.Object)">
      <summary>
        <para>Get the URL for this object's documentation.</para>
      </summary>
      <param name="obj">The object to retrieve documentation for.</param>
      <returns>
        <para>The documentation URL for the object. Note that this could use the http: or file: schemas.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Help.ShowHelpForObject(UnityEngine.Object)">
      <summary>
        <para>Show help page for this object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.ShowHelpPage(System.String)">
      <summary>
        <para>Show a help page.</para>
        <para>page should be the URL of the help page, usually beginning with file://. If page starts
with file:///unity/, then it points to Unity help.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.BrowseURL(System.String)">
      <summary>
        <para>Open <c>url</c> in the default web browser.</para>
        <para>Editor Window that lets you load docs for any Selected GameObject.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ObjectNames">
      <summary>
        <para>Helper class for constructing displayable names for objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.NicifyVariableName(System.String)">
      <summary>
        <para>Make a displayable name for a variable.</para>
        <para>This function will insert spaces before capital letters and remove optional m_, _
or k followed by uppercase letter in front of the name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetInspectorTitle(UnityEngine.Object)">
      <summary>
        <para>Inspector title for an object.</para>
        <para>If an object is a script, this will return "scriptname (Script)", for example.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetClassName(UnityEngine.Object)">
      <summary>
        <para>Class name of an object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetDragAndDropTitle(UnityEngine.Object)">
      <summary>
        <para>Drag and drop title for an object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.SetNameSmart(UnityEngine.Object,System.String)">
      <summary>
        <para>Sets the name of an Object.</para>
        <para>If the object is an Asset, renames the asset and file names to match the object.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DragAndDropVisualMode">
      <summary>
        <para>Visual indication mode for Drag &amp;amp; Drop operation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.None">
      <summary>
        <para>No indication (drag should not be performed).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Copy">
      <summary>
        <para>Copy dragged objects.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Link">
      <summary>
        <para>Link dragged objects to target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Move">
      <summary>
        <para>Move dragged objects.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Generic">
      <summary>
        <para>Generic drag operation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Rejected">
      <summary>
        <para>Rejected drag operation.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DragAndDrop">
      <summary>
        <para>Editor drag &amp;amp; drop operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.PrepareStartDrag">
      <summary>
        <para>Clears drag &amp;amp; drop data.</para>
        <para>Clears everything stored in the drag &amp;amp; drop object and prepares it so you can write into it for initiating a drag operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.StartDrag(System.String)">
      <summary>
        <para>Start a drag operation.</para>
        <para>Initiates a drag operation with the current drag object state. Use paths and/or objectReferences to setup
drag state.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.AcceptDrag">
      <summary>
        <para>Accept a drag operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.GetGenericData(System.String)">
      <summary>
        <para>Get data associated with current drag and drop operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.SetGenericData(System.String,System.Object)">
      <summary>
        <para>Set data associated with current drag and drop operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.objectReferences">
      <summary>
        <para>References to <see cref="Object">objects</see> being dragged.</para>
        <para>Never returns null. If no object references are available returns an empty array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.paths">
      <summary>
        <para>The file names being dragged.</para>
        <para>Never returns null. If no paths are available returns an empty array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.visualMode">
      <summary>
        <para>The visual indication of the drag.</para>
        <para>Default is DragAndDropVisualMode.Link.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.activeControlID">
      <summary>
        <para>Get or set ID of currently active drag and drop control.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MonoScript">
      <summary>
        <para>Representation of Script assets.</para>
        <para>This class represents C#, JavaScript and Boo files stored in the project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MonoScript.GetClass">
      <summary>
        <para>Returns the System.Type object of the class implemented by this script.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MonoScript.FromMonoBehaviour(UnityEngine.MonoBehaviour)">
      <summary>
        <para>Returns the MonoScript object containing specified MonoBehaviour.</para>
      </summary>
      <param name="behaviour">The MonoBehaviour whose MonoScript should be returned.</param>
    </member>
    <member name="M:UnityEditor.MonoScript.FromScriptableObject(UnityEngine.ScriptableObject)">
      <summary>
        <para>Returns the MonoScript object containing specified ScriptableObject.</para>
      </summary>
      <param name="scriptableObject">The ScriptableObject whose MonoScript should be returned.</param>
    </member>
    <member name="T:UnityEditor.GameObjectUtility">
      <summary>
        <para>GameObject utility functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetStaticEditorFlags(UnityEngine.GameObject)">
      <summary>
        <para>Gets the set StaticEditorFlags.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.AreStaticEditorFlagsSet(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
      <summary>
        <para>Returns true if the passed in StaticEditorFlags are set.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetStaticEditorFlags(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
      <summary>
        <para>Sets the StaticEditorFlags.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayer(UnityEngine.GameObject)">
      <summary>
        <para>Get the navmesh layer for the GameObject.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayerFromName(System.String)">
      <summary>
        <para>Get the navmesh layer from the layer name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetNavMeshLayer(UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>Set the navmesh layer for the gameobject.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayerNames">
      <summary>
        <para>Get all the navmesh layer names.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshArea(UnityEngine.GameObject)">
      <summary>
        <para>Get the navmesh area index for the GameObject.</para>
      </summary>
      <param name="go">GameObject to query.</param>
      <returns>
        <para>NavMesh area index.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshAreaFromName(System.String)">
      <summary>
        <para>Get the navmesh area index from the area name.</para>
      </summary>
      <param name="name">NavMesh area name to query.</param>
      <returns>
        <para>The NavMesh area index. If there is no NavMesh area with the requested name, the return value is -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetNavMeshArea(UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>Set the navmesh area for the gameobject.</para>
      </summary>
      <param name="go">GameObject to modify.</param>
      <param name="areaIndex">NavMesh area index to set.</param>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshAreaNames">
      <summary>
        <para>Get all the navmesh area names.</para>
      </summary>
      <returns>
        <para>Names of all the NavMesh areas.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetUniqueNameForSibling(UnityEngine.Transform,System.String)">
      <summary>
        <para>Get unique name for a new <see cref="GameObject">GameObject</see> compared to existing siblings. Useful when trying to avoid duplicate naming. When duplicate(s) are found, uses incremental a number after the base name.</para>
      </summary>
      <param name="parent">Target parent for a new <see cref="GameObject">GameObject</see>. Null means root level.</param>
      <param name="name">Requested name for a new <see cref="GameObject">GameObject</see>.</param>
      <returns>
        <para>Unique name for a new <see cref="GameObject">GameObject</see>.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetParentAndAlign(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Sets the parent and gives the child the same layer and position.</para>
        <para>This is intended as a utility function when creating custom GameObjects with a MenuItem in the "GameObject/" menu. When using the context click menu to create new GameObjects in the scene hierarchy, the newly created GameObjects should be parented to the clicked GameObject, which is passed in as MenuCommand.context. Calling this method ensures this behavior in the case of a context click while doing nothing if the context is null (see example on the MenuItem docs).</para>
      </summary>
      <param name="child">The GameObject that should have a new parent set.</param>
      <param name="parent">The GameObject that the child should get as a parent and have position and layer copied from. If null, this function does nothing.</param>
    </member>
    <member name="T:UnityEditor.GenericMenu">
      <summary>
        <para>The GenericMenu lets you create a custom context and dropdown menus.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu.MenuFunction)">
      <summary>
        <para>Add an item to the menu.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu.MenuFunction2,System.Object)">
      <summary>
        <para>Add an item to the menu.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddDisabledItem(UnityEngine.GUIContent)">
      <summary>
        <para>Add a disabled item to the menu.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddSeparator(System.String)">
      <summary>
        <para>Add a seperator item to the menu.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.GetItemCount">
      <summary>
        <para>Get number of items in the menu.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.ShowAsContext">
      <summary>
        <para>Show the menu under the mouse.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.DropDown(UnityEngine.Rect)">
      <summary>
        <para>Show the menu at the given screen rect.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ViewTool">
      <summary>
        <para>Enum for Tools.viewTool.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.None">
      <summary>
        <para>View tool is not selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Orbit">
      <summary>
        <para>The orbit tool is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Pan">
      <summary>
        <para>The pan tool is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Zoom">
      <summary>
        <para>The zoom tool is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.FPS">
      <summary>
        <para>The FPS tool is selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PivotMode">
      <summary>
        <para>Where is the tool handle placed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotMode.Center">
      <summary>
        <para>The tool handle is at the graphical center of the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotMode.Pivot">
      <summary>
        <para>The tool handle is on the pivot point of the active object.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PivotRotation">
      <summary>
        <para>How is the tool handle oriented.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotRotation.Local">
      <summary>
        <para>The tool handle is oriented from the active object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotRotation.Global">
      <summary>
        <para>The tool handle is aligned along the global axes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Tool">
      <summary>
        <para>Which tool is active in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.View">
      <summary>
        <para>The view tool is active - Use <see cref="Tools-viewTool">Tools.viewTool</see> to find out which view tool we're talking about.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Move">
      <summary>
        <para>The move tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Rotate">
      <summary>
        <para>The rotate tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Scale">
      <summary>
        <para>The scale tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Rect">
      <summary>
        <para>The rect tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.None">
      <summary>
        <para>No tool is active. Set this to implement your own in-inspector toolbar (like the terrain editor does).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Tools">
      <summary>
        <para>Class used to manipulate the tools used in Unity's Scene View.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.current">
      <summary>
        <para>The tool that is currently selected for the Scene View.</para>
        <para>This refers to the View, Move, Rotate and Scale tools available in the toolbar for the main editor window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.viewTool">
      <summary>
        <para>The option that is currently active for the View tool in the Scene view.</para>
        <para>The View tool has options for Orbit, Pan, Zoom and FPS, depending on which combination mouse buttons and modifier keys is used. This property reports which option is currently active.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handlePosition">
      <summary>
        <para>The position of the tool handle in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRect">
      <summary>
        <para>The rectangle used for the rect tool.</para>
        <para>The rectangle is relative to the handlePosition and is rotated around the handleRectRotation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRectRotation">
      <summary>
        <para>The rotation of the rect tool handle in world space.</para>
        <para>This rotation can change based on the current Scene View camera angle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.pivotMode">
      <summary>
        <para>Are we in Center or Pivot mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.rectBlueprintMode">
      <summary>
        <para>Is the rect handle in blueprint mode?</para>
        <para>In blueprint mode the rect handle for RectTransforms ignored local rotation and scale. This can make it easier to work with layouts for RectTransforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRotation">
      <summary>
        <para>The rotation of the tool handle in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.pivotRotation">
      <summary>
        <para>What's the rotation of the tool handle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.hidden">
      <summary>
        <para>Hides the Tools(Move, Rotate, Resize) on the Scene view.</para>
        <para>This will hide the default Move, Rotate and Resize Tools for the curently selected GameObjects, it will not interfere with custom gizmos or handles added by Scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.visibleLayers">
      <summary>
        <para>Which layers are visible in the scene view.</para>
        <para>This is a bitfield.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorConditionMode">
      <summary>
        <para>The mode of the condition.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.If">
      <summary>
        <para>The condition is true when the parameter value is true.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.IfNot">
      <summary>
        <para>The condition is true when the parameter value is false.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.Greater">
      <summary>
        <para>The condition is true when parameter value is greater than the threshold.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.Less">
      <summary>
        <para>The condition is true when the parameter value is less than the threshold.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.Equals">
      <summary>
        <para>The condition is true when parameter value is equal to the threshold.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorConditionMode.NotEqual">
      <summary>
        <para>The condition is true when the parameter value is not equal to the threshold.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.TransitionInterruptionSource">
      <summary>
        <para>Which AnimatorState transitions can interrupt the Transition.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.None">
      <summary>
        <para>The Transition cannot be interrupted. Formely know as Atomic.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.Source">
      <summary>
        <para>The Transition can be interrupted by transitions in the source AnimatorState.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.Destination">
      <summary>
        <para>The Transition can be interrupted by transitions in the destination AnimatorState.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.SourceThenDestination">
      <summary>
        <para>The Transition can be interrupted by transitions in the source or the destination AnimatorState.</para>
        <para>The transitions in the source AnimatorState have priority.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.TransitionInterruptionSource.DestinationThenSource">
      <summary>
        <para>The Transition can be interrupted by transitions in the source or the destination AnimatorState.</para>
        <para>The transitions in the destination AnimatorState have priority.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorCondition">
      <summary>
        <para>Condition that is used to determine if a transition must be taken.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorCondition.mode">
      <summary>
        <para>The mode of the condition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorCondition.parameter">
      <summary>
        <para>The name of the parameter used in the condition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorCondition.threshold">
      <summary>
        <para>The AnimatorParameter's threshold value for the condition to be true.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorTransitionBase">
      <summary>
        <para>Base class for animator transitions. Transitions define when and how the state machine switches from one state to another.</para>
        <para>A transition happens when all its conditions are met.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorTransitionBase.AddCondition(UnityEditor.Animations.AnimatorConditionMode,System.Single,System.String)">
      <summary>
        <para>Utility function to add a condition to a transition.</para>
        <para>An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="mode">The <see cref="Animations.AnimatorCondition">AnimatorCondition</see> mode of the condition.</param>
      <param name="threshold">The threshold value of the condition.</param>
      <param name="parameter">The name of the parameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorTransitionBase.RemoveCondition(UnityEditor.Animations.AnimatorCondition)">
      <summary>
        <para>Utility function to remove a condition from the transition.</para>
        <para>This functions pushes an Undo operation.</para>
      </summary>
      <param name="condition">The condition to remove.</param>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.solo">
      <summary>
        <para>Mutes all other transitions in the source state.</para>
        <para>Many transitions can be soloed at the same time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.mute">
      <summary>
        <para>Mutes the transition. The transition will never occur.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.isExit">
      <summary>
        <para>Is the transition destination the exit of the current state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.destinationStateMachine">
      <summary>
        <para>The destination state machine of the transition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.destinationState">
      <summary>
        <para>The destination state of the transition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorTransitionBase.conditions">
      <summary>
        <para>
          <see cref="Animations.AnimatorCondition">AnimatorCondition</see> conditions that need to be met for a transition to happen.</para>
        <para>Note that this is an array.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorTransition">
      <summary>
        <para>Transitions define when and how the state machine switch from on state to another. AnimatorTransition always originate from a StateMachine or a StateMachine entry. They do not define timing parameters.</para>
        <para>A transition happens when all its conditions are met.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorTransition.#ctor">
      <summary>
        <para>Creates a new animator transition.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorStateTransition">
      <summary>
        <para>Transitions define when and how the state machine switch from one state to another. <see cref="Animations.AnimatorStateTransition">AnimatorStateTransition</see> always originate from an Animator State (or AnyState) and have timing parameters.</para>
        <para>A transition happens when all its conditions are met.  AnimatorStateTransition derives from AnimatorTransitionBase.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateTransition.#ctor">
      <summary>
        <para>Creates a new animator state transition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.duration">
      <summary>
        <para>The duration of the transition.</para>
        <para>The duration is in normalized time of the source state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.offset">
      <summary>
        <para>The time at which the destination state will start.</para>
        <para>The offset is in normalized time of the destination state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.interruptionSource">
      <summary>
        <para>Which AnimatorState transitions can interrupt the Transition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.orderedInterruption">
      <summary>
        <para>The Transition can be interrupted by a transition that has a higher priority.</para>
        <para>Transition priority is based on the order that transitions are listed in the source AnimatorState.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.exitTime">
      <summary>
        <para>The normalized time of the source state when the condition is true.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.hasExitTime">
      <summary>
        <para>When active the transition will have an exit time condition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.hasFixedDuration">
      <summary>
        <para>When active the transition duration will have a fixed duration.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateTransition.canTransitionToSelf">
      <summary>
        <para>Set to true to allow or disallow transition to self during AnyState transition.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorState">
      <summary>
        <para>States are the basic building blocks of a state machine. Each state contains a Motion ( AnimationClip or BlendTree) which will play while the character is in that state. When an event in the game triggers a state transition, the character will be left in a new state whose animation sequence will then take over.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddStateMachineBehaviour(System.Type)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorState. C# Users can use a generic version.</para>
        <para>Note that there is no RemoveStateMachineBehaviour(), to remove a state machine behaviour, use Object.Destroy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddStateMachineBehaviour``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorStateTransition)">
      <summary>
        <para>Utility function to add an outgoing transition.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="transition">The transition to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.RemoveTransition(UnityEditor.Animations.AnimatorStateTransition)">
      <summary>
        <para>Utility function to remove a transition from the state.</para>
        <para>If the transition is a sub asset of the state, it will be deleted.
This function pushes an Undo operation.</para>
      </summary>
      <param name="transition">Transition to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationState">The destination state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationStateMachine">The destination state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorState,System.Boolean)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
This function pushes an Undo operation.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <param name="destinationState">The destination state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddTransition(UnityEditor.Animations.AnimatorStateMachine,System.Boolean)">
      <summary>
        <para>Utility function to add an outgoing transition to the destination state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
This function pushes an Undo operation.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <param name="destinationStateMachine">The destination state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddExitTransition">
      <summary>
        <para>Utility function to add an outgoing transition to the exit of the state's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <returns>
        <para>The <see cref="Animations.AnimatorStateTransition">AnimatorStateTransition</see> that was added.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorState.AddExitTransition(System.Boolean)">
      <summary>
        <para>Utility function to add an outgoing transition to the exit of the state's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="defaultExitTime">If true, the exit time will be the equivalent of 0.25 second.</param>
      <returns>
        <para>The <see cref="Animations.AnimatorStateTransition">AnimatorStateTransition</see> that was added.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.nameHash">
      <summary>
        <para>The hashed name of the state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.motion">
      <summary>
        <para>The motion assigned to this state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.speed">
      <summary>
        <para>The default speed of the motion.</para>
        <para>1.0 is base speed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.cycleOffset">
      <summary>
        <para>Offset at which the animation loop starts. Useful for synchronizing looped animations.
Units is normalized time.</para>
        <para>AnimationClip loop time needs to be checked to use cycle offset, otherwise cycle offset won't have any effect.
Valid range is 0 to 1.0.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.mirror">
      <summary>
        <para>Should the state be mirrored.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.iKOnFeet">
      <summary>
        <para>Should Foot IK be respected for this state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.writeDefaultValues">
      <summary>
        <para>Whether or not the AnimatorStates writes back the default values for properties that are not animated by its Motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.tag">
      <summary>
        <para>A tag can be used to identify a state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.speedParameter">
      <summary>
        <para>The animator controller parameter that drives the speed value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.cycleOffsetParameter">
      <summary>
        <para>The animator controller parameter that drives the cycle offset value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.mirrorParameter">
      <summary>
        <para>The animator controller parameter that drives the mirror value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.speedParameterActive">
      <summary>
        <para>Define if the <c>speed</c> value is driven by an Animator controller parameter or by the value set in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.cycleOffsetParameterActive">
      <summary>
        <para>Define if the <c>cycle offset</c> value is driven by an Animator controller parameter or by the value set in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.mirrorParameterActive">
      <summary>
        <para>Define if the <c>mirror</c> value is driven by an Animator controller parameter or by the value set in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.transitions">
      <summary>
        <para>The transitions that are going out of the state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorState.behaviours">
      <summary>
        <para>The Behaviour list assigned to this state.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.ChildAnimatorState">
      <summary>
        <para>Structure that represents a state in the context of its parent state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorState.state">
      <summary>
        <para>The state.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorState.position">
      <summary>
        <para>The position the the state node in the context of its parent state machine.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.ChildAnimatorStateMachine">
      <summary>
        <para>Structure that represents a state machine in the context of its parent state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorStateMachine.stateMachine">
      <summary>
        <para>The state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.ChildAnimatorStateMachine.position">
      <summary>
        <para>The position the the state machine node in the context of its parent state machine.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorStateMachine">
      <summary>
        <para>A graph controlling the interaction of states. Each state references a motion.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.GetStateMachineTransitions(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Gets the list of all outgoing state machine transitions from given state machine.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.SetStateMachineTransitions(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorTransition[])">
      <summary>
        <para>Sets the list of all outgoing state machine transitions from given state machine.</para>
      </summary>
      <param name="transitions">The outgoing transitions.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineBehaviour(System.Type)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorStateMachine. C# Users can use a generic version.</para>
        <para>Note that there is no RemoveStateMachineBehaviour(), to remove a state machine behaviour, use Object.Destroy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineBehaviour``1">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.MakeUniqueStateName(System.String)">
      <summary>
        <para>Makes a unique state name in the context of the parent state machine.</para>
      </summary>
      <param name="name">Desired name for the state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.MakeUniqueStateMachineName(System.String)">
      <summary>
        <para>Makes a unique state machine name in the context of the parent state machine.</para>
      </summary>
      <param name="name">Desired name for the state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddState(System.String)">
      <summary>
        <para>Utility function to add a state to the state machine.</para>
        <para>The state asset that is created is added as a sub asset of the state machine.  The API returns an AnimatorState which you can use to add transitions.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="name">The name of the new state.</param>
      <returns>
        <para>The AnimatorState that was created for this state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddState(System.String,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state to the state machine.</para>
        <para>The state asset that is created is added as a sub asset of the state machine.  The API returns an AnimatorState which you can use to add transitions.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="name">The name of the new state.</param>
      <param name="position">The position of the state node.</param>
      <returns>
        <para>The AnimatorState that was created for this state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddState(UnityEditor.Animations.AnimatorState,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state to the state machine.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="state">The state to add.</param>
      <param name="position">The position of the state node.</param>
      <returns>
        <para>The AnimatorState that was created for this state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveState(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to remove a state from the state machine.</para>
        <para>If the state is a sub asset of the state machine, it will be deleted.
This function pushes an Undo operation.</para>
      </summary>
      <param name="state">The state to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachine(System.String)">
      <summary>
        <para>Utility function to add a state machine to the state machine.</para>
        <para>The state machine asset that is created is added as a sub asset of the state machine.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="name">The name of the new state machine.</param>
      <returns>
        <para>The newly created <see cref="Animations.AnimatorStateMachine">AnimatorStateMachine</see> state machine.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachine(System.String,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state machine to the state machine.</para>
        <para>The state machine asset that is created is added as a sub asset of the state machine.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="name">The name of the new state machine.</param>
      <param name="position">The position of the state machine node.</param>
      <returns>
        <para>The newly created <see cref="Animations.AnimatorStateMachine">AnimatorStateMachine</see> state machine.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachine(UnityEditor.Animations.AnimatorStateMachine,UnityEngine.Vector3)">
      <summary>
        <para>Utility function to add a state machine to the state machine.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="stateMachine">The state machine to add.</param>
      <param name="position">The position of the state machine node.</param>
      <returns>
        <para>The newly created <see cref="Animations.AnimatorStateMachine">AnimatorStateMachine</see> state machine.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveStateMachine(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to remove a state machine from its parent state machine.</para>
        <para>If the state machine is a sub asset of the parent state machine, it will be deleted.
This function pushes an Undo operation.</para>
      </summary>
      <param name="stateMachine">The state machine to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddAnyStateTransition(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an AnyState transition to the specified state or statemachine.</para>
        <para>The transition asset that is created is added as a sub asset of the state machine.
Its important that AnyStateTransitions are added to the root state machine. AnyStateTranistions added to a sub state machine will be discarded at runtime.
This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationState">The destination state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddAnyStateTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an AnyState transition to the specified state or statemachine.</para>
        <para>The transition asset that is created is added as a sub asset of the state machine.
Its important that AnyStateTransitions are added to the root state machine. AnyStateTranistions added to a sub state machine will be discarded at runtime.
This function pushes an Undo operation.</para>
      </summary>
      <param name="destinationStateMachine">The destination statemachine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveAnyStateTransition(UnityEditor.Animations.AnimatorStateTransition)">
      <summary>
        <para>Utility function to remove an AnyState transition from the state machine.</para>
        <para>If the transition is a sub asset of the state machine, it will be deleted.
This function pushes an Undo operation.</para>
      </summary>
      <param name="transition">The AnyStat transition to remove.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the destination.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <returns>
        <para>The <see cref="Animations.AnimatorTransition">AnimatorTransition</see> transition that was created.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the destination.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <param name="destinationStateMachine">The destination state machine.</param>
      <returns>
        <para>The <see cref="Animations.AnimatorTransition">AnimatorTransition</see> transition that was created.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the destination.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
      <param name="destinationState">The destination state.</param>
      <returns>
        <para>The <see cref="Animations.AnimatorTransition">AnimatorTransition</see> transition that was created.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddStateMachineExitTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an outgoing transition from the source state machine to the exit of it's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
This function pushes an Undo operation.</para>
      </summary>
      <param name="sourceStateMachine">The source state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveStateMachineTransition(UnityEditor.Animations.AnimatorStateMachine,UnityEditor.Animations.AnimatorTransition)">
      <summary>
        <para>Utility function to remove an outgoing transition from source state machine.</para>
        <para>If the transition is a sub asset of the state machine, it will be deleted.
This function pushes an Undo operation.</para>
      </summary>
      <param name="transition">The transition to remove.</param>
      <param name="sourceStateMachine">The source state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddEntryTransition(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Utility function to add an incoming transition to the exit of it's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="destinationState">The destination <see cref="Animations.AnimatorState">AnimatorState</see> state.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.AddEntryTransition(UnityEditor.Animations.AnimatorStateMachine)">
      <summary>
        <para>Utility function to add an incoming transition to the exit of it's parent state machine.</para>
        <para>The transition asset that is created is added as a sub asset of the state.
An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="destinationStateMachine">The destination <see cref="Animations.AnimatorStateMachine">AnimatorStateMachine</see> state machine.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorStateMachine.RemoveEntryTransition(UnityEditor.Animations.AnimatorTransition)">
      <summary>
        <para>Utility function to remove an entry transition from the state machine.</para>
        <para>If the transition is a sub asset of the state machine, it will be deleted.
This function pushes an Undo operation.</para>
      </summary>
      <param name="transition">The transition to remove.</param>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.states">
      <summary>
        <para>The list of states.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.stateMachines">
      <summary>
        <para>The list of sub state machines.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.defaultState">
      <summary>
        <para>The state that the state machine will be in when it starts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.anyStatePosition">
      <summary>
        <para>The position of the AnyState node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.entryPosition">
      <summary>
        <para>The position of the entry node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.exitPosition">
      <summary>
        <para>The position of the exit node.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.parentStateMachinePosition">
      <summary>
        <para>The position of the parent state machine node. Only valid when in a hierachic state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.anyStateTransitions">
      <summary>
        <para>The list of AnyState transitions.</para>
        <para>Its important that AnyStateTransitions are added to the root state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.entryTransitions">
      <summary>
        <para>The list of entry transitions in the state machine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorStateMachine.behaviours">
      <summary>
        <para>The Behaviour list assigned to this state machine.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorLayerBlendingMode">
      <summary>
        <para>Specifies how the layer is blended with the previous layers.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorLayerBlendingMode.Override">
      <summary>
        <para>Animations overrides to the previous layers.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.AnimatorLayerBlendingMode.Additive">
      <summary>
        <para>Animations are added to the previous layers.</para>
        <para>The additive animation is based on the offset from the 1st frame of the animation to its current frame.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorControllerLayer">
      <summary>
        <para>The Animation Layer contains a state machine that controls animations of a model or part of it.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.GetOverrideMotion(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Gets the override motion for the state on the given layer.</para>
      </summary>
      <param name="state">The state which we want to get the motion.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.SetOverrideMotion(UnityEditor.Animations.AnimatorState,UnityEngine.Motion)">
      <summary>
        <para>Sets the override motion for the state on the given layer.</para>
      </summary>
      <param name="state">The state which we want to set the motion.</param>
      <param name="motion">The motion that will be set.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorControllerLayer.GetOverrideBehaviours(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Gets the override behaviour list for the state on the given layer.</para>
      </summary>
      <param name="state">The state which we want to get the behaviour list.</param>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.name">
      <summary>
        <para>The name of the layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.stateMachine">
      <summary>
        <para>The state machine for the layer.</para>
        <para>When using Synced Layer, this state machine  is overridden by the state machine of the synced layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.avatarMask">
      <summary>
        <para>The AvatarMask that is used to mask the animation on the given layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.blendingMode">
      <summary>
        <para>The blending mode used by the layer. It is not taken into account for the first layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.syncedLayerIndex">
      <summary>
        <para>Specifies the index of the Synced Layer.</para>
        <para>When set to -1 there is no Synced Layer and the layer uses its own AnimatorStateMachine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.iKPass">
      <summary>
        <para>When active, the layer will have an IK pass when evaluated. It will trigger an OnAnimatorIK callback.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.defaultWeight">
      <summary>
        <para>The default blending weight that the layers has. It is not taken into account for the first layer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorControllerLayer.syncedLayerAffectsTiming">
      <summary>
        <para>When active, the layer will take control of the duration of the Synced Layer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.StateMachineBehaviourContext">
      <summary>
        <para>This class contains all the owner's information for this State Machine Behaviour.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.StateMachineBehaviourContext.animatorController">
      <summary>
        <para>The <see cref="Animations.AnimatorController">AnimatorController</see> that owns this state machine behaviour.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.StateMachineBehaviourContext.animatorObject">
      <summary>
        <para>The object that owns this state machine behaviour. Could be an <see cref="Animations.AnimatorState">AnimatorState</see> or <see cref="Animations.AnimatorStateMachine">AnimatorStateMachine</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Animations.StateMachineBehaviourContext.layerIndex">
      <summary>
        <para>The animator's layer index that owns this state machine behaviour.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Animations.AnimatorController">
      <summary>
        <para>The Animator Controller controls animation through layers with state machines, controlled by parameters.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.MakeUniqueParameterName(System.String)">
      <summary>
        <para>Creates a unique name for the parameter.</para>
      </summary>
      <param name="name">The desired name of the AnimatorParameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.MakeUniqueLayerName(System.String)">
      <summary>
        <para>Creates a unique name for the layers.</para>
      </summary>
      <param name="name">The desired name of the AnimatorLayer.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.FindStateMachineBehaviourContext(UnityEngine.StateMachineBehaviour)">
      <summary>
        <para>Use this function to retrieve the owner of this behaviour.</para>
        <para>Please note that this function is very slow. It is not recommended to use this function every frame.
</para>
      </summary>
      <param name="behaviour">The State Machine Behaviour to get context for.</param>
      <returns>
        <para>Returns the State Machine Behaviour edition context.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateStateMachineBehaviour(UnityEditor.MonoScript)">
      <summary>
        <para>This function will create a StateMachineBehaviour instance based on the class define in this script.</para>
        <para>This function will validate that the monoscript is a valid statemachine behaviour, the class must be a sub class of StateMachineBehaviour and shouldn't be a generic.
</para>
      </summary>
      <param name="script">MonoScript class to instantiate.</param>
      <returns>
        <para>Returns instance id of created object, returns 0 if something is not valid.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddEffectiveStateMachineBehaviour(System.Type,UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Adds a state machine behaviour class of type stateMachineBehaviourType to the AnimatorState for layer layerIndex. This function should be used when you are dealing with synchronized layer and would like to add a state machine behaviour on a synchronized layer. C# Users can use a generic version.</para>
        <para>Note that there is no RemoveEffectiveStateMachineBehaviour(), to remove a state machine behaviour, use Object.Destroy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddEffectiveStateMachineBehaviour``1(UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Generic version. See the <see href="http://docs.unity3d.com/ScriptReference/../Manual/GenericFunctions.html">Generic Functions</see> page for more details.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetBehaviours``1">
      <summary>
        <para>Returns all StateMachineBehaviour that match type <c>T</c> or are derived from <c>T</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddLayer(System.String)">
      <summary>
        <para>Utility function to add a layer to the controller.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="name">The name of the Layer.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddLayer(UnityEditor.Animations.AnimatorControllerLayer)">
      <summary>
        <para>Utility function to add a layer to the controller.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="layer">The layer to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.RemoveLayer(System.Int32)">
      <summary>
        <para>Utility function to remove a layer from the controller.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="index">The index of the AnimatorLayer.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddParameter(System.String,UnityEngine.AnimatorControllerParameterType)">
      <summary>
        <para>Utility function to add a parameter to the controller.</para>
        <para>An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="name">The name of the parameter.</param>
      <param name="type">The type of the parameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddParameter(UnityEngine.AnimatorControllerParameter)">
      <summary>
        <para>Utility function to add a parameter to the controller.</para>
        <para>An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="paramater">The parameter to add.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.RemoveParameter(System.Int32)">
      <summary>
        <para>Utility function to remove a parameter from the controller.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="index">The index of the AnimatorParameter.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddMotion(UnityEngine.Motion)">
      <summary>
        <para>Utility function that creates a new state  with the motion in it.</para>
        <para>The state asset that is created is added as a sub asset of the state machine to which it is added.
This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The Motion that will be in the AnimatorState.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.AddMotion(UnityEngine.Motion,System.Int32)">
      <summary>
        <para>Utility function that creates a new state  with the motion in it.</para>
        <para>The state asset that is created is added as a sub asset of the state machine to which it is added.
This function pushes an Undo operation.</para>
      </summary>
      <param name="motion">The Motion that will be in the AnimatorState.</param>
      <param name="layerIndex">The layer where the Motion will be added.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateAnimatorControllerAtPath(System.String)">
      <summary>
        <para>Creates an AnimatorController at the given path.</para>
        <para>An example showing usage of this API can be found at the AnimatorController page.</para>
      </summary>
      <param name="path">The path where the AnimatorController asset will be created.</param>
      <returns>
        <para>The created AnimationController or null if an error occured.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.CreateAnimatorControllerAtPathWithClip(System.String,UnityEngine.AnimationClip)">
      <summary>
        <para>Creates an AnimatorController at the given path, and automatically create an AnimatorLayer  with an AnimatorStateMachine that will add a State with the AnimationClip in it.</para>
        <para>This function pushes an Undo operation.</para>
      </summary>
      <param name="path">The path where the AnimatorController will be created.</param>
      <param name="clip">The default clip that will be played by the AnimatorController.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.SetStateEffectiveMotion(UnityEditor.Animations.AnimatorState,UnityEngine.Motion)">
      <summary>
        <para>Sets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Motion that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want to set the Motion.</param>
      <param name="motion">The Motion that will be set.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.SetStateEffectiveMotion(UnityEditor.Animations.AnimatorState,UnityEngine.Motion,System.Int32)">
      <summary>
        <para>Sets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to set the Motion that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want to set the Motion.</param>
      <param name="motion">The Motion that will be set.</param>
      <param name="layerIndex">The layer to set the Motion.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetStateEffectiveMotion(UnityEditor.Animations.AnimatorState)">
      <summary>
        <para>Gets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get the Motion that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want the Motion.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetStateEffectiveMotion(UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Gets the effective Motion for the AnimatorState. The Motion is either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get the Motion that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want the Motion.</param>
      <param name="layerIndex">The layer that is queried.</param>
    </member>
    <member name="M:UnityEditor.Animations.AnimatorController.GetStateEffectiveBehaviours(UnityEditor.Animations.AnimatorState,System.Int32)">
      <summary>
        <para>Gets the effective state machine behaviour list for the AnimatorState. Behaviours are either stored in the AnimatorStateMachine or in the AnimatorLayer's ovverrides. Use this function to get Behaviour list that is effectively used.</para>
      </summary>
      <param name="state">The AnimatorState which we want the Behaviour list.</param>
      <param name="layerIndex">The layer that is queried.</param>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorController.layers">
      <summary>
        <para>The layers in the controller.</para>
        <para>It's important to note that the AnimatorControllerLayer are returned as a copy. The array should be set back into the property when changed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Animations.AnimatorController.parameters">
      <summary>
        <para>Parameters are used to communicate between scripting and the controller. They are used to drive transitions and blendtrees for example.</para>
        <para>It's important to note that the AnimatorControllerParameters are returned as a copy. The array should be set back into the property when changed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LODUtility">
      <summary>
        <para>LOD Utility Helpers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.LODUtility.CalculateLODGroupBoundingBox(UnityEngine.LODGroup)">
      <summary>
        <para>Recalculate the bounding region for the given LODGroup.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Asset">
      <summary>
        <para>This class containes information about the version control state of an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.IsState(UnityEditor.VersionControl.Asset.States)">
      <summary>
        <para>Returns true if the version control state of the asset exactly matches the input state.</para>
      </summary>
      <param name="state">State to check for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.IsOneOfStates(UnityEditor.VersionControl.Asset.States[])">
      <summary>
        <para>Returns true if the version control state of the assets is one of the input states.</para>
      </summary>
      <param name="states">Array of states to test for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.Edit">
      <summary>
        <para>Opens the assets in an associated editor.</para>
        <para>Will try to open the asset in an associated editor. Eg. if png files are associated to Photoshop the png file will be loaded in photoshop.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.Load">
      <summary>
        <para>Loads the asset to memory.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.state">
      <summary>
        <para>Gets the version control state of the asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.path">
      <summary>
        <para>Gets the path of the asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isFolder">
      <summary>
        <para>Returns true if the asset is a folder.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.readOnly">
      <summary>
        <para>Returns true is the asset is read only.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isMeta">
      <summary>
        <para>Returns true if the instance of the Asset class actually refers to a .meta file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.locked">
      <summary>
        <para>Returns true if the asset is locked by the version control system.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.name">
      <summary>
        <para>Get the name of the asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.fullName">
      <summary>
        <para>Gets the full name of the asset including extension.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isInCurrentProject">
      <summary>
        <para>Returns true if the assets is in the current project.</para>
        <para>If you have multiple projects or other files in the version controls repository. The window showing the incoming changes will display all changes incoming from the remote repository. Some of these changes might be to other projects or files not part of the currently open project. In that case this will return false.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Asset+States">
      <summary>
        <para>Describes the various version control states an asset can have.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.None">
      <summary>
        <para>The version control state is unknown.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Local">
      <summary>
        <para>The asset is not under version control.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Synced">
      <summary>
        <para>The asset is up to date.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.OutOfSync">
      <summary>
        <para>A newer version of the asset is available on the version control server.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Missing">
      <summary>
        <para>The asset exists in version control but is missing on the local machine.</para>
        <para>This can happen if you delete an assets from Finder/Explorer with out using the version control system.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.CheckedOutLocal">
      <summary>
        <para>The asset has been checked out on the local machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.CheckedOutRemote">
      <summary>
        <para>The asset has been checked out on a remote machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.DeletedLocal">
      <summary>
        <para>The asset has been deleted locally.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.DeletedRemote">
      <summary>
        <para>The asset has been deleted on a remote machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.AddedLocal">
      <summary>
        <para>The was locally added to version control.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.AddedRemote">
      <summary>
        <para>Remotely this asset was added to version control.</para>
        <para>If the same assets exists on two machine but has only been added to version control on one of them, then it will appear as remotely added on the machine where it has not been added.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Conflicted">
      <summary>
        <para>There is a conflict with the asset that needs to be resolved.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.LockedLocal">
      <summary>
        <para>The asset is locked by the local machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.LockedRemote">
      <summary>
        <para>The asset is locked by a remote machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Updating">
      <summary>
        <para>The state of the asset is currently being queried from the version control server.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.ReadOnly">
      <summary>
        <para>The asset is read only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.MetaFile">
      <summary>
        <para>This instance of the class actaully refers to a .meta file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Provider">
      <summary>
        <para>This class provides acces to the version control API.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Merge(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.MergeMethod)">
      <summary>
        <para>This method will initiate a merge task handle merging of the conflicting assets.</para>
        <para>An initial attempt of is made to make a simple merge automatically. If this fails the merge method decide if manual merge too will be spawned of not.</para>
      </summary>
      <param name="assets">The list of conflicting assets to be merged.</param>
      <param name="method">How to merge the assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Return true if the task can be executed.</para>
        <para>For the list of assets version it return true if one or more assets meets the requirements.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Return true if the task can be executed.</para>
        <para>For the list of assets version it return true if one or more assets meets the requirements.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if locking the assets is a valid operation.</para>
      </summary>
      <param name="assets">The assets to lock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if locking the assets is a valid operation.</para>
      </summary>
      <param name="asset">The asset to lock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Attempt to lock an asset for exclusive editing.</para>
        <para>Depening on version control system and server setup this might be an exclusive lock preventing other people from even modifing the asset or or it might simple prevent other people from submitting the asset to the version control server.</para>
      </summary>
      <param name="assets">List of assets to lock/unlock.</param>
      <param name="locked">True to lock assets, false to unlock assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Attempt to lock an asset for exclusive editing.</para>
        <para>Depening on version control system and server setup this might be an exclusive lock preventing other people from even modifing the asset or or it might simple prevent other people from submitting the asset to the version control server.</para>
      </summary>
      <param name="locked">True to lock assets, false to unlock assets.</param>
      <param name="asset">Asset to lock/unlock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Return true if Revert is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
      <param name="mode">Revert mode to test for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Reverts the specified assets by undoing any changes done since last time you synced.</para>
        <para>The last sync time is usually when Provider.GetLatest() was last issued but may be something else if an external version control client is used at the same time.</para>
      </summary>
      <param name="assets">The list of assets to be reverted.</param>
      <param name="mode">How to revert the assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Return true if Revert is a valid task to perform.</para>
      </summary>
      <param name="mode">Revert mode to test for.</param>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Reverts the specified assets by undoing any changes done since last time you synced.</para>
        <para>The last sync time is usually when Provider.GetLatest() was last issued but may be something else if an external version control client is used at the same time.</para>
      </summary>
      <param name="mode">How to revert the assets.</param>
      <param name="asset">The asset to be reverted.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if getting the latest version of an asset is a valid operation.</para>
        <para>For the list version it returns true if is valid for one or more assets.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if getting the latest version of an asset is a valid operation.</para>
        <para>For the list version it returns true if is valid for one or more assets.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Start a task for getting the latest version of an asset from the version control server.</para>
      </summary>
      <param name="assets">List of assets to update.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Start a task for getting the latest version of an asset from the version control server.</para>
      </summary>
      <param name="asset">Asset to update.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetDescription(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Given a changeset only containing the changeset ID, this will start a task for quering the description of the changeset.</para>
        <para>Mostly makes sense to use with Perforce.</para>
      </summary>
      <param name="changeset">Changeset to query description of.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Retrieves the list of assets belonging to a changeset.</para>
      </summary>
      <param name="changeset">Changeset to query for assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(System.String)">
      <summary>
        <para>Retrieves the list of assets belonging to a changeset.</para>
      </summary>
      <param name="changesetID">ChangesetID to query for assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.</para>
      </summary>
      <param name="changeset">Incoming changeset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(System.String)">
      <summary>
        <para>Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.</para>
      </summary>
      <param name="changesetID">Incoming changesetid.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changeset">Changeset to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="changeset">Changeset to move asset to.</param>
      <param name="asset">Asset to move to changeset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,System.String)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,System.String)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="asset">Asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetListFromSelection">
      <summary>
        <para>Return version control information about the currently selected assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetActivePlugin">
      <summary>
        <para>Gets the currently user selected verson control plugin.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetActiveConfigFields">
      <summary>
        <para>Returns the configuration fields for the currently active version control plugin.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSets">
      <summary>
        <para>Get a list of pending changesets owned by the current user.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Incoming">
      <summary>
        <para>Start a task for quering the version control server for incoming changes.</para>
        <para>The incoming changesets can be accessed through the task instance once it has been completed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IsOpenForEdit(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if an asset can be edited.</para>
        <para>Version control systems like Perforce requieres that an asset is checked out before it can be edited, in that case this will test if the asset can be edited.
Some version control systems support editing without checking out the asset in that case this will always return true.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UpdateSettings">
      <summary>
        <para>Start a task that sends the version control settings to the version control system.</para>
        <para>The settings include version control password, username, server, workspace etc. This differs from version control system selected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetByPath(System.String)">
      <summary>
        <para>Returns version control information about an asset.</para>
        <para>Returns null if the path is not known by the Unity Editor.</para>
      </summary>
      <param name="unityPath">Path to asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetByGUID(System.String)">
      <summary>
        <para>Returns version control information about an asset.</para>
        <para>Returns null if the GUID is not known by the Unity Editor.</para>
      </summary>
      <param name="guid">GUID of asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ClearCache">
      <summary>
        <para>This will invalidate the cached state information for all assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[])">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[],System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Move(System.String,System.String)">
      <summary>
        <para>Uses the version control plugin to move an asset from one path to another.</para>
      </summary>
      <param name="from">Path to source asset.</param>
      <param name="to">Path to destination.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Given an asset or a  list of assets this function returns true if Checkout is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String[],UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object[],UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Given an asset or a  list of assets this function returns true if Checkout is a valid task to perform.</para>
      </summary>
      <param name="asset">Single asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(System.String)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
        <para>Once the task has completed the resultCode of the task will tell if the assets were successfully deleted.</para>
      </summary>
      <param name="assetProjectPath">Project path of asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
        <para>Once the task has completed the resultCode of the task will tell if the assets were successfully deleted.</para>
      </summary>
      <param name="assets">List of assets to delete.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
        <para>Once the task has completed the resultCode of the task will tell if the assets were successfully deleted.</para>
      </summary>
      <param name="asset">Asset to delete.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.AddIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Given a list of assets this function returns true if Add is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Adds an assets or list of assets to version control.</para>
        <para>If the input asset is a folder setting the recursive flag will add all assets and assets in subfolders to the version control system.</para>
      </summary>
      <param name="assets">List of assets to add to version control system.</param>
      <param name="recursive">Set this true if adding should be done recursively into subfolders.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Adds an assets or list of assets to version control.</para>
        <para>If the input asset is a folder setting the recursive flag will add all assets and assets in subfolders to the version control system.</para>
      </summary>
      <param name="recursive">Set this true if adding should be done recursively into subfolders.</param>
      <param name="asset">Single asset to add to version control system.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSetsIsValid(UnityEditor.VersionControl.ChangeSets)">
      <summary>
        <para>Test if deleting a changeset is a valid task to perform.</para>
      </summary>
      <param name="changesets">Changeset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSets(UnityEditor.VersionControl.ChangeSets)">
      <summary>
        <para>Starts a task that will attempt to delete the given changeset.</para>
        <para>It is required that the changesets must be empty.</para>
      </summary>
      <param name="changesets">List of changetsets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.SubmitIsValid(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if submitting the assets is a valid operation.</para>
      </summary>
      <param name="changeset">The changeset to submit.</param>
      <param name="assets">The asset to submit.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Submit(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList,System.String,System.Boolean)">
      <summary>
        <para>Start a task that submits the assets to version control.</para>
        <para>In some version control systems submit is known as commit.</para>
      </summary>
      <param name="changeset">The changeset to submit.</param>
      <param name="list">The list of assets to submit.</param>
      <param name="description">The description of the changeset.</param>
      <param name="saveOnly">If true then only save the changeset to be submitted later.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DiffIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Return true is starting a Diff task is a valid operation.</para>
      </summary>
      <param name="assets">List of assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DiffHead(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Starts a task for showing a diff of the given assest versus their head revision.</para>
      </summary>
      <param name="assets">List of assets.</param>
      <param name="includingMetaFiles">Whether or not to include .meta.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ResolveIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Tests if any of the assets in the list is resolvable.</para>
        <para>Returns true if any of the assets are resolvable.</para>
      </summary>
      <param name="assets">The list of asset to be resolved.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Resolve(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ResolveMethod)">
      <summary>
        <para>Start a task that will resolve conflicting assets in version control.</para>
        <para>When conflicting assets appear you can resolve it by using your own copy or the incoming copy. A third way of resolving the conflict is by first Provider.Merge() the assets and the resolve using the merged asset. Use the resolveMethod to flag what should be used.</para>
      </summary>
      <param name="assets">The list of asset to mark as resolved.</param>
      <param name="resolveMethod">How the assets should be resolved.</param>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.enabled">
      <summary>
        <para>Returns true if the version control provider is enabled and a valid Unity Pro License was found.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.isActive">
      <summary>
        <para>Returns true if a version control plugin has been selected and configured correctly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.requiresNetwork">
      <summary>
        <para>This is true if a network connection is required by the currently selected version control plugin to perform any action.</para>
        <para>E.g. before doing anything using Perforce you need to checkout the asset, in order to do that a connection to the server is required where as subversion does not require access to the server to do changes to an asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.onlineState">
      <summary>
        <para>Returns the OnlineState of the version control provider.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.offlineReason">
      <summary>
        <para>Returns the reason for the version control provider being offline (if it is offline).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.activeTask">
      <summary>
        <para>Gets the currently executing task.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.CompletionAction">
      <summary>
        <para>Different actions a version control task can do upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.UpdatePendingWindow">
      <summary>
        <para>Update the list of pending changes when a task completes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeContentsPendingWindow">
      <summary>
        <para>Update the content of a pending changeset with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnIncomingPendingWindow">
      <summary>
        <para>Update incoming changes window with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeSetsPendingWindow">
      <summary>
        <para>Update the pending changesets with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnGotLatestPendingWindow">
      <summary>
        <para>Refreshes the incoming and pensing changes window upon task completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnSubmittedChangeWindow">
      <summary>
        <para>Refresh the submit window with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnAddedChangeWindow">
      <summary>
        <para>Refresh windows upon task completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnCheckoutCompleted">
      <summary>
        <para>Show or update the checkout failure window.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.SubmitResult">
      <summary>
        <para>The status of an operation returned by the VCS.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.OK">
      <summary>
        <para>Submission worked.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.Error">
      <summary>
        <para>An error was returned.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.ConflictingFiles">
      <summary>
        <para>Files conflicted.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.SubmitResult.UnaddedFiles">
      <summary>
        <para>Files were unable to be added.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Task">
      <summary>
        <para>A UnityEditor.VersionControl.Task is created almost everytime UnityEditor.VersionControl.Provider is ask to perform an action.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Task.Wait">
      <summary>
        <para>A blocking wait for the task to complete.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Task.SetCompletionAction(UnityEditor.VersionControl.CompletionAction)">
      <summary>
        <para>Upon completion of a task a completion task will be performed if it is set.</para>
      </summary>
      <param name="action">Which completion action to perform.</param>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.text">
      <summary>
        <para>Will contain the result of the Provider.ChangeSetDescription task.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.description">
      <summary>
        <para>A short description of the current task.</para>
        <para>Not all tasks have a description, currently only the longer running task where progress is showed in the Editor UI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.success">
      <summary>
        <para>Get whether or not the task was completed succesfully.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.secondsSpent">
      <summary>
        <para>Total time spent in task since the task was started.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.progressPct">
      <summary>
        <para>Progress of current task in precent.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.resultCode">
      <summary>
        <para>Some task return result codes, these are stored here.</para>
        <para>Depending on the task the result code will map to either an AssetDeleteResult, AssetMoveResult or SubmitResult.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.messages">
      <summary>
        <para>May contain messages from the version control plugins.</para>
        <para>This could be errors or information messages to be displayed in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.assetList">
      <summary>
        <para>The result of some types of tasks.</para>
        <para>Most task perform an action and returns the result as list of version control informations about assets, e.g. a Status task will return the result in this list.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.changeSets">
      <summary>
        <para>List of changesets returned by some tasks.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ChangeSet">
      <summary>
        <para>Wrapper around a changeset description and ID.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ChangeSet.DefaultID">
      <summary>
        <para>The id of the default changeset for version control systems supporting that.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ChangeSet.description">
      <summary>
        <para>Description of a changeset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ChangeSet.id">
      <summary>
        <para>Version control specific ID of a changeset.</para>
        <para>E.g. Perforce changetset have unique IDs, while sibversion has no ID at all in which case it is simply -1.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Message">
      <summary>
        <para>Messages from the version control system.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Message.Show">
      <summary>
        <para>Write the message to the console.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Message.severity">
      <summary>
        <para>The severity of the message.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Message.message">
      <summary>
        <para>The message text.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Message+Severity">
      <summary>
        <para>Severity of a version control message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message+Severity.Verbose">
      <summary>
        <para>Verbose message.</para>
        <para>This includes intermediate query results and other info from the version control plugins.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message+Severity.Info">
      <summary>
        <para>Informational message.</para>
        <para>This can include information such as who else is accessing an asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message+Severity.Warning">
      <summary>
        <para>Warning message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message+Severity.Error">
      <summary>
        <para>Error message.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ConfigField">
      <summary>
        <para>This class describes the.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.name">
      <summary>
        <para>Name of the configuration field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.label">
      <summary>
        <para>Label that is displayed next to the configuration field in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.description">
      <summary>
        <para>Descrition of the configuration field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.isRequired">
      <summary>
        <para>This is true if the configuration field is required for the version control plugin to function correctly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.isPassword">
      <summary>
        <para>This is true if the configuration field is a password field.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Plugin">
      <summary>
        <para>The plugin class describes a version control plugin and which configuratin options it has.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Plugin.configFields">
      <summary>
        <para>Configuration fields of the plugin.</para>
      </summary>
    </member>
    <member name="T:AssetModificationProcessor">
      <summary>
        <para>AssetModificationProcessor lets you hook into saving of serialized assets and scenes which are edited inside Unity.</para>
        <para>This lets you prevent writing of assets by Unity for integration with VCS solutions like Perforce which require
locking of files.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetModificationProcessor">
      <summary>
        <para>AssetModificationProcessor lets you hook into saving of serialized assets and scenes which are edited inside Unity.</para>
        <para>This lets you prevent writing of assets by Unity for integration with VCS solutions like Perforce which require
locking of files.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetPostprocessor">
      <summary>
        <para>AssetPostprocessor lets you hook into the import pipeline and run scripts prior or after importing assets.</para>
        <para>During model import the functions are called in the the following order:

- OnPreprocessModel is called at the very beginning and you can override ModelImporter settings that are used for the whole model import process.
- Once Meshes and Materials are imported, we create GameObjects hierarchy from the imported nodes. Every GameObject that represents imported node gets correspondent MeshFilter, MeshRenderer and MeshCollider components. Before assigning a Material to the MeshRenderer  OnAssignMaterialModel function is invoked.
- After GameObject has initialized MeshRenderers and "userdata" exists OnPostprocessGameObjectWithUserProperties is called. That happens before children GameObjects are generated.
- If animation generation was not disabled at previous stages (see ModelImporter.generateAnimations), then SkinnedMesh and Animations are generated. If possible Avatar is also created and GameObjecs hierarchy is optimized. After that OnPostprocessModel is called for the root GameObject.OnPreprocessSpeedTree and OnPostprocessSpeedTree are called on SpeedTree assets (.spm file) the same way as OnPreprocessModel and OnPostprocessModel, except that the assetImporter type is SpeedTreeImporter.In a production pipeline AssetPostprocessors should always be placed in pre-built dll's in the project instead of in scripts.
AssetPostprocessors change the output of imported assets, thus a compile error in one of the scripts will lead to assets being imported differently.
This can be a severe issue when working in a production pipeline. By using dll's for AssetPostprocessors you ensure that they can always be executed even if the scripts have compile errors.
This way you can override default values in the import settings or modify the imported data like textures or meshes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String)">
      <summary>
        <para>Logs an import warning to the console.</para>
        <para>Pass an asset as the second argument to link the warning to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String,UnityEngine.Object)">
      <summary>
        <para>Logs an import warning to the console.</para>
        <para>Pass an asset as the second argument to link the warning to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String)">
      <summary>
        <para>Logs an import error message to the console.</para>
        <para>Pass an asset as the second argument to link the error to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String,UnityEngine.Object)">
      <summary>
        <para>Logs an import error message to the console.</para>
        <para>Pass an asset as the second argument to link the error to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.GetVersion">
      <summary>
        <para>Returns the version of the asset postprocessor.</para>
        <para>When the script is recompiled, if a version change is detected, the assets associated with this asset postprocessor will be reimported.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.GetPostprocessOrder">
      <summary>
        <para>Override the order in which importers are processed.</para>
        <para>By overriding GetImportOrder you can sort in which order postprocessors are executed.
Smaller priorities will be imported first.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetPostprocessor.assetPath">
      <summary>
        <para>The path name of the asset being imported.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetPostprocessor.assetImporter">
      <summary>
        <para>Reference to the asset importer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetImporter">
      <summary>
        <para>Base class from which asset importers for specific asset types derive.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetImporter.GetAtPath(System.String)">
      <summary>
        <para>Retrieves the asset importer for the asset at <c>path</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetImporter.SaveAndReimport">
      <summary>
        <para>Save asset importer settings if asset importer is dirty.</para>
        <para>Under the hood this calls AssetDatabase.ImportAsset.
</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetPath">
      <summary>
        <para>The path name of the asset for this importer. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.userData">
      <summary>
        <para>Get or set any user data.</para>
        <para>This can be usefull during asset post processing if you want to associate eg. a model with an auxillary xml file to control some parts of the importing or you can put your xml data directly in to the userData field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetBundleName">
      <summary>
        <para>Get or set the AssetBundle name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetBundleVariant">
      <summary>
        <para>Get or set the AssetBundle variant.</para>
        <para>AssetBundle variant is combined with the AssetImporter.assetBundleName as the file extension to generate the full AssetBundle name.AssetBundle variant is used to achieve virtual assets via AssetBundle. AssetBundles which have the same AssetBundle name but different AssetBundle variants will have the same internal IDs. So they can be switched out arbitrarily with AssetBundles of different variants.Please make sure the assets exactly match in variant AssetBundles.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetPreview">
      <summary>
        <para>Utility for fetching asset previews by instance ID of assets, See <see cref="AssetPreview.GetAssetPreview">AssetPreview.GetAssetPreview</see>. Since previews are loaded asynchronously methods are provided for requesting if all previews have been fully loaded, see <see cref="AssetPreview.IsLoadingAssetPreviews">AssetPreview.IsLoadingAssetPreviews</see>. Loaded previews are stored in a cache, the size of the cache can be controlled by calling [AssetPreview.SetPreviewTextureCacheSize].</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetAssetPreview(UnityEngine.Object)">
      <summary>
        <para>Returns a preview texture for an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreview(System.Int32)">
      <summary>
        <para>Loading previews is asynchronous so it is useful to know if a specific asset preview is in the process of being loaded so client code e.g can repaint while waiting for the loading to finish.</para>
      </summary>
      <param name="instanceID">InstanceID of the assset that a preview has been requested for by: AssetPreview.GetAssetPreview().</param>
    </member>
    <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreviews">
      <summary>
        <para>Loading previews is asynchronous so it is useful to know if any requested previews are in the process of being loaded so client code e.g can repaint while waiting.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.SetPreviewTextureCacheSize(System.Int32)">
      <summary>
        <para>Set the asset preview cache to a size that can hold all visible previews on the screen at once.</para>
        <para>If showing previews in a scrollpane make sure the cache larger than the count of the visible previews otherwise flickering will occur since least used previews will be unloaded to make space in the cache.</para>
      </summary>
      <param name="size">The number of previews that can be loaded into the cache before the least used previews are being unloaded.</param>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetMiniThumbnail(UnityEngine.Object)">
      <summary>
        <para>Returns the thumbnail for an object (like the ones you see in the project view).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetMiniTypeThumbnail(System.Type)">
      <summary>
        <para>Returns the thumbnail for the type.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.AtlasSettings">
      <summary>
        <para>Describes the final atlas texture.</para>
        <para>Note that if not all Sprites can be fit to an area defined by maxWidth and maxHeight, multiple atlas pages will be generated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.format">
      <summary>
        <para>The format of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.colorSpace">
      <summary>
        <para>Desired color space.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.compressionQuality">
      <summary>
        <para>Quality of atlas texture compression in the range [0..100].</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.filterMode">
      <summary>
        <para>Filtering mode of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.maxWidth">
      <summary>
        <para>Maximum width of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.maxHeight">
      <summary>
        <para>Maximum height of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.paddingPower">
      <summary>
        <para>The amount of extra padding between packed sprites.</para>
        <para>Expressed as the power of 2 minus 1 (i.e. paddingPower of 0 enforces a 2 pixel gap between, paddingPower of 1 - 4 pixel gap, paddingPower of 2 - 8 pixel gap, etc.). This can be used to prevent sprites from bleeding into each other in lower mip levels.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.anisoLevel">
      <summary>
        <para>Anisotropic filtering level of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.generateMipMaps">
      <summary>
        <para>Should sprite atlas textures generate mip maps?</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.PackerJob">
      <summary>
        <para>Current Sprite Packer job definition.</para>
        <para>To be used in IPackerPolicy.OnGroupAtlases.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.PackerJob.AddAtlas(System.String,UnityEditor.Sprites.AtlasSettings)">
      <summary>
        <para>Registers a new atlas.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.PackerJob.AssignToAtlas(System.String,UnityEngine.Sprite,UnityEngine.SpritePackingMode,UnityEngine.SpritePackingRotation)">
      <summary>
        <para>Assigns a Sprite to an already registered atlas.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.Packer">
      <summary>
        <para>Sprite Packer helpers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.GetTexturesForAtlas(System.String)">
      <summary>
        <para>Returns all atlas textures generated for the specified atlas.</para>
      </summary>
      <param name="atlasName">Atlas name.</param>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget,System.Boolean,UnityEditor.Sprites.Packer.Execution)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
        <para>If Sprite atlas files are available, they will be remapped.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
        <para>If Sprite atlas files are available, they will be remapped.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
        <para>If Sprite atlas files are available, they will be remapped.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.Packer.kDefaultPolicy">
      <summary>
        <para>Name of the default Sprite Packer policy.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.atlasNames">
      <summary>
        <para>Array of Sprite atlas names found in the current atlas cache.</para>
        <para>Might change after repacking Sprites.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.Policies">
      <summary>
        <para>Available Sprite Packer policies for this project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.SelectedPolicy">
      <summary>
        <para>The active Sprite Packer policy for this project.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.Packer+Execution">
      <summary>
        <para>Sprite Packer execution mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.Packer+Execution.Normal">
      <summary>
        <para>Normal execution. Will not trigger IPackerPolicy.OnGroupAtlases unless IPackerPolicy, IPackerPolicy version or TextureImporter settings have changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.Packer+Execution.ForceRegroup">
      <summary>
        <para>Will always trigger IPackerPolicy.OnGroupAtlases.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.SpriteUtility">
      <summary>
        <para>Helper utilities for accessing <see cref="Sprite">Sprite</see> data.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteTexture(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated <see cref="Sprite">Sprite</see> texture. If <see cref="Sprite">Sprite</see> is packed, it is possible to query for both source and atlas textures.</para>
        <para>Note that the sprite atlas cache must be up to date for this API to return valid data.</para>
      </summary>
      <param name="getAtlasData">If <see cref="Sprite">Sprite</see> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteMesh(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated <see cref="Sprite">Sprite</see> mesh positions.</para>
      </summary>
      <param name="getAtlasData">If <see cref="Sprite">Sprite</see> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteUVs(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated <see cref="Sprite">Sprite</see> mesh uvs.</para>
      </summary>
      <param name="sprite">If <see cref="Sprite">Sprite</see> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="M:UnityEditor.Sprites.SpriteUtility.GetSpriteIndices(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated <see cref="Sprite">Sprite</see> mesh indices.</para>
      </summary>
      <param name="sprite">If <see cref="Sprite">Sprite</see> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="T:UnityEditor.Sprites.DataUtility">
      <summary>
        <para>Helper utilities for accessing <see cref="Sprite">Sprite</see> data.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.HighlightSearchMode">
      <summary>
        <para>Used to specify how to find a given element in the editor to highlight.</para>
        <para>Let's consider various approaches to highlighting the Scale control in the Transform component.Using the HighlightSearchMode.PrefixLabel mode you can specify the label text "Scale" as the identifier to highlight the entire Scale control with both label and all three number fields included. This mode can't be used if you want to only highlight the X component of the Scale control. Since the label text of the X component is simply "X", you would get the X component of the Position control instead if you attempted that. The HighlightSearchMode.PrefixLabel mode works for any control that uses EditorGUI.PrefixLabel or EditorGUI.HandlePrefixLabel.If you use the HighlightSearchMode.Content mode to seach for the text "Scale", only the label itself will be highlighted. This mode can highlight what corresponds to a single GUIStyle.Draw call and hence cannot highlight composite controls. It is particularly useful for highlighting buttons.The HighlightSearchMode.Identifier mode searches for rects explicitly marked to be highlightable using the Highlighter.HighlightIdentifier function. This is for example done for all controls that uses the SerializedProperty system, using the SerializedProperty.propertyPath as the identifier. This means you could use this mode to highlight the X component of the Scale control by searching for "m_LocalScale.x".The HighlightSearchMode.Auto mode searches using all the above modes and can be used in most cases. Searching for "Scale" using this mode will highlight the entire Scale control rather than just the label, since the PrefixLabel handling is hit before the GUIStyle.Draw call of the label.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.None">
      <summary>
        <para>Highlights nothing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Auto">
      <summary>
        <para>Highlights the first element found using any of the search modes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Identifier">
      <summary>
        <para>Highlights an element with a given identifier text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.PrefixLabel">
      <summary>
        <para>Highlights an entire editor control using its label text as identifier.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Content">
      <summary>
        <para>Highlights an element containing text using the text as identifier.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Highlighter">
      <summary>
        <para>Use this class to highlight elements in the editor for use in in-editor tutorials and similar.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Highlighter.Stop">
      <summary>
        <para>Stops the active highlight.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String)">
      <summary>
        <para>Highlights an element in the editor.</para>
        <para>This function will highlight the specified element in the specified window. If the element could not be found, the function returns false. If the element is inside a scrollview and is not currently visible, the scrollview will first automatically scroll to reveal the element and then highlight it.Once the element is highlighted it will stay highlighted until either the Highlighter.Stop function is called, or the element disappears from view. The element could disappear from view if the user scrolls away from it, the window is closed, the section of the GUI with the element in it is collapsed or otherwise hidden, or when starting or stopping Play Mode.Most EditorGUI controls can be highlighted using their label as identifier.</para>
      </summary>
      <param name="windowTitle">The title of the window the element is inside.</param>
      <param name="text">The text to identify the element with.</param>
      <returns>
        <para>
          <c>true</c> if the requested element was found; otherwise <c>false</c>.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String,UnityEditor.HighlightSearchMode)">
      <summary>
        <para>Highlights an element in the editor.</para>
        <para>This function will highlight the specified element in the specified window. If the element could not be found, the function returns false. If the element is inside a scrollview and is not currently visible, the scrollview will first automatically scroll to reveal the element and then highlight it.Once the element is highlighted it will stay highlighted until either the Highlighter.Stop function is called, or the element disappears from view. The element could disappear from view if the user scrolls away from it, the window is closed, the section of the GUI with the element in it is collapsed or otherwise hidden, or when starting or stopping Play Mode.Most EditorGUI controls can be highlighted using their label as identifier.</para>
      </summary>
      <param name="windowTitle">The title of the window the element is inside.</param>
      <param name="text">The text to identify the element with.</param>
      <param name="mode">Optional mode to specify how to search for the element.</param>
      <returns>
        <para>
          <c>true</c> if the requested element was found; otherwise <c>false</c>.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Highlighter.HighlightIdentifier(UnityEngine.Rect,System.String)">
      <summary>
        <para>Call this method to create an identifiable rect that the Highlighter can find.</para>
        <para>If you want a custom rect in an EditorWindow or custom Editor to be highlightable, you can call this method to specify the rect and the identifier text for that rect. That will make it possible for the Highlighter to highlight the rect.</para>
      </summary>
      <param name="position">The position to make highlightable.</param>
      <param name="identifier">The identifier text of the rect.</param>
    </member>
    <member name="P:UnityEditor.Highlighter.active">
      <summary>
        <para>Is there currently an active highlight?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeVisible">
      <summary>
        <para>Is the current active highlight visible yet?</para>
        <para>If the element to be highlighted is inside a scrollview, the scrollview automatically scrolls to reveal the element. Once it is within view, activeViisble will be true.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeText">
      <summary>
        <para>The text of the current active highlight.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeRect">
      <summary>
        <para>The rect in screenspace of the current active highlight.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpeedTreeImporter">
      <summary>
        <para>AssetImportor for importing SpeedTree model assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SpeedTreeImporter.#ctor">
      <summary>
        <para>Construct a new SpeedTreeImporter object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SpeedTreeImporter.GenerateMaterials">
      <summary>
        <para>Generates all necessary materials under materialFolderPath. If Version Control is enabled please first check out the folder.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpeedTreeImporter.windQualityNames">
      <summary>
        <para>Gets an array of name strings for wind quality value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.hasImported">
      <summary>
        <para>Tells if the SPM file has been previously imported.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.materialFolderPath">
      <summary>
        <para>Returns the folder path where generated materials will be placed in.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.scaleFactor">
      <summary>
        <para>How much to scale the tree model compared to what is in the .spm file.</para>
        <para>The default value of scaleFactor is 0.3048, the conversion ratio from feet to meters. By default, 1 unit in SpeedTree Modeler is 1 foot, while the most conventional measurement in Unity is 1 unit = 1 meter. Therefore we apply a default scaling at import time so that the size of the imported model matches the source model.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.mainColor">
      <summary>
        <para>Gets and sets a default main color.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.specColor">
      <summary>
        <para>Gets and sets a default specular color.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.hueVariation">
      <summary>
        <para>Gets and sets a default Hue variation color and amount (in alpha).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.shininess">
      <summary>
        <para>Gets and sets a default Shininess value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.alphaTestRef">
      <summary>
        <para>Gets and sets a default alpha test reference values.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.hasBillboard">
      <summary>
        <para>Tells if there is a billboard LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.enableSmoothLODTransition">
      <summary>
        <para>Enables smooth LOD transitions.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.animateCrossFading">
      <summary>
        <para>Indicates if the cross-fade LOD transition, applied to the last mesh LOD and the billboard, should be animated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.billboardTransitionCrossFadeWidth">
      <summary>
        <para>Proportion of the last 3D mesh LOD region width which is used for cross-fading to billboard tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.fadeOutWidth">
      <summary>
        <para>Proportion of the billboard LOD region width which is used for fading out the billboard.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.LODHeights">
      <summary>
        <para>Gets and sets an array of floats of each LOD's screen height value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.castShadows">
      <summary>
        <para>Gets and sets an array of booleans to enable shadow casting for each LOD.</para>
        <para>Billboard LOD (if present it is always the last LOD) will ignore the value and always returns false. Therefore when being set, the array passed in can be one element shorter than the total LODs on the tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.receiveShadows">
      <summary>
        <para>Gets and sets an array of booleans to enable shadow receiving for each LOD.</para>
        <para>Billboard LOD (if present it is always the last LOD) will ignore the value and always returns false. Therefore when being set, the array passed in can be one element shorter than the total LODs on the tree.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.useLightProbes">
      <summary>
        <para>Gets and sets an array of booleans to enable Light Probe lighting for each LOD.</para>
        <para>Specify true for billboard LOD may break batching and lead to performance penalty.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.reflectionProbeUsages">
      <summary>
        <para>Gets and sets an array of Reflection Probe usages for each LOD.</para>
        <para>Enabling reflection probes for billboard LOD may break batching and lead to performance penalty.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.enableBump">
      <summary>
        <para>Gets and sets an array of booleans to enable normal mapping for each LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.enableHue">
      <summary>
        <para>Gets and sets an array of booleans to enable Hue variation effect for each LOD.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.bestWindQuality">
      <summary>
        <para>Returns the best-possible wind quality on this asset (configured in SpeedTree modeler).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SpeedTreeImporter.windQualities">
      <summary>
        <para>Gets and sets an array of integers of the wind qualities on each LOD. Values will be clampped by BestWindQuality internally.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Lightmapping">
      <summary>
        <para>Allows to control the lightmapping job.</para>
        <para>Before starting the job the bake settings can be set via LightmapEditorSettings.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.ClearDiskCache">
      <summary>
        <para>Clears the cache used by lightmaps, reflection probes and default reflection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeAsync">
      <summary>
        <para>Starts an asynchronous bake job.</para>
        <para>The progress can be monitored via isRunning property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Bake">
      <summary>
        <para>Stars a synchronous bake job.</para>
        <para>Returns when the lightmapping has finished.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeSelectedAsync">
      <summary>
        <para>Starts an asynchronous bake job for the selected objects.</para>
        <para>The progress can be monitored via isRunning property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeSelected">
      <summary>
        <para>Starts a synchronous bake job for the selected objects.</para>
        <para>Returns when the lightmapping has finished.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeLightProbesOnlyAsync">
      <summary>
        <para>Starts an asynchronous bake job, but only bakes light probes.</para>
        <para>The progress can be monitored via isRunning property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeLightProbesOnly">
      <summary>
        <para>Starts a synchronous bake job, but only bakes light probes.</para>
        <para>Returns when the lightmapping has finished.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Cancel">
      <summary>
        <para>Cancels the currently running asynchronous bake job.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Clear">
      <summary>
        <para>Deletes all lightmap assets and makes all lights behave as if they weren't baked yet.</para>
        <para>Only those assets are deleted that are in the folder with the same name as the scene name
AND their name follows the pattern LightmapFar-#.exr or LightmapNear-#.exr.If LightmapEditorSettings.lockAtlas is disabled, it will also clear the lightmaps array and
clear lightmap indices on all objects.Baked light probes are cleared as well.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeReflectionProbe(UnityEngine.ReflectionProbe,System.String)">
      <summary>
        <para>Starts a synchronous bake job for the probe.</para>
        <para>Returns when the baking has finished.
</para>
      </summary>
      <param name="probe">Target probe.</param>
      <param name="path">The location where cubemap will be saved.</param>
      <returns>
        <para>Returns true if baking was succesful.</para>
      </returns>
    </member>
    <member name="F:UnityEditor.Lightmapping.completed">
      <summary>
        <para>Delegate which is called when bake job is completed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.giWorkflowMode">
      <summary>
        <para>The lightmap baking workflow mode used. Iterative mode is default, but you can switch to on demand mode which bakes only when the user presses the bake button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.isRunning">
      <summary>
        <para>Returns true when the bake job is running, false otherwise (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Lightmapping+GIWorkflowMode">
      <summary>
        <para>Workflow mode for lightmap baking. Default is Iterative.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Lightmapping+GIWorkflowMode.Iterative">
      <summary>
        <para>Always run lightmapping, changes to the scene are detected automatically.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Lightmapping+GIWorkflowMode.OnDemand">
      <summary>
        <para>Run lightmapping only when the user presses the bake button.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Lightmapping+GIWorkflowMode.Legacy">
      <summary>
        <para>Deprecated 4.x lightmapping support.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapEditorSettings">
      <summary>
        <para>Various settings for the bake.</para>
        <para>The bake can be started via Lightmapping class.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasWidth">
      <summary>
        <para>The maximum width of an individual lightmap texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasHeight">
      <summary>
        <para>The maximum height of an individual lightmap texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.resolution">
      <summary>
        <para>Lightmap resolution in texels per world unit. Higher resolution may take a long time to bake.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.textureCompression">
      <summary>
        <para>Whether to use DXT1 compression on the generated lightmaps.</para>
        <para>Compression is recommended to improve lightmap rendering performance
and lower the memory footprint, but might introduce visible artifacts
in scenes without high-detail texturing that would mask-out the issues.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.aoMaxDistance">
      <summary>
        <para>Beyond this distance a ray is considered to be unoccluded.</para>
        <para>Can be used to avoid full occlusion in closed scenes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.padding">
      <summary>
        <para>Texel separation between shapes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapParameters">
      <summary>
        <para>A collection of parameters that impact lightmap and realtime GI computations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.resolution">
      <summary>
        <para>The texel resolution per meter used for realtime lightmaps. This value is multiplied by <see cref="LightmapEditorSettings-resolution">LightmapEditorSettings.resolution</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.clusterResolution">
      <summary>
        <para>Controls the resolution at which Enlighten stores and can transfer input light.</para>
        <para>Typically this resolution can be slightly lower than the resolution of the realtime lightmap without significantly reducing the final quality, although this depends on the kinds of lighting environments you wish to use. Small, bright light sources will require a higher clusterResolution for Enlighten to capture them accurately.
		
		Cluster resolution is multiplied by the realtime lightmap resolution. A high value means a higher cluster resolution. A value of 1 matches each texel in the realtime lightmap with one input cluster.
		
		Using a very small cluster resolution results in light being smeared across the output texels. Larger values do not significantly increase quality (as they have to be averaged for the final output texel), but can cause unnecessary increases in time and memory footprint.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.irradianceBudget">
      <summary>
        <para>The amount of data used for realtime GI texels. Specifies how detailed view of the scene a texel has. Small values mean more averaged out lighting.</para>
        <para>Performance impact: It affects the memory footprint and the rate of lighting updates.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.irradianceQuality">
      <summary>
        <para>The number of rays to cast for computing irradiance form factors.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.backFaceTolerance">
      <summary>
        <para>The percentage of rays shot from a ray origin that must hit front faces to be considered usable.</para>
        <para>The precompute calculates visibility from ray origins to clusters, but attempts to reject ray origins that are inside geometry. If the percentage of rays that hit front faces is less than backFaceTolerance, the ray origin is marked invalid and will not affect the radiosity computation.
		
		For example, if backFaceTolerance is 0.0, the ray origin is rejected only if it sees nothing but backfaces. If 1.0, the ray origin is rejected if it has even one ray that hits a backface.
		
		This setting can help control light leaking, but should be considered in the context of the mesh authoring workflow. Preventing the rejection of ray origins by setting a value of 0.0 will ensure Enlighten does not reject ray origins due to single-sided geometry. However, if the majority of the meshes are closed, so visible backfaces are rare, a positive value can reduce light leaking or darkening that intersecting geometry would otherwise cause.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.modellingTolerance">
      <summary>
        <para>Maximum size of gaps that can be ignored for GI (multiplier on pixel size).</para>
        <para>Can be used to alleviate issues when objects are close together and the gap between the objects should not be used in the calculation of GI. In some cases having an object near a surface may cause a dark halo on the surface around the perimeter of the object because there is a small gap between the object and the surface where nearly no light will enter causing a very dark pixel. These dark pixels can look bad if they are partially visible and not completely obscured by the object. Increasing the modelling tolerance will make the GI calculation ignore the parts of the pixel that are very near another surface. The value is multiplier on the pixel size. If you want to ignore 5cm gaps with a realtime resolution of 2 texels per meter you would need a modelling tolerance of 0.01.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.edgeStitching">
      <summary>
        <para>Whether pairs of edges should be stitched together.</para>
        <para>When true, Enlighten identifies the pair of edges that should be stitched together and produces radiosity which is as smooth as possible across the seam. This parameter applies only to straight edges which run horizontally or vertically along chart boundaries in the atlas; the method is designed to work with rectangles which are axis-aligned in UV space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.systemTag">
      <summary>
        <para>System tag is an integer identifier. It lets you force an object into a different Enlighten system even though all the other parameters are the same.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.isTransparent">
      <summary>
        <para>If enabled, the object appears transparent during GlobalIllumination lighting calculations.</para>
        <para>Backfaces are not contributing to and light travels through the surface. This is useful for emissive invisible surfaces.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.AOQuality">
      <summary>
        <para>The number of rays to cast for computing ambient occlusion.</para>
        <para>Fewer rays produce a noisier result. In many cases using 256 rays gives a smooth result.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.AOAntiAliasingSamples">
      <summary>
        <para>The maximum number of times to supersample a texel to reduce aliasing in AO.</para>
        <para>Increasing this value does not increase baking times as the number of rays is only defined by AO quality. Effectively this parameter controls how to distribute the rays within the texel.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.blurRadius">
      <summary>
        <para>The radius (in texels) of the post-processing filter that blurs baked direct lighting.</para>
        <para>The filter is aware of geometry and visibility between texels and thus light leaking is reduced. In general, a value in the range from 2 to 8 leads to good results. Note that the processing time depends on the filter size squared and thus larger values should be avoided.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.directLightQuality">
      <summary>
        <para>The number of rays used for lights with an area. Allows for accurate soft shadowing.</para>
        <para>This is the maximum number of rays to trace to any light with an area. Larger lights will require more rays to produce a noise-free output. The default value works with the majority of scene setups, but you should increase this value if you observe noise. It can have a significant impact on performance, and for scenes with lots of area lights, halving this value halves the baking time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.antiAliasingSamples">
      <summary>
        <para>The maximum number of times to supersample a texel to reduce aliasing.</para>
        <para>For preview bakes, a value of 1 is sufficient, but you may notice jagged shadow edges in the output. The default value removes the majority of aliasing issues. For scenes with lots of lights, halving this value halves the baking time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapParameters.bakedLightmapTag">
      <summary>
        <para>BakedLightmapTag is an integer that affects the assignment to baked lightmaps. Objects with different values for bakedLightmapTag are guaranteed to not be assigned to the same lightmap even if the other baking parameters are the same.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.NavMeshBuilder">
      <summary>
        <para>Navigation mesh builder interface.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.NavMeshBuilder.BuildNavMesh">
      <summary>
        <para>Build the Navmesh.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.NavMeshBuilder.BuildNavMeshAsync">
      <summary>
        <para>Build the Navmesh Asyncronously.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.NavMeshBuilder.ClearAllNavMeshes">
      <summary>
        <para>Clear all Navmeshes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.NavMeshBuilder.Cancel">
      <summary>
        <para>Cancel Navmesh construction.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.NavMeshBuilder.isRunning">
      <summary>
        <para>Returns true if an asynchronous build is still running.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TrueTypeFontImporter">
      <summary>
        <para>AssetImporter for importing Fonts.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TrueTypeFontImporter.GenerateEditableFont(System.String)">
      <summary>
        <para>Create an editable copy of the font asset at <c>path</c>.</para>
        <para>Use this function if you want to modify the font generated by the TrueTypeFontImporter, with a custom texture
or otherwise. It will create a copy of the font asset at path with an accompanying png Texture file and a
Material, which you can all modify to meet your needs. A reference to the newly created editable Font is
returned.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontSize">
      <summary>
        <para>Font size to use for importing the characters.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontTextureCase">
      <summary>
        <para>Use this to adjust which characters should be imported.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.includeFontData">
      <summary>
        <para>If this is enabled, the actual font will be embedded into the asset for Dynamic fonts.</para>
        <para>When you disable this, the user must have the font installed in his system to use it.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontNames">
      <summary>
        <para>An array of font names, to be used when includeFontData is set to false.</para>
        <para>The first font in the array available on the OS will be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.customCharacters">
      <summary>
        <para>A custom set of characters to be included in the Font Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontTTFName">
      <summary>
        <para>The internal font name of the TTF file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.characterSpacing">
      <summary>
        <para>Spacing between character images in the generated texture in pixels. This is useful if you want to render text using a shader which samples pixels outside of the character area (like an outline shader).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.characterPadding">
      <summary>
        <para>Border pixels added to character images for padding. This is useful if you want to render text using a shader which needs to render outside of the character area (like an outline shader).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontRenderingMode">
      <summary>
        <para>Font rendering mode to use for this font.</para>
        <para>S.A. FontRenderingMode.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SketchUpImportCamera">
      <summary>
        <para>Structure to hold camera data extracted from a SketchUp file.</para>
        <para>When importing a SketchUp file, Unity retrieves the current camera view the file is saved with and the camera view of all the scenes in the SketchUp file. The camera data of each scene is stored in SketchUpImportSceneThis can be extracted later from SketchUpImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.position">
      <summary>
        <para>The position of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.lookAt">
      <summary>
        <para>The position the camera is looking at.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.up">
      <summary>
        <para>Up vector of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.fieldOfView">
      <summary>
        <para>Field of view of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.aspectRatio">
      <summary>
        <para>Aspect ratio of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.orthoSize">
      <summary>
        <para>The orthogonal projection size of the camera. This value only make sense if SketchUpImportCamera.isPerspective is false.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportCamera.isPerspective">
      <summary>
        <para>Indicate if the camera is using a perspective or orthogonal projection.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SketchUpImportScene">
      <summary>
        <para>Structure to hold scene data extracted from a SketchUp file.</para>
        <para>When importing a SketchUp file, Unity retrieves all the scenes in the SketchUp file.This can be extracted later from SketchUpImporter with SketchUpImporter.GetScenes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportScene.camera">
      <summary>
        <para>The camera data of the SketchUp scene.</para>
        <para>This is the camera view data that was extracted from the SketchUp scene of the file. See SketchUpImportCamera and SketchUpImporter.GetScenes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SketchUpImportScene.name">
      <summary>
        <para>The name of the SketchUp scene.</para>
        <para>This is the name of the SketchUp scene that was extracted from the SketchUp file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SketchUpImporter">
      <summary>
        <para>Derives from AssetImporter to handle importing of SketchUp files.</para>
        <para>From the SketchUpImporter, you can access certain properties that are extracted from the SketchUp file.The following is an example of showing the geo coordinate extracted from the SketchUp file.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SketchUpImporter.GetScenes">
      <summary>
        <para>The method returns an array of SketchUpImportScene which represents SketchUp scenes.</para>
        <para>SketchUpImportScene is the structure to represent the scene that was extracted from the SketchUp file.</para>
      </summary>
      <returns>
        <para>Array of scenes extracted from a SketchUp file.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.SketchUpImporter.GetDefaultCamera">
      <summary>
        <para>The default camera or the camera of the active scene which the SketchUp file was saved with.</para>
        <para>The following is an example of extracting the default camera and logging if the camera is a perspective camera stored in SketchUpImportCamera.</para>
      </summary>
      <returns>
        <para>The default camera.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.SketchUpImporter.latitude">
      <summary>
        <para>Retrieves the latitude Geo Coordinate imported from the SketchUp file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SketchUpImporter.longitude">
      <summary>
        <para>Retrieves the longitude Geo Coordinate imported from the SketchUp file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SketchUpImporter.northCorrection">
      <summary>
        <para>Retrieves the north correction value imported from the SketchUp file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.InitializeOnLoadAttribute">
      <summary>
        <para>Allow an editor class to be initialized when Unity loads without action from the user.</para>
        <para>Note that static constructors with this attribute are called when Unity starts and when Run is pressed.  In this second case the Unity runtime is intialised and this is treated as a Load. 
See the manual page about running editor code on launch for further details.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.InitializeOnLoadMethodAttribute">
      <summary>
        <para>Allow an editor class method to be initialized when Unity loads without action from the user.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty">
      <summary>
        <para>Describes information and value of a single shader property.</para>
        <para>MaterialProperty is used with the MaterialEditor when writing custom material editors, or implementing custom MaterialPropertyDrawer classes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.targets">
      <summary>
        <para>Material objects being edited by this property (Read Only).</para>
        <para>Changes done to property values via floatValue, colorValue, vectorValue, textureValue will be applied to these objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.type">
      <summary>
        <para>Type of the property (Read Only).</para>
        <para>Material properties can be textures, colors, floats and so on. Depending on the type, you should use textureValue, colorValue, vectorValue or floatValue to access the property value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.name">
      <summary>
        <para>Name of the property (Read Only).</para>
        <para>This is the variable name that is used in the shader, for example _MainTex.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.displayName">
      <summary>
        <para>Display name of the property (Read Only).</para>
        <para>This is the user-visible property name, for example "Main Texture" that is declared in the shader's Properties block.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.flags">
      <summary>
        <para>Flags that control how property is displayed (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.textureDimension">
      <summary>
        <para>Texture dimension (2D, Cubemap etc.) of the property (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.rangeLimits">
      <summary>
        <para>Min/max limits of a ranged float property (Read Only).</para>
        <para>This is only relevant for MaterialProperty.PropType.Range properties.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.hasMixedValue">
      <summary>
        <para>Does this property have multiple different values? (Read Only)</para>
        <para>When multiple materials are selected at once, some of their properties can have different values.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.colorValue">
      <summary>
        <para>Color value of the property.</para>
        <para>Setting a new value will apply it to all material targets, and will automatically record an undo operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.vectorValue">
      <summary>
        <para>Vector value of the property.</para>
        <para>Setting a new value will apply it to all material targets, and will automatically record an undo operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.floatValue">
      <summary>
        <para>Float vaue of the property.</para>
        <para>Setting a new value will apply it to all material targets, and will automatically record an undo operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.textureValue">
      <summary>
        <para>Texture value of the property.</para>
        <para>Setting a new value will apply it to all material targets, and will automatically record an undo operation.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty+PropType">
      <summary>
        <para>Material property type.</para>
        <para>Material properties can be textures, colors, floats and so on.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Color">
      <summary>
        <para>Color property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Vector">
      <summary>
        <para>Vector property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Float">
      <summary>
        <para>Float property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Range">
      <summary>
        <para>Ranged float (with min/max values) property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Texture">
      <summary>
        <para>Texture property.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty+TexDim">
      <summary>
        <para>Texture dimension of a property.</para>
        <para>Texture properties can accept regular (2D) textures, Cubemaps etc.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.None">
      <summary>
        <para>No texture type is set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.Tex2D">
      <summary>
        <para>
          <see cref="Texture2D">Texture2D</see> property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.Tex3D">
      <summary>
        <para>
          <see cref="Texture3D">Texture3D</see> property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.Cube">
      <summary>
        <para>
          <see cref="Cubemap">Cubemap</see> property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.Any">
      <summary>
        <para>Texture property accepts any texture type.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty+PropFlags">
      <summary>
        <para>Flags that control how a <see cref="MaterialProperty">MaterialProperty</see> is displayed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropFlags.None">
      <summary>
        <para>No flags are set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropFlags.HideInInspector">
      <summary>
        <para>Do not show the property in the inspector.</para>
        <para>MaterialEditor will not show this property. This corresponds to the "[HideInInspector]" attribute in front of a property in the shader code.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropFlags.PerRendererData">
      <summary>
        <para>Texture value for this property will be queried from renderer's <see cref="MaterialPropertyBlock">MaterialPropertyBlock</see>, instead of from the material. This corresponds to the "[PerRendererData]" attribute in front of a property in the shader code.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropFlags.NoScaleOffset">
      <summary>
        <para>Do not show UV scale/offset fields next to a texture.</para>
        <para>This is only relevant to texture shader properties. When this flag is set, the default material inspector
will not display UV scale/offset controls for a texture. This corresponds to the "[NoScaleOffset]" attribute in front
of a property in the shader code.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropFlags.Normal">
      <summary>
        <para>Signifies that values of this property contain Normal (normalized vector) data.</para>
        <para>When this flag is set, the default material inspector will display warning if incompatible data was assigned in the Material. For instance default material inspector will warn and suggest to fix the texture that is not marked as Normalmap. This corresponds to "[Normal]" attribute in front
of property in the shader code.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropFlags.HDR">
      <summary>
        <para>Signifies that values of this property contain High Dynamic Range (HDR) data.</para>
        <para>When this flag is set, the default material inspector will display warning if incompatible data was assigned in the Material. For instance default material inspector will warn and suggest to fix the texture that contain alpha channel (unsupported in HDR textures). This corresponds to "[HDR]" attribute in front
of property in the shader code.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BaseHierarchySort">
      <summary>
        <para>The base class used to create new sorting.</para>
        <para>Example of a natural compare hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BaseHierarchySort.Compare(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>The sorting method used to determine the order of GameObjects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BaseHierarchySort.content">
      <summary>
        <para>The content to display to quickly identify the hierarchy's mode.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TransformSort">
      <summary>
        <para>Is the default sorting method used by the hierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TransformSort.content">
      <summary>
        <para>Content to visualize the transform sorting method.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AlphabeticalSort">
      <summary>
        <para>Hierarchy sort method to allow for items and their children to be sorted alphabetically.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AlphabeticalSort.Compare(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Sort the gameobjects by name.</para>
      </summary>
      <param name="lhs">LHS gameobject to sort.</param>
      <param name="rhs">RHS gameobject to sort.</param>
    </member>
    <member name="P:UnityEditor.AlphabeticalSort.content">
      <summary>
        <para>Content to visualize the alphabetical sorting method.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DrawCameraMode">
      <summary>
        <para>Drawing modes for <see cref="Handles.DrawCamera">Handles.DrawCamera</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Normal">
      <summary>
        <para>Draw the camera like it would be drawn in-game. This uses the clear flags of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Textured">
      <summary>
        <para>Draw the camera textured with selection wireframe and no background clearing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Wireframe">
      <summary>
        <para>Draw the camera in wireframe and no background clearing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.TexturedWire">
      <summary>
        <para>Draw the camera where all objects have a wireframe overlay. and no background clearing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.ShadowCascades">
      <summary>
        <para>Draw directional light shadowmap cascades.</para>
        <para>Scene view is tinted according to which shadow cascade the objects fall into. Colors match the UI for shadow cascade split distances in Quality Settings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.RenderPaths">
      <summary>
        <para>Draw color-coded render paths.</para>
        <para>Objects are colored blue for Deferred Shading, yellow for Forward, green for legacy deferred lighting and red for legacy VertexLit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.AlphaChannel">
      <summary>
        <para>Display alpha channel of the rendering.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Overdraw">
      <summary>
        <para>Display scene overdraw, with brighter colors indicating more overdraw.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Mipmaps">
      <summary>
        <para>Display texture resolution, with red tint indicating too high resolution, and blue tint indicating texture sizes that could be higher.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredDiffuse">
      <summary>
        <para>Draw diffuse color of Deferred Shading g-buffer.</para>
        <para>This mode is only enabled when Deferred Shading rendering path is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredSpecular">
      <summary>
        <para>Draw specular color of Deferred Shading g-buffer.</para>
        <para>This mode is only enabled when Deferred Shading rendering path is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredSmoothness">
      <summary>
        <para>Draw smoothness value of Deferred Shading g-buffer.</para>
        <para>This mode is only enabled when Deferred Shading rendering path is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.DeferredNormal">
      <summary>
        <para>Draw world space normal of Deferred Shading g-buffer.</para>
        <para>This mode is only enabled when Deferred Shading rendering path is used.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Charting">
      <summary>
        <para>Draw objects with different color for each chart (UV island).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Systems">
      <summary>
        <para>Draw objects with different color for each GI system.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Albedo">
      <summary>
        <para>Draw objects with the albedo component only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Emissive">
      <summary>
        <para>Draw objects with the emission component only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Irradiance">
      <summary>
        <para>Draw objects with real-time GI only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Directionality">
      <summary>
        <para>Draw objects with directionality for real-time GI.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Baked">
      <summary>
        <para>Draw objects with baked GI only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Clustering">
      <summary>
        <para>Draw with different color for each cluster.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.LitClustering">
      <summary>
        <para>Draw lit clusters.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapBakeQuality">
      <summary>
        <para>Bake quality setting for <see cref="LightmapEditorSettings">LightmapEditorSettings</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapBakeQuality.High">
      <summary>
        <para>High quality bake for final renderings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapBakeQuality.Low">
      <summary>
        <para>Low quality bake for preview renderings.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.BaseAnimValue`1">
      <summary>
        <para>Abstract base class for Animated Values.</para>
        <para>Animated Values are an editor only concept for values that have a current value and a target. The value will tween towards the target at a given speed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimFloat">
      <summary>
        <para>An animated float value.</para>
        <para>Animated using Mathf.Lerp.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.#ctor(System.Single)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.#ctor(System.Single,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimVector3">
      <summary>
        <para>An animated Vector3 value.</para>
        <para>Animated using Vector3.Lerp.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor(UnityEngine.Vector3)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor(UnityEngine.Vector3,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimBool">
      <summary>
        <para>Lerp from 0 - 1.</para>
        <para>When value is 0 returns false, when value &amp;gt; 0.5 returns true. Animated using Mathf.Lerp.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(System.Boolean)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(System.Boolean,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.Fade(System.Single,System.Single)">
      <summary>
        <para>Returns a value between from and to depending on the current value of the bools animation.</para>
      </summary>
      <param name="from">Value to lerp from.</param>
      <param name="to">Value to lerp to.</param>
    </member>
    <member name="P:UnityEditor.AnimatedValues.AnimBool.faded">
      <summary>
        <para>Retuns the float value of the tween.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimQuaternion">
      <summary>
        <para>An animated Quaternion value.</para>
        <para>Animated using Quaternion.Slerp.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.#ctor(UnityEngine.Quaternion)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.#ctor(UnityEngine.Quaternion,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="T:UnityEditor.ColorPickerHDRConfig">
      <summary>
        <para>Used as input to ColorField to configure the HDR color ranges in the ColorPicker.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ColorPickerHDRConfig.#ctor(System.Single,System.Single,System.Single,System.Single)">
      <param name="minBrightness">Minimum brightness value allowed when using the Color Picker.</param>
      <param name="maxBrightness">Maximum brightness value allowed when using the Color Picker.</param>
      <param name="minExposureValue">Minimum exposure value used in the tonemapping section of the Color Picker.</param>
      <param name="maxExposureValue">Maximum exposure value used in the tonemapping section of the Color Picker.</param>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.minBrightness">
      <summary>
        <para>Minimum allowed color component value when using the ColorPicker.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.maxBrightness">
      <summary>
        <para>Maximum allowed color component value when using the ColorPicker.</para>
        <para>In the HSV model the brightness (V) is defined as the largest component of a color.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.minExposureValue">
      <summary>
        <para>Minimum exposure value allowed in the Color Picker.</para>
        <para>In the 'Advanced Preview' section of the HDR Color Picker tonemapping can be applied to the HDR Color. This is with minimum allowed exposure value.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ColorPickerHDRConfig.maxExposureValue">
      <summary>
        <para>Maximum exposure value allowed in the Color Picker.</para>
        <para>In the 'Advanced Preview' section of the HDR Color Picker tonemapping can be applied to the HDR Color this is with maximum allowed exposure value.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorStyles">
      <summary>
        <para>Common GUIStyles used for EditorGUI controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.label">
      <summary>
        <para>Style used for the labelled on all EditorGUI overloads that take a prefix label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniLabel">
      <summary>
        <para>Style for label with small font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.largeLabel">
      <summary>
        <para>Style for label with large font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.boldLabel">
      <summary>
        <para>Style for bold label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniBoldLabel">
      <summary>
        <para>Style for mini bold label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.centeredGreyMiniLabel">
      <summary>
        <para>Style for label with small font which is centered and grey.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.wordWrappedMiniLabel">
      <summary>
        <para>Style for word wrapped mini label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.wordWrappedLabel">
      <summary>
        <para>Style for word wrapped label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteLabel">
      <summary>
        <para>Style for white label.</para>
        <para>Useful for coloring your labels; set GUI.contentColor to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteMiniLabel">
      <summary>
        <para>Style for white mini label.</para>
        <para>Useful for coloring your labels; set GUI.contentColor to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteLargeLabel">
      <summary>
        <para>Style for white large label.</para>
        <para>Useful for coloring your labels; set GUI.contentColor to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteBoldLabel">
      <summary>
        <para>Style for white bold label.</para>
        <para>Useful for coloring your labels; set GUI.contentColor to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.radioButton">
      <summary>
        <para>Style used for a radio button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButton">
      <summary>
        <para>Style used for a standalone small button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonLeft">
      <summary>
        <para>Style used for the leftmost button in a horizontal button group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonMid">
      <summary>
        <para>Style used for the middle buttons in a horizontal group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonRight">
      <summary>
        <para>Style used for the rightmost button in a horizontal group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.textField">
      <summary>
        <para>Style used for <see cref="EditorGUI.TextField">EditorGUI.TextField</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.textArea">
      <summary>
        <para>Style used for <see cref="EditorGUI.TextArea">EditorGUI.TextArea</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniTextField">
      <summary>
        <para>Smaller text field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.numberField">
      <summary>
        <para>Style used for field editors for numbers.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.popup">
      <summary>
        <para>Style used for <see cref="EditorGUI.Popup">EditorGUI.Popup</see>, <see cref="EditorGUI.EnumPopup">EditorGUI.EnumPopup</see>,.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectField">
      <summary>
        <para>Style used for headings for object fields.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectFieldThumb">
      <summary>
        <para>Style used for headings for the Select button in object fields.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectFieldMiniThumb">
      <summary>
        <para>Style used for object fields that have a thumbnail (e.g Textures).</para>
        <para>This is a style that fits within normal line height.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.colorField">
      <summary>
        <para>Style used for headings for Color fields.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.layerMaskField">
      <summary>
        <para>Style used for headings for Layer masks.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toggle">
      <summary>
        <para>Style used for headings for <see cref="EditorGUI.Toggle">EditorGUI.Toggle</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.foldout">
      <summary>
        <para>Style used for headings for <see cref="EditorGUI.Foldout">EditorGUI.Foldout</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.foldoutPreDrop">
      <summary>
        <para>Style used for headings for <see cref="EditorGUI.Foldout">EditorGUI.Foldout</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toggleGroup">
      <summary>
        <para>Style used for headings for <see cref="EditorGUILayout.BeginToggleGroup">EditorGUILayout.BeginToggleGroup</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.standardFont">
      <summary>
        <para>Standard font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.boldFont">
      <summary>
        <para>Bold font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniFont">
      <summary>
        <para>Mini font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniBoldFont">
      <summary>
        <para>Mini Bold font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbar">
      <summary>
        <para>Toolbar background from top of windows.</para>
        <para>The toolbar is used as a background for other toolbar elements
</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarButton">
      <summary>
        <para>Style for Button and Toggles in toolbars.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarPopup">
      <summary>
        <para>Toolbar Popup.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarDropDown">
      <summary>
        <para>Toolbar Dropdown.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarTextField">
      <summary>
        <para>Toolbar text field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.inspectorDefaultMargins">
      <summary>
        <para>Wrap content in a vertical group with this style to get the default margins used in the Inspector.</para>
        <para>By default, content in the Inspector has a large left margin and a small right margin. For a consistent look, these default margins should be used for most GUI with regular controls.However, some special GUI elements may benefit from occupying the full width of the Inspector, with only a small margin in both sides. To disable the default margins, override the Editor.UseDefaultMargins method in your custom Editor. Then you can wrap your GUI content inside a vertical groups to your liking. For example, you can wrap some of the GUI inside a vertical group with the EditorStyles.inspectorFullWidthMargins style and wrap other parts of the GUI inside a vertical group with the EditorStyles.inspectorDefaultMargins style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.inspectorFullWidthMargins">
      <summary>
        <para>Wrap content in a vertical group with this style to get full width margins in the Inspector.</para>
        <para>By default, content in the Inspector has a large left margin and a small right margin. For a consistent look, these default margins should be used for most GUI with regular controls.However, some special GUI elements may benefit from occupying the full width of the Inspector, with only a small margin in both sides. To disable the default margins, override the Editor.UseDefaultMargins method in your custom Editor. Then you can wrap your GUI content inside a vertical groups to your liking. For example, you can wrap some of the GUI inside a vertical group with the EditorStyles.inspectorFullWidthMargins style and wrap other parts of the GUI inside a vertical group with the EditorStyles.inspectorDefaultMargins style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.helpBox">
      <summary>
        <para>Style used for background box for <see cref="EditorGUI.HelpBox">EditorGUI.HelpBox</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PopupWindowContent">
      <summary>
        <para>Class used to implement content for a popup window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnGUI(UnityEngine.Rect)">
      <summary>
        <para>Callback for drawing GUI controls for the popup window.</para>
      </summary>
      <param name="rect">The rectangle to draw the GUI inside.</param>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.GetWindowSize">
      <summary>
        <para>The size of the popup window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnOpen">
      <summary>
        <para>Callback when the popup window is opened.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnClose">
      <summary>
        <para>Callback when the popup window is closed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PopupWindowContent.editorWindow">
      <summary>
        <para>The <see cref="EditorWindow">EditorWindow</see> that contains the popup content.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PopupWindow">
      <summary>
        <para>Class used to display popup windows that inherit from <see cref="PopupWindowContent">PopupWindowContent</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindow.Show(UnityEngine.Rect,UnityEditor.PopupWindowContent)">
      <summary>
        <para>Show a popup with the given PopupWindowContent.</para>
      </summary>
      <param name="activatorRect">The rect of the button that opens the popup.</param>
      <param name="windowContent">The content to show in the popup window.</param>
    </member>
    <member name="T:UnityEditor.TextureImporterCubemapConvolution">
      <summary>
        <para>Defines <see cref="Cubemap">Cubemap</see> convolution mode.</para>
        <para>This is useful if you need to pre-compute a diffuse or glossy specular reflections in the texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCubemapConvolution.None">
      <summary>
        <para>No convolution needed. This <see cref="Cubemap">Cubemap</see> texture represents mirror reflection or Skybox.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCubemapConvolution.Specular">
      <summary>
        <para>Specular convolution (aka Prefiltered Environment Map).</para>
        <para>Each pixel of this Cubemap texture is replaced with the integral of incident illumination towards corresponding direction weighted with the Phong lobe. Each mip map is convolved with varying Phong exponent - high resolution mip maps represent glossy reflection while low resolution mips are very blurry and useful for very rough specular reflection.Can be used to reflect light on glossy and rough objects by sampling with the reflection vector.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterCubemapConvolution.Diffuse">
      <summary>
        <para>Diffuse convolution (aka irradiance <see cref="Cubemap">Cubemap</see>).</para>
        <para>Each pixel of this Cubemap texture is replaced with the cosine-weighted integral of the corresponding hemisphere of incident illumination. In simpler terms texture is nicely blurred.Can be used to light diffuse object by sampling with its surface normal.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterRGBMMode">
      <summary>
        <para>RGBM encoding mode for HDR textures in <see cref="TextureImporter">TextureImporter</see>.</para>
        <para>HDR texture data (i.e. coming from .exr or .hdr files) can be encoded into RGBM format by Unity. This setting controls how the encoding is done. Default is "Auto", which means do RGBM encoding when source data is HDR.RGBM encoding packs [0;8] range into [0;1] with multiplier stored in the alpha channel. Final value is RGB*A*8.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.Auto">
      <summary>
        <para>Do RGBM encoding when source data is HDR in <see cref="TextureImporter">TextureImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.On">
      <summary>
        <para>Do RGBM encoding in <see cref="TextureImporter">TextureImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.Off">
      <summary>
        <para>Do not perform RGBM encoding in <see cref="TextureImporter">TextureImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterRGBMMode.Encoded">
      <summary>
        <para>Source texture is already RGBM encoded in <see cref="TextureImporter">TextureImporter</see>.</para>
        <para>Use this setting on textures where the texture file already
contains RGBM-encoded data. This is useful to make editor
display proper texture previews.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CustomPreviewAttribute">
      <summary>
        <para>Adds an extra preview in the Inspector for the specified type.</para>
        <para>You can use this attribute to add your custom preview to any object that can be Inspected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomPreviewAttribute.#ctor(System.Type)">
      <summary>
        <para>Tells a DefaultPreview which class it's a preview for.</para>
        <para>When you make a custom preview, you need put this attribute on the preview class.</para>
      </summary>
      <param name="type">The type you want to create a custom preview for.</param>
    </member>
    <member name="T:UnityEditor.ObjectPreview">
      <summary>
        <para>Base Class to derive from when creating Custom Previews.</para>
        <para>You specify which type is the preview for, by using the ObjectPreview attribute.
Below you can see an small example that will display the name of the object being inspected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.Initialize(UnityEngine.Object[])">
      <summary>
        <para>Called when the Preview gets created with the objects being previewed.</para>
        <para>You can override this function and use this to cache or initialize anything needed by your preview.</para>
      </summary>
      <param name="targets">The objects being previewed.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.MoveNextTarget">
      <summary>
        <para>Called to iterate through the targets, this will be used when previewing more than one target.</para>
      </summary>
      <returns>
        <para>True if there is another target available.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ObjectPreview.ResetTarget">
      <summary>
        <para>Called to Reset the target before iterating through them.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.HasPreviewGUI">
      <summary>
        <para>Can this component be Previewed in its current state?</para>
      </summary>
      <returns>
        <para>True if this component can be Previewed in its current state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ObjectPreview.GetPreviewTitle">
      <summary>
        <para>Override this method if you want to change the label of the Preview area.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.</para>
        <para>If you implement OnInteractivePreviewGUI then this will only be called for non-interactive custom previews.
The overidden method should use the rectangle passed in and render a preview of the asset into it.
The default implementation is a no-op.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.</para>
        <para>Implement this instead of OnPreviewGUI if you only want to display interactive custom previews (you can implement both if some previews are interactive and others aren't).
The overidden method should use the rectangle passed in and render a preview of the asset into it.
The default implementation is a no-op.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnPreviewSettings">
      <summary>
        <para>Override this method if you want to show custom controls in the preview header.</para>
        <para>The default implementation is a no-op.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.GetInfoString">
      <summary>
        <para>Implement this method to show object information on top of the object preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.DrawPreview(UnityEngine.Rect)">
      <summary>
        <para>This is the first entry point for Preview Drawing.</para>
        <para>The default implementation will draw a grid of previews if there are multiple targets available. Override this method if you want to change this behaviour.</para>
      </summary>
      <param name="previewArea">The available area to draw the preview.</param>
    </member>
    <member name="P:UnityEditor.ObjectPreview.target">
      <summary>
        <para>The object currently being previewed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialEditor">
      <summary>
        <para>The Unity Material Editor.</para>
        <para>Extend this class to write your own custom material editor. For more detailed information see the Custom Material Editor section of the ShaderLab reference.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader)">
      <summary>
        <para>Set the shader of the material.</para>
        <para>Automatically handles internal inspector rebuilding.</para>
      </summary>
      <param name="shader">Shader to set.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader,System.Boolean)">
      <summary>
        <para>Set the shader of the material.</para>
        <para>Automatically handles internal inspector rebuilding.</para>
      </summary>
      <param name="registerUndo">Should undo be registered.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.Awake">
      <summary>
        <para>Called when the Editor is woken up.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnInspectorGUI">
      <summary>
        <para>Implement specific MaterialEditor GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesChanged">
      <summary>
        <para>Whenever a material property is changed call this function. This will rebuild the inspector and validate the properties.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetTextureScale(System.String,UnityEngine.Vector2,System.Int32)">
      <summary>
        <para>Set the scale of a given texture property.</para>
      </summary>
      <param name="propertyName">Name of the texture property that you wish to modify the scale of.</param>
      <param name="value">Scale to set.</param>
      <param name="coord">Set the x or y component of the scale (0 for x, 1 for y).</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetTextureOffset(System.String,UnityEngine.Vector2,System.Int32)">
      <summary>
        <para>Set the offset of a given texture property.</para>
      </summary>
      <param name="propertyName">Name of the texture property that you wish to modify the offset of.</param>
      <param name="value">Scale to set.</param>
      <param name="coord">Set the x or y component of the offset (0 for x, 1 for y).</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a range slider for a range shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a range slider for a range shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a float shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a float shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a color shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a color shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a vector shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a vector shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEditor.MaterialProperty)">
      <summary>
        <para>Draws tiling and offset properties for a texture.</para>
      </summary>
      <param name="position">Rect to draw this control in.</param>
      <param name="property">Property to draw.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.Boolean)">
      <summary>
        <para>Draws tiling and offset properties for a texture.</para>
      </summary>
      <param name="position">Rect to draw this control in.</param>
      <param name="property">Property to draw.</param>
      <param name="partOfTexturePropertyControl">If this control should be rendered under large texture property control use 'true'. If this control should be shown seperately use 'false'.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String,System.Boolean)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.HelpBoxWithButton(UnityEngine.GUIContent,UnityEngine.GUIContent)">
      <summary>
        <para>Make a help box with a message and button. Returns true, if button was pressed.</para>
      </summary>
      <param name="messageContent">The message text.</param>
      <param name="buttonContent">The button text.</param>
      <returns>
        <para>Returns true, if button was pressed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureCompatibilityWarning(UnityEditor.MaterialProperty)">
      <summary>
        <para>Checks if particular property has incorrect type of texture specified by the material, displays appropriate warning and suggests the user to automatically fix the problem.</para>
        <para>The warning box is shown using GUILayout so it is recommended to call this method right after the property.</para>
      </summary>
      <param name="prop">The texture property to check and display warning for, if necessary.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertyMiniThumbnail(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.String)">
      <summary>
        <para>Draw a property field for a texture shader property that only takes up a single line height.</para>
        <para>The thumbnail is shown to the left of the label. Note for some textures it might use more vertical space than a single line height because of an additional information box.</para>
      </summary>
      <param name="position">Rect that this control should be rendered in.</param>
      <param name="label">Label for the field.</param>
      <returns>
        <para>Returns total height used by this control.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetTexturePropertyCustomArea(UnityEngine.Rect)">
      <summary>
        <para>Returns the free rect below the label and before the large thumb object field. Is used for e.g. tiling and offset properties.</para>
      </summary>
      <param name="position">The total rect of the texture property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.Boolean)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.String,System.Boolean)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEngine.Vector4)">
      <summary>
        <para>TODO.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureScaleOffsetProperty(UnityEngine.Rect,UnityEngine.Vector4,System.Boolean)">
      <summary>
        <para>TODO.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty)">
      <summary>
        <para>Calculate height needed for the property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Calculate height needed for the property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetDefaultPropertyHeight(UnityEditor.MaterialProperty)">
      <summary>
        <para>Calculate height needed for the property, ignoring custom drawers.</para>
        <para>This is similar to GetPropertyHeight, except it ignores any custom MaterialPropertyDrawer objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handes UI for one shader property.</para>
        <para>This function will draw appropriate UI for the given shader property, depending on its type.Any custom MaterialPropertyDrawer objects defined for this property in the shader will also be applied. If you want to draw the "default" UI without any custom drawers, use DefaultShaderProperty function.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handes UI for one shader property.</para>
        <para>This function will draw appropriate UI for the given shader property, depending on its type.Any custom MaterialPropertyDrawer objects defined for this property in the shader will also be applied. If you want to draw the "default" UI without any custom drawers, use DefaultShaderProperty function.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handles UI for one shader property ignoring any custom drawers.</para>
        <para>This is similar to ShaderProperty function, except it ignores any custom MaterialPropertyDrawer objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handles UI for one shader property ignoring any custom drawers.</para>
        <para>This is similar to ShaderProperty function, except it ignores any custom MaterialPropertyDrawer objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperties(UnityEngine.Object[])">
      <summary>
        <para>Get shader property information of the passed materials.</para>
        <para>When implementing custom MaterialEditors, you'd usually pass this.targets array to this function, i.e. all the selected materials.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.String)">
      <summary>
        <para>Get information about a single shader property.</para>
      </summary>
      <param name="mats">Selected materials.</param>
      <param name="name">Property name.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.Int32)">
      <summary>
        <para>Get information about a single shader property.</para>
      </summary>
      <param name="mats">Selected materials.</param>
      <param name="propertyIndex">Property index.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetDefaultGUIWidths">
      <summary>
        <para>Set EditorGUIUtility.fieldWidth and labelWidth to the default values that PropertiesGUI uses.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesGUI">
      <summary>
        <para>Render the standard material properties. This method will either render properties using a IShaderGUI instance if found otherwise it uses <see cref="MaterialEditor.PropertiesDefaultGUI">PropertiesDefaultGUI</see>.</para>
      </summary>
      <returns>
        <para>Returns true if any value was changed.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesDefaultGUI(UnityEditor.MaterialProperty[])">
      <summary>
        <para>Default rendering of shader properties.</para>
        <para>Note that you can customize shader properties rendering by implementing the IShaderGUI interface.</para>
      </summary>
      <param name="props">Array of material properties.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Material)">
      <summary>
        <para>Apply initial <see cref="MaterialPropertyDrawer">MaterialPropertyDrawer</see> values.</para>
        <para>This calls all MaterialPropertyDrawer.Apply functions on all properties that have custom drawers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Object[])">
      <summary>
        <para>Apply initial <see cref="MaterialPropertyDrawer">MaterialPropertyDrawer</see> values.</para>
        <para>This calls all MaterialPropertyDrawer.Apply functions on all properties that have custom drawers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RegisterPropertyChangeUndo(System.String)">
      <summary>
        <para>Call this when you change a material property. It will add an undo for the action.</para>
      </summary>
      <param name="label">Undo Label.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultPreviewSettingsGUI">
      <summary>
        <para>Default toolbar for material preview area.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.HasPreviewGUI">
      <summary>
        <para>Can this component be Previewed in its current state?</para>
      </summary>
      <returns>
        <para>True if this component can be Previewed in its current state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RequiresConstantRepaint">
      <summary>
        <para>Does this edit require to be repainted constantly in its current state?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Custom preview for Image component.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Default handling of preview area for materials.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnEnable">
      <summary>
        <para>Called when the editor is enabled, if overridden please call the base OnEnable() to ensure that the material inspector is set up properly.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnDisable">
      <summary>
        <para>Called when the editor is disabled, if overridden please call the base OnDisable() to ensure that the material inspector is set up properly.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a texture property control with additional inlined properites.</para>
        <para>This method can be used if multiple controls is wanted on the same line. The texture is shown using the mini thumbnail. Usefull for compact representation of properties of up to three material properties.
</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <returns>
        <para>Returns the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a texture property control with additional inlined properites.</para>
        <para>This method can be used if multiple controls is wanted on the same line. The texture is shown using the mini thumbnail. Usefull for compact representation of properties of up to three material properties.
</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First optional property inlined after the texture property.</param>
      <returns>
        <para>Returns the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertySingleLine(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a texture property control with additional inlined properites.</para>
        <para>This method can be used if multiple controls is wanted on the same line. The texture is shown using the mini thumbnail. Usefull for compact representation of properties of up to three material properties.
</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First optional property inlined after the texture property.</param>
      <param name="extraProperty2">Second optional property inlined after the extraProperty1.</param>
      <returns>
        <para>Returns the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertyWithHDRColor(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEditor.ColorPickerHDRConfig,System.Boolean)">
      <summary>
        <para>Method for showing a texture property control with a HDR color field and its color brightness float field.</para>
        <para>The texture is shown using the mini thumbnail. Usefull for compact representation of a texture and a HDR color.
</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="colorProperty">The color property (will be treated as a HDR color).</param>
      <param name="hdrConfig">The HDR color configuration used by the HDR Color Picker.</param>
      <param name="showAlpha">If false then the alpha channel information will be hidden in the GUI.</param>
      <returns>
        <para>Return the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TexturePropertyTwoLines(UnityEngine.GUIContent,UnityEditor.MaterialProperty,UnityEditor.MaterialProperty,UnityEngine.GUIContent,UnityEditor.MaterialProperty)">
      <summary>
        <para>Method for showing a compact layout of properties.</para>
        <para>The texture is shown using the mini thumbnail that fits on a single line. The first extra property is shown inlined after the texture property and the second extra property is shown below on a new line with it's own label.
</para>
      </summary>
      <param name="label">The label used for the texture property.</param>
      <param name="textureProp">The texture property.</param>
      <param name="extraProperty1">First extra property inlined after the texture property.</param>
      <param name="label2">Label for the second extra property (on a new line and indented).</param>
      <param name="extraProperty2">Second property on a new line below the texture.</param>
      <returns>
        <para>Returns the Rect used.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetRightAlignedFieldRect(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI.</para>
      </summary>
      <param name="r">Field Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetLeftAlignedFieldRect(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI.</para>
      </summary>
      <param name="r">Field Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetFlexibleRectBetweenLabelAndField(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI.</para>
      </summary>
      <param name="r">Field Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetFlexibleRectBetweenFieldAndRightEdge(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI. Used e.g for the rect after a left aligned Color field.</para>
      </summary>
      <param name="r">Field Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetRectAfterLabelWidth(UnityEngine.Rect)">
      <summary>
        <para>Utility method for GUI layouting ShaderGUI. This is the rect after the label which can be used for multiple properties. The input rect can be fetched by calling: EditorGUILayout.GetControlRect.</para>
      </summary>
      <param name="r">Line Rect.</param>
      <returns>
        <para>A sub rect of the input Rect.</para>
      </returns>
    </member>
    <member name="F:UnityEditor.MaterialEditor.kMiniTextureFieldLabelIndentLevel">
      <summary>
        <para>Useful for indenting shader properties that need the same indent as mini texture field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialEditor.isVisible">
      <summary>
        <para>Is the current material expanded.</para>
        <para>Use this to check if custom material fields should be rendered.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialPropertyDrawer">
      <summary>
        <para>Base class to derive custom material property drawers from.</para>
        <para>Use this to create custom UI drawers for your material properties, without having to write custom MaterialEditor classes. This is similar to how PropertyDrawer enables custom UI without writing custom inspectors.In shader code, C#-like attribute syntax can be used in front of shader properties to add drawers to them. Unity has several built-in drawers, and you can write your own. Here's a shader code snippet demonstrating the syntax:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
      <summary>
        <para>Override this method to make your own GUI for the property.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="prop">The <see cref="MaterialProperty">MaterialProperty</see> to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <param name="editor">Current material editor.</param>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.GetPropertyHeight(UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
      <summary>
        <para>Override this method to specify how tall the GUI for this property is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="prop">The <see cref="MaterialProperty">MaterialProperty</see> to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <param name="editor">Current material editor.</param>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.Apply(UnityEditor.MaterialProperty)">
      <summary>
        <para>Apply extra initial values to the material.</para>
        <para>This function is called in all property drawers when a new material is created, or a shader is changed on an existing material. This lets the property drawers apply any extra values to the materials, for example to setup shader keywords.Note that if you change a property by assigning a value to it, Apply() is not called automatically. If you have any extra setup you need it to do, you should call it yourself.</para>
      </summary>
      <param name="prop">The <see cref="MaterialProperty">MaterialProperty</see> to apply values for.</param>
    </member>
    <member name="T:UnityEditor.ShaderGUI">
      <summary>
        <para>Abstract class to derive from for defining custom GUI for shader properties and for extending the material preview.</para>
        <para>Derive from this class for controlling how shader properties should be presented. For a shader to use this custom GUI use the 'CustomEditor' property in the shader. Note that CustomEditor can also be used for classes deriving from MaterialEditor (search for: Custom Material Editors). Note: Only the ShaderGUI approach works with Substance materials this is therefore the recommended approach to custom gui for shaders.
See ShaderGUI.OnGUI, ShaderGUI.OnMaterialPreviewGUI, ShaderGUI.OnMaterialPreviewSettingsGUI.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ShaderGUI.OnGUI(UnityEditor.MaterialEditor,UnityEditor.MaterialProperty[])">
      <summary>
        <para>To define a custom shader GUI use the methods of <i>materialEditor</i> to render controls for the <i>properties</i> array.</para>
      </summary>
      <param name="materialEditor">The MaterialEditor that are calling this OnGUI (the 'owner').</param>
      <param name="properties">Material properties of the current selected shader.</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.OnMaterialPreviewGUI(UnityEditor.MaterialEditor,UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Override for extending the rendering of the Preview area or completly replace the preview (by not calling base.OnMaterialPreviewGUI).</para>
      </summary>
      <param name="materialEditor">The MaterialEditor that are calling this method (the 'owner').</param>
      <param name="r">Preview rect.</param>
      <param name="background">Style for the background.</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.OnMaterialPreviewSettingsGUI(UnityEditor.MaterialEditor)">
      <summary>
        <para>Override for extending the functionality of the toolbar of the preview area or completly replace the toolbar by not calling base.OnMaterialPreviewSettingsGUI.</para>
      </summary>
      <param name="materialEditor">The MaterialEditor that are calling this method (the 'owner').</param>
    </member>
    <member name="M:UnityEditor.ShaderGUI.AssignNewShaderToMaterial(UnityEngine.Material,UnityEngine.Shader,UnityEngine.Shader)">
      <summary>
        <para>This method is called when a new shader has been selected for a Material.</para>
        <para>Can be used for setting up the new shader based on state from the previous shader. Ensure to call base.AssignNewShaderToMaterial to actually set material.shader.</para>
      </summary>
      <param name="material">The material the newShader should be assigned to.</param>
      <param name="oldShader">Previous shader.</param>
      <param name="newShader">New shader to assign to the material.</param>
    </member>
    <member name="T:UnityEditor.CustomPropertyDrawer">
      <summary>
        <para>Tells a custom <see cref="PropertyDrawer">PropertyDrawer</see> or <see cref="DecoratorDrawer">DecoratorDrawer</see> which run-time <see cref="Serializable">Serializable</see> class or <see cref="PropertyAttribute">PropertyAttribute</see> it's a drawer for.</para>
        <para>When you make a custom PropertyDrawer or DecoratorDrawer, you need put this attribute on the drawer class.
If the drawer is for a Serializable class, then pass the type of the class to the CustomPropertyDrawer attribute (only valid for PropertyDrawers; not DecoratorDrawers).
If the drawer is for a PropertyAttribute, then pass the type of the PropertyAttribute to the CustomPropertyDrawer attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomPropertyDrawer.#ctor(System.Type)">
      <summary>
        <para>Tells a PropertyDrawer or DecoratorDrawer class which run-time class or attribute it's a drawer for.</para>
        <para>When you make a custom drawer, you need put this attribute on the drawer class.</para>
      </summary>
      <param name="type">If the drawer is for a custom <see cref="Serializable">Serializable</see> class, the type should be that class. If the drawer is for script variables with a specific <see cref="PropertyAttribute">PropertyAttribute</see>, the type should be that attribute.</param>
    </member>
    <member name="M:UnityEditor.CustomPropertyDrawer.#ctor(System.Type,System.Boolean)">
      <summary>
        <para>Tells a PropertyDrawer or DecoratorDrawer class which run-time class or attribute it's a drawer for.</para>
        <para>When you make a custom drawer, you need put this attribute on the drawer class.</para>
      </summary>
      <param name="type">If the drawer is for a custom <see cref="Serializable">Serializable</see> class, the type should be that class. If the drawer is for script variables with a specific <see cref="PropertyAttribute">PropertyAttribute</see>, the type should be that attribute.</param>
      <param name="useForChildren">If true, the drawer will be used for any children of the specified class unless they define their own drawer.</param>
    </member>
    <member name="T:UnityEditor.DecoratorDrawer">
      <summary>
        <para>Base class to derive custom decorator drawers from.</para>
        <para>A DecoratorDrawer is similar to a PropertyDrawer, except that it doesn't draw a property but rather draws decorative elements based purely on the data it gets from its corresponding PropertyAttribute.Unity uses builtin DecoratorDrawers for the SpaceAttribute and HeaderAttribute. You can also create your own DecoratorDrawers with matching PropertyAttributes.Although a DecoratorDrawer conceptually is not meant to be associated with a specific field, its attribute still needs to be placed above a field in the script. However, unlike PropertyDrawer attributes, there can be multiple DecoratorDrawers attributes above the same field. Also unlike PropertyDrawers, if a DecoratorDrawer attribute is placed above a field that is a List or an array, the decorator will only show up once before the array; not for every array element.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DecoratorDrawer.OnGUI(UnityEngine.Rect)">
      <summary>
        <para>Override this method to make your own GUI for the decorator.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the decorator GUI.</param>
    </member>
    <member name="M:UnityEditor.DecoratorDrawer.GetHeight">
      <summary>
        <para>Override this method to specify how tall the GUI for this decorator is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DecoratorDrawer.attribute">
      <summary>
        <para>The <see cref="PropertyAttribute">PropertyAttribute</see> for the decorator. (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GUIDrawer">
      <summary>
        <para>Base class for <see cref="PropertyDrawer">PropertyDrawer</see> and <see cref="DecoratorDrawer">DecoratorDrawer</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PropertyDrawer">
      <summary>
        <para>Base class to derive custom property drawers from. Use this to create custom drawers for your own <see cref="Serializable">Serializable</see> classes or for script variables with custom <see cref="PropertyAttribute">PropertyAttribute</see>s.</para>
        <para>PropertyDrawers have two uses:
- Customize the GUI of every instance of a Serializable class.
- Customize the GUI of script members with custom PropertyAttributes.If you have a custom Serializable class, you can use a PropertyDrawer to control how it looks in the Inspector.
Consider the Serializable class Ingredient in the script below:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to make your own GUI for the property.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
    </member>
    <member name="M:UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to specify how tall the GUI for this field is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <returns>
        <para>The height in pixels.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.PropertyDrawer.attribute">
      <summary>
        <para>The <see cref="PropertyAttribute">PropertyAttribute</see> for the property. Not applicable for custom class drawers. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PropertyDrawer.fieldInfo">
      <summary>
        <para>The reflection FieldInfo for the member this property represents. (Read Only)</para>
        <para>For advanced uses, this allows you to get information about the member the property represents using reflection, such as the type of the property and which attributes it might have. Most PropertyDrawers will not need to make use of the FieldInfo.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.IPackerPolicy">
      <summary>
        <para>Sprite packing policy interface. Provide a custom implementation to control which Sprites go into which atlases.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.IPackerPolicy.OnGroupAtlases(UnityEditor.BuildTarget,UnityEditor.Sprites.PackerJob,System.Int32[])">
      <summary>
        <para>Implement custom atlas grouping here.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.IPackerPolicy.GetVersion">
      <summary>
        <para>Return the version of your policy. Sprite Packer needs to know if atlas grouping logic changed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Events.UnityEventTools">
      <summary>
        <para>Editor tools for working with persistent UnityEvents.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEventBase)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,System.Int32)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent,System.Int32,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.UnregisterPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32)">
      <summary>
        <para>Unregisters the given listener at the specified index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to unregister.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddVoidPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterVoidPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddIntPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{System.Int32},System.Int32)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterIntPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{System.Int32},System.Int32)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddFloatPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{System.Single},System.Single)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterFloatPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{System.Single},System.Single)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddBoolPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{System.Boolean},System.Boolean)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterBoolPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{System.Boolean},System.Boolean)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddStringPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{System.String},System.String)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterStringPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{System.String},System.String)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddObjectPersistentListener``1(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{``0},``0)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterObjectPersistentListener``1(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{``0},``0)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="T:UnityEditor.VersionControl.AssetList">
      <summary>
        <para>A list of version control information about assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.Filter(System.Boolean,UnityEditor.VersionControl.Asset.States[])">
      <summary>
        <para>Based on the current list and the states a new list is returned which only contains the assets with the requested states.</para>
      </summary>
      <param name="includeFolder">Whether or not folders should be included.</param>
      <param name="states">Which states to filter by.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.FilterCount(System.Boolean,UnityEditor.VersionControl.Asset.States[])">
      <summary>
        <para>Count the list of assets by given a set of states.</para>
      </summary>
      <param name="includeFolder">Whether or not to include folders.</param>
      <param name="states">Which states to include in the count.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.FilterChildren">
      <summary>
        <para>Create an optimised list of assets by removing children of folders in the same list.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ChangeSets">
      <summary>
        <para>Simply a list of changetsets.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.CheckoutMode">
      <summary>
        <para>What to checkout when starting the Checkout task through the version control Provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Asset">
      <summary>
        <para>Checkout the asset only.</para>
        <para>Any meta data files provided will checkout its asset counterpart instead.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Meta">
      <summary>
        <para>Checkout .meta file only.</para>
        <para>Any asset files provided will checkout its meta data counterpart instead.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Both">
      <summary>
        <para>Checkout both asset and .meta file.</para>
        <para>Any meta data files provided will also checkout its asset counterpart, and vice versa.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Exact">
      <summary>
        <para>Checkout.</para>
        <para>Provided asset and meta data files will be checked out.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ResolveMethod">
      <summary>
        <para>How assets should be resolved.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMine">
      <summary>
        <para>Use "mine" (local version).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseTheirs">
      <summary>
        <para>Use "theirs" (other/remote version).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMerged">
      <summary>
        <para>Use merged version.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.MergeMethod">
      <summary>
        <para>Which method to use when merging.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeNone">
      <summary>
        <para>Don't merge any changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeAll">
      <summary>
        <para>Merge all changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeNonConflicting">
      <summary>
        <para>Merge non-conflicting changes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.OnlineState">
      <summary>
        <para>Represent the connection state of the version control provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Updating">
      <summary>
        <para>The version control provider is currently trying to connect to the version control server.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Online">
      <summary>
        <para>Connection to the version control server has been established.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Offline">
      <summary>
        <para>Connection to the version control server could not be established.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.RevertMode">
      <summary>
        <para>Defines the behaviour of the version control revert methods.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.Normal">
      <summary>
        <para>Use the version control regular revert approach.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.Unchanged">
      <summary>
        <para>Revert only unchanged files.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.KeepModifications">
      <summary>
        <para>Revert files but keep locally changed ones.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.FileMode">
      <summary>
        <para>Mode of the file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.FileMode.None">
      <summary>
        <para>No mode set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.FileMode.Binary">
      <summary>
        <para>Binary file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.FileMode.Text">
      <summary>
        <para>Text file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimationUtility+OnCurveWasModified">
      <summary>
        <para>Triggered when an animation curve inside an animation clip has been modified.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication+ProjectWindowItemCallback">
      <summary>
        <para>Delegate to be called for every visible list item in the ProjectWindow on every OnGUI event.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication+HierarchyWindowItemCallback">
      <summary>
        <para>Delegate to be called for every visible list item in the HierarchyWindow on every OnGUI event.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication+CallbackFunction">
      <summary>
        <para>Delegate to be called from <see cref="EditorApplication">EditorApplication</see> callbacks.</para>
        <para>CallbackFunction is used by EditorApplication.update, EditorApplication.modifierKeysChanged, EditorApplication.playmodeStateChanged, and
EditorApplication.hierarchyWindowChanged.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Handles+DrawCapFunction">
      <summary>
        <para>The function to use for drawing the handle e.g. Handles.RectangleCap.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PrefabUtility+PrefabInstanceUpdated">
      <summary>
        <para>Delegate for method that is called after prefab instances in the scene have been updated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Undo+UndoRedoCallback">
      <summary>
        <para>Delegate used for <see cref="Undo-undoRedoPerformed">undoRedoPerformed</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Undo+WillFlushUndoRecord">
      <summary>
        <para>Delegate used for <see cref="Undo-willFlushUndoRecord">willFlushUndoRecord</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GenericMenu+MenuFunction">
      <summary>
        <para>Callback function, called when a menu item is selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GenericMenu+MenuFunction2">
      <summary>
        <para>Callback function with user data, called when a menu item is selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Lightmapping+OnCompletedFunction">
      <summary>
        <para>Delegate used by <see cref="Lightmapping-completed">Lightmapping.completed</see> callback.</para>
      </summary>
    </member>
  </members>
</doc>