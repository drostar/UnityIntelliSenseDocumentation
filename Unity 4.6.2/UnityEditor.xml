<!-- Generated by Intellisense Code Hints for Unity  - - -->
<doc>
  <assembly>
    <name>UnityEditor</name>
  </assembly>
  <members>
    <member name="T:UnityEditor.AssetDatabase">
      <summary>
        <para>An Interface for accessing assets and performing operations on assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.FindAssets(System.String)">
      <summary>
        <para>Search the assetdatabase using a searchfilter string.</para>
        <para>You can search for names, lables and types (classnames).
'name': filter assets by their filename (without extension). Words separated by whitespace becomes seperate name searches. Use quotes if two or more words should be considered one word.
'labels': Use the keyword 'l'. Filtering by more than one label will return assets if just one asset label is matched (OR'ed)
'types': Use the keyword 't'. Filtering by more than one type will return assets if just one type is matched (OR'ed). 
            Types can be either builtin types e.g 'Texture2D' or user script class names. If all assets are wanted: use 'Object' as all assets derive from Object.</para>
      </summary>
      <param name="filter">The filter string can contain search data for: names, asset labels and types (class names). See description for more info.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.FindAssets(System.String,System.String[])">
      <summary>
        <para>Search the assetdatabase using a searchfilter string.</para>
        <para>You can search for names, lables and types (classnames).
'name': filter assets by their filename (without extension). Words separated by whitespace becomes seperate name searches. Use quotes if two or more words should be considered one word.
'labels': Use the keyword 'l'. Filtering by more than one label will return assets if just one asset label is matched (OR'ed)
'types': Use the keyword 't'. Filtering by more than one type will return assets if just one type is matched (OR'ed). 
            Types can be either builtin types e.g 'Texture2D' or user script class names. If all assets are wanted: use 'Object' as all assets derive from Object.</para>
      </summary>
      <param name="filter">The filter string can contain search data for: names, asset labels and types (class names). See description for more info.</param>
      <param name="searchInFolders">Specifying one or more folders will limit the searching to these folders and their child folders (and is faster than searching all assets).</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Contains(UnityEngine.Object)">
      <summary>
        <para>Is object an asset?</para>
        <para>Returns true when an object is an asset (corresponds to a file in the Assets folder), 
and false if it is not (for example object in the scene, or an object created at runtime).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Contains(System.Int32)">
      <summary>
        <para>Is object an asset?</para>
        <para>Returns true when an object is an asset (corresponds to a file in the Assets folder), 
and false if it is not (for example object in the scene, or an object created at runtime).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CreateFolder(System.String,System.String)">
      <summary>
        <para>Create a new folder.</para>
      </summary>
      <param name="parentFolder">The name of the parent folder.</param>
      <param name="newFolderName">The name of the new folder.</param>
      <returns>
        <para>The GUID of the newly created folder.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAsset(UnityEngine.Object)">
      <summary>
        <para>Is asset a main asset in the project window?</para>
        <para>For example an imported model has a game object as its root and several Meshes and child game objects
in expanded state. The root game object is the main asset in this case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsMainAsset(System.Int32)">
      <summary>
        <para>Is asset a main asset in the project window?</para>
        <para>For example an imported model has a game object as its root and several Meshes and child game objects
in expanded state. The root game object is the main asset in this case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsSubAsset(UnityEngine.Object)">
      <summary>
        <para>Does the asset form part of another asset?</para>
        <para>Some assets may form part of another asset (for example, a procedural material can be part of a material package). This function tells if an asset is subordinated in this way.</para>
      </summary>
      <param name="obj">The asset Object to query.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsSubAsset(System.Int32)">
      <summary>
        <para>Does the asset form part of another asset?</para>
        <para>Some assets may form part of another asset (for example, a procedural material can be part of a material package). This function tells if an asset is subordinated in this way.</para>
      </summary>
      <param name="instanceID">Instance ID of the asset Object to query.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GenerateUniqueAssetPath(System.String)">
      <summary>
        <para>Creates a new unique path for an asset.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.StartAssetEditing">
      <summary>
        <para>Begin Asset importing. This lets you group several asset imports together into one larger import.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.StopAssetEditing">
      <summary>
        <para>Stop Asset importing. This lets you group several asset imports together into one larger import.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ValidateMoveAsset(System.String,System.String)">
      <summary>
        <para>Checks if an asset file can be moved from one folder to another. (Without actually moving the file).</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="oldPath">The path where the asset currently resides.</param>
      <param name="newPath">The path which the asset should be moved to.</param>
      <returns>
        <para>An empty string if the asset can be moved, otherwise an error message.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.MoveAsset(System.String,System.String)">
      <summary>
        <para>Move an asset file from one folder to another.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="oldPath">The path where the asset currently resides.</param>
      <param name="newPath">The path which the asset should be moved to.</param>
      <returns>
        <para>An empty string if the asset has been successfully moved, otherwise an error message.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.RenameAsset(System.String,System.String)">
      <summary>
        <para>Rename an asset file.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="pathName">The path where the asset currently resides.</param>
      <param name="newName">The new name which should be given to the asset.</param>
      <returns>
        <para>An empty string, if the asset has been successfully renamed, otherwise an error message.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.MoveAssetToTrash(System.String)">
      <summary>
        <para>Moves the asset at path to the trash.</para>
        <para>Returns true if the asset has been successfully removed, false if it doesn't exit or couldn't be moved to the trash.
All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"
See Also: AssetDatabase.DeleteAsset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.DeleteAsset(System.String)">
      <summary>
        <para>Deletes the asset file at path.</para>
        <para>Returns true if the asset has been successfully deleted, false if it doesn't exit or couldn't be removed.</para>
      </summary>
      <param name="path">Filesystem path of the asset to be deleted.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String,UnityEditor.ImportAssetOptions)">
      <summary>
        <para>Import asset at path.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportAsset(System.String)">
      <summary>
        <para>Import asset at path.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CopyAsset(System.String,System.String)">
      <summary>
        <para>Duplicates the asset at <c>path</c> and stores it at <c>newPath</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="path">Filesystem path of the source asset.</param>
      <param name="newPath">Filesystem path of the new asset to create.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.WriteImportSettingsIfDirty(System.String)">
      <summary>
        <para>Writes the import settings to disk.</para>
        <para>In order to make the cache server import assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.CreateAsset(UnityEngine.Object,System.String)">
      <summary>
        <para>Creates a new asset at path.</para>
        <para>You must ensure that the path uses a supported extension ('.mat' for materials, '.cubemap' for cubemaps,
'.GUISkin' for skins, '.anim' for animations and '.asset' for arbitrary other assets.)</para>
      </summary>
      <param name="asset">Object to use in creating the asset.</param>
      <param name="path">Filesystem path for the new asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,System.String)">
      <summary>
        <para>Adds <c>objectToAdd</c> to an existing asset at <c>path</c>.</para>
        <para>Please note that you should only add assets to '.asset' assets, imported models or texture assets for example will lose their data.</para>
      </summary>
      <param name="objectToAdd">Object to add to the existing asset.</param>
      <param name="assetPath">Filesystem path to the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AddObjectToAsset(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Adds <c>objectToAdd</c> to an existing asset identified by <c>assetObject</c>.</para>
        <para>Please note that you should only add assets to '.asset' files, imported models or texture assets for example will lose their data when reimporting or quitting Unity.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPath(UnityEngine.Object)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetPath(System.Int32)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetAssetOrScenePath(UnityEngine.Object)">
      <summary>
        <para>Returns the path name relative to the project folder where the asset is stored.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"
When a game object is part of a scene, the scene path is returned.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetTextMetaDataPathFromAssetPath(System.String)">
      <summary>
        <para>Gets the path to the text .meta file associated with an asset.</para>
      </summary>
      <param name="path">The path to the asset.</param>
      <returns>
        <para>The path to the .meta text file or empty string if the file does not exist.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAssetAtPath(System.String,System.Type)">
      <summary>
        <para>Returns the first asset object of type <i>type</i> at given path <i>assetPath</i>.</para>
        <para>Some asset files may contain multiple objects. (such as a Maya file which may contain multiple Meshes and GameObjects).
All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="assetPath">Filesystem path of the asset to load.</param>
      <param name="type">Data type of the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadMainAssetAtPath(System.String)">
      <summary>
        <para>Returns the main asset object at <c>assetPath</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
      <param name="assetPath">Filesystem path of the asset to load.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAllAssetRepresentationsAtPath(System.String)">
      <summary>
        <para>Returns all asset representations at <c>assetPath</c>.</para>
        <para>Asset representations are objects in the asset that are visible in the Project view.
All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.LoadAllAssetsAtPath(System.String)">
      <summary>
        <para>Returns an array of all asset objects at <c>assetPath</c>.</para>
        <para>Some asset files may contain multiple objects (such as a Maya file which may contain multiple Meshes and GameObjects).
All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png"</para>
      </summary>
      <param name="assetPath">Filesystem path to the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Refresh(UnityEditor.ImportAssetOptions)">
      <summary>
        <para>Import any changed assets.</para>
        <para>This will import any assets that have changed their content modification data or have been added-removed to the project folder.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.Refresh">
      <summary>
        <para>Import any changed assets.</para>
        <para>This will import any assets that have changed their content modification data or have been added-removed to the project folder.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(System.Int32,System.Int32)">
      <summary>
        <para>Opens the asset with associated application.</para>
        <para>Opens asset in an external editor, texture application or modelling tool depending on what type of asset it is.
If it is a text file, <c>lineNumber</c> instructs the text editor to go to that line.
Returns true if asset opened successfully.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object,System.Int32)">
      <summary>
        <para>Opens the asset with associated application.</para>
        <para>Opens asset in an external editor, texture application or modelling tool depending on what type of asset it is.
If it is a text file, <c>lineNumber</c> instructs the text editor to go to that line.
Returns true if asset opened successfully.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.OpenAsset(UnityEngine.Object[])">
      <summary>
        <para>Opens the asset(s) with associated application(s).</para>
        <para>Opens asset in an external editor, texture application or modelling tool depending on what type of asset it is.
Returns true if all assets opened successfully.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.AssetPathToGUID(System.String)">
      <summary>
        <para>Get the GUID for the asset at <c>path</c>.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
      <param name="path">Filesystem path for the asset.</param>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GUIDToAssetPath(System.String)">
      <summary>
        <para>Translate a GUID to its current asset path.</para>
        <para>All paths are relative to the project folder, for example: "Assets/MyTextures/hello.png".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.SaveAssets">
      <summary>
        <para>Writes all unsaved asset changes to disk.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetCachedIcon(System.String)">
      <summary>
        <para>Retrieves an icon for the asset at the given asset path.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.SetLabels(UnityEngine.Object,System.String[])">
      <summary>
        <para>Replaces that list of labels on an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetLabels(UnityEngine.Object)">
      <summary>
        <para>Returns all labels attached to a given asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ClearLabels(UnityEngine.Object)">
      <summary>
        <para>Removes all labels attached to an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.GetDependencies(System.String[])">
      <summary>
        <para>Given an array of <i>pathNames</i>, returns the list of all assets that the assets depend on.</para>
        <para>The list returned will also include the input guid themselves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String)">
      <summary>
        <para>Exports the assets identified by <i>assetPathNames</i> to a unitypackage file in <i>fileName</i>.</para>
        <para>See Also: ExportPackageOptions for information on how you can affect what gets exported.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String,System.String,UnityEditor.ExportPackageOptions)">
      <summary>
        <para>Exports the assets identified by <i>assetPathNames</i> to a unitypackage file in <i>fileName</i>.</para>
        <para>See Also: ExportPackageOptions for information on how you can affect what gets exported.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String,UnityEditor.ExportPackageOptions)">
      <summary>
        <para>Exports the assets identified by <i>assetPathNames</i> to a unitypackage file in <i>fileName</i>.</para>
        <para>See Also: ExportPackageOptions for information on how you can affect what gets exported.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ExportPackage(System.String[],System.String)">
      <summary>
        <para>Exports the assets identified by <i>assetPathNames</i> to a unitypackage file in <i>fileName</i>.</para>
        <para>See Also: ExportPackageOptions for information on how you can affect what gets exported.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.ImportPackage(System.String,System.Boolean)">
      <summary>
        <para>Imports package at <i>packagePath</i> into the current project.</para>
        <para>If <i>interactive</i> is true, an import package dialog will be opened, else all assets in the package will be imported into the current project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <returns>
        <para>True is the asset can be edited.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <param name="assetPath">Is the path to the asset on disk relative to project folder.</param>
      <returns>
        <para>True is the asset can be edited.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(UnityEngine.Object,System.String@)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <param name="message">Used to give reason for not open.</param>
      <returns>
        <para>True is the asset can be edited.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.AssetDatabase.IsOpenForEdit(System.String,System.String@)">
      <summary>
        <para>Use IsOpenForEdit to determine if the asset is open for edit by the version control.</para>
        <para>Used to disable editor controls.</para>
      </summary>
      <param name="assetPath">Is the path to the asset on disk relative to project folder.</param>
      <param name="message">Used to give reason for not open.</param>
      <returns>
        <para>True is the asset can be edited.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.InitializeOnLoadAttribute">
      <summary>
        <para>Allow an editor class to be initialized when Unity loads without action from the user.</para>
        <para>See the manual page about [wiki:RunningEditorCodeOnLaunch|running editor code on launch] for further details.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUI">
      <summary>
        <para>These work pretty much like the normal GUI functions - and also have matching implementations in <see cref="EditorGUILayout">EditorGUILayout</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.String,System.Single)">
      <summary>
        <para>Make a text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.String,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single)">
      <summary>
        <para>Make a text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the int field.</param>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Popup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[])">
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct	mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent)">
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct	mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="label">Optional label in front of the field.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntPopup(UnityEngine.Rect,System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option. If optionValues a direct mapping of selectedValue to displayedOptions is assumed.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="tag">The tag the field shows.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TagField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,System.String,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.LayerField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.String,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="label">Label for the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="mask">The current mask to display.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MaskField(UnityEngine.Rect,System.Int32,System.String[],UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="mask">The current mask to display.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="displayedOptions">A string array containing the labels for each flag.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.String,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="label">Caption/label for the control.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EnumMaskField(UnityEngine.Rect,System.Enum,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for this control.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Foldout(UnityEngine.Rect,System.Boolean,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the arrow and label.</param>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="toggleOnLabelClick">Should the label be a clickable part of the control?</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32)">
      <summary>
        <para>Make a label for some control.</para>
        <para>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its <see cref="Rect">Rect</see> explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label for some control.</para>
        <para>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its <see cref="Rect">Rect</see> explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HandlePrefixLabel(UnityEngine.Rect,UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label for some control.</para>
        <para>HandlePrefixLabel is like PrefixLabel but allows custom control over the label position by supplying its <see cref="Rect">Rect</see> explicitly. PrefixLabel or HandlePrefixLabel should be used when creating a control with a connected label. It ensures that when the label is clicked, the control will get keyboard focus. For this reason it is important that the same ID is supplied to PrefixLabel or HandlePrefixLabel as to the control itself. It is also possible to not supply a Control ID, in which case the one from the immediately following control is automatically used.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="labelPosition">Rectangle on the screen to use for the label.</param>
      <param name="label">Label to show for the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
        <para>See Also:</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
        <para>See Also:</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureAlpha(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Single)">
      <summary>
        <para>Draws the alpha channel of a texture within a rectangle.</para>
        <para>See Also:</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawTextureTransparent(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode)" />
    <member name="M:UnityEditor.EditorGUI.DrawTextureTransparent(UnityEngine.Rect,UnityEngine.Texture)" />
    <member name="M:UnityEditor.EditorGUI.DrawTextureTransparent(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.ScaleMode,System.Single)" />
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map
and the fallback blit material will be chosen otherwise.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map
and the fallback blit material will be chosen otherwise.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map
and the fallback blit material will be chosen otherwise.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawPreviewTexture(UnityEngine.Rect,UnityEngine.Texture,UnityEngine.Material,UnityEngine.ScaleMode,System.Single)">
      <summary>
        <para>Draws the texture within a rectangle.</para>
        <para>If mat is null (the default), an appropriate material will be chosen for a RGBM or doubleLDR lightmap or a normal map
and the fallback blit material will be chosen otherwise.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the texture within.</param>
      <param name="image">
        <see cref="Texture">Texture</see> to display.</param>
      <param name="mat">Material to be used when drawing the texture.</param>
      <param name="scaleMode">How to scale the image when the aspect ratio of it doesn't fit the aspect ratio to be drawn within.</param>
      <param name="imageAspect">Aspect ratio to use for the source image. If 0 (the default), the aspect ratio from the image is used.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Get the height needed for a <see cref="EditorGUI.PropertyField">PropertyField</see> control.</para>
        <para>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children
if the includeChildren parameter is set to true, which is the default.
If the property has a custom PropertyDrawer, the function will return the height returned by that drawer.
The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</para>
      </summary>
      <param name="property">Height of the property area.</param>
      <param name="label">Descriptive text or image.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty)">
      <summary>
        <para>Get the height needed for a <see cref="EditorGUI.PropertyField">PropertyField</see> control.</para>
        <para>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children
if the includeChildren parameter is set to true, which is the default.
If the property has a custom PropertyDrawer, the function will return the height returned by that drawer.
The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</para>
      </summary>
      <param name="property">Height of the property area.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Get the height needed for a <see cref="EditorGUI.PropertyField">PropertyField</see> control.</para>
        <para>The height is based on the type of the SerializedProperty, and inclues the height of all expanded children
if the includeChildren parameter is set to true, which is the default.
If the property has a custom PropertyDrawer, the function will return the height returned by that drawer.
The includeChildren parameter is ignored in that case, as PropertyDrawers always include children.</para>
      </summary>
      <param name="property">Height of the property area.</param>
      <param name="label">Descriptive text or image.</param>
      <param name="includeChildren">Should the returned height include the height of child properties?</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty)">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedObject">SerializedObject</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Boolean)">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedObject">SerializedObject</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedObject">SerializedObject</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PropertyField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedObject">SerializedObject</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property field.</param>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector4Field(UnityEngine.Rect,System.String,UnityEngine.Vector4)">
      <summary>
        <para>Make an X, Y, Z &amp;amp; W field for entering a <see cref="Vector4">Vector4</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.Rect)">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,System.String,UnityEngine.Rect)">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.RectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Rect)">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.Bounds)">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.BoundsField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Bounds)">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiFloatField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent[],System.Single[])">
      <summary>
        <para>Make a multi-control with text fields for entering multiple floats in the same line.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="values">Array with the values to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiFloatField(UnityEngine.Rect,UnityEngine.GUIContent[],System.Single[])">
      <summary>
        <para>Make a multi-control with text fields for entering multiple floats in the same line.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
      <param name="values">Array with the values to edit.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiPropertyField(UnityEngine.Rect,UnityEngine.GUIContent[],UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Make a multi-control with several property fields in the same line.</para>
        <para>The array of labels determine how many properties are shown. No more than 4 properties should be used. The displayed SerializedProperties must be consecutive. The one provided in the valuesIterator argument should be the first of them.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the multi-property field.</param>
      <param name="valuesIterator">The SerializedProperty of the first property to make a control for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MultiPropertyField(UnityEngine.Rect,UnityEngine.GUIContent[],UnityEditor.SerializedProperty)">
      <summary>
        <para>Make a multi-control with several property fields in the same line.</para>
        <para>The array of labels determine how many properties are shown. No more than 4 properties should be used. The displayed SerializedProperties must be consecutive. The one provided in the valuesIterator argument should be the first of them.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the multi-property field.</param>
      <param name="valuesIterator">The SerializedProperty of the first property to make a control for.</param>
      <param name="subLabels">Array with small labels to show in front of each float field. There is room for one letter per field only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.Color)">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The color to edit.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,System.String,UnityEngine.Color)">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ColorField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Color)">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The curve to edit.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.CurveField(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>The titlebar has a foldout arrow, a help icon, and a settings menu that depends on the type of the object supplied.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) or objects that the titlebar is for.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.InspectorTitlebar(UnityEngine.Rect,System.Boolean,UnityEngine.Object[])">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
        <para>The titlebar has a foldout arrow, a help icon, and a settings menu that depends on the type of the object supplied.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the titlebar.</param>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ProgressBar(UnityEngine.Rect,System.Single,System.String)">
      <summary>
        <para>Make a progress bar.</para>
        <para>Value goes from 0 to 1, where 0 means 0% of the bar filled and 1
means the bar is at 100%  fully filled</para>
      </summary>
      <param name="value">Value that is shown.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.HelpBox(UnityEngine.Rect,System.String,UnityEditor.MessageType)">
      <summary>
        <para>Make a help box with a message to the user.</para>
      </summary>
      <param name="position">Rectangle on the screen to draw the help box within.</param>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="label">Label to show in front of the control.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PrefixLabel(UnityEngine.Rect,System.Int32,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use in total for both the label and the control.</param>
      <param name="id">The unique ID of the control. If none specified, the ID of the following control is used.</param>
      <param name="label">Label to show in front of the control.</param>
      <returns>
        <para>Rectangle on the screen to use just for the control itself.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginProperty(UnityEngine.Rect,UnityEngine.GUIContent,UnityEditor.SerializedProperty)">
      <summary>
        <para>Create a Property wrapper, useful for making regular GUI controls work with <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>Most</para>
      </summary>
      <param name="totalPosition">Rectangle on the screen to use for the control, including label if applicable.</param>
      <param name="label">Optional label in front of the slider. Use null to use the name from the SerializedProperty. Use GUIContent.none to not display a label.</param>
      <param name="property">The SerializedProperty to use for the control.</param>
      <returns>
        <para>The actual label to use for the control.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndProperty">
      <summary>
        <para>Ends a Property wrapper started with <see cref="EditorGUI.BeginProperty">BeginProperty</see>.</para>
        <para>See Also: <see cref="EditorGUI.BeginProperty">BeginProperty</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.DrawRect(UnityEngine.Rect,UnityEngine.Color)" />
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.LabelField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label field.</param>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="style">Style information (color, etc) for displaying the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="EditorGUI.ToggleLeft">EditorGUI.ToggleLeft</see> is similar to <see cref="GUI.Toggle">GUI.Toggle</see> but respects the <see cref="EditorGUI-showMixedValue">EditorGUI.showMixedValue</see> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="EditorGUI.ToggleLeft">EditorGUI.ToggleLeft</see> is similar to <see cref="GUI.Toggle">GUI.Toggle</see> but respects the <see cref="EditorGUI-showMixedValue">EditorGUI.showMixedValue</see> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="EditorGUI.ToggleLeft">EditorGUI.ToggleLeft</see> is similar to <see cref="GUI.Toggle">GUI.Toggle</see> but respects the <see cref="EditorGUI-showMixedValue">EditorGUI.showMixedValue</see> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ToggleLeft(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="EditorGUI.ToggleLeft">EditorGUI.ToggleLeft</see> is similar to <see cref="GUI.Toggle">GUI.Toggle</see> but respects the <see cref="EditorGUI-showMixedValue">EditorGUI.showMixedValue</see> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
      <returns>
        <para>The value set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUI.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUI.TextArea, but correctly responds to select all, copy, paste etc. in the editor.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.TextArea(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUI.TextArea, but correctly responds to select all, copy, paste etc. in the editor.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">The text to show.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.SelectableLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the label.</param>
      <param name="text">The text to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="password">The password to edit.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,System.String,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.PasswordField(UnityEngine.Rect,UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUI.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the password field.</param>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single)">
      <summary>
        <para>Make a text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FloatField(UnityEngine.Rect,System.Single,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text field for entering floats.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.FocusTextInControl(System.String)">
      <summary>
        <para>Move keyboard focus to a named text field and begin editing of the content.</para>
        <para>In Editor GUI, text fields can have keyboard focus without the text being edited. For example you may switch focus between text fields or other controls by using the up and down arrow keys. Once you click inside the text field, editing of the text itself begins and the arrow keys are then used to navigate the text content.</para>
      </summary>
      <param name="name">Name set using <see cref="GUI.SetNextControlName">GUI.SetNextControlName</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginDisabledGroup(System.Boolean)">
      <summary>
        <para>Create a group of controls that can be disabled.</para>
        <para>If disabled is true, the controls inside the group will be disabled.
If false, the enabled/disabled state will not be changed.</para>
      </summary>
      <param name="disabled">Boolean specifying if the controls inside the group should be disabled.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndDisabledGroup">
      <summary>
        <para>Ends a disabled group started with BeginDisabledGroup.</para>
        <para>See Also: <see cref="EditorGUI.BeginDisabledGroup">BeginDisabledGroup</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.BeginChangeCheck">
      <summary>
        <para>Check if any control was changed inside a block of code.</para>
        <para>When needing to check if GUI.changed is set to true inside a block of code,
wrap the code inside BeginChangeCheck () and EndChangeCheck () like this:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUI.EndChangeCheck">
      <summary>
        <para>Ends a change check started with BeginChangeCheck ().</para>
        <para>See Also: <see cref="EditorGUI.BeginChangeCheck">BeginChangeCheck</see>.</para>
      </summary>
      <returns>
        <para>True if GUI.changed was set to true, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution.</para>
      </summary>
      <param name="position">Where to show the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution.</para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show
@style style to use.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution.</para>
      </summary>
      <param name="position">Where to show the label.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.DropShadowLabel(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Draws a label with a drop shadow.</para>
        <para>Not superfast, so use with caution.</para>
      </summary>
      <param name="position">Where to show the label.</param>
      <param name="content">Text to show
@style style to use.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,System.String,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Toggle(UnityEngine.Rect,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the toggle.</param>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,System.String,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEngine.GUIContent,System.Single,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,System.String)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Slider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,System.String,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.IntSlider(UnityEngine.Rect,UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent)">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.GUIContent,UnityEngine.Rect,System.Single@,System.Single@,System.Single,System.Single)">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.MinMaxSlider(UnityEngine.Rect,System.Single@,System.Single@,System.Single,System.Single)">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,System.String,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.ObjectField(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean)">
      <summary>
        <para>Make an object field. You can assign objects either by drag and drop objects or by selecting an object using the Object Picker.</para>
        <para>Ensure that the</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,System.String,UnityEngine.Vector2)">
      <summary>
        <para>Make an X &amp;amp; Y field for entering a <see cref="Vector2">Vector2</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector2Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector2)">
      <summary>
        <para>Make an X &amp;amp; Y field for entering a <see cref="Vector2">Vector2</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,System.String,UnityEngine.Vector3)">
      <summary>
        <para>Make an X, Y &amp;amp; Z field for entering a <see cref="Vector3">Vector3</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUI.Vector3Field(UnityEngine.Rect,UnityEngine.GUIContent,UnityEngine.Vector3)">
      <summary>
        <para>Make an X, Y &amp;amp; Z field for entering a <see cref="Vector3">Vector3</see>.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the field.</param>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.EditorGUI.showMixedValue">
      <summary>
        <para>Makes the following controls give the appearance of editing multiple different values.</para>
        <para>This is sometimes useful when creating custom editors and you want to represent
a value in a non-standard way in the GUI while also supporting multi-object editing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.actionKey">
      <summary>
        <para>Is the platform-dependent "action" modifier key held down? (Read Only)</para>
        <para>The key is Command on Mac OS X, Control on Windows.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUI.indentLevel">
      <summary>
        <para>The indent level of the field labels.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUILayout">
      <summary>
        <para>Auto-layouted version of <see cref="EditorGUI">EditorGUI</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector3Field(System.String,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y &amp;amp; Z field for entering a <see cref="Vector3">Vector3</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector3Field(UnityEngine.GUIContent,UnityEngine.Vector3,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y &amp;amp; Z field for entering a <see cref="Vector3">Vector3</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector4Field(System.String,UnityEngine.Vector4,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, Z &amp;amp; W field for entering a <see cref="Vector4">Vector4</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(System.String,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.RectField(UnityEngine.GUIContent,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X, Y, W &amp;amp; H field for entering a <see cref="Rect">Rect</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(System.String,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BoundsField(UnityEngine.GUIContent,UnityEngine.Bounds,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make Center &amp;amp; Extents field for entering a <see cref="Bounds">Bounds</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
      </summary>
      <param name="value">The color to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(System.String,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ColorField(UnityEngine.GUIContent,UnityEngine.Color,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for selecting a <see cref="Color">Color</see>.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The color to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The color selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="value">The curve to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(System.String,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.CurveField(UnityEngine.GUIContent,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Rect,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for editing an <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
      <param name="label">Optional label to display in front of the field.</param>
      <param name="value">The curve to edit.</param>
      <param name="color">The color to show the curve with.</param>
      <param name="ranges">Optional rectangle that the curve is restrained within.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The curve edited by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object)">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
      </summary>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <param name="targetObj">The object (for example a component) or objects that the titlebar is for.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.InspectorTitlebar(System.Boolean,UnityEngine.Object[])">
      <summary>
        <para>Make an inspector-window-like titlebar.</para>
      </summary>
      <param name="foldout">The foldout state shown with the arrow.</param>
      <returns>
        <para>The foldout state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType)">
      <summary>
        <para>Make a help box with a message to the user.</para>
      </summary>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.HelpBox(System.String,UnityEditor.MessageType,System.Boolean)">
      <summary>
        <para>Make a help box with a message to the user.</para>
      </summary>
      <param name="message">The message text.</param>
      <param name="type">The type of message.</param>
      <param name="wide">If true, the box will cover the whole width of the window; otherwise it will cover the controls part only.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Space">
      <summary>
        <para>Make a small space between the previous control and the following.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(System.String,System.Boolean)">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
        <para>See Also:</para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
      <returns>
        <para>The enabled state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginToggleGroup(UnityEngine.GUIContent,System.Boolean)">
      <summary>
        <para>Begin a vertical group with a toggle to enable or disable all the controls within at once.</para>
        <para>See Also:</para>
      </summary>
      <param name="label">Label to show above the toggled controls.</param>
      <param name="toggle">Enabled state of the toggle group.</param>
      <returns>
        <para>The enabled state selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndToggleGroup">
      <summary>
        <para>Close a group started with <see cref="EditorGUILayout.BeginToggleGroup">BeginToggleGroup</see>.</para>
        <para>See Also:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a horizontal group and get its rect back.</para>
        <para>This is an extension to</para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginHorizontal(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a horizontal group and get its rect back.</para>
        <para>This is an extension to</para>
      </summary>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndHorizontal">
      <summary>
        <para>Close a group started with BeginHorizontal.</para>
        <para>See Also: EditorGUILayout.BeginHorizontal</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical group and get its rect back.</para>
        <para>This is an extension to</para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginVertical(UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin a vertical group and get its rect back.</para>
        <para>This is an extension to</para>
      </summary>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndVertical">
      <summary>
        <para>Close a group started with BeginVertical.</para>
        <para>See Also: EditorGUILayout.BeginVertical</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginScrollView(UnityEngine.Vector2,System.Boolean,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Begin an automatically layouted scrollview.</para>
        <para>These work just like GUILayout.BeginScrollView but feel more application-like and should be used in the editor</para>
      </summary>
      <param name="scrollPosition">The position to use display.</param>
      <param name="horizontalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the horizontal scrollbar. If left out, the <c>horizontalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <param name="verticalScrollbar">Optional <see cref="GUIStyle">GUIStyle</see> to use for the vertical scrollbar. If left out, the <c>verticalScrollbar</c> style from the current <see cref="GUISkin">GUISkin</see> is used.</param>
      <returns>
        <para>The modified scrollPosition. Feed this back into the variable you pass in, as shown in the example.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndScrollView">
      <summary>
        <para>Ends a scrollview started with a call to BeginScrollView.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedObject">SerializedObject</see>.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedObject">SerializedObject</see>.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedObject">SerializedObject</see>.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PropertyField(UnityEditor.SerializedProperty,UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedObject">SerializedObject</see>.</para>
      </summary>
      <param name="property">The SerializedProperty to make a field for.</param>
      <param name="label">Optional label to use. If not specified the label of the property itself is used. Use GUIContent.none to not display a label at all.</param>
      <param name="includeChildren">If <c>true</c> the property including children is drawn; otherwise only the control itself (such as only a foldout but nothing below it).</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>True if the property has children and is expanded and includeChildren was set to false; otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a</para>
      </summary>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is <see cref="EditorGUIUtility-singleLineHeight">EditorGUIUtility.singleLineHeight</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.GetControlRect(System.Boolean,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Get a rect for an Editor control.</para>
        <para>When creating a new Editor control it is a sound design to implement the actual control without relying on GUILayout and instead have the control take a</para>
      </summary>
      <param name="hasLabel">Optional boolean to specify if the control has a label. Default is true.</param>
      <param name="height">The height in pixels of the control. Default is <see cref="EditorGUIUtility-singleLineHeight">EditorGUIUtility.singleLineHeight</see>.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see> to use for the control.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.BeginFadeGroup(System.Single)">
      <summary>
        <para>Begins a group that can be be hidden/shown and the transition will be animated.</para>
        <para>Returns if the group is visible or not.</para>
      </summary>
      <param name="value">A value between 0 and 1, 0 being hidden, and 1 being fully visible.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EndFadeGroup">
      <summary>
        <para>Closes a group started with BeginFadeGroup.</para>
        <para>See Also: <see cref="EditorGUILayout.BeginFadeGroup">EditorGUILayout.BeginFadeGroup</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Foldout(System.Boolean,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label with a foldout arrow to the left of it.</para>
        <para>This is useful for creating tree or folder like structures where child objects are only shown if the parent is folded out.</para>
      </summary>
      <param name="foldout">The shown foldout state.</param>
      <param name="content">The label to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <returns>
        <para>The foldout state selected by the user. If true, you should render sub-objects.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PrefixLabel(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a label in front of some control.</para>
      </summary>
      <param name="label">Label to show in front of the control.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LabelField(UnityEngine.GUIContent,UnityEngine.GUIContent,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a label field. (Useful for showing read-only info.)</para>
      </summary>
      <param name="label">Label in front of the label field.</param>
      <param name="label2">The label to show to the right.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="value">The shown state of the toggle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Toggle(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle.</para>
      </summary>
      <param name="label">Optional label in front of the toggle.</param>
      <param name="value">The shown state of the toggle.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The selected state of the toggle.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="EditorGUILayout.ToggleLeft">EditorGUILayout.ToggleLeft</see> is similar to <see cref="GUILayout.Toggle">GUILayout.Toggle</see> but respects the <see cref="EditorGUI-showMixedValue">EditorGUI.showMixedValue</see> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="EditorGUILayout.ToggleLeft">EditorGUILayout.ToggleLeft</see> is similar to <see cref="GUILayout.Toggle">GUILayout.Toggle</see> but respects the <see cref="EditorGUI-showMixedValue">EditorGUI.showMixedValue</see> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(System.String,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="EditorGUILayout.ToggleLeft">EditorGUILayout.ToggleLeft</see> is similar to <see cref="GUILayout.Toggle">GUILayout.Toggle</see> but respects the <see cref="EditorGUI-showMixedValue">EditorGUI.showMixedValue</see> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ToggleLeft(UnityEngine.GUIContent,System.Boolean,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a toggle field where the toggle is to the left and the label immediately to the right of it.</para>
        <para>
          <see cref="EditorGUILayout.ToggleLeft">EditorGUILayout.ToggleLeft</see> is similar to <see cref="GUILayout.Toggle">GUILayout.Toggle</see> but respects the <see cref="EditorGUI-showMixedValue">EditorGUI.showMixedValue</see> property and handles keyboard focus consistent with other Editor controls.</para>
      </summary>
      <param name="label">Label to display next to the toggle.</param>
      <param name="value">The value to edit.</param>
      <param name="labelStyle">Optional <see cref="GUIStyle">GUIStyle</see> to use for the label.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field.</para>
        <para>This works just like GUILayout.TextField, but correctly responds to select all, copy, paste etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="label">Optional label to display in front of the text field.</param>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUILayout.TextArea, but correctly responds to select all, copy, paste etc. in the editor.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TextArea(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text area.</para>
        <para>This works just like GUILayout.TextArea, but correctly responds to select all, copy, paste etc. in the editor.</para>
      </summary>
      <param name="text">The text to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The text entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="text">The text to show.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.SelectableLabel(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a selectable label field. (Useful for showing read-only info that can be copy-pasted.)</para>
      </summary>
      <param name="text">The text to show.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="password">The password to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.PasswordField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field where the user can enter a password.</para>
        <para>This works just like GUILayout.PasswordField, but correctly responds to select all, etc. in the editor,
and it can have an optional label in front.</para>
      </summary>
      <param name="label">Optional label to display in front of the password field.</param>
      <param name="password">The password to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The password entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(System.String,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.FloatField(UnityEngine.GUIContent,System.Single,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering float values.</para>
      </summary>
      <param name="label">Optional label to display in front of the float field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a text field for entering integers.</para>
      </summary>
      <param name="label">Optional label to display in front of the int field.</param>
      <param name="value">The value to edit.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(System.String,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEngine.GUIContent,System.Single,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Slider(UnityEditor.SerializedProperty,System.Single,System.Single,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change a value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(System.String,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEngine.GUIContent,System.Int32,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="value">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntSlider(UnityEditor.SerializedProperty,System.Int32,System.Int32,UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a slider the user can drag to change an integer value between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="property">The value the slider shows. This determines the position of the draggable thumb.</param>
      <param name="leftValue">The value at the left end of the slider.</param>
      <param name="rightValue">The value at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(System.Single@,System.Single@,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MinMaxSlider(UnityEngine.GUIContent,System.Single@,System.Single@,System.Single,System.Single,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a special slider the user can use to specify a range between a min and a max.</para>
      </summary>
      <param name="label">Optional label in front of the slider.</param>
      <param name="minValue">The lower value of the range the slider shows, passed by reference.</param>
      <param name="maxValue">The upper value at the range the slider shows, passed by reference.</param>
      <param name="minLimit">The limit at the left end of the slider.</param>
      <param name="maxLimit">The limit at the right end of the slider.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Popup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a generic popup selection field.</para>
        <para>Takes the currently selected index as a parameter and returns the index selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedIndex">The index of the option the field shows.</param>
      <param name="displayedOptions">An array with the options shown in the popup.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The index of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="selected">The enum option the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumPopup(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an enum popup selection field.</para>
        <para>Takes the currently selected enum value as a parameter and returns the enum value selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selected">The enum option the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The enum option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(System.String,System.Int32,System.String[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
        <para>Takes the currently selected integer as a parameter and returns the integer selected by the user.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="selectedValue">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.IntPopup(UnityEditor.SerializedProperty,UnityEngine.GUIContent[],System.Int32[],UnityEngine.GUIContent,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an integer popup selection field.</para>
      </summary>
      <param name="property">The value of the option the field shows.</param>
      <param name="displayedOptions">An array with the displayed options the user can choose from.</param>
      <param name="optionValues">An array with the values for each option.</param>
      <param name="label">Optional label in front of the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value of the option that has been selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="tag">The tag the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(System.String,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.TagField(UnityEngine.GUIContent,System.String,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a tag selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="tag">The tag the field shows.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The tag selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="layer">The layer shown in the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(System.String,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.LayerField(UnityEngine.GUIContent,System.Int32,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a layer selection field.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="layer">The layer shown in the field.</param>
      <param name="style">Optional <see cref="GUIStyle">GUIStyle</see>.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The layer selected by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(UnityEngine.GUIContent,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.String,System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="label">Prefix label of the field.</param>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.MaskField(System.Int32,System.String[],UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for masks.</para>
      </summary>
      <param name="mask">The current mask to display.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(UnityEngine.GUIContent,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.String,System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="label">Prefix label for this field.</param>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUIStyle,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.EnumMaskField(System.Enum,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field for enum based masks.</para>
      </summary>
      <param name="enumValue">Enum to use for the flags.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value modified by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>You can assign objects either by drag and drop or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(System.String,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>You can assign objects either by drag and drop or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.ObjectField(UnityEngine.GUIContent,UnityEngine.Object,System.Type,System.Boolean,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make a field to receive any object type.</para>
        <para>You can assign objects either by drag and drop or by selecting an object using the Object Picker.</para>
      </summary>
      <param name="label">Optional label in front of the field.</param>
      <param name="obj">The object the field shows.</param>
      <param name="objType">The type of the objects that can be assigned.</param>
      <param name="allowSceneObjects">Allow assigning scene objects. See Description for more info.</param>
      <param name="options">An optional list of layout options that specify extra layout properties. Any values passed in here will override settings defined by the <c>style</c>.
See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The object that has been set by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector2Field(System.String,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X &amp;amp; Y field for entering a <see cref="Vector2">Vector2</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUILayout.Vector2Field(UnityEngine.GUIContent,UnityEngine.Vector2,UnityEngine.GUILayoutOption[])">
      <summary>
        <para>Make an X &amp;amp; Y field for entering a <see cref="Vector2">Vector2</see>.</para>
      </summary>
      <param name="label">Label to display above the field.</param>
      <param name="value">The value to edit.</param>
      <param name="options">An optional list of layout options that specify extra layouting properties. Any values passed in here will override settings defined by the <c>style</c>.

See Also: <see cref="GUILayout.Width">GUILayout.Width</see>, <see cref="GUILayout.Height">GUILayout.Height</see>, <see cref="GUILayout.MinWidth">GUILayout.MinWidth</see>, <see cref="GUILayout.MaxWidth">GUILayout.MaxWidth</see>, <see cref="GUILayout.MinHeight">GUILayout.MinHeight</see>, 
<see cref="GUILayout.MaxHeight">GUILayout.MaxHeight</see>, <see cref="GUILayout.ExpandWidth">GUILayout.ExpandWidth</see>, <see cref="GUILayout.ExpandHeight">GUILayout.ExpandHeight</see>.</param>
      <returns>
        <para>The value entered by the user.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.FileUtil">
      <summary>
        <para>Lets you do <i>move</i>, <i>copy</i>, <i>delete</i> operations over files or directories.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.DeleteFileOrDirectory(System.String)">
      <summary>
        <para>Deletes a file or a directory given a path.</para>
        <para>This function's path is relative to the project root folder but it can also accept absolute paths.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.CopyFileOrDirectory(System.String,System.String)">
      <summary>
        <para>Copies a file or a directory.</para>
        <para>This function's path can be relative to the project root folder or be an absolute path.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.CopyFileOrDirectoryFollowSymlinks(System.String,System.String)">
      <summary>
        <para>Copies the file or directory.</para>
        <para>Copies from</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.MoveFileOrDirectory(System.String,System.String)">
      <summary>
        <para>Moves a file or a directory from a given path to another path.</para>
        <para>This function's path is relative to the project root folder but it can also accept absolute paths.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.GetUniqueTempPathInProject">
      <summary>
        <para>Returns a unique path in the Temp folder within your current project.</para>
        <para>The returned path is relative to the project folder.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.ReplaceFile(System.String,System.String)">
      <summary>
        <para>Replaces a file.</para>
        <para>Replaces the file located at <i>dst</i> with the file located at <i>src</i>.
if <i>dst</i> doesnt exists it just copies the file. If <i>dst</i> exists
then it deletes it and copies the file at <i>src</i> to <i>dst</i>
See Also: FileUtil.ReplaceDirectory.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.FileUtil.ReplaceDirectory(System.String,System.String)">
      <summary>
        <para>Replaces a directory.</para>
        <para>Replaces the directory located at <i>dst</i> with the directory located at <i>src</i>.
if <i>dst</i> doesnt exists it copies the file. If <i>dst</i> exists
then it deletes it and copies the directory at <i>src</i> to <i>dst</i>
See Also: FileUtil.ReplaceFile.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GameObjectUtility">
      <summary>
        <para>GameObject utility functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetParentAndAlign(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Sets the parent and gives the child the same layer and position.</para>
        <para>This is intended as a utility function when creating custom GameObjects with a <see cref="MenuItem">MenuItem</see> in the "GameObject/" menu. When using the context click menu to create new GameObjects in the scene hierarchy, the newly created GameObjects should be parented to the clicked GameObject, which is passed in as <see cref="MenuCommand-context">MenuCommand.context</see>. Calling this method ensures this behavior in the case of a context click while doing nothing if the context is null (see example on the <see cref="MenuItem">MenuItem</see> docs).</para>
      </summary>
      <param name="child">The GameObject that should have a new parent set.</param>
      <param name="parent">The GameObject that the child should get as a parent and have position and layer copied from. If null, this function does nothing.</param>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetStaticEditorFlags(UnityEngine.GameObject)">
      <summary>
        <para>Gets the set StaticEditorFlags.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.AreStaticEditorFlagsSet(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
      <summary>
        <para>Returns true if the passed in StaticEditorFlags are set.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetStaticEditorFlags(UnityEngine.GameObject,UnityEditor.StaticEditorFlags)">
      <summary>
        <para>Sets the StaticEditorFlags.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayer(UnityEngine.GameObject)">
      <summary>
        <para>Get the navmesh layer for the GameObject.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayerFromName(System.String)">
      <summary>
        <para>Get the navmesh layer from the layer name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.SetNavMeshLayer(UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>Set the navmesh layer for the gameobject.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GameObjectUtility.GetNavMeshLayerNames">
      <summary>
        <para>Get all the navmesh layer names.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty">
      <summary>
        <para>Describes information and value of a single shader property.</para>
        <para>MaterialProperty is used with</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialProperty.ReadFromMaterialPropertyBlock(UnityEngine.MaterialPropertyBlock)" />
    <member name="M:UnityEditor.MaterialProperty.WriteToMaterialPropertyBlock(UnityEngine.MaterialPropertyBlock,System.Int32)" />
    <member name="P:UnityEditor.MaterialProperty.targets">
      <summary>
        <para>Material objects being edited by this property (Read Only).</para>
        <para>Changes done to property values via <see cref="MaterialProperty-floatValue">floatValue</see>, <see cref="MaterialProperty-colorValue">colorValue</see>, <see cref="MaterialProperty-vectorValue">vectorValue</see>, <see cref="MaterialProperty-textureValue">textureValue</see> will be applied to these objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.type">
      <summary>
        <para>Type of the property (Read Only).</para>
        <para>Material properties can be textures, colors, floats and so on. Depending on the type, you should use <see cref="MaterialProperty-textureValue">textureValue</see>, <see cref="MaterialProperty-colorValue">colorValue</see>, <see cref="MaterialProperty-vectorValue">vectorValue</see> or <see cref="MaterialProperty-floatValue">floatValue</see> to access the property value.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.name">
      <summary>
        <para>Name of the property (Read Only).</para>
        <para>This is the variable name that is used in the shader, for example _MainTex.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.displayName">
      <summary>
        <para>Display name of the property (Read Only).</para>
        <para>This is the user-visible property name, for example "Main Texture" that is declared in the shader's Properties block.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.flags">
      <summary>
        <para>Flags that control how property is displayed (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.textureDimension">
      <summary>
        <para>Texture dimension (2D, Cubemap etc.) of the property (Read Only).</para>
        <para>See Also: <see cref="MaterialProperty-type">type</see>, <see cref="MaterialProperty-textureValue">textureValue</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.rangeLimits">
      <summary>
        <para>Min/max limits of a ranged float property (Read Only).</para>
        <para>This is only relevant for <see cref="MaterialProperty.PropType.Range">MaterialProperty.PropType.Range</see> properties.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.hasMixedValue">
      <summary>
        <para>Does this property have multiple different values? (Read Only)</para>
        <para>When multiple materials are selected at once, some of their properties can have different values.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.applyPropertyCallback" />
    <member name="P:UnityEditor.MaterialProperty.colorValue">
      <summary>
        <para>Color value of the property.</para>
        <para>Setting a new value will apply it to all material</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.vectorValue">
      <summary>
        <para>Vector value of the property.</para>
        <para>Setting a new value will apply it to all material</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.floatValue">
      <summary>
        <para>Float vaue of the property.</para>
        <para>Setting a new value will apply it to all material</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.textureValue">
      <summary>
        <para>Texture value of the property.</para>
        <para>Setting a new value will apply it to all material</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialProperty.textureScaleAndOffset" />
    <member name="T:UnityEditor.MaterialProperty+PropType">
      <summary>
        <para>Material property type.</para>
        <para>Material properties can be textures, colors, floats and so on.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Color">
      <summary>
        <para>Color property.</para>
        <para>See Also: <see cref="MaterialProperty-type">MaterialProperty.type</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Vector">
      <summary>
        <para>Vector property.</para>
        <para>See Also: <see cref="MaterialProperty-type">MaterialProperty.type</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Float">
      <summary>
        <para>Float property.</para>
        <para>See Also: <see cref="MaterialProperty-type">MaterialProperty.type</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Range">
      <summary>
        <para>Ranged float (with min/max values) property.</para>
        <para>See Also: <see cref="MaterialProperty-type">MaterialProperty.type</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropType.Texture">
      <summary>
        <para>Texture property.</para>
        <para>See Also: <see cref="MaterialProperty-type">MaterialProperty.type</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty+TexDim">
      <summary>
        <para>Texture dimension of a property.</para>
        <para>Texture properties can accept regular (2D) textures, Cubemaps etc.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.None">
      <summary>
        <para>No texture type is set.</para>
        <para>See Also: <see cref="MaterialProperty-textureDimension">MaterialProperty.textureDimension</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.Tex2D">
      <summary>
        <para>
          <see cref="Texture2D">Texture2D</see> property.</para>
        <para>See Also: <see cref="MaterialProperty-textureDimension">MaterialProperty.textureDimension</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.Tex3D">
      <summary>
        <para>
          <see cref="Texture3D">Texture3D</see> property.</para>
        <para>See Also: <see cref="MaterialProperty-textureDimension">MaterialProperty.textureDimension</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.Cube">
      <summary>
        <para>
          <see cref="Cubemap">Cubemap</see> property.</para>
        <para>See Also: <see cref="MaterialProperty-textureDimension">MaterialProperty.textureDimension</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+TexDim.Any">
      <summary>
        <para>Texture property accepts any texture type.</para>
        <para>See Also: <see cref="MaterialProperty-textureDimension">MaterialProperty.textureDimension</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty+PropFlags">
      <summary>
        <para>Flags that control how a <see cref="MaterialProperty">MaterialProperty</see> is displayed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropFlags.None">
      <summary>
        <para>No flags are set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropFlags.HideInInspector">
      <summary>
        <para>Do not show the property in inspector.</para>
        <para>
          <see cref="MaterialEditor">MaterialEditor</see> will not show this property. This corresponds to "[HideInInspector]" attribute in front of property in the shader code.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MaterialProperty+PropFlags.PerRendererData">
      <summary>
        <para>Texture value for this property will be queried from renderer's <see cref="MaterialPropertyBlock">MaterialPropertyBlock</see>, instead of from the material. This corresponds to "[PerRendererData]" attribute in front of property in the shader code.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BaseHierarchySort">
      <summary>
        <para>The base class used to create new sorting.</para>
        <para>Example of a natural compare hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BaseHierarchySort.Compare(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>The sorting method used to determine the order of GameObjects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BaseHierarchySort.content">
      <summary>
        <para>The content to display to quickly identify the hierarchy's mode.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TransformSort">
      <summary>
        <para>Is the default sorting method used by the hierarchy.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TransformSort.content">
      <summary>
        <para>Content to visualize the transform sorting method.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AlphabeticalSort">
      <summary>
        <para>Hierarchy sort method to allow for items and their children to be sorted alphabetically.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AlphabeticalSort.Compare(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>Sort the gameobjects by name.</para>
      </summary>
      <param name="lhs">LHS gameobject to sort.</param>
      <param name="rhs">RHS gameobject to sort.</param>
    </member>
    <member name="P:UnityEditor.AlphabeticalSort.content">
      <summary>
        <para>Content to visualize the alphabetical sorting method.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Handles">
      <summary>
        <para>Custom 3D GUI controls and drawing in the scene view.</para>
        <para>Handles are the 3D controls that Unity uses to manipulate items in the scene view. There are a number of built-in Handle GUIs, such as the familiar tools to position, scale and rotate an object via the Transform component. However, it is also possible to define your own Handle GUIs to use with custom component editors. Such GUIs can be a very useful way to edit procedurally-generated scene content, "invisible" items and groups of related objects, such as waypoints and location markers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.ClearCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Clears the camera.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Draws a camera inside a rectangle.</para>
        <para>This function alse sets Camera.current to</para>
      </summary>
      <param name="position">The area to draw the camera within in GUI coordinates.</param>
      <param name="camera">The camera to draw.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawCamera(UnityEngine.Rect,UnityEngine.Camera,UnityEditor.DrawCameraMode)">
      <summary>
        <para>Draws a camera inside a rectangle.</para>
        <para>This function alse sets Camera.current to</para>
      </summary>
      <param name="position">The area to draw the camera within in GUI coordinates.</param>
      <param name="camera">The camera to draw.</param>
      <param name="drawMode">How the camera is drawn (textured, wireframe, etc.).</param>
    </member>
    <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Camera)">
      <summary>
        <para>Set the current camera so all Handles and Gizmos are draw with its settings.</para>
        <para>Sets Camera.current to be <c>camera</c> and sets its pixelRect.. This does not draw the camera, only sets it to be "active". To draw it use <see cref="Handles.DrawCamera">DrawCamera</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.SetCamera(UnityEngine.Rect,UnityEngine.Camera)">
      <summary>
        <para>Set the current camera so all Handles and Gizmos are draw with its settings.</para>
        <para>Sets Camera.current to be <c>camera</c> and sets its pixelRect.. This does not draw the camera, only sets it to be "active". To draw it use <see cref="Handles.DrawCamera">DrawCamera</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.BeginGUI">
      <summary>
        <para>Begin a 2D GUI block inside the 3D handle GUI.</para>
        <para>Begin a 2D GUI block on top of the current handle camera.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.EndGUI">
      <summary>
        <para>End a 2D GUI block and get back to the 3D handle GUI.</para>
        <para>See Also: Handles.BeginGUI.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DoPositionHandle(UnityEngine.Vector3,UnityEngine.Quaternion)" />
    <member name="M:UnityEditor.Handles.DoRotationHandle(UnityEngine.Quaternion,UnityEngine.Vector3)" />
    <member name="M:UnityEditor.Handles.DoScaleHandle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)" />
    <member name="M:UnityEditor.Handles.PositionHandle(UnityEngine.Vector3,UnityEngine.Quaternion)">
      <summary>
        <para>Make a 3D Scene view position handle.</para>
        <para>This will behave like the built-in move tool in Unity. 
If you have assigned something to Undo.SetSnapshotTarget, it will work fully with Undo. 
If you have assigned a non-null value to ignoreRaycastObjects, the center handle will support full raycast placement.
To control the orientation of the handle, set Handles.matrix prior to calling this function.</para>
      </summary>
      <param name="position">Center of the handle in 3D space.</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.RotationHandle(UnityEngine.Quaternion,UnityEngine.Vector3)">
      <summary>
        <para>Make a Scene view rotation handle.</para>
        <para>This will behave like the built-in rotation tool in Unity. If you have assigned something to Undo.SetSnapshotTarget, it will work fully with Undo.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.ScaleHandle(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Make a Scene view scale handle.</para>
        <para>This will behave like the built-in scale tool</para>
      </summary>
      <param name="scale">Scale to modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle.</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single,System.Boolean)">
      <summary>
        <para>Make a Scene view radius handle.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="radius">Radius to modify.</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.RadiusHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Make a Scene view radius handle.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="radius">Radius to modify.</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Make a 3D slider.</para>
        <para>This will draw a 3D-draggable handle on the screen. The handle is constrained to sliding along a direction vector in 3D space.</para>
      </summary>
      <param name="position">The position of the current point.</param>
      <param name="direction">The direction of the sliding.</param>
    </member>
    <member name="M:UnityEditor.Handles.Slider(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single)">
      <summary>
        <para>Make a 3D slider.</para>
        <para>This will draw a 3D-draggable handle on the screen. The handle is constrained to sliding along a direction vector in 3D space.</para>
      </summary>
      <param name="position">The position of the current point.</param>
      <param name="direction">The direction of the sliding.</param>
      <param name="size">3D size the size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">The snap value (see Handles.SnapValue).
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="offset">(optional) renders the Slider2D at handlePos, but treats the Slider2D's origin as handlePos + offset. Useful for Slider2D instances that are placed/rendered relative to another object or handle.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(System.Int32,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="id">(optional) override the default ControlID for this Slider2D instance.</param>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.Slider2D(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single,System.Boolean)">
      <summary>
        <para>Slide a handle in a 2D plane.</para>
        <para>This will draw a draggable handle on the screen. The handle is constrained to sliding on a plane.</para>
      </summary>
      <param name="handlePos">The position of the current point.</param>
      <param name="handleDir">The direction of the handle, only used for rendering of the handle.</param>
      <param name="slideDir1">The first direction of the sliding.</param>
      <param name="slideDir2">The second direction of the sliding.</param>
      <param name="handleSize">The size of the handle.</param>
      <param name="drawFunc">The function to call for doing the actual drawing - by default, it's Handles.ArrowCap, but any function that has the same signature can be used.</param>
      <param name="snap">(float or Vector2) set the snap increment (Pass a Vector2 to use separate snap increments in each dimension).</param>
      <param name="drawHelper">(default: false) render a rectangle around the handle when dragging.</param>
      <returns>
        <para>Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.FreeRotateHandle(UnityEngine.Quaternion,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Make an unconstrained rotation handle.</para>
        <para>The handle can rotate freely on all axes.</para>
      </summary>
      <param name="rotation">Orientation of the handle.</param>
      <param name="position">Center of the handle in 3D space.</param>
      <param name="size">The size of the handle.
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.FreeMoveHandle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEngine.Vector3,UnityEditor.Handles.DrawCapFunction)">
      <summary>
        <para>Make an unconstrained movement handle.</para>
        <para>This can move freely in all directions. Hold down CMD to snap, CMD-SHIFT to raysnap agains colliders in the scene.</para>
      </summary>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle. this defines the space along.</param>
      <param name="size">The size of the handle.</param>
      <param name="capFunc">The function to use for drawing the handle, eg, Handles.RectangleCap
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.ScaleSlider(System.Single,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single)">
      <summary>
        <para>Make a directional scale slider.</para>
      </summary>
      <param name="scale">The value the user can modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="direction">The direction of the handle.</param>
      <param name="rotation">The rotation of whole object.</param>
      <param name="size">The size of the handle.</param>
      <param name="snap">The new value after the user has modified it. 
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.ScaleValueHandle(System.Single,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,UnityEditor.Handles.DrawCapFunction,System.Single)">
      <summary>
        <para>Make a single-float draggable handle.</para>
        <para>This is used to make the center scale handle. The user can click and drag to scale a single float up and down.</para>
      </summary>
      <param name="value">The value the user can modify.</param>
      <param name="position">The position of the handle.</param>
      <param name="rotation">The rotation of the handle.</param>
      <param name="size">The size of the handle.</param>
      <param name="capFunc">The function to use for drawing the handle e.g. Handles.RectangleCap.</param>
      <param name="snap">The new value after the user has modified it. 
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Disc(UnityEngine.Quaternion,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Boolean,System.Single)">
      <summary>
        <para>Make a 3D disc that can be dragged with the mouse.</para>
      </summary>
      <param name="rotation">The rotation of the disc.</param>
      <param name="position">The center of the disc.</param>
      <param name="axis">The axis to rotate around.</param>
      <param name="size">The size of the disc in world space See Also:HandleUtility.GetHandleSize.</param>
      <param name="cutoffPlane">If true, only the front-facing half of the circle is draw / draggable. This is useful when you have many overlapping rotation axes (like in the default rotate tool) to avoid clutter.</param>
      <param name="snap">The new value after the user has modified it.
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Button(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single,System.Single,UnityEditor.Handles.DrawCapFunction)">
      <summary>
        <para>Make a 3D Button.</para>
        <para>This works like a normal GUI.Button, but it has a 3D position and is drawn by a handle function</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.SnapValue(System.Single,System.Single)">
      <summary>
        <para>Rounds the value <i>val</i> to the closest multiple of <i>snap</i> (snap can only be posiive).</para>
      </summary>
      <returns>
        <para>The rounded value, if <i>snap</i> is positive, and <i>val</i> otherwise.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Handles.CubeCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a cube. Pass this into handle functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.SphereCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a Sphere. Pass this into handle functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.ConeCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a Cone. Pass this into handle functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.CylinderCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a Cylinder. Pass this into handle functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.RectangleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)" />
    <member name="M:UnityEditor.Handles.SelectionFrame(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a camera facing selection frame.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DotCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a camera-facing dot. Pass this into handle functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.CircleCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw a camera-facing Circle. Pass this into handle functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.ArrowCap(System.Int32,UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Draw an arrow like those used by the move tool.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Draw a line from <i>p1</i> to <i>p2</i>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Draw a line going through the list of all <c>points</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawDottedLine(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw a dotted line from <i>p1</i> to <i>p2</i>.</para>
      </summary>
      <param name="p1">The start point.</param>
      <param name="p2">The end point.</param>
      <param name="screenSpaceSize">The size in pixels for the lengths of the line segments and the gaps between them.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="width">The width of the line. <i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(System.Single,System.Int32,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="width">The width of the line. <i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawAAPolyLine(UnityEngine.Texture2D,System.Single,UnityEngine.Vector3[])">
      <summary>
        <para>Draw anti-aliased line specified with point array and width.</para>
      </summary>
      <param name="lineTex">The AA texture used for rendering. To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.</param>
      <param name="width">The width of the line. <i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
      <param name="points">List of points to build the line from.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Color,UnityEngine.Texture2D,System.Single)">
      <summary>
        <para>Draw textured bezier line through start and end points with the given tangents.  To get an anti-aliased effect use a texture that is 1x2 pixels with one transparent white pixel and one opaque white pixel.  The bezier curve will be swept using this texture.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw the outline of a flat disc in 3D space.</para>
      </summary>
      <param name="center">The center of the dics.</param>
      <param name="normal">The normal of the disc.</param>
      <param name="radius">The radius of the dics
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawWireArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Draw a circular arc in 3D space.</para>
      </summary>
      <param name="center">The center of the circle.</param>
      <param name="normal">The normal of the circle.</param>
      <param name="from">The direction of the point on the circle circumference, relative to the center, where the arc begins.</param>
      <param name="angle">The angle of the arc, in degrees.</param>
      <param name="radius">The radius of the circle
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidRectangleWithOutline(UnityEngine.Vector3[],UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Draw a solid outlined rectangle in 3D space.</para>
      </summary>
      <param name="verts">The 4 vertices of the rectangle in world coordinates.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Draw a solid flat disc in 3D space.</para>
      </summary>
      <param name="center">The center of the dics.</param>
      <param name="normal">The normal of the disc.</param>
      <param name="radius">The radius of the dics
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.DrawSolidArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Draw a circular sector (pie piece) in 3D space.</para>
      </summary>
      <param name="center">The center of the circle.</param>
      <param name="normal">The normal of the circle.</param>
      <param name="from">The direction of the point on the circumference, relative to the center, where the sector begins.</param>
      <param name="angle">The angle of the sector, in degrees.</param>
      <param name="radius">The radius of the circle
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.Texture)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="image">Texture to display on the label.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="content">Text, image and tooltip for this label.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,System.String,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="text">Text to display on the label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current GUISkin is used.
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.Label(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Make a text label positioned in 3D space.</para>
        <para>Labels have no user interaction, do not catch mouse clicks and are always rendered in normal style.</para>
      </summary>
      <param name="position">Position in 3D space as seen from the current handle camera.</param>
      <param name="content">Text, image and tooltip for this label.</param>
      <param name="style">The style to use. If left out, the <c>label</c> style from the current GUISkin is used.
<i>Note:</i> Use HandleUtility.GetHandleSize where you might want to have constant screen-sized handles.</param>
    </member>
    <member name="M:UnityEditor.Handles.GetMainGameViewSize">
      <summary>
        <para>Get the width and height of the main game view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.xAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the X coordinate of something.</para>
        <para>This is for used for example in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.yAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the Y coordinate of something.</para>
        <para>This is for used for example in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.zAxisColor">
      <summary>
        <para>Color to use for handles that manipulates the Z coordinate of something.</para>
        <para>This is for used for example in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.centerColor">
      <summary>
        <para>Color to use for handles that represent the center of something.</para>
        <para>This is for used for example in the position, rotation, and scale gizmos, as well as in the Scene View gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.selectedColor">
      <summary>
        <para>Color to use for the currently active handle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.secondaryColor">
      <summary>
        <para>Soft color to use for for general things.</para>
        <para>This is for used for example to draw the arc selection while dragging the rotation gizmo.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.lighting">
      <summary>
        <para>Are handles lit?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.color">
      <summary>
        <para>Colors of the handles.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.matrix">
      <summary>
        <para>Matrix for all handle operations.</para>
        <para>To make all Handle routines work in an Object's local coordinate space, set this to Transform.localToWorldMatrix.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.inverseMatrix">
      <summary>
        <para>The inverse of the matrix for all handle operations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Handles.currentCamera">
      <summary>
        <para>Setup viewport and stuff for a current camera.</para>
        <para>The camera used for deciding where 3D handles end up.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GameViewSizeGroupType" />
    <member name="F:UnityEditor.GameViewSizeGroupType.Standalone" />
    <member name="F:UnityEditor.GameViewSizeGroupType.WebPlayer" />
    <member name="F:UnityEditor.GameViewSizeGroupType.iOS" />
    <member name="F:UnityEditor.GameViewSizeGroupType.Android" />
    <member name="F:UnityEditor.GameViewSizeGroupType.PS3" />
    <member name="F:UnityEditor.GameViewSizeGroupType.Xbox360" />
    <member name="F:UnityEditor.GameViewSizeGroupType.BB10" />
    <member name="F:UnityEditor.GameViewSizeGroupType.WP8" />
    <member name="T:UnityEditor.AnimatedValues.BaseAnimValue`1">
      <summary>
        <para>Abstract base class for Animated Values.</para>
        <para>Animated Values are an editor only concept for values that have a current value and a target. The value will tween towards the target at a given speed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimFloat">
      <summary>
        <para>An animated float value.</para>
        <para>Animated using Mathf.Lerp.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.#ctor(System.Single)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimFloat.#ctor(System.Single,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimVector3">
      <summary>
        <para>An animated Vector3 value.</para>
        <para>Animated using Vector3.Lerp.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor(UnityEngine.Vector3)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimVector3.#ctor(UnityEngine.Vector3,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimBool">
      <summary>
        <para>Lerp from 0 - 1.</para>
        <para>When value is 0 returns false, when value &amp;gt; 0.5 returns true. Animated using Mathf.Lerp.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(System.Boolean)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.#ctor(System.Boolean,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimBool.Fade(System.Single,System.Single)">
      <summary>
        <para>Returns a value between from and to depending on the current value of the bools animation.</para>
      </summary>
      <param name="from">Value to lerp from.</param>
      <param name="to">Value to lerp to.</param>
    </member>
    <member name="P:UnityEditor.AnimatedValues.AnimBool.faded">
      <summary>
        <para>Retuns the float value of the tween.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AnimatedValues.AnimQuaternion">
      <summary>
        <para>An animated Quaternion value.</para>
        <para>Animated using Quaternion.Slerp.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.#ctor(UnityEngine.Quaternion)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="M:UnityEditor.AnimatedValues.AnimQuaternion.#ctor(UnityEngine.Quaternion,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Constructor.</para>
      </summary>
      <param name="value">Start Value.</param>
    </member>
    <member name="T:UnityEditor.IHasCustomMenu" />
    <member name="M:UnityEditor.IHasCustomMenu.AddItemsToMenu(UnityEditor.GenericMenu)" />
    <member name="T:UnityEditor.EditorStyles">
      <summary>
        <para>Common GUIStyles used for EditorGUI controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.label">
      <summary>
        <para>Style used for the labelled on all EditorGUI overloads that take a prefix label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniLabel">
      <summary>
        <para>Style for label with small font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.largeLabel">
      <summary>
        <para>Style for label with large font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.boldLabel">
      <summary>
        <para>Style for bold label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniBoldLabel">
      <summary>
        <para>Style for mini bold label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.wordWrappedLabel">
      <summary>
        <para>Style for word wrapped label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.wordWrappedMiniLabel">
      <summary>
        <para>Style for word wrapped mini label.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteLabel">
      <summary>
        <para>Style for white label.</para>
        <para>Useful for coloring your labels; set <see cref="GUI-contentColor">GUI.contentColor</see> to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteMiniLabel">
      <summary>
        <para>Style for white mini label.</para>
        <para>Useful for coloring your labels; set <see cref="GUI-contentColor">GUI.contentColor</see> to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteLargeLabel">
      <summary>
        <para>Style for white large label.</para>
        <para>Useful for coloring your labels; set <see cref="GUI-contentColor">GUI.contentColor</see> to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.whiteBoldLabel">
      <summary>
        <para>Style for white bold label.</para>
        <para>Useful for coloring your labels; set <see cref="GUI-contentColor">GUI.contentColor</see> to your text color, then use this style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.radioButton">
      <summary>
        <para>Style used for a radio button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButton">
      <summary>
        <para>Style used for a standalone small button.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonLeft">
      <summary>
        <para>Style used for the leftmost button in a horizontal button group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonMid">
      <summary>
        <para>Style used for the middle buttons in a horizontal group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniButtonRight">
      <summary>
        <para>Style used for the rightmost button in a horizontal group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.textField">
      <summary>
        <para>Style used for <see cref="EditorGUI.TextField">EditorGUI.TextField</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.textArea">
      <summary>
        <para>Style used for <see cref="EditorGUI.TextArea">EditorGUI.TextArea</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniTextField">
      <summary>
        <para>Smaller text field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.numberField">
      <summary>
        <para>Style used for field editors for numbers.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.popup">
      <summary>
        <para>Style used for <see cref="EditorGUI.Popup">EditorGUI.Popup</see>, <see cref="EditorGUI.EnumPopup">EditorGUI.EnumPopup</see>,.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectField">
      <summary>
        <para>Style used for headings for object fields.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.objectFieldThumb">
      <summary>
        <para>Style used for headings for the Select button in object fields.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.colorField">
      <summary>
        <para>Style used for headings for Color fields.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.layerMaskField">
      <summary>
        <para>Style used for headings for Layer masks.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toggle">
      <summary>
        <para>Style used for headings for <see cref="EditorGUI.Toggle">EditorGUI.Toggle</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.foldout">
      <summary>
        <para>Style used for headings for <see cref="EditorGUI.Foldout">EditorGUI.Foldout</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.foldoutPreDrop">
      <summary>
        <para>Style used for headings for <see cref="EditorGUI.Foldout">EditorGUI.Foldout</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toggleGroup">
      <summary>
        <para>Style used for headings for <see cref="EditorGUILayout.BeginToggleGroup">EditorGUILayout.BeginToggleGroup</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.standardFont">
      <summary>
        <para>Standard font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.boldFont">
      <summary>
        <para>Bold font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniFont">
      <summary>
        <para>Mini font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.miniBoldFont">
      <summary>
        <para>Mini Bold font.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbar">
      <summary>
        <para>Toolbar background from top of windows.</para>
        <para>The toolbar is used as a background for other toolbar elements
See Also: <see cref="EditorStyles-toolbarButton">toolbarButton</see>, <see cref="EditorStyles-toolbarPopup">toolbarPopup</see>, <see cref="EditorStyles-toolbarDropDown">toolbarDropDown</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarButton">
      <summary>
        <para>Style for Button and Toggles in toolbars.</para>
        <para>See Also: Example at <see cref="EditorStyles-toolbar">toolbar</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarPopup">
      <summary>
        <para>Toolbar Popup.</para>
        <para>See Also: Example at <see cref="EditorStyles-toolbar">toolbar</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarDropDown">
      <summary>
        <para>Toolbar Dropdown.</para>
        <para>See Also: Example at <see cref="EditorStyles-toolbar">toolbar</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.toolbarTextField">
      <summary>
        <para>Toolbar text field.</para>
        <para>See Also: Example at <see cref="EditorStyles-toolbar">toolbar</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.inspectorDefaultMargins">
      <summary>
        <para>Wrap content in a vertical group with this style to get the default margins used in the Inspector.</para>
        <para>By default, content in the Inspector has a large left margin and a small right margin. For a consistent look, these default margins should be used for most GUI with regular controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorStyles.inspectorFullWidthMargins">
      <summary>
        <para>Wrap content in a vertical group with this style to get full width margins in the Inspector.</para>
        <para>By default, content in the Inspector has a large left margin and a small right margin. For a consistent look, these default margins should be used for most GUI with regular controls.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PopupWindowContent">
      <summary>
        <para>Class used to implement content for a popup window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnGUI(UnityEngine.Rect)">
      <summary>
        <para>Callback for drawing GUI controls for the popup window.</para>
      </summary>
      <param name="rect">The rectangle to draw the GUI inside.</param>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.GetWindowSize">
      <summary>
        <para>The size of the popup window.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnOpen">
      <summary>
        <para>Callback when the popup window is opened.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindowContent.OnClose">
      <summary>
        <para>Callback when the popup window is closed.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PopupWindowContent.editorWindow">
      <summary>
        <para>The <see cref="EditorWindow">EditorWindow</see> that contains the popup content.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PopupWindow">
      <summary>
        <para>Class used to display popup windows that inherit from <see cref="PopupWindow.PopupWindowContent">PopupWindowContent</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PopupWindow.Show(UnityEngine.Rect,UnityEditor.PopupWindowContent)">
      <summary>
        <para>Show a popup with the given PopupWindowContent.</para>
      </summary>
      <param name="activatorRect">The rect of the button that opens the popup.</param>
      <param name="windowContent">The content to show in the popup window.</param>
    </member>
    <member name="T:UnityEditor.CustomPreviewAttribute">
      <summary>
        <para>Adds an extra preview in the Inspector for the specified type.</para>
        <para>You can use this attribute to add your custom preview to any object that can be Inspected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomPreviewAttribute.#ctor(System.Type)">
      <summary>
        <para>Tells a <see cref="DefaultPreview">DefaultPreview</see> which class it's a preview for.</para>
        <para>When you make a custom preview, you need put this attribute on the preview class.</para>
      </summary>
      <param name="type">The type you want to create a custom preview for.</param>
    </member>
    <member name="T:UnityEditor.ObjectPreview">
      <summary>
        <para>Base Class to derive from when creating Custom Previews.</para>
        <para>You specify which type is the preview for, by using the <see cref="ObjectPreview">ObjectPreview</see> attribute.
Below you can see an small example that will display the name of the object being inspected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.Initialize(UnityEngine.Object[])">
      <summary>
        <para>Called when the Preview gets created with the objects being previewed.</para>
        <para>You can override this function and use this to cache or initialize anything needed by your preview.</para>
      </summary>
      <param name="targets">The objects being previewed.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.MoveNextTarget">
      <summary>
        <para>Called to iterate through the targets, this will be used when previewing more than one target.</para>
      </summary>
      <returns>
        <para>True if there is another target available.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ObjectPreview.ResetTarget">
      <summary>
        <para>Called to Reset the target before iterating through them.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.HasPreviewGUI">
      <summary>
        <para>Can this component be Previewed in its current state?</para>
        <para>See Also: <see cref="Objectpreview.HasPreviewGUI">Objectpreview.HasPreviewGUI</see>.</para>
      </summary>
      <returns>
        <para>True if this component can be Previewed in its current state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ObjectPreview.GetPreviewTitle">
      <summary>
        <para>Override this method if you want to change the label of the Preview area.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.</para>
        <para>If you implement</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.</para>
        <para>Implement this instead of <see cref="ObjectPreview.OnPreviewGUI">OnPreviewGUI</see> if you only want to display interactive custom previews (you can implement both if some previews are interactive and others aren't).
The overidden method should use the rectangle passed in and render a preview of the asset into it.
The default implementation is a no-op.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.ObjectPreview.OnPreviewSettings">
      <summary>
        <para>Override this method if you want to show custom controls in the preview header.</para>
        <para>The default implementation is a no-op.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.GetInfoString">
      <summary>
        <para>Implement this method to show object information on top of the object preview.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectPreview.DrawPreview(UnityEngine.Rect)">
      <summary>
        <para>This is the first entry point for Preview Drawing.</para>
        <para>The default implementation will draw a grid of previews if there are multiple targets available. Override this method if you want to change this behaviour.</para>
      </summary>
      <param name="previewArea">The available area to draw the preview.</param>
    </member>
    <member name="P:UnityEditor.ObjectPreview.target">
      <summary>
        <para>The object currently being previewed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Editor">
      <summary>
        <para>Base class to derive custom Editors from. Use this to create your own custom inspectors and editors for your objects.</para>
        <para>Consider a script MyPlayer with variables for armor, damage, and a reference to a gun GameObject:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.DrawHeader">
      <summary>
        <para>Call this function to draw the header of the editor.</para>
        <para>This function is relevant if you are creating and managing your own Editor objects.
See Also: <see cref="Editor.CreateEditor">Editor.CreateEditor</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.DrawPreview(UnityEngine.Rect)">
      <summary>
        <para>The first entry point for Preview Drawing.</para>
        <para>Draws a grid of previews if there are multiple targets available. Override this method if you want to customize this behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.UseDefaultMargins">
      <summary>
        <para>Override this method in subclasses to return false if you don't want default margins.</para>
        <para>By default, content in the Inspector has a large left margin and a small right margin. This is because the entire</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object)">
      <summary>
        <para>Make a custom editor for <c>obj</c> or <c>objects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute.
If an editorType is specified, an editor of that type is created instead.
Returns NULL if obj doesn't have a custom editor class defined.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object,System.Type)">
      <summary>
        <para>Make a custom editor for <c>obj</c> or <c>objects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute.
If an editorType is specified, an editor of that type is created instead.
Returns NULL if obj doesn't have a custom editor class defined.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[],System.Type)">
      <summary>
        <para>Make a custom editor for <c>obj</c> or <c>objects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute.
If an editorType is specified, an editor of that type is created instead.
Returns NULL if obj doesn't have a custom editor class defined.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.CreateEditor(UnityEngine.Object[])">
      <summary>
        <para>Make a custom editor for <c>obj</c> or <c>objects</c>.</para>
        <para>By default an appropriate editor is chosen that has a matching CustomEditor attribute.
If an editorType is specified, an editor of that type is created instead.
Returns NULL if obj doesn't have a custom editor class defined.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.DrawDefaultInspector">
      <summary>
        <para>Draw the built-in inspector.</para>
        <para>Call this function from inside OnInspectorGUI method to draw the automatic inspector.
It is useful you don't want to redo the entire inspector, but you want to add
a few buttons to it.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.OnInspectorGUI">
      <summary>
        <para>Implement this function to make a custom inspector.</para>
        <para>Inside this function you can add your own custom GUI for the inspector of a specific object class.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.RequiresConstantRepaint">
      <summary>
        <para>Does this edit require to be repainted constantly in its current state?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.Repaint">
      <summary>
        <para>Repaint any inspectors that shows this editor.</para>
        <para>Useful when you want to make sure the inspector updates to show changes made in OnSceneGUI.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.HasPreviewGUI">
      <summary>
        <para>Override this method in subclasses if you implement OnPreviewGUI.</para>
        <para>You can also use it to disable or enable preview depending on the target asset.
The default implementation simply returns false, so if you override OnPreviewGUI you have to override this method as well.</para>
      </summary>
      <returns>
        <para>True if this component can be Previewed in its current state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Editor.GetPreviewTitle">
      <summary>
        <para>Override this method if you want to change the label of the Preview area.</para>
        <para>If null is returned the default text "Preview" will be used.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.RenderStaticPreview(System.String,UnityEngine.Object[],System.Int32,System.Int32)">
      <summary>
        <para>Override this method if you want to render a static preview that shows.</para>
        <para>If null is returned the builtin icon for the class type is used.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own custom preview for the preview area of the inspector, primary editor headers and the object selector.</para>
        <para>If you implement</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.Editor.OnInteractivePreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Implement to create your own interactive custom preview. Interactive custom previews are used in the preview area of the inspector and the object selector.</para>
        <para>Implement this instead of</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.Editor.OnPreviewSettings">
      <summary>
        <para>Override this method if you want to show custom controls in the preview header.</para>
        <para>The default implementation is a no-op.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Editor.GetInfoString">
      <summary>
        <para>Implement this method to show asset information on top of the asset preview.</para>
        <para>You will also have to implement HasPreviewGUI and OnPreviewGUI in addition to this method.
The default implementation just returns an empty string, which disables the feature.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.target">
      <summary>
        <para>The object being inspected.</para>
        <para>For editors that support multi-object editing, the target property should not be used inside</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.targets">
      <summary>
        <para>An array of all the object being inspected.</para>
        <para>For editors that support multi-object editing, the targets property can be used in</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Editor.serializedObject">
      <summary>
        <para>A <see cref="SerializedObject">SerializedObject</see> representing the object or objects being inspected.</para>
        <para>The serializedObject can be used inside the</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialEditor">
      <summary>
        <para>The Unity Material Editor.</para>
        <para>Extend this class to write your own custom material editor. For more detailed information see the Custom Material Editor section of the the ShaderLab reference.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader)">
      <summary>
        <para>Set the shader of the material.</para>
        <para>Automatically handles internal inspector rebuilding.</para>
      </summary>
      <param name="shader">Shader to set.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.SetShader(UnityEngine.Shader,System.Boolean)">
      <summary>
        <para>Set the shader of the material.</para>
        <para>Automatically handles internal inspector rebuilding.</para>
      </summary>
      <param name="shader">Shader to set.</param>
      <param name="registerUndo">Should undo be registered.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.Awake">
      <summary>
        <para>Called when the Editor is woken up.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnInspectorGUI">
      <summary>
        <para>Implement specific MaterialEditor GUI code here. If you want to simply extend the existing editor call the base OnInspectorGUI () before doing any custom GUI code.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesChanged">
      <summary>
        <para>Whenever a material property is changed call this function. This will rebuild the inspector and validate the properties.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a range slider for a range shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RangeProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a range slider for a range shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a float shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.FloatProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a float shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a color shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ColorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a color shader property.</para>
      </summary>
      <param name="label">Label for the property.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a vector shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.VectorProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a vector shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEditor.MaterialProperty,System.String,System.Boolean)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.TextureProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,System.Boolean)">
      <summary>
        <para>Draw a property field for a texture shader property.</para>
      </summary>
      <param name="label">Label for the field.</param>
      <param name="scaleOffset">Draw scale / offset.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty)">
      <summary>
        <para>Calculate height needed for the property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetPropertyHeight(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Calculate height needed for the property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetDefaultPropertyHeight(UnityEditor.MaterialProperty)">
      <summary>
        <para>Calculate height needed for the property, ignoring custom drawers.</para>
        <para>This is similar to <see cref="MaterialEditor.GetPropertyHeight">GetPropertyHeight</see>, except it ignores any custom <see cref="MaterialPropertyDrawer">MaterialPropertyDrawer</see> objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handes UI for one shader property.</para>
        <para>This function will draw appropriate UI for the given shader property, depending on its type.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handes UI for one shader property.</para>
        <para>This function will draw appropriate UI for the given shader property, depending on its type.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handles UI for one shader property ignoring any custom drawers.</para>
        <para>This is similar to <see cref="MaterialEditor.ShaderProperty">ShaderProperty</see> function, except it ignores any custom <see cref="MaterialPropertyDrawer">MaterialPropertyDrawer</see> objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.DefaultShaderProperty(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String)">
      <summary>
        <para>Handles UI for one shader property ignoring any custom drawers.</para>
        <para>This is similar to <see cref="MaterialEditor.ShaderProperty">ShaderProperty</see> function, except it ignores any custom <see cref="MaterialPropertyDrawer">MaterialPropertyDrawer</see> objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperties(UnityEngine.Object[])">
      <summary>
        <para>Get shader property information of the passed materials.</para>
        <para>When implementing custom MaterialEditors, you'd usually pass this.targets array to this function, i.e. all the selected materials.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.String)">
      <summary>
        <para>Get information about a single shader property.</para>
        <para>See Also: <see cref="MaterialEditor.GetMaterialProperties">GetMaterialProperties</see>, <see cref="MaterialProperty">MaterialProperty</see>.</para>
      </summary>
      <param name="mats">Selected materials.</param>
      <param name="name">Property name.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.GetMaterialProperty(UnityEngine.Object[],System.Int32)">
      <summary>
        <para>Get information about a single shader property.</para>
        <para>See Also: <see cref="MaterialEditor.GetMaterialProperties">GetMaterialProperties</see>, <see cref="MaterialProperty">MaterialProperty</see>.</para>
      </summary>
      <param name="mats">Selected materials.</param>
      <param name="propertyIndex">Property index.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.PropertiesGUI">
      <summary>
        <para>Render the standard material properties.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Material)">
      <summary>
        <para>Apply initial <see cref="MaterialPropertyDrawer">MaterialPropertyDrawer</see> values.</para>
        <para>This calls all MaterialPropertyDrawer.Apply functions on all properties that have custom drawers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.ApplyMaterialPropertyDrawers(UnityEngine.Object[])">
      <summary>
        <para>Apply initial <see cref="MaterialPropertyDrawer">MaterialPropertyDrawer</see> values.</para>
        <para>This calls all MaterialPropertyDrawer.Apply functions on all properties that have custom drawers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RegisterPropertyChangeUndo(System.String)">
      <summary>
        <para>Call this when you change a material property. It will add an undo for the action.</para>
      </summary>
      <param name="label">Undo Label.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnPreviewSettings" />
    <member name="M:UnityEditor.MaterialEditor.RenderStaticPreview(System.String,UnityEngine.Object[],System.Int32,System.Int32)" />
    <member name="M:UnityEditor.MaterialEditor.HasPreviewGUI">
      <summary>
        <para>Can this component be Previewed in its current state?</para>
        <para>See Also: <see cref="Objectpreview.HasPreviewGUI">Objectpreview.HasPreviewGUI</see>.</para>
      </summary>
      <returns>
        <para>True if this component can be Previewed in its current state.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.MaterialEditor.RequiresConstantRepaint">
      <summary>
        <para>Does this edit require to be repainted constantly in its current state?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnPreviewGUI(UnityEngine.Rect,UnityEngine.GUIStyle)">
      <summary>
        <para>Custom preview for Image component.</para>
        <para>See Also: <see cref="ObjectPreview.OnPreviewGUI">ObjectPreview.OnPreviewGUI</see>.</para>
      </summary>
      <param name="r">Rectangle in which to draw the preview.</param>
      <param name="background">Background image.</param>
    </member>
    <member name="M:UnityEditor.MaterialEditor.OnEnable">
      <summary>
        <para>Called when the editor is enabled, if overridden please call the base OnEnable() to ensure that the material inspector is set up properly.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialEditor.UndoRedoPerformed" />
    <member name="M:UnityEditor.MaterialEditor.OnDisable">
      <summary>
        <para>Called when the editor is disabled, if overridden please call the base OnDisable() to ensure that the material inspector is set up properly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MaterialEditor.isVisible">
      <summary>
        <para>Is the current material expanded.</para>
        <para>Use this to check if custom material fields should be rendered.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialPropertyDrawer">
      <summary>
        <para>Base class to derive custom material property drawers from.</para>
        <para>Use this to create custom UI drawers for your material properties, without having to write custom</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
      <summary>
        <para>Override this method to make your own GUI for the property.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="prop">The <see cref="MaterialProperty">MaterialProperty</see> to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <param name="editor">Current material editor.</param>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.GetPropertyHeight(UnityEditor.MaterialProperty,System.String,UnityEditor.MaterialEditor)">
      <summary>
        <para>Override this method to specify how tall the GUI for this property is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="prop">The <see cref="MaterialProperty">MaterialProperty</see> to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <param name="editor">Current material editor.</param>
    </member>
    <member name="M:UnityEditor.MaterialPropertyDrawer.Apply(UnityEditor.MaterialProperty)">
      <summary>
        <para>Apply extra initial values to the material.</para>
        <para>This function is called in all property drawers when a new material is created, or a shader is changed on an existing material. This lets the property drawers apply any extra values to the materials, for example to setup shader keywords.</para>
      </summary>
      <param name="prop">The <see cref="MaterialProperty">MaterialProperty</see> to apply values for.</param>
    </member>
    <member name="T:UnityEditor.BodyPart" />
    <member name="F:UnityEditor.BodyPart.None" />
    <member name="F:UnityEditor.BodyPart.Avatar" />
    <member name="F:UnityEditor.BodyPart.Body" />
    <member name="F:UnityEditor.BodyPart.Head" />
    <member name="F:UnityEditor.BodyPart.LeftArm" />
    <member name="F:UnityEditor.BodyPart.LeftFingers" />
    <member name="F:UnityEditor.BodyPart.RightArm" />
    <member name="F:UnityEditor.BodyPart.RightFingers" />
    <member name="F:UnityEditor.BodyPart.LeftLeg" />
    <member name="F:UnityEditor.BodyPart.RightLeg" />
    <member name="F:UnityEditor.BodyPart.Last" />
    <member name="T:UnityEditor.BoneState" />
    <member name="F:UnityEditor.BoneState.None" />
    <member name="F:UnityEditor.BoneState.NotFound" />
    <member name="F:UnityEditor.BoneState.Duplicate" />
    <member name="F:UnityEditor.BoneState.InvalidHierarchy" />
    <member name="F:UnityEditor.BoneState.BoneLenghtIsZero" />
    <member name="F:UnityEditor.BoneState.Valid" />
    <member name="T:UnityEditor.Macros.MacroEvaluator" />
    <member name="M:UnityEditor.Macros.MacroEvaluator.Eval(System.String)" />
    <member name="T:UnityEditor.Macros.MethodEvaluator" />
    <member name="M:UnityEditor.Macros.MethodEvaluator.Eval(System.String,System.String,System.String,System.Type[],System.Object[])" />
    <member name="T:UnityEditor.SaveType" />
    <member name="F:UnityEditor.SaveType.Binary" />
    <member name="F:UnityEditor.SaveType.Text" />
    <member name="T:UnityEditor.ProjectWindowCallback.EndNameEditAction" />
    <member name="M:UnityEditor.ProjectWindowCallback.EndNameEditAction.OnEnable" />
    <member name="M:UnityEditor.ProjectWindowCallback.EndNameEditAction.Action(System.Int32,System.String,System.String)" />
    <member name="M:UnityEditor.ProjectWindowCallback.EndNameEditAction.CleanUp" />
    <member name="T:UnityEditor.ProjectWindowUtil" />
    <member name="M:UnityEditor.ProjectWindowUtil.#ctor" />
    <member name="M:UnityEditor.ProjectWindowUtil.CreateNewGUISkin" />
    <member name="M:UnityEditor.ProjectWindowUtil.CreateAsset(UnityEngine.Object,System.String)" />
    <member name="M:UnityEditor.ProjectWindowUtil.CreateFolder" />
    <member name="M:UnityEditor.ProjectWindowUtil.CreatePrefab" />
    <member name="M:UnityEditor.ProjectWindowUtil.ShowCreatedAsset(UnityEngine.Object)" />
    <member name="M:UnityEditor.ProjectWindowUtil.StartNameEditingIfProjectWindowExists(System.Int32,UnityEditor.ProjectWindowCallback.EndNameEditAction,System.String,UnityEngine.Texture2D,System.String)" />
    <member name="M:UnityEditor.ProjectWindowUtil.GetBaseFolders(System.String[])" />
    <member name="T:UnityEditor.SearchableEditorWindow" />
    <member name="M:UnityEditor.SearchableEditorWindow.#ctor" />
    <member name="M:UnityEditor.SearchableEditorWindow.OnEnable" />
    <member name="M:UnityEditor.SearchableEditorWindow.OnDisable" />
    <member name="T:UnityEditor.SearchableEditorWindow+SearchMode" />
    <member name="F:UnityEditor.SearchableEditorWindow+SearchMode.All" />
    <member name="F:UnityEditor.SearchableEditorWindow+SearchMode.Name" />
    <member name="F:UnityEditor.SearchableEditorWindow+SearchMode.Type" />
    <member name="F:UnityEditor.SearchableEditorWindow+SearchMode.Label" />
    <member name="T:UnityEditor.SearchableEditorWindow+SearchModeHierarchyWindow" />
    <member name="F:UnityEditor.SearchableEditorWindow+SearchModeHierarchyWindow.All" />
    <member name="F:UnityEditor.SearchableEditorWindow+SearchModeHierarchyWindow.Name" />
    <member name="F:UnityEditor.SearchableEditorWindow+SearchModeHierarchyWindow.Type" />
    <member name="T:UnityEditor.SceneModeUtility" />
    <member name="M:UnityEditor.SceneModeUtility.SearchForType(System.Type)" />
    <member name="M:UnityEditor.SceneModeUtility.SearchBar(System.Type[])" />
    <member name="M:UnityEditor.SceneModeUtility.StaticFlagField(System.String,UnityEditor.SerializedProperty,System.Int32)" />
    <member name="M:UnityEditor.SceneModeUtility.SetStaticFlags(UnityEngine.Object[],System.Int32,System.Boolean)" />
    <member name="M:UnityEditor.SceneModeUtility.GetObjects(UnityEngine.Object[],System.Boolean)" />
    <member name="T:UnityEditor.SceneView+SceneViewState" />
    <member name="F:UnityEditor.SceneView+SceneViewState.showFog" />
    <member name="F:UnityEditor.SceneView+SceneViewState.showMaterialUpdate" />
    <member name="F:UnityEditor.SceneView+SceneViewState.showSkybox" />
    <member name="F:UnityEditor.SceneView+SceneViewState.showFlares" />
    <member name="T:UnityEditor.CustomPropertyDrawer">
      <summary>
        <para>Tells a custom <see cref="PropertyDrawer">PropertyDrawer</see> or <see cref="DecoratorDrawer">DecoratorDrawer</see> which run-time <see cref="Serializable">Serializable</see> class or <see cref="PropertyAttribute">PropertyAttribute</see> it's a drawer for.</para>
        <para>When you make a custom</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomPropertyDrawer.#ctor(System.Type)">
      <summary>
        <para>Tells a PropertyDrawer or DecoratorDrawer class which run-time class or attribute it's a drawer for.</para>
        <para>When you make a custom drawer, you need put this attribute on the drawer class.</para>
      </summary>
      <param name="type">If the drawer is for a custom <see cref="Serializable">Serializable</see> class, the type should be that class. If the drawer is for script variables with a specific <see cref="PropertyAttribute">PropertyAttribute</see>, the type should be that attribute.</param>
    </member>
    <member name="M:UnityEditor.CustomPropertyDrawer.#ctor(System.Type,System.Boolean)">
      <summary>
        <para>Tells a PropertyDrawer or DecoratorDrawer class which run-time class or attribute it's a drawer for.</para>
        <para>When you make a custom drawer, you need put this attribute on the drawer class.</para>
      </summary>
      <param name="type">If the drawer is for a custom <see cref="Serializable">Serializable</see> class, the type should be that class. If the drawer is for script variables with a specific <see cref="PropertyAttribute">PropertyAttribute</see>, the type should be that attribute.</param>
      <param name="useForChildren">If true, the drawer will be used for any children of the specified class unless they define their own drawer.</param>
    </member>
    <member name="T:UnityEditor.DecoratorDrawer">
      <summary>
        <para>Base class to derive custom decorator drawers from.</para>
        <para>A DecoratorDrawer is similar to a</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DecoratorDrawer.OnGUI(UnityEngine.Rect)">
      <summary>
        <para>Override this method to make your own GUI for the decorator.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the decorator GUI.</param>
    </member>
    <member name="M:UnityEditor.DecoratorDrawer.GetHeight">
      <summary>
        <para>Override this method to specify how tall the GUI for this decorator is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DecoratorDrawer.attribute">
      <summary>
        <para>The <see cref="PropertyAttribute">PropertyAttribute</see> for the decorator. (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GUIDrawer">
      <summary>
        <para>Base class for <see cref="PropertyDrawer">PropertyDrawer</see> and <see cref="DecoratorDrawer">DecoratorDrawer</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PropertyDrawer">
      <summary>
        <para>Base class to derive custom property drawers from. Use this to create custom drawers for your own <see cref="Serializable">Serializable</see> classes or for script variables with custom <see cref="PropertyAttribute">PropertyAttribute</see>s.</para>
        <para>PropertyDrawers have two uses:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PropertyDrawer.OnGUI(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to make your own GUI for the property.</para>
      </summary>
      <param name="position">Rectangle on the screen to use for the property GUI.</param>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
    </member>
    <member name="M:UnityEditor.PropertyDrawer.GetPropertyHeight(UnityEditor.SerializedProperty,UnityEngine.GUIContent)">
      <summary>
        <para>Override this method to specify how tall the GUI for this field is in pixels.</para>
        <para>The default is one line high.</para>
      </summary>
      <param name="property">The SerializedProperty to make the custom GUI for.</param>
      <param name="label">The label of this property.</param>
      <returns>
        <para>The height in pixels.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.PropertyDrawer.attribute">
      <summary>
        <para>The <see cref="PropertyAttribute">PropertyAttribute</see> for the property. Not applicable for custom class drawers. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PropertyDrawer.fieldInfo">
      <summary>
        <para>The reflection FieldInfo for the member this property represents. (Read Only)</para>
        <para>For advanced uses, this allows you to get information about the member the property represents using reflection, such as the type of the property and which attributes it might have. Most PropertyDrawers will not need to make use of the FieldInfo.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.Packer">
      <summary>
        <para>Sprite Packer helpers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.GetTexturesForAtlas(System.String)">
      <summary>
        <para>Returns all atlas textures generated for the specified atlas.</para>
      </summary>
      <param name="atlasName">Atlas name.</param>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget,System.Boolean,UnityEditor.Sprites.Packer.Execution)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
        <para>If Sprite atlas files are available, they will be remapped.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget,System.Boolean)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
        <para>If Sprite atlas files are available, they will be remapped.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.RebuildAtlasCacheIfNeeded(UnityEditor.BuildTarget)">
      <summary>
        <para>Rebuilds the Sprite atlas cache.</para>
        <para>If Sprite atlas files are available, they will be remapped.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.Packer.GetAtlasDataForSprite(UnityEngine.Sprite,System.String@,UnityEngine.Texture2D@)">
      <summary>
        <para>Returns atlasing data for the specified Sprite.</para>
      </summary>
      <param name="sprite">Sprite to query.</param>
      <param name="atlasName">Gets set to the name of the atlas containing the specified Sprite.</param>
      <param name="atlasTexture">Gets set to the Texture containing the specified Sprite.</param>
    </member>
    <member name="F:UnityEditor.Sprites.Packer.kDefaultPolicy">
      <summary>
        <para>Name of the default Sprite Packer policy.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.Policies">
      <summary>
        <para>Available Sprite Packer policies for this project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.SelectedPolicy">
      <summary>
        <para>The active Sprite Packer policy for this project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Sprites.Packer.atlasNames">
      <summary>
        <para>Array of Sprite atlas names found in the current atlas cache.</para>
        <para>Might change after repacking Sprites.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.Packer+Execution">
      <summary>
        <para>Sprite Packer execution mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.Packer+Execution.Normal">
      <summary>
        <para>Normal execution. Will not trigger IPackerPolicy.OnGroupAtlases unless IPackerPolicy, IPackerPolicy version or TextureImporter settings have changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.Packer+Execution.ForceRegroup">
      <summary>
        <para>Will always trigger IPackerPolicy.OnGroupAtlases.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.IPackerPolicy">
      <summary>
        <para>Sprite packing policy interface. Provide a custom implementation to control which Sprites go into which atlases.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.IPackerPolicy.OnGroupAtlases(UnityEditor.BuildTarget,UnityEditor.Sprites.PackerJob,System.Int32[])">
      <summary>
        <para>Implement custom atlas grouping here.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.IPackerPolicy.GetVersion">
      <summary>
        <para>Return the version of your policy. Sprite Packer needs to know if atlas grouping logic changed.</para>
      </summary>
    </member>
    <member name="T:TreeEditor.TreeData" />
    <member name="M:TreeEditor.TreeData.#ctor" />
    <member name="M:TreeEditor.TreeData.GetGroup(System.Int32)" />
    <member name="M:TreeEditor.TreeData.GetNode(System.Int32)" />
    <member name="M:TreeEditor.TreeData.ValidateReferences" />
    <member name="M:TreeEditor.TreeData.ClearReferences" />
    <member name="M:TreeEditor.TreeData.AddGroup(TreeEditor.TreeGroup,System.Type)" />
    <member name="M:TreeEditor.TreeData.DuplicateGroup(TreeEditor.TreeGroup)" />
    <member name="M:TreeEditor.TreeData.DeleteGroup(TreeEditor.TreeGroup)" />
    <member name="M:TreeEditor.TreeData.SetGroupParent(TreeEditor.TreeGroup,TreeEditor.TreeGroup)" />
    <member name="M:TreeEditor.TreeData.LockGroup(TreeEditor.TreeGroup)" />
    <member name="M:TreeEditor.TreeData.UnlockGroup(TreeEditor.TreeGroup)" />
    <member name="M:TreeEditor.TreeData.IsAncestor(TreeEditor.TreeGroup,TreeEditor.TreeGroup)" />
    <member name="M:TreeEditor.TreeData.AddNode(TreeEditor.TreeGroup,TreeEditor.TreeNode)" />
    <member name="M:TreeEditor.TreeData.AddNode(TreeEditor.TreeGroup,TreeEditor.TreeNode,System.Boolean)" />
    <member name="M:TreeEditor.TreeData.SetNodeParent(TreeEditor.TreeNode,TreeEditor.TreeNode)" />
    <member name="M:TreeEditor.TreeData.DeleteNode(TreeEditor.TreeNode)" />
    <member name="M:TreeEditor.TreeData.DeleteNode(TreeEditor.TreeNode,System.Boolean)" />
    <member name="M:TreeEditor.TreeData.DuplicateNode(TreeEditor.TreeNode)" />
    <member name="M:TreeEditor.TreeData.Initialize" />
    <member name="M:TreeEditor.TreeData.UpdateSeed(System.Int32)" />
    <member name="M:TreeEditor.TreeData.UpdateFrequency(System.Int32)" />
    <member name="M:TreeEditor.TreeData.UpdateDistribution(System.Int32)" />
    <member name="M:TreeEditor.TreeData.GetAdaptiveHeightSegments(System.Single,System.Single)" />
    <member name="M:TreeEditor.TreeData.GetAdaptiveRadialSegments(System.Single,System.Single)" />
    <member name="M:TreeEditor.TreeData.GetAdaptiveSamples(TreeEditor.TreeGroup,TreeEditor.TreeNode,System.Single)" />
    <member name="M:TreeEditor.TreeData.OptimizeMaterial(System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle})" />
    <member name="M:TreeEditor.TreeData.CheckExternalChanges" />
    <member name="M:TreeEditor.TreeData.UpdateMesh(UnityEngine.Matrix4x4,System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Collections.Generic.List{TreeEditor.TreeAOSphere},System.Int32,System.Single,System.Single)" />
    <member name="F:TreeEditor.TreeData.materialHash" />
    <member name="F:TreeEditor.TreeData.root" />
    <member name="F:TreeEditor.TreeData.branchGroups" />
    <member name="F:TreeEditor.TreeData.leafGroups" />
    <member name="F:TreeEditor.TreeData.nodes" />
    <member name="F:TreeEditor.TreeData.mesh" />
    <member name="F:TreeEditor.TreeData.optimizedSolidMaterial" />
    <member name="F:TreeEditor.TreeData.optimizedCutoutMaterial" />
    <member name="F:TreeEditor.TreeData.isInPreviewMode" />
    <member name="T:TreeEditor.TreeEditorHelper" />
    <member name="M:TreeEditor.TreeEditorHelper.#ctor" />
    <member name="M:TreeEditor.TreeEditorHelper.OnEnable(TreeEditor.TreeData)" />
    <member name="M:TreeEditor.TreeEditorHelper.AreShadersCorrect" />
    <member name="M:TreeEditor.TreeEditorHelper.GetOptimizedShaderName(UnityEngine.Shader)" />
    <member name="M:TreeEditor.TreeEditorHelper.IsTreeLeafShader(UnityEngine.Shader)" />
    <member name="M:TreeEditor.TreeEditorHelper.IsTreeBarkShader(UnityEngine.Shader)" />
    <member name="M:TreeEditor.TreeEditorHelper.GUITooManyShaders" />
    <member name="M:TreeEditor.TreeEditorHelper.GUIWrongShader(System.String,UnityEngine.Material,TreeEditor.TreeEditorHelper.NodeType)" />
    <member name="M:TreeEditor.TreeEditorHelper.RefreshAllTreeShaders" />
    <member name="M:TreeEditor.TreeEditorHelper.NodeHasWrongMaterial(TreeEditor.TreeGroup)" />
    <member name="M:TreeEditor.TreeEditorHelper.GetGUIContent(System.String)" />
    <member name="M:TreeEditor.TreeEditorHelper.GetUIString(System.String)" />
    <member name="M:TreeEditor.TreeEditorHelper.ExtractLabel(System.String)" />
    <member name="M:TreeEditor.TreeEditorHelper.ExtractTooltip(System.String)" />
    <member name="T:TreeEditor.TreeEditorHelper+NodeType" />
    <member name="F:TreeEditor.TreeEditorHelper+NodeType.BarkNode" />
    <member name="F:TreeEditor.TreeEditorHelper+NodeType.LeafNode" />
    <member name="T:TreeEditor.SmoothRandom" />
    <member name="M:TreeEditor.SmoothRandom.#ctor" />
    <member name="M:TreeEditor.SmoothRandom.GetVector3(System.Single)" />
    <member name="M:TreeEditor.SmoothRandom.Get(System.Single)" />
    <member name="T:TreeEditor.Perlin" />
    <member name="M:TreeEditor.Perlin.#ctor" />
    <member name="M:TreeEditor.Perlin.Noise(System.Single)" />
    <member name="M:TreeEditor.Perlin.Noise(System.Single,System.Single)" />
    <member name="M:TreeEditor.Perlin.Noise(System.Single,System.Single,System.Single)" />
    <member name="M:TreeEditor.Perlin.SetSeed(System.Int32)" />
    <member name="T:TreeEditor.FractalNoise" />
    <member name="M:TreeEditor.FractalNoise.#ctor(System.Single,System.Single,System.Single)" />
    <member name="M:TreeEditor.FractalNoise.#ctor(System.Single,System.Single,System.Single,TreeEditor.Perlin)" />
    <member name="M:TreeEditor.FractalNoise.HybridMultifractal(System.Single,System.Single,System.Single)" />
    <member name="M:TreeEditor.FractalNoise.RidgedMultifractal(System.Single,System.Single,System.Single,System.Single)" />
    <member name="M:TreeEditor.FractalNoise.BrownianMotion(System.Single,System.Single)" />
    <member name="T:TreeEditor.RingLoop" />
    <member name="M:TreeEditor.RingLoop.#ctor" />
    <member name="M:TreeEditor.RingLoop.SetNoiseSeed(System.Int32)" />
    <member name="M:TreeEditor.RingLoop.Clone" />
    <member name="M:TreeEditor.RingLoop.Reset(System.Single,UnityEngine.Matrix4x4,System.Single,System.Int32)" />
    <member name="M:TreeEditor.RingLoop.SetSurfaceAngle(System.Single)" />
    <member name="M:TreeEditor.RingLoop.SetAnimationProperties(System.Single,System.Single,System.Single,System.Single)" />
    <member name="M:TreeEditor.RingLoop.SetSpread(System.Single,System.Single)" />
    <member name="M:TreeEditor.RingLoop.SetNoise(System.Single,System.Single,System.Single)" />
    <member name="M:TreeEditor.RingLoop.SetFlares(System.Single,System.Single)" />
    <member name="M:TreeEditor.RingLoop.BuildVertices(System.Collections.Generic.List{TreeEditor.TreeVertex})" />
    <member name="M:TreeEditor.RingLoop.Cap(System.Single,System.Single,System.Int32,System.Single,System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Int32)" />
    <member name="M:TreeEditor.RingLoop.Connect(TreeEditor.RingLoop,System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Int32,System.Boolean,System.Boolean)" />
    <member name="F:TreeEditor.RingLoop.radius" />
    <member name="F:TreeEditor.RingLoop.baseOffset" />
    <member name="T:TreeEditor.SplineNode" />
    <member name="M:TreeEditor.SplineNode.#ctor(UnityEngine.Vector3,System.Single)" />
    <member name="M:TreeEditor.SplineNode.#ctor(TreeEditor.SplineNode)" />
    <member name="F:TreeEditor.SplineNode.point" />
    <member name="F:TreeEditor.SplineNode.rot" />
    <member name="F:TreeEditor.SplineNode.normal" />
    <member name="F:TreeEditor.SplineNode.tangent" />
    <member name="F:TreeEditor.SplineNode.time" />
    <member name="T:TreeEditor.TextureAtlas" />
    <member name="M:TreeEditor.TextureAtlas.#ctor" />
    <member name="M:TreeEditor.TextureAtlas.GetHashCode" />
    <member name="M:TreeEditor.TextureAtlas.AddTexture(System.String,UnityEngine.Texture2D,UnityEngine.Color,UnityEngine.Texture2D,UnityEngine.Texture2D,UnityEngine.Texture2D,UnityEngine.Texture2D,System.Single,UnityEngine.Vector2,System.Boolean,UnityEngine.Vector2)" />
    <member name="M:TreeEditor.TextureAtlas.GetTexTiling(System.String)" />
    <member name="M:TreeEditor.TextureAtlas.GetUVRect(System.String)" />
    <member name="M:TreeEditor.TextureAtlas.Pack(System.Int32@,System.Int32,System.Int32,System.Boolean)" />
    <member name="F:TreeEditor.TextureAtlas.atlasWidth" />
    <member name="F:TreeEditor.TextureAtlas.atlasHeight" />
    <member name="F:TreeEditor.TextureAtlas.atlasPadding" />
    <member name="F:TreeEditor.TextureAtlas.nodes" />
    <member name="T:TreeEditor.TextureAtlas+TextureNode" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.name" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.diffuseTexture" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.diffuseColor" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.normalTexture" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.glossTexture" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.translucencyTexture" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.shadowOffsetTexture" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.shininess" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.scale" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.tileV" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.uvTiling" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.sourceRect" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.packedRect" />
    <member name="F:TreeEditor.TextureAtlas+TextureNode.uvRect" />
    <member name="T:TreeEditor.TreeAOSphere" />
    <member name="M:TreeEditor.TreeAOSphere.#ctor(UnityEngine.Vector3,System.Single,System.Single)" />
    <member name="M:TreeEditor.TreeAOSphere.PointOcclusion(UnityEngine.Vector3,UnityEngine.Vector3)" />
    <member name="F:TreeEditor.TreeAOSphere.flag" />
    <member name="F:TreeEditor.TreeAOSphere.area" />
    <member name="F:TreeEditor.TreeAOSphere.radius" />
    <member name="F:TreeEditor.TreeAOSphere.density" />
    <member name="F:TreeEditor.TreeAOSphere.position" />
    <member name="T:TreeEditor.TreeAttribute" />
    <member name="M:TreeEditor.TreeAttribute.#ctor(System.String,System.String,System.Single,System.Single)" />
    <member name="M:TreeEditor.TreeAttribute.#ctor(System.String,System.String,System.Single,System.Single,System.String)" />
    <member name="M:TreeEditor.TreeAttribute.#ctor(System.String,System.String,System.Single,System.Single,System.String,System.Single,System.Single)" />
    <member name="M:TreeEditor.TreeAttribute.#ctor(System.String,System.String,System.Single,System.Single,System.String,System.Single,System.Single,System.String)" />
    <member name="M:TreeEditor.TreeAttribute.#ctor(System.String,System.String,System.String)" />
    <member name="M:TreeEditor.TreeAttribute.#ctor(System.String,System.String,System.String,System.String,System.Single,System.Single,System.String)" />
    <member name="M:TreeEditor.TreeAttribute.ToString" />
    <member name="F:TreeEditor.TreeAttribute.uiLabel" />
    <member name="F:TreeEditor.TreeAttribute.uiGadget" />
    <member name="F:TreeEditor.TreeAttribute.uiCurve" />
    <member name="F:TreeEditor.TreeAttribute.uiRequirement" />
    <member name="F:TreeEditor.TreeAttribute.uiOptions" />
    <member name="F:TreeEditor.TreeAttribute.uiCurveMin" />
    <member name="F:TreeEditor.TreeAttribute.uiCurveMax" />
    <member name="F:TreeEditor.TreeAttribute.uiMin" />
    <member name="F:TreeEditor.TreeAttribute.uiMax" />
    <member name="T:TreeEditor.TreeGroup" />
    <member name="M:TreeEditor.TreeGroup.#ctor" />
    <member name="M:TreeEditor.TreeGroup.GetRadiusAtTime(TreeEditor.TreeNode,System.Single,System.Boolean)" />
    <member name="M:TreeEditor.TreeGroup.CanHaveSubGroups" />
    <member name="M:TreeEditor.TreeGroup.Lock" />
    <member name="M:TreeEditor.TreeGroup.Unlock" />
    <member name="M:TreeEditor.TreeGroup.CheckExternalChanges" />
    <member name="M:TreeEditor.TreeGroup.UpdateFrequency(TreeEditor.TreeData)" />
    <member name="M:TreeEditor.TreeGroup.UpdateSeed" />
    <member name="M:TreeEditor.TreeGroup.ComputeWindFactor(TreeEditor.TreeNode,System.Single)" />
    <member name="M:TreeEditor.TreeGroup.GetRootSpread" />
    <member name="M:TreeEditor.TreeGroup.GetRootMatrix" />
    <member name="M:TreeEditor.TreeGroup.UpdateDistribution(System.Boolean,System.Boolean)" />
    <member name="M:TreeEditor.TreeGroup.UpdateParameters" />
    <member name="M:TreeEditor.TreeGroup.BuildAOSpheres(System.Collections.Generic.List{TreeEditor.TreeAOSphere})" />
    <member name="M:TreeEditor.TreeGroup.UpdateMesh(System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Collections.Generic.List{TreeEditor.TreeAOSphere},System.Int32,System.Single,System.Single)" />
    <member name="M:TreeEditor.TreeGroup.UpdateMatrix" />
    <member name="F:TreeEditor.TreeGroup.seed" />
    <member name="F:TreeEditor.TreeGroup.distributionFrequency" />
    <member name="F:TreeEditor.TreeGroup.distributionMode" />
    <member name="F:TreeEditor.TreeGroup.distributionCurve" />
    <member name="F:TreeEditor.TreeGroup.distributionNodes" />
    <member name="F:TreeEditor.TreeGroup.distributionTwirl" />
    <member name="F:TreeEditor.TreeGroup.distributionPitch" />
    <member name="F:TreeEditor.TreeGroup.distributionPitchCurve" />
    <member name="F:TreeEditor.TreeGroup.distributionScale" />
    <member name="F:TreeEditor.TreeGroup.distributionScaleCurve" />
    <member name="F:TreeEditor.TreeGroup.showAnimationProps" />
    <member name="F:TreeEditor.TreeGroup.animationPrimary" />
    <member name="F:TreeEditor.TreeGroup.animationSecondary" />
    <member name="F:TreeEditor.TreeGroup.animationEdge" />
    <member name="F:TreeEditor.TreeGroup.visible" />
    <member name="F:TreeEditor.TreeGroup.lockFlags" />
    <member name="F:TreeEditor.TreeGroup.nodeIDs" />
    <member name="F:TreeEditor.TreeGroup.parentGroupID" />
    <member name="F:TreeEditor.TreeGroup.childGroupIDs" />
    <member name="P:TreeEditor.TreeGroup.uniqueID" />
    <member name="T:TreeEditor.TreeGroup+LockFlag" />
    <member name="F:TreeEditor.TreeGroup+LockFlag.LockPosition" />
    <member name="F:TreeEditor.TreeGroup+LockFlag.LockAlignment" />
    <member name="F:TreeEditor.TreeGroup+LockFlag.LockShape" />
    <member name="T:TreeEditor.TreeGroup+BuildFlag" />
    <member name="F:TreeEditor.TreeGroup+BuildFlag.BuildAmbientOcclusion" />
    <member name="F:TreeEditor.TreeGroup+BuildFlag.BuildWeldParts" />
    <member name="T:TreeEditor.TreeGroup+DistributionMode" />
    <member name="F:TreeEditor.TreeGroup+DistributionMode.Random" />
    <member name="F:TreeEditor.TreeGroup+DistributionMode.Alternate" />
    <member name="F:TreeEditor.TreeGroup+DistributionMode.Opposite" />
    <member name="F:TreeEditor.TreeGroup+DistributionMode.Whorled" />
    <member name="T:TreeEditor.TreeGroupBranch" />
    <member name="M:TreeEditor.TreeGroupBranch.#ctor" />
    <member name="M:TreeEditor.TreeGroupBranch.GetRadiusAtTime(TreeEditor.TreeNode,System.Single,System.Boolean)" />
    <member name="M:TreeEditor.TreeGroupBranch.UpdateParameters" />
    <member name="M:TreeEditor.TreeGroupBranch.UpdateSplines" />
    <member name="M:TreeEditor.TreeGroupBranch.UpdateMatrix" />
    <member name="M:TreeEditor.TreeGroupBranch.BuildAOSpheres(System.Collections.Generic.List{TreeEditor.TreeAOSphere})" />
    <member name="M:TreeEditor.TreeGroupBranch.UpdateMesh(System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Collections.Generic.List{TreeEditor.TreeAOSphere},System.Int32,System.Single,System.Single)" />
    <member name="M:TreeEditor.TreeGroupBranch.UpdateSpline(TreeEditor.TreeNode)" />
    <member name="F:TreeEditor.TreeGroupBranch.lodQualityMultiplier" />
    <member name="F:TreeEditor.TreeGroupBranch.geometryMode" />
    <member name="F:TreeEditor.TreeGroupBranch.materialBranch" />
    <member name="F:TreeEditor.TreeGroupBranch.materialBreak" />
    <member name="F:TreeEditor.TreeGroupBranch.materialFrond" />
    <member name="F:TreeEditor.TreeGroupBranch.height" />
    <member name="F:TreeEditor.TreeGroupBranch.radius" />
    <member name="F:TreeEditor.TreeGroupBranch.radiusCurve" />
    <member name="F:TreeEditor.TreeGroupBranch.radiusMode" />
    <member name="F:TreeEditor.TreeGroupBranch.capSmoothing" />
    <member name="F:TreeEditor.TreeGroupBranch.crinklyness" />
    <member name="F:TreeEditor.TreeGroupBranch.crinkCurve" />
    <member name="F:TreeEditor.TreeGroupBranch.seekBlend" />
    <member name="F:TreeEditor.TreeGroupBranch.seekCurve" />
    <member name="F:TreeEditor.TreeGroupBranch.noise" />
    <member name="F:TreeEditor.TreeGroupBranch.noiseCurve" />
    <member name="F:TreeEditor.TreeGroupBranch.noiseScaleU" />
    <member name="F:TreeEditor.TreeGroupBranch.noiseScaleV" />
    <member name="F:TreeEditor.TreeGroupBranch.flareSize" />
    <member name="F:TreeEditor.TreeGroupBranch.flareHeight" />
    <member name="F:TreeEditor.TreeGroupBranch.flareNoise" />
    <member name="F:TreeEditor.TreeGroupBranch.weldHeight" />
    <member name="F:TreeEditor.TreeGroupBranch.weldSpreadTop" />
    <member name="F:TreeEditor.TreeGroupBranch.weldSpreadBottom" />
    <member name="F:TreeEditor.TreeGroupBranch.breakingChance" />
    <member name="F:TreeEditor.TreeGroupBranch.breakingSpot" />
    <member name="F:TreeEditor.TreeGroupBranch.frondCount" />
    <member name="F:TreeEditor.TreeGroupBranch.frondWidth" />
    <member name="F:TreeEditor.TreeGroupBranch.frondCurve" />
    <member name="F:TreeEditor.TreeGroupBranch.frondRange" />
    <member name="F:TreeEditor.TreeGroupBranch.frondRotation" />
    <member name="F:TreeEditor.TreeGroupBranch.frondCrease" />
    <member name="T:TreeEditor.TreeGroupBranch+GeometryMode" />
    <member name="F:TreeEditor.TreeGroupBranch+GeometryMode.Branch" />
    <member name="F:TreeEditor.TreeGroupBranch+GeometryMode.BranchFrond" />
    <member name="F:TreeEditor.TreeGroupBranch+GeometryMode.Frond" />
    <member name="T:TreeEditor.TreeGroupLeaf" />
    <member name="M:TreeEditor.TreeGroupLeaf.#ctor" />
    <member name="M:TreeEditor.TreeGroupLeaf.CanHaveSubGroups" />
    <member name="M:TreeEditor.TreeGroupLeaf.UpdateParameters" />
    <member name="M:TreeEditor.TreeGroupLeaf.UpdateMatrix" />
    <member name="M:TreeEditor.TreeGroupLeaf.BuildAOSpheres(System.Collections.Generic.List{TreeEditor.TreeAOSphere})" />
    <member name="M:TreeEditor.TreeGroupLeaf.UpdateMesh(System.Collections.Generic.List{TreeEditor.TreeMaterial},System.Collections.Generic.List{TreeEditor.TreeVertex},System.Collections.Generic.List{TreeEditor.TreeTriangle},System.Collections.Generic.List{TreeEditor.TreeAOSphere},System.Int32,System.Single,System.Single)" />
    <member name="F:TreeEditor.TreeGroupLeaf.geometryMode" />
    <member name="F:TreeEditor.TreeGroupLeaf.materialLeaf" />
    <member name="F:TreeEditor.TreeGroupLeaf.instanceMesh" />
    <member name="F:TreeEditor.TreeGroupLeaf.size" />
    <member name="F:TreeEditor.TreeGroupLeaf.perpendicularAlign" />
    <member name="F:TreeEditor.TreeGroupLeaf.horizontalAlign" />
    <member name="T:TreeEditor.TreeGroupLeaf+GeometryMode" />
    <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.PLANE" />
    <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.CROSS" />
    <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.TRI_CROSS" />
    <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.BILLBOARD" />
    <member name="F:TreeEditor.TreeGroupLeaf+GeometryMode.MESH" />
    <member name="T:TreeEditor.TreeGroupRoot" />
    <member name="M:TreeEditor.TreeGroupRoot.#ctor" />
    <member name="M:TreeEditor.TreeGroupRoot.SetRootMatrix(UnityEngine.Matrix4x4)" />
    <member name="M:TreeEditor.TreeGroupRoot.CanHaveSubGroups" />
    <member name="M:TreeEditor.TreeGroupRoot.UpdateParameters" />
    <member name="F:TreeEditor.TreeGroupRoot.adaptiveLODQuality" />
    <member name="F:TreeEditor.TreeGroupRoot.shadowTextureQuality" />
    <member name="F:TreeEditor.TreeGroupRoot.enableWelding" />
    <member name="F:TreeEditor.TreeGroupRoot.enableAmbientOcclusion" />
    <member name="F:TreeEditor.TreeGroupRoot.enableMaterialOptimize" />
    <member name="F:TreeEditor.TreeGroupRoot.aoDensity" />
    <member name="F:TreeEditor.TreeGroupRoot.rootSpread" />
    <member name="F:TreeEditor.TreeGroupRoot.groundOffset" />
    <member name="F:TreeEditor.TreeGroupRoot.rootMatrix" />
    <member name="T:TreeEditor.TreeMaterial" />
    <member name="M:TreeEditor.TreeMaterial.#ctor" />
    <member name="F:TreeEditor.TreeMaterial.material" />
    <member name="F:TreeEditor.TreeMaterial.tileV" />
    <member name="T:TreeEditor.TreeNode" />
    <member name="M:TreeEditor.TreeNode.#ctor" />
    <member name="M:TreeEditor.TreeNode.GetScale" />
    <member name="M:TreeEditor.TreeNode.GetSurfaceAngleAtTime(System.Single)" />
    <member name="M:TreeEditor.TreeNode.GetRadiusAtTime(System.Single)" />
    <member name="M:TreeEditor.TreeNode.GetPropertiesAtTime(System.Single,UnityEngine.Vector3@,UnityEngine.Quaternion@,System.Single@)" />
    <member name="M:TreeEditor.TreeNode.GetLocalMatrixAtTime(System.Single)" />
    <member name="F:TreeEditor.TreeNode.spline" />
    <member name="F:TreeEditor.TreeNode.seed" />
    <member name="F:TreeEditor.TreeNode.animSeed" />
    <member name="F:TreeEditor.TreeNode.visible" />
    <member name="F:TreeEditor.TreeNode.triStart" />
    <member name="F:TreeEditor.TreeNode.triEnd" />
    <member name="F:TreeEditor.TreeNode.vertStart" />
    <member name="F:TreeEditor.TreeNode.vertEnd" />
    <member name="F:TreeEditor.TreeNode.capRange" />
    <member name="F:TreeEditor.TreeNode.breakOffset" />
    <member name="F:TreeEditor.TreeNode.size" />
    <member name="F:TreeEditor.TreeNode.scale" />
    <member name="F:TreeEditor.TreeNode.offset" />
    <member name="F:TreeEditor.TreeNode.baseAngle" />
    <member name="F:TreeEditor.TreeNode.angle" />
    <member name="F:TreeEditor.TreeNode.pitch" />
    <member name="F:TreeEditor.TreeNode.rotation" />
    <member name="F:TreeEditor.TreeNode.matrix" />
    <member name="F:TreeEditor.TreeNode.parentID" />
    <member name="F:TreeEditor.TreeNode.groupID" />
    <member name="P:TreeEditor.TreeNode.uniqueID" />
    <member name="T:TreeEditor.TreeSpline" />
    <member name="M:TreeEditor.TreeSpline.#ctor" />
    <member name="M:TreeEditor.TreeSpline.#ctor(TreeEditor.TreeSpline)" />
    <member name="M:TreeEditor.TreeSpline.Reset" />
    <member name="M:TreeEditor.TreeSpline.GetNodeCount" />
    <member name="M:TreeEditor.TreeSpline.SetNodeCount(System.Int32)" />
    <member name="M:TreeEditor.TreeSpline.RemoveNode(System.Int32)" />
    <member name="M:TreeEditor.TreeSpline.GetNodes" />
    <member name="M:TreeEditor.TreeSpline.AddPoint(UnityEngine.Vector3,System.Single)" />
    <member name="M:TreeEditor.TreeSpline.GetApproximateLength" />
    <member name="M:TreeEditor.TreeSpline.UpdateTime" />
    <member name="M:TreeEditor.TreeSpline.UpdateRotations" />
    <member name="M:TreeEditor.TreeSpline.GetRotationAtTime(System.Single)" />
    <member name="M:TreeEditor.TreeSpline.GetPositionAtTime(System.Single)" />
    <member name="F:TreeEditor.TreeSpline.nodes" />
    <member name="F:TreeEditor.TreeSpline.tension" />
    <member name="T:TreeEditor.TreeTriangle" />
    <member name="M:TreeEditor.TreeTriangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)" />
    <member name="M:TreeEditor.TreeTriangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)" />
    <member name="M:TreeEditor.TreeTriangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)" />
    <member name="F:TreeEditor.TreeTriangle.tileV" />
    <member name="F:TreeEditor.TreeTriangle.isBillboard" />
    <member name="F:TreeEditor.TreeTriangle.isCutout" />
    <member name="F:TreeEditor.TreeTriangle.materialIndex" />
    <member name="F:TreeEditor.TreeTriangle.v" />
    <member name="T:TreeEditor.TreeVertex" />
    <member name="M:TreeEditor.TreeVertex.#ctor" />
    <member name="M:TreeEditor.TreeVertex.SetAnimationProperties(System.Single,System.Single,System.Single,System.Single)" />
    <member name="M:TreeEditor.TreeVertex.SetAmbientOcclusion(System.Single)" />
    <member name="M:TreeEditor.TreeVertex.Lerp4(TreeEditor.TreeVertex[],UnityEngine.Vector2)" />
    <member name="F:TreeEditor.TreeVertex.pos" />
    <member name="F:TreeEditor.TreeVertex.nor" />
    <member name="F:TreeEditor.TreeVertex.tangent" />
    <member name="F:TreeEditor.TreeVertex.uv0" />
    <member name="F:TreeEditor.TreeVertex.uv1" />
    <member name="F:TreeEditor.TreeVertex.color" />
    <member name="F:TreeEditor.TreeVertex.flag" />
    <member name="T:UnityEditor.Highlighter">
      <summary>
        <para>Use this class to highlight elements in the editor for use in in-editor tutorials and similar.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Highlighter.#ctor" />
    <member name="M:UnityEditor.Highlighter.Stop">
      <summary>
        <para>Stops the active highlight.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String)">
      <summary>
        <para>Highlights an element in the editor.</para>
        <para>This function will highlight the specified element in the specified window. If the element could not be found, the function returns false. If the element is inside a scrollview and is not currently visible, the scrollview will first automatically scroll to reveal the element and then highlight it.</para>
      </summary>
      <param name="windowTitle">The title of the window the element is inside.</param>
      <param name="text">The text to identify the element with.</param>
      <returns>
        <para>
          <c>false</c> if the requested element was found; otherwise <c>false</c>.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Highlighter.Highlight(System.String,System.String,UnityEditor.HighlightSearchMode)">
      <summary>
        <para>Highlights an element in the editor.</para>
        <para>This function will highlight the specified element in the specified window. If the element could not be found, the function returns false. If the element is inside a scrollview and is not currently visible, the scrollview will first automatically scroll to reveal the element and then highlight it.</para>
      </summary>
      <param name="windowTitle">The title of the window the element is inside.</param>
      <param name="text">The text to identify the element with.</param>
      <param name="mode">Optional mode to specify how to search for the element.</param>
      <returns>
        <para>
          <c>false</c> if the requested element was found; otherwise <c>false</c>.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.Highlighter.HighlightIdentifier(UnityEngine.Rect,System.String)">
      <summary>
        <para>Call this method to create an identifiable rect that the Highlighter can find.</para>
        <para>If you want a custom rect in an EditorWindow or custom Editor to be highlightable, you can call this method to specify the rect and the identifier text for that rect. That will make it possible for the Highlighter to highlight the rect.</para>
      </summary>
      <param name="position">The position to make highlightable.</param>
      <param name="identifier">The identifier text of the rect.</param>
    </member>
    <member name="P:UnityEditor.Highlighter.active">
      <summary>
        <para>Is there currently an active highlight?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeVisible">
      <summary>
        <para>Is the current active highlight visible yet?</para>
        <para>If the element to be highlighted is inside a scrollview, the scrollview automatically scrolls to reveal the element. Once it is within view, activeViisble will be true.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeText">
      <summary>
        <para>The text of the current active highlight.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Highlighter.activeRect">
      <summary>
        <para>The rect in screenspace of the current active highlight.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MathUtils" />
    <member name="M:UnityEditor.MathUtils.#ctor" />
    <member name="M:UnityEditor.MathUtils.GetQuatLength(UnityEngine.Quaternion)" />
    <member name="M:UnityEditor.MathUtils.GetQuatConjugate(UnityEngine.Quaternion)" />
    <member name="M:UnityEditor.MathUtils.OrthogonalizeMatrix(UnityEngine.Matrix4x4)" />
    <member name="M:UnityEditor.MathUtils.QuaternionNormalize(UnityEngine.Quaternion@)" />
    <member name="M:UnityEditor.MathUtils.QuaternionFromMatrix(UnityEngine.Matrix4x4)" />
    <member name="M:UnityEditor.MathUtils.GetQuatLog(UnityEngine.Quaternion)" />
    <member name="M:UnityEditor.MathUtils.GetQuatExp(UnityEngine.Quaternion)" />
    <member name="M:UnityEditor.MathUtils.GetQuatSquad(System.Single,UnityEngine.Quaternion,UnityEngine.Quaternion,UnityEngine.Quaternion,UnityEngine.Quaternion)" />
    <member name="M:UnityEditor.MathUtils.GetSquadIntermediate(UnityEngine.Quaternion,UnityEngine.Quaternion,UnityEngine.Quaternion)" />
    <member name="M:UnityEditor.MathUtils.Ease(System.Single,System.Single,System.Single)" />
    <member name="M:UnityEditor.MathUtils.Slerp(UnityEngine.Quaternion,UnityEngine.Quaternion,System.Single)" />
    <member name="M:UnityEditor.MathUtils.IntersectRayTriangle(UnityEngine.Ray,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Boolean)" />
    <member name="M:UnityEditor.MathUtils.ClosestPtSegmentRay(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Ray,System.Single@,System.Single@,UnityEngine.Vector3@)" />
    <member name="M:UnityEditor.MathUtils.IntersectRaySphere(UnityEngine.Ray,UnityEngine.Vector3,System.Single,System.Single@,UnityEngine.Vector3@)" />
    <member name="M:UnityEditor.MathUtils.ClosestPtRaySphere(UnityEngine.Ray,UnityEngine.Vector3,System.Single,System.Single@,UnityEngine.Vector3@)" />
    <member name="T:UnityEditor.Events.UnityEventTools">
      <summary>
        <para>Editor tools for working with persistent UnityEvents.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEventBase)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,System.Int32)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener(UnityEngine.Events.UnityEvent,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener``1(UnityEngine.Events.UnityEvent{``0},UnityEngine.Events.UnityAction{``0})">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener``2(UnityEngine.Events.UnityEvent{``0,``1},UnityEngine.Events.UnityAction{``0,``1})">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener``3(UnityEngine.Events.UnityEvent{``0,``1,``2},UnityEngine.Events.UnityAction{``0,``1,``2})">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddPersistentListener``4(UnityEngine.Events.UnityEvent{``0,``1,``2,``3},UnityEngine.Events.UnityAction{``0,``1,``2,``3})">
      <summary>
        <para>Adds a persistent, call to the listener. Will be invoked with the arguments as defined by the Event and sent from the call location.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener(UnityEngine.Events.UnityEvent,System.Int32,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener``1(UnityEngine.Events.UnityEvent{``0},System.Int32,UnityEngine.Events.UnityAction{``0})">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener``2(UnityEngine.Events.UnityEvent{``0,``1},System.Int32,UnityEngine.Events.UnityAction{``0,``1})">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener``3(UnityEngine.Events.UnityEvent{``0,``1,``2},System.Int32,UnityEngine.Events.UnityAction{``0,``1,``2})">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterPersistentListener``4(UnityEngine.Events.UnityEvent{``0,``1,``2,``3},System.Int32,UnityEngine.Events.UnityAction{``0,``1,``2,``3})">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener``1(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{``0})">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener``2(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{``0,``1})">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener``3(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{``0,``1,``2})">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RemovePersistentListener``4(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{``0,``1,``2,``3})">
      <summary>
        <para>Removes the given function from the event.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to remove (if specified).</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.UnregisterPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32)">
      <summary>
        <para>Unregisters the given listener at the specified index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to unregister.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddVoidPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterVoidPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddIntPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{System.Int32},System.Int32)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterIntPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{System.Int32},System.Int32)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddFloatPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{System.Single},System.Single)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterFloatPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{System.Single},System.Single)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddBoolPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{System.Boolean},System.Boolean)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterBoolPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{System.Boolean},System.Boolean)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddStringPersistentListener(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{System.String},System.String)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterStringPersistentListener(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{System.String},System.String)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.AddObjectPersistentListener``1(UnityEngine.Events.UnityEventBase,UnityEngine.Events.UnityAction{``0},``0)">
      <summary>
        <para>Adds a persistent, preset call to the listener.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="M:UnityEditor.Events.UnityEventTools.RegisterObjectPersistentListener``1(UnityEngine.Events.UnityEventBase,System.Int32,UnityEngine.Events.UnityAction{``0},``0)">
      <summary>
        <para>Modifies the event at the given index.</para>
      </summary>
      <param name="unityEvent">Event to modify.</param>
      <param name="index">Index to modify.</param>
      <param name="call">Function to call.</param>
      <param name="argument">Argument to use when invoking.</param>
    </member>
    <member name="T:UnityEditor.VersionControl.Asset">
      <summary>
        <para>This class containes information about the version control state of an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.IsState(UnityEditor.VersionControl.Asset.States)">
      <summary>
        <para>Returns true if the version control state of the asset exactly matches the input state.</para>
      </summary>
      <param name="state">State to check for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.IsOneOfStates(UnityEditor.VersionControl.Asset.States[])">
      <summary>
        <para>Returns true if the version control state of the assets is one of the input states.</para>
      </summary>
      <param name="states">Array of states to test for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.Edit">
      <summary>
        <para>Opens the assets in an associated editor.</para>
        <para>Will try to open the asset in an associated editor. Eg. if png files are associated to Photoshop the png file will be loaded in photoshop.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Asset.Load">
      <summary>
        <para>Loads the asset to memory.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.state">
      <summary>
        <para>Gets the version control state of the asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.path">
      <summary>
        <para>Gets the path of the asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isFolder">
      <summary>
        <para>Returns true if the asset is a folder.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.readOnly">
      <summary>
        <para>Returns true is the asset is read only.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isMeta">
      <summary>
        <para>Returns true if the instance of the Asset class actually refers to a .meta file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.locked">
      <summary>
        <para>Returns true if the asset is locked by the version control system.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.name">
      <summary>
        <para>Get the name of the asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.fullName">
      <summary>
        <para>Gets the full name of the asset including extension.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Asset.isInCurrentProject">
      <summary>
        <para>Returns true if the assets is in the current project.</para>
        <para>If you have multiple projects or other files in the version controls repository. The window showing the incoming changes will display all changes incoming from the remote repository. Some of these changes might be to other projects or files not part of the currently open project. In that case this will return false.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Asset+States">
      <summary>
        <para>Describes the various version control states an asset can have.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.None">
      <summary>
        <para>The version control state is unknown.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Local">
      <summary>
        <para>The asset is not under version control.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Synced">
      <summary>
        <para>The asset is up to date.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.OutOfSync">
      <summary>
        <para>A newer version of the asset is available on the version control server.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Missing">
      <summary>
        <para>The asset exists in version control but is missing on the local machine.</para>
        <para>This can happen if you delete an assets from Finder/Explorer with out using the version control system.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.CheckedOutLocal">
      <summary>
        <para>The asset has been checked out on the local machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.CheckedOutRemote">
      <summary>
        <para>The asset has been checked out on a remote machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.DeletedLocal">
      <summary>
        <para>The asset has been deleted locally.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.DeletedRemote">
      <summary>
        <para>The asset has been deleted on a remote machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.AddedLocal">
      <summary>
        <para>The was locally added to version control.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.AddedRemote">
      <summary>
        <para>Remotely this asset was added to version control.</para>
        <para>If the same assets exists on two machine but has only been added to version control on one of them, then it will appear as remotely added on the machine where it has not been added.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Conflicted">
      <summary>
        <para>There is a conflict with the asset that needs to be resolved.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.LockedLocal">
      <summary>
        <para>The asset is locked by the local machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.LockedRemote">
      <summary>
        <para>The asset is locked by a remote machine.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.Updating">
      <summary>
        <para>The state of the asset is currently being queried from the version control server.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.ReadOnly">
      <summary>
        <para>The asset is read only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Asset+States.MetaFile">
      <summary>
        <para>This instance of the class actaully refers to a .meta file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.AssetList">
      <summary>
        <para>A list of version control information about assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.Filter(System.Boolean,UnityEditor.VersionControl.Asset.States[])">
      <summary>
        <para>Based on the current list and the states a new list is returned which only contains the assets with the requested states.</para>
      </summary>
      <param name="includeFolder">Whether or not folders should be included.</param>
      <param name="states">Which states to filter by.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.FilterCount(System.Boolean,UnityEditor.VersionControl.Asset.States[])">
      <summary>
        <para>Count the list of assets by given a set of states.</para>
      </summary>
      <param name="includeFolder">Whether or not to include folders.</param>
      <param name="states">Which states to include in the count.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.AssetList.FilterChildren">
      <summary>
        <para>Create an optimised list of assets by removing children of folders in the same list.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ChangeSet">
      <summary>
        <para>Wrapper around a changeset description and ID.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ChangeSet.description">
      <summary>
        <para>Description of a changeset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ChangeSet.id">
      <summary>
        <para>Version control specific ID of a changeset.</para>
        <para>E.g. Perforce changetset have unique IDs, while sibversion has no ID at all in which case it is simply -1.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ChangeSets">
      <summary>
        <para>Simply a list of changetsets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.ChangeSets.#ctor" />
    <member name="T:UnityEditor.VersionControl.Message">
      <summary>
        <para>Messages from the version control system.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Message.Show">
      <summary>
        <para>Write the message to the console.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Message.severity">
      <summary>
        <para>The severity of the message.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Message.message">
      <summary>
        <para>The message text.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Message+Severity">
      <summary>
        <para>Severity of a version control message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message+Severity.Verbose">
      <summary>
        <para>Verbose message.</para>
        <para>This includes intermediate query results and other info from the version control plugins.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message+Severity.Info">
      <summary>
        <para>Informational message.</para>
        <para>This can include information such as who else is accessing an asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message+Severity.Warning">
      <summary>
        <para>Warning message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.Message+Severity.Error">
      <summary>
        <para>Error message.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.CheckoutMode">
      <summary>
        <para>What to checkout when starting the Checkout task through the version control Provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Asset">
      <summary>
        <para>Checkout the asset only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Meta">
      <summary>
        <para>Checkout .meta file only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CheckoutMode.Both">
      <summary>
        <para>Checkout both asset and .meta file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.ResolveMethod" />
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMine" />
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseTheirs" />
    <member name="F:UnityEditor.VersionControl.ResolveMethod.UseMerged" />
    <member name="T:UnityEditor.VersionControl.MergeMethod" />
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeNone" />
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeAll" />
    <member name="F:UnityEditor.VersionControl.MergeMethod.MergeNonConflicting" />
    <member name="T:UnityEditor.VersionControl.OnlineState">
      <summary>
        <para>Represent the connection state of the version control provider.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.OnlineState.Updating" />
    <member name="F:UnityEditor.VersionControl.OnlineState.Online" />
    <member name="F:UnityEditor.VersionControl.OnlineState.Offline" />
    <member name="T:UnityEditor.VersionControl.RevertMode">
      <summary>
        <para>Defines the behaviour of the version control revert methods.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.RevertMode.Normal" />
    <member name="F:UnityEditor.VersionControl.RevertMode.Unchanged" />
    <member name="F:UnityEditor.VersionControl.RevertMode.KeepModifications" />
    <member name="T:UnityEditor.VersionControl.FileMode" />
    <member name="F:UnityEditor.VersionControl.FileMode.None" />
    <member name="F:UnityEditor.VersionControl.FileMode.Binary" />
    <member name="F:UnityEditor.VersionControl.FileMode.Text" />
    <member name="T:UnityEditor.VersionControl.Provider">
      <summary>
        <para>This class provides acces to the version control API.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSets">
      <summary>
        <para>Get a list of pending changesets owned by the current user.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Incoming">
      <summary>
        <para>Start a task for quering the version control server for incoming changes.</para>
        <para>The incoming changesets can be accessed through the task instance once it has been completed.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IsOpenForEdit(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if an asset can be edited.</para>
        <para>Version control systems like Perforce requieres that an asset is checked out before it can be edited, in that case this will test if the asset can be edited.
Some version control systems support editing without checking out the asset in that case this will always return true.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UpdateSettings">
      <summary>
        <para>Start a task that sends the version control settings to the version control system.</para>
        <para>The settings include version control password, username, server, workspace etc. This differs from version control system selected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetByPath(System.String)">
      <summary>
        <para>Returns version control information about an asset.</para>
        <para>Returns null if the path is not known by the Unity Editor.</para>
      </summary>
      <param name="unityPath">Path to asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetByGUID(System.String)">
      <summary>
        <para>Returns version control information about an asset.</para>
        <para>Returns null if the GUID is not known by the Unity Editor.</para>
      </summary>
      <param name="guid">GUID of asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ClearCache">
      <summary>
        <para>This will invalidate the cached state information for all assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[])">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String[],System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="assets">The assets fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Status(System.String,System.Boolean)">
      <summary>
        <para>Start a task that will fetch the most recent status from revision control system.</para>
        <para>The updated assets can be access through the task once it has completed.</para>
      </summary>
      <param name="asset">The asset path to fetch new state for.</param>
      <param name="recursively">If any assets specified are folders this flag will get status for all descendants of the folder as well.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Move(System.String,System.String)">
      <summary>
        <para>Uses the version control plugin to move an asset from one path to another.</para>
      </summary>
      <param name="from">Path to source asset.</param>
      <param name="to">Path to destination.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Given an asset or a  list of assets this function returns true if Checkout is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String[],UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object[],UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="assets">List of assets to checkout.</param>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.CheckoutIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Given an asset or a  list of assets this function returns true if Checkout is a valid task to perform.</para>
      </summary>
      <param name="asset">Single asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(System.String,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Checkout(UnityEngine.Object,UnityEditor.VersionControl.CheckoutMode)">
      <summary>
        <para>Checkout an asset or list of asset from the version control system.</para>
        <para>Some version control systems like Perforce requires an asset to be checked out before it can be edited.</para>
      </summary>
      <param name="mode">Tell the Provider to checkout the asset, the .meta file or both.</param>
      <param name="asset">Asset to checkout.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(System.String)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
        <para>Once the task has completed the resultCode of the task will tell if the assets were successfully deleted.</para>
      </summary>
      <param name="assetProjectPath">Project path of asset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
        <para>Once the task has completed the resultCode of the task will tell if the assets were successfully deleted.</para>
      </summary>
      <param name="assets">List of assets to delete.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Delete(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>This will statt a task for deleting an asset or assets both from disk and from version control system.</para>
        <para>Once the task has completed the resultCode of the task will tell if the assets were successfully deleted.</para>
      </summary>
      <param name="asset">Asset to delete.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.AddIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Given a list of assets this function returns true if Add is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Adds an assets or list of assets to version control.</para>
        <para>If the input asset is a folder setting the recursive flag will add all assets and assets in subfolders to the version control system.</para>
      </summary>
      <param name="assets">List of assets to add to version control system.</param>
      <param name="recursive">Set this true if adding should be done recursively into subfolders.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Add(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Adds an assets or list of assets to version control.</para>
        <para>If the input asset is a folder setting the recursive flag will add all assets and assets in subfolders to the version control system.</para>
      </summary>
      <param name="recursive">Set this true if adding should be done recursively into subfolders.</param>
      <param name="asset">Single asset to add to version control system.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSetsIsValid(UnityEditor.VersionControl.ChangeSets)">
      <summary>
        <para>Test if deleting a changeset is a valid task to perform.</para>
      </summary>
      <param name="changesets">Changeset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DeleteChangeSets(UnityEditor.VersionControl.ChangeSets)">
      <summary>
        <para>Starts a task that will attempt to delete the given changeset.</para>
        <para>It is required that the changesets must be empty.</para>
      </summary>
      <param name="changesets">List of changetsets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.SubmitIsValid(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if submitting the assets is a valid operation.</para>
      </summary>
      <param name="changeset">The changeset to submit.</param>
      <param name="assets">The asset to submit.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Submit(UnityEditor.VersionControl.ChangeSet,UnityEditor.VersionControl.AssetList,System.String,System.Boolean)">
      <summary>
        <para>Start a task that submits the assets to version control.</para>
        <para>In some version control systems submit is known as commit.</para>
      </summary>
      <param name="changeset">The changeset to submit.</param>
      <param name="list">The list of assets to submit.</param>
      <param name="description">The description of the changeset.</param>
      <param name="saveOnly">If true then only save the changeset to be submitted later.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DiffIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Return true is starting a Diff task is a valid operation.</para>
      </summary>
      <param name="assets">List of assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.DiffHead(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Starts a task for showing a diff of the given assest versus their head revision.</para>
      </summary>
      <param name="assets">List of assets.</param>
      <param name="includingMetaFiles">Whether or not to include .meta.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ResolveIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Tests if any of the assets in the list is resolvable.</para>
        <para>Returns true if any of the assets are resolvable.</para>
      </summary>
      <param name="assets">The list of asset to be resolved.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Resolve(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ResolveMethod)">
      <summary>
        <para>Start a task that will resolve conflicting assets in version control.</para>
        <para>When conflicting assets appear you can resolve it by using your own copy or the incoming copy. A third way of resolving the conflict is by first Provider.Merge() the assets and the resolve using the merged asset. Use the resolveMethod to flag what should be used.</para>
      </summary>
      <param name="assets">The list of asset to mark as resolved.</param>
      <param name="resolveMethod">How the assets should be resolved.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Merge(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.MergeMethod)">
      <summary>
        <para>This method will initiate a merge task handle merging of the conflicting assets.</para>
        <para>An initial attempt of is made to make a simple merge automatically. If this fails the merge method decide if manual merge too will be spawned of not.</para>
      </summary>
      <param name="assets">The list of conflicting assets to be merged.</param>
      <param name="method">How to merge the assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Return true if the task can be executed.</para>
        <para>For the list of assets version it return true if one or more assets meets the requirements.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.LockIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Return true if the task can be executed.</para>
        <para>For the list of assets version it return true if one or more assets meets the requirements.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if locking the assets is a valid operation.</para>
      </summary>
      <param name="assets">The assets to lock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.UnlockIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if locking the assets is a valid operation.</para>
      </summary>
      <param name="asset">The asset to lock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.AssetList,System.Boolean)">
      <summary>
        <para>Attempt to lock an asset for exclusive editing.</para>
        <para>Depening on version control system and server setup this might be an exclusive lock preventing other people from even modifing the asset or or it might simple prevent other people from submitting the asset to the version control server.</para>
      </summary>
      <param name="assets">List of assets to lock/unlock.</param>
      <param name="locked">True to lock assets, false to unlock assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Lock(UnityEditor.VersionControl.Asset,System.Boolean)">
      <summary>
        <para>Attempt to lock an asset for exclusive editing.</para>
        <para>Depening on version control system and server setup this might be an exclusive lock preventing other people from even modifing the asset or or it might simple prevent other people from submitting the asset to the version control server.</para>
      </summary>
      <param name="locked">True to lock assets, false to unlock assets.</param>
      <param name="asset">Asset to lock/unlock.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Return true if Revert is a valid task to perform.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
      <param name="mode">Revert mode to test for.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Reverts the specified assets by undoing any changes done since last time you synced.</para>
        <para>The last sync time is usually when Provider.GetLatest() was last issued but may be something else if an external version control client is used at the same time.</para>
      </summary>
      <param name="assets">The list of assets to be reverted.</param>
      <param name="mode">How to revert the assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.RevertIsValid(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Return true if Revert is a valid task to perform.</para>
      </summary>
      <param name="mode">Revert mode to test for.</param>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.Revert(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.RevertMode)">
      <summary>
        <para>Reverts the specified assets by undoing any changes done since last time you synced.</para>
        <para>The last sync time is usually when Provider.GetLatest() was last issued but may be something else if an external version control client is used at the same time.</para>
      </summary>
      <param name="mode">How to revert the assets.</param>
      <param name="asset">The asset to be reverted.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Returns true if getting the latest version of an asset is a valid operation.</para>
        <para>For the list version it returns true if is valid for one or more assets.</para>
      </summary>
      <param name="assets">List of assets to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatestIsValid(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Returns true if getting the latest version of an asset is a valid operation.</para>
        <para>For the list version it returns true if is valid for one or more assets.</para>
      </summary>
      <param name="asset">Asset to test.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.AssetList)">
      <summary>
        <para>Start a task for getting the latest version of an asset from the version control server.</para>
      </summary>
      <param name="assets">List of assets to update.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetLatest(UnityEditor.VersionControl.Asset)">
      <summary>
        <para>Start a task for getting the latest version of an asset from the version control server.</para>
      </summary>
      <param name="asset">Asset to update.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetDescription(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Given a changeset only containing the changeset ID, this will start a task for quering the description of the changeset.</para>
        <para>Mostly makes sense to use with Perforce.</para>
      </summary>
      <param name="changeset">Changeset to query description of.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Retrieves the list of assets belonging to a changeset.</para>
      </summary>
      <param name="changeset">Changeset to query for assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetStatus(System.String)">
      <summary>
        <para>Retrieves the list of assets belonging to a changeset.</para>
      </summary>
      <param name="changesetID">ChangesetID to query for assets.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.</para>
      </summary>
      <param name="changeset">Incoming changeset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.IncomingChangeSetAssets(System.String)">
      <summary>
        <para>Given an incoming changeset this will start a task to query the version control server for which assets are part of the changeset.</para>
      </summary>
      <param name="changesetID">Incoming changesetid.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changeset">Changeset to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,UnityEditor.VersionControl.ChangeSet)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="changeset">Changeset to move asset to.</param>
      <param name="asset">Asset to move to changeset.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.AssetList,System.String)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="assets">List of asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.ChangeSetMove(UnityEditor.VersionControl.Asset,System.String)">
      <summary>
        <para>Move an asset or list of assets from their current changeset to a new changeset.</para>
        <para>E.g. in Perforce checked out asset can be moved to a changetset other than the default changeset.</para>
      </summary>
      <param name="asset">Asset to move to changeset.</param>
      <param name="changesetID">ChangesetID to move asset to.</param>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetAssetListFromSelection">
      <summary>
        <para>Return version control information about the currently selected assets.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetActivePlugin">
      <summary>
        <para>Gets the currently user selected verson control plugin.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Provider.GetActiveConfigFields">
      <summary>
        <para>Returns the configuration fields for the currently active version control plugin.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.enabled">
      <summary>
        <para>Returns true if the version control provider is enabled and a valid Team License was found.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.isActive">
      <summary>
        <para>Returns true if a version control plugin has been selected and configured correctly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.requiresNetwork">
      <summary>
        <para>This is true if a network connection is required by the currently selected version control plugin to perform any action.</para>
        <para>E.g. before doing anything using Perforce you need to checkout the asset, in order to do that a connection to the server is required where as subversion does not require access to the server to do changes to an asset.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.hasChangelistSupport" />
    <member name="P:UnityEditor.VersionControl.Provider.isVersioningFolders" />
    <member name="P:UnityEditor.VersionControl.Provider.onlineState">
      <summary>
        <para>Returns the OnlineState of the version control provider.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.offlineReason">
      <summary>
        <para>Returns the reason for the version control provider being offline (if it is offline).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Provider.activeTask">
      <summary>
        <para>Gets the currently executing task.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Task">
      <summary>
        <para>A UnityEditor.VersionControl.Task is created almost everytime UnityEditor.VersionControl.Provider is ask to perform an action.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Task.Wait">
      <summary>
        <para>A blocking wait for the task to complete.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Task.SetCompletionAction(UnityEditor.VersionControl.CompletionAction)">
      <summary>
        <para>Upon completion of a task a completion task will be performed if it is set.</para>
      </summary>
      <param name="action">Which completion action to perform.</param>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.assetList">
      <summary>
        <para>The result of some types of tasks.</para>
        <para>Most task perform an action and returns the result as list of version control informations about assets, e.g. a Status task will return the result in this list.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.changeSets">
      <summary>
        <para>List of changesets returned by some tasks.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.text">
      <summary>
        <para>Will contain the result of the Provider.ChangeSetDescription task.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.description">
      <summary>
        <para>A short description of the current task.</para>
        <para>Not all tasks have a description, currently only the longer running task where progress is showed in the Editor UI.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.success">
      <summary>
        <para>Get whether or not the task was completed succesfully.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.secondsSpent">
      <summary>
        <para>Total time spent in task since the task was started.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.progressPct">
      <summary>
        <para>Progress of current task in precent.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.progressMessage" />
    <member name="P:UnityEditor.VersionControl.Task.resultCode">
      <summary>
        <para>Some task return result codes, these are stored here.</para>
        <para>Depending on the task the result code will map to either an AssetDeleteResult, AssetMoveResult or SubmitResult.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.Task.messages">
      <summary>
        <para>May contain messages from the version control plugins.</para>
        <para>This could be errors or information messages to be displayed in the editor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VisualStudioIntegration.SolutionGuidGenerator" />
    <member name="M:UnityEditor.VisualStudioIntegration.SolutionGuidGenerator.GuidForProject(System.String)" />
    <member name="M:UnityEditor.VisualStudioIntegration.SolutionGuidGenerator.GuidForSolution(System.String)" />
    <member name="T:UnityEditor.AnimationClipCurveData">
      <summary>
        <para>An AnimationClipCurveData object contains all the information needed to identify a specific curve in an AnimationClip. The curve animates a specific property of a component / material attached to a game object / animated bone.</para>
        <para>See Also: <see cref="AnimationUtility">AnimationUtility</see>, <see cref="ObjectNames">ObjectNames</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationClipCurveData.#ctor" />
    <member name="M:UnityEditor.AnimationClipCurveData.#ctor(UnityEditor.EditorCurveBinding)" />
    <member name="F:UnityEditor.AnimationClipCurveData.path">
      <summary>
        <para>The path of the game object / bone being animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.type">
      <summary>
        <para>The type of the component / material being animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.propertyName">
      <summary>
        <para>The name of the property being animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AnimationClipCurveData.curve">
      <summary>
        <para>The actual animation curve.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ObjectReferenceKeyframe" />
    <member name="F:UnityEditor.ObjectReferenceKeyframe.time" />
    <member name="F:UnityEditor.ObjectReferenceKeyframe.value" />
    <member name="T:UnityEditor.EditorCurveBinding">
      <summary>
        <para>Defines how a curve is attached to an object that it controls.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorCurveBinding.GetHashCode" />
    <member name="M:UnityEditor.EditorCurveBinding.Equals(System.Object)" />
    <member name="M:UnityEditor.EditorCurveBinding.FloatCurve(System.String,System.Type,System.String)" />
    <member name="M:UnityEditor.EditorCurveBinding.PPtrCurve(System.String,System.Type,System.String)" />
    <member name="F:UnityEditor.EditorCurveBinding.path">
      <summary>
        <para>The transform path of the object that is animated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorCurveBinding.propertyName">
      <summary>
        <para>The property of the object that is animated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorCurveBinding.isPPtrCurve" />
    <member name="P:UnityEditor.EditorCurveBinding.type" />
    <member name="T:UnityEditor.AnimationClipSettings" />
    <member name="M:UnityEditor.AnimationClipSettings.#ctor" />
    <member name="F:UnityEditor.AnimationClipSettings.startTime" />
    <member name="F:UnityEditor.AnimationClipSettings.stopTime" />
    <member name="F:UnityEditor.AnimationClipSettings.orientationOffsetY" />
    <member name="F:UnityEditor.AnimationClipSettings.level" />
    <member name="F:UnityEditor.AnimationClipSettings.cycleOffset" />
    <member name="F:UnityEditor.AnimationClipSettings.loopTime" />
    <member name="F:UnityEditor.AnimationClipSettings.loopBlend" />
    <member name="F:UnityEditor.AnimationClipSettings.loopBlendOrientation" />
    <member name="F:UnityEditor.AnimationClipSettings.loopBlendPositionY" />
    <member name="F:UnityEditor.AnimationClipSettings.loopBlendPositionXZ" />
    <member name="F:UnityEditor.AnimationClipSettings.keepOriginalOrientation" />
    <member name="F:UnityEditor.AnimationClipSettings.keepOriginalPositionY" />
    <member name="F:UnityEditor.AnimationClipSettings.keepOriginalPositionXZ" />
    <member name="F:UnityEditor.AnimationClipSettings.heightFromFeet" />
    <member name="F:UnityEditor.AnimationClipSettings.mirror" />
    <member name="T:UnityEditor.AnimationUtility">
      <summary>
        <para>Editor utility functions for modifying animation clips.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAnimationClips(UnityEngine.Animation,UnityEngine.AnimationClip[])">
      <summary>
        <para>Sets the array of AnimationClips to be referenced in the Animation component.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimatableBindings(UnityEngine.GameObject,UnityEngine.GameObject)" />
    <member name="M:UnityEditor.AnimationUtility.GetEditorCurveValueType(UnityEngine.GameObject,UnityEditor.EditorCurveBinding)" />
    <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceValue(UnityEngine.GameObject,UnityEditor.EditorCurveBinding,UnityEngine.Object@)" />
    <member name="M:UnityEditor.AnimationUtility.GetAnimatedObject(UnityEngine.GameObject,UnityEditor.EditorCurveBinding)" />
    <member name="M:UnityEditor.AnimationUtility.PropertyModificationToEditorCurveBinding(UnityEditor.PropertyModification,UnityEngine.GameObject,UnityEditor.EditorCurveBinding@)" />
    <member name="M:UnityEditor.AnimationUtility.GetCurveBindings(UnityEngine.AnimationClip)" />
    <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurveBindings(UnityEngine.AnimationClip)" />
    <member name="M:UnityEditor.AnimationUtility.GetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding)" />
    <member name="M:UnityEditor.AnimationUtility.SetEditorCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEngine.AnimationCurve)">
      <summary>
        <para>Adds an editor curve to the given clip.</para>
        <para>Unity automatic combines position curves, scale curves, rotation curves internally. Thus transform curves always get combined and their keyframes is always the union of all keyframe points.
In the Editor AnimationClip's let you specify special editor curves which do not get combined, thus it lets the user edit curves in a more intuitive way.</para>
      </summary>
      <param name="clip">The animation clip to which the curve will be added.</param>
      <param name="binding">The bindings which defines the path and the property of the curve.</param>
      <param name="curve">The curve to add.</param>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetObjectReferenceCurve(UnityEngine.AnimationClip,UnityEditor.EditorCurveBinding,UnityEditor.ObjectReferenceKeyframe[])" />
    <member name="M:UnityEditor.AnimationUtility.GetAllCurves(UnityEngine.AnimationClip)">
      <summary>
        <para>Retrieves all curves from a specific animation clip.</para>
        <para>If <c>includeCurveData</c> is false, all animation curves in returned results will be null. Use this when
you only want to get the list of curves, their types and names.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAllCurves(UnityEngine.AnimationClip,System.Boolean)">
      <summary>
        <para>Retrieves all curves from a specific animation clip.</para>
        <para>If <c>includeCurveData</c> is false, all animation curves in returned results will be null. Use this when
you only want to get the list of curves, their types and names.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimationEvents(UnityEngine.AnimationClip)">
      <summary>
        <para>Retrieves all animation events associated with the animation clip.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.SetAnimationEvents(UnityEngine.AnimationClip,UnityEngine.AnimationEvent[])">
      <summary>
        <para>Replaces all animation events in the animation clip.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.CalculateTransformPath(UnityEngine.Transform,UnityEngine.Transform)">
      <summary>
        <para>Calculates path from root transform to target transform.</para>
        <para>Returns a string representing the path in a transform hierarchy from a given root transform down to a given target transform.
The root transform does not need to be an actual root, but it must be higher in the hierarchy than the target transform. The target and root may also be the same transform.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationUtility.GetAnimationClipSettings(UnityEngine.AnimationClip)" />
    <member name="M:UnityEditor.AnimationUtility.IsValidPolynomialCurve(UnityEngine.AnimationCurve)" />
    <member name="M:UnityEditor.AnimationUtility.ConstrainToPolynomialCurve(UnityEngine.AnimationCurve)" />
    <member name="M:UnityEditor.AnimationUtility.SetAnimationType(UnityEngine.AnimationClip,UnityEditor.ModelImporterAnimationType)" />
    <member name="F:UnityEditor.AnimationUtility.onCurveWasModified" />
    <member name="T:UnityEditor.AnimationUtility+CurveModifiedType" />
    <member name="F:UnityEditor.AnimationUtility+CurveModifiedType.CurveDeleted" />
    <member name="F:UnityEditor.AnimationUtility+CurveModifiedType.CurveModified" />
    <member name="F:UnityEditor.AnimationUtility+CurveModifiedType.ClipModified" />
    <member name="T:UnityEditor.AnimationMode">
      <summary>
        <para>AnimationMode is used by the AnimationWindow to store properties modifed by the AnimationClip playback.</para>
        <para>When exiting AnimationMode all properties are reverted to their default state. Animated properties are also highlighted by the inspector. Use AnimationMode.StartAnimationMode to enter animation mode. In Animation mode the editor is tinted to show that it is animating. Properties can be animated via AnimationMode.SampleAnimationClip.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.#ctor" />
    <member name="M:UnityEditor.AnimationMode.IsPropertyAnimated(UnityEngine.Object,System.String)">
      <summary>
        <para>Is the specified property currently in animation mode and being animated?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.StopAnimationMode">
      <summary>
        <para>Stops Animation mode, reverts all properties that were animated in animation mode.</para>
        <para>AnimationMode stores per property modifications. They are added either via AnimationMode.SampleClip or AnimationMode.AddPropertyModification. StopAnimationMode reverts all of these properties.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.InAnimationMode">
      <summary>
        <para>Are we currently in AnimationMode.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.StartAnimationMode">
      <summary>
        <para>Starts the animation mode.</para>
        <para>When the Animation Mode is enabled, the editor is tinted in a special color to indicated that animations are playing and recorded.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.BeginSampling" />
    <member name="M:UnityEditor.AnimationMode.EndSampling" />
    <member name="M:UnityEditor.AnimationMode.SampleAnimationClip(UnityEngine.GameObject,UnityEngine.AnimationClip,System.Single)">
      <summary>
        <para>Samples an AnimationClip on the object and also records any modified properties in AnimationMode.</para>
        <para>This function must always be surrounded by AnimationMode.BeginSample and AnimationMode.EndSample. When a property is no longer sampled (through SampleAnimationClip or AddPropertyModification) between BeginSample and EndSample it will automatically revert to the original value when EndSample is called.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AnimationMode.AddPropertyModification(UnityEditor.EditorCurveBinding,UnityEditor.PropertyModification,System.Boolean)" />
    <member name="P:UnityEditor.AnimationMode.animatedPropertyColor">
      <summary>
        <para>The color used to show that a property is currently being animated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.RemoveAssetOptions" />
    <member name="F:UnityEditor.RemoveAssetOptions.MoveAssetToTrash">
      <summary>
        <para>The asset should be moved to trash.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.RemoveAssetOptions.DeleteAssets">
      <summary>
        <para>Delete the asset without moving it to the trash.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ImportAssetOptions">
      <summary>
        <para>Asset importing options.</para>
        <para>See Also: <see cref="AssetDatabase.ImportAsset">AssetDatabase.ImportAsset</see>, <see cref="AssetDatabase.Refresh">AssetDatabase.Refresh</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.Default">
      <summary>
        <para>Default import options.</para>
        <para>See Also: <see cref="AssetDatabase.ImportAsset">AssetDatabase.ImportAsset</see>, <see cref="AssetDatabase.Refresh">AssetDatabase.Refresh</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceUpdate">
      <summary>
        <para>User initiated asset import.</para>
        <para>This should be passed when asset import is caused by the user (e.g. by clicking Reimport).
Non-user initiated import happens when the asset modification time changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceSynchronousImport">
      <summary>
        <para>Import all assets synchronously.</para>
        <para>By default some assets can be imported asynchronously (e.g. scripts can be compiled in the background).
In some cases all importing needs to be synchronous; use this flag then. For example, when importing
a scripts + prefabs, scripts have to be fully compiled before prefab is serialized, otherwise
it might get old variables.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ImportRecursive">
      <summary>
        <para>When a folder is imported, import all its contents as well.</para>
        <para>See Also: <see cref="AssetDatabase.ImportAsset">AssetDatabase.ImportAsset</see>, <see cref="AssetDatabase.Refresh">AssetDatabase.Refresh</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.DontDownloadFromCacheServer">
      <summary>
        <para>Force a full reimport but don't download the assets from the cache server.</para>
        <para>See Also: <see cref="AssetDatabase.ImportAsset">AssetDatabase.ImportAsset</see>, <see cref="AssetDatabase.Refresh">AssetDatabase.Refresh</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ImportAssetOptions.ForceUncompressedImport">
      <summary>
        <para>Forces asset import as uncompressed for edition facilities.</para>
        <para>See Also: <see cref="AssetDatabase.ImportAsset">AssetDatabase.ImportAsset</see>, <see cref="AssetDatabase.Refresh">AssetDatabase.Refresh</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildOptions">
      <summary>
        <para>Building options. Multiple options can be combined together.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.None">
      <summary>
        <para>Perform the specified build without any special settings or extra tasks.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.Development">
      <summary>
        <para>Build a development version of the player.</para>
        <para>A development build includes debug symbols and enablesthe</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AutoRunPlayer">
      <summary>
        <para>Run the built player.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ShowBuiltPlayer">
      <summary>
        <para>Show the built player.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.BuildAdditionalStreamedScenes">
      <summary>
        <para>Build a compressed asset bundle that contains streamed scenes loadable with the WWW class.</para>
        <para>This allows you to on demand load scenes and their assets when needed instead of a simple linear progressing download.
The best way to build a streamed scene asset bundle is to use BuildPipeline.BuildStreamedSceneAssetBundle
See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AcceptExternalModificationsToPlayer">
      <summary>
        <para>Used when building XCode (iPhone) or Eclipse (Android) projects.</para>
        <para>On iPhone, this setting will append an existing XCode project. Existing XCode project setting changes will be preserved.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.WebPlayerOfflineDeployment">
      <summary>
        <para>Copy UnityObject.js alongside Web Player so it wouldn't have to be downloaded from internet.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.ConnectWithProfiler">
      <summary>
        <para>Start the player with a connection to the profiler in the editor.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.AllowDebugging">
      <summary>
        <para>Allow script debuggers to attach to the player remotely.</para>
        <para>Note that script debugging is not supported on the webplayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.SymlinkLibraries">
      <summary>
        <para>Symlink runtime libraries when generating iOS XCode project. (Faster iteration time).</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.UncompressedAssetBundle">
      <summary>
        <para>Don't compress the data when creating the asset bundle.</para>
        <para>This makes it faster to build &amp;amp; load, but since it is much bigger it will take longer to download.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.DeployOnline">
      <summary>
        <para>Generate online version of webplayer.</para>
        <para>Generate HTML for the webplayer which references the Unity-hosted version of UnityObject2.js.  When this option is not used the HTML will reference a copy of UnityObject2.js which will be dropped into the build folder alongside the HTML.  This version of UnityObject2.js is easier to work with, and allows you to debug Javascript locally.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildOptions.EnableHeadlessMode" />
    <member name="T:UnityEditor.BuildAssetBundleOptions">
      <summary>
        <para>Asset Bundle building options.</para>
        <para>See Also: BuildPipeline.BuildAssetBundle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.CollectDependencies">
      <summary>
        <para>Includes all dependencies.</para>
        <para>This follows all references to any assets,
game objects or components and includes them in the build.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.CompleteAssets">
      <summary>
        <para>Forces inclusion of the entire asset.</para>
        <para>For example if you pass a Mesh into the BuildPipeline.BuildAssetBundle function and use CompleteAssets it would also include
the game object and any animation clips in the same asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DisableWriteTypeTree">
      <summary>
        <para>Do not include type information within the AssetBundle.</para>
        <para>Specifying this flag will make an AssetBundle susceptible to script or Unity version changes, but will make the file smaller and a bit faster to load.
This flag affects only AssetBundles for platforms that have type information included by default. Mobile and console platform always build without type information.
Type information must be present for Web platforms, therefore Unity will reject to build an AssetBundle if you specify this flag when building for BuildTarget.WebPlayer, for example.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.DeterministicAssetBundle">
      <summary>
        <para>Builds an asset bundle using a hash for the id of the object stored in the asset bundle.</para>
        <para>This allows you to rebuild an asset bundle and reference assets in it directly.
When rebuilding the asset bundle the objects in it are guaranteed to have the same id
after rebuilding the asset bundle.
Due to it being a 32 bit hash space, if you have a lot of objects in the asset bundle it will increase the potential for hash conflicts. Unity will give an error and not build the asset bundle in that case.
The hash is based on the GUID of the asset and the local id of the object in the asset.
DeterministicAssetBundle are also slower to load from than normal asset bundles, this is because the threaded background loading API usually expects objects to be ordered in a way that makes reading reduce seeking.
With DeterministicAssetBundles that is not possible.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildAssetBundleOptions.UncompressedAssetBundle">
      <summary>
        <para>Don't compress the data when creating the asset bundle.</para>
        <para>This makes it faster to build &amp;amp; load, but since it is much bigger it will take longer to download.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildPipeline">
      <summary>
        <para>Lets you programmatically build players or AssetBundles which can be loaded from the web.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.PushAssetDependencies">
      <summary>
        <para>Lets you manage cross-references and dependencies between different asset bundles and player builds.</para>
        <para>If a asset bundle has dependencies to other asset bundles, it is your responsibility to make sure the dependent asset bundles are loaded through the</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.PopAssetDependencies">
      <summary>
        <para>Lets you manage cross-references and dependencies between different asset bundles and player builds.</para>
        <para>If a asset bundle has dependencies to other asset bundles, it is your responsibility to make sure the dependent asset bundles are loaded through the</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildPlayer(System.String[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
      <summary>
        <para>Builds a player <i>(Unity Pro only)</i>.</para>
        <para>Use this function to programatically create a build of your project.
Note that any references to GameObjects acquired in the editor script <c>before</c> the BuildPlayer call will be invalid after it and will need to be reacquired.</para>
      </summary>
      <param name="levels">The scenes to be included in the build. If empty, the currently open scene will be built. Paths are relative to the project folder (Assets/MyLevels/MyScene.unity).</param>
      <param name="locationPathName">The path where the application will be built.</param>
      <param name="target">The <see cref="BuildTarget">BuildTarget</see> to build.</param>
      <param name="options">Additional <see cref="BuildOptions">BuildOptions</see>, like whether to run the built player.</param>
      <returns>
        <para>An error message if an error occurred.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
        <para>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,UnityEditor.BuildOptions)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
        <para>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <param name="options">Build options. See <c>BuildOptions</c> for possible values.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,System.UInt32@)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
        <para>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <param name="crc">Output parameter to receive CRC checksum of generated assetbundle.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildStreamedSceneAssetBundle(System.String[],System.String,UnityEditor.BuildTarget,System.UInt32@,UnityEditor.BuildOptions)">
      <summary>
        <para>Builds one or more scenes and all their dependencies into a compressed asset bundle.</para>
        <para>The scene AssetBundle can be built for any target platform and always creates a single compressed unity3d file.</para>
      </summary>
      <param name="levels">Pathnames of levels to include in the asset bundle.</param>
      <param name="locationPath">Pathname for the output asset bundle.</param>
      <param name="target">Runtime platform on which the asset bundle will be used.</param>
      <param name="crc">Output parameter to receive CRC checksum of generated assetbundle.</param>
      <param name="options">Build options. See <c>BuildOptions</c> for possible values.</param>
      <returns>
        <para>String with an error message, empty on success.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String)">
      <summary>
        <para>Builds an asset bundle <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,System.UInt32@,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,System.UInt32@)">
      <summary>
        <para>Builds an asset bundle <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundle(UnityEngine.Object,UnityEngine.Object[],System.String,System.UInt32@,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,System.UInt32@,UnityEditor.BuildAssetBundleOptions)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,System.UInt32@)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="M:UnityEditor.BuildPipeline.BuildAssetBundleExplicitAssetNames(UnityEngine.Object[],System.String[],System.String,System.UInt32@,UnityEditor.BuildAssetBundleOptions,UnityEditor.BuildTarget)">
      <summary>
        <para>Builds an asset bundle, with custom names for the assets <i>(Unity Pro only)</i>.</para>
        <para>Creates a compressed unity3d file that contains a collection of</para>
      </summary>
    </member>
    <member name="P:UnityEditor.BuildPipeline.isBuildingPlayer">
      <summary>
        <para>Is a player currently being built?</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildTarget">
      <summary>
        <para>Target build platform.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WebPlayer">
      <summary>
        <para>Build a web player.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.WebPlayerStreamed">
      <summary>
        <para>Build a streamed web player.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel">
      <summary>
        <para>Build an OS X standalone (Intel only).</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXIntel64">
      <summary>
        <para>Build an OSX Intel 64-bit standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneOSXUniversal">
      <summary>
        <para>Build a universal OSX standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneWindows">
      <summary>
        <para>Build a Windows standalone.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.iPhone">
      <summary>
        <para>Build an iPhone player.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PS3">
      <summary>
        <para>Build a PS3 Standalone.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.XBOX360">
      <summary>
        <para>Build a XBox Standalone.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.Android">
      <summary>
        <para>Build an Android .apk standalone app.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinux">
      <summary>
        <para>Build a Linux standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinux64">
      <summary>
        <para>Build a Linux 64-bit standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneLinuxUniversal">
      <summary>
        <para>Build a Linux universal standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.FlashPlayer">
      <summary>
        <para>Build content as an swf file for playback with Adobe Flash.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.StandaloneWindows64">
      <summary>
        <para>Build a Windows 64-bit standalone.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.MetroPlayer" />
    <member name="F:UnityEditor.BuildTarget.WP8Player">
      <summary>
        <para>Build a Windows Phone 8 player.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.BlackBerry">
      <summary>
        <para>Build a BlackBerry 10 application.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PSP2">
      <summary>
        <para>Build a PS Vita Standalone.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PS4">
      <summary>
        <para>Build a PS4 Standalone.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.PSM">
      <summary>
        <para>Build a PSM Standalone.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.XboxOne">
      <summary>
        <para>Build a Xbox One Standalone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTarget.SamsungTV">
      <summary>
        <para>Build to Samsung Smart TV platform.</para>
        <para>See Also: BuildPipeline.BuildPlayer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BuildTargetGroup">
      <summary>
        <para>Build target group.</para>
        <para>See Also: BuildPipeline.BuildPlayer, BuildTarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Unknown">
      <summary>
        <para>Unknown target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Standalone">
      <summary>
        <para>Mac/PC standalone target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.WebPlayer">
      <summary>
        <para>Mac/PC webplayer target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.iPhone">
      <summary>
        <para>Apple iOS target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PS3">
      <summary>
        <para>Sony Playstation 3 target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.XBOX360">
      <summary>
        <para>Microsoft XBOX360 target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Android">
      <summary>
        <para>Android target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.GLESEmu">
      <summary>
        <para>GLESEmu target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.FlashPlayer">
      <summary>
        <para>Flash player target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.Metro" />
    <member name="F:UnityEditor.BuildTargetGroup.WP8">
      <summary>
        <para>Windows Phone 8 target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.BlackBerry" />
    <member name="F:UnityEditor.BuildTargetGroup.PSP2">
      <summary>
        <para>Sony PS Vita target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PS4">
      <summary>
        <para>Sony Playstation 4 target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.PSM">
      <summary>
        <para>Sony Playstation Mobile target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.XboxOne">
      <summary>
        <para>Microsoft Xbox One target.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BuildTargetGroup.SamsungTV">
      <summary>
        <para>Samsung Smart TV target.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CallbackOrderAttribute">
      <summary>
        <para>Smaller m_CallbackOrder values will be called first.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.PostProcessBuildAttribute">
      <summary>
        <para>Add this attribute to a method to get a notification just after building the player.</para>
        <para>'target' The platform the build targetted.
'pathToBuiltProject' The file path to the build project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.PostProcessBuildAttribute.#ctor" />
    <member name="M:UnityEditor.Callbacks.PostProcessBuildAttribute.#ctor(System.Int32)" />
    <member name="T:UnityEditor.Callbacks.PostProcessSceneAttribute">
      <summary>
        <para>Add this attribute to a method to get a notification just before building the scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.PostProcessSceneAttribute.#ctor" />
    <member name="M:UnityEditor.Callbacks.PostProcessSceneAttribute.#ctor(System.Int32)" />
    <member name="T:UnityEditor.Callbacks.DidReloadScripts">
      <summary>
        <para>Add this attribute to a method to get a notification after scripts have been reloaded.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.DidReloadScripts.#ctor">
      <summary>
        <para>DidReloadScripts attribute.</para>
        <para>The <c>postProcessOrder</c> parameter determines the order in which the DidReloadScripts notifications will occur. Lower numbers will report earlier than higher numbers and Unity's internal processing has an order value of zero.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.DidReloadScripts.#ctor(System.Int32)">
      <summary>
        <para>DidReloadScripts attribute.</para>
        <para>The <c>postProcessOrder</c> parameter determines the order in which the DidReloadScripts notifications will occur. Lower numbers will report earlier than higher numbers and Unity's internal processing has an order value of zero.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Callbacks.OnOpenAssetAttribute">
      <summary>
        <para>Callback attribute for opening an asset in Unity (e.g the callback is fired when double clicking an asset in the Project Browser).</para>
        <para>Adding this attribute to a static method will make the method be called when Unity is about to open an asset. The method should have the following signature:
<c>static bool OnOpenAsset(int instanceID, int line)</c>

Return true if you handled the opening of the asset or false if an external tool should open it.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Callbacks.OnOpenAssetAttribute.#ctor" />
    <member name="M:UnityEditor.Callbacks.OnOpenAssetAttribute.#ctor(System.Int32)" />
    <member name="T:UnityEditor.StaticEditorFlags">
      <summary>
        <para>Static Editor Flags.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.LightmapStatic">
      <summary>
        <para>Considered static for lightmapping.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OccluderStatic">
      <summary>
        <para>Considered static for occlusion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OccludeeStatic">
      <summary>
        <para>Considered static for occlusion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.BatchingStatic">
      <summary>
        <para>Consider for static batching.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.NavigationStatic">
      <summary>
        <para>Considered static for navigation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StaticEditorFlags.OffMeshLinkGeneration">
      <summary>
        <para>Auto-generate OffMeshLink.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication">
      <summary>
        <para>Main Application class.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.NewScene">
      <summary>
        <para>Create a new scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenScene(System.String)">
      <summary>
        <para>Opens the scene at <c>path</c>.</para>
        <para>The scene that is currently open will not be saved, use SaveSceneIfUserWantsTo for that.
All paths are relative to the project folder. Like: "Assets/MyScenes/MyScene.unity".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenSceneAdditive(System.String)">
      <summary>
        <para>Opens the scene at <c>path</c> additively.</para>
        <para>All paths are relative to the project folder. Like: "Assets/MyScenes/MyScene.unity".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveScene(System.String,System.Boolean)">
      <summary>
        <para>Save the open scene.</para>
        <para>All paths are relative to the project folder, such as: "Assets/MyScenes/MyScene.unity".
Folders specified in the path must already exist before calling the function.
If no path is specified, the path of the current open scene is used, except if it was never saved before, in which case a save dialog is shown.</para>
      </summary>
      <param name="path">The file path to save at. If empty, the current open scene will be overwritten, or if never saved before, a save dialog is shown.</param>
      <param name="saveAsCopy">If set to <c>true</c>, the scene will be saved without changing the <see cref="EditorApplication-currentScene">currentScene</see> and without clearing the unsaved changes marker.</param>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveScene(System.String)">
      <summary>
        <para>Save the open scene.</para>
        <para>All paths are relative to the project folder, such as: "Assets/MyScenes/MyScene.unity".
Folders specified in the path must already exist before calling the function.
If no path is specified, the path of the current open scene is used, except if it was never saved before, in which case a save dialog is shown.</para>
      </summary>
      <param name="path">The file path to save at. If empty, the current open scene will be overwritten, or if never saved before, a save dialog is shown.</param>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveScene">
      <summary>
        <para>Save the open scene.</para>
        <para>All paths are relative to the project folder, such as: "Assets/MyScenes/MyScene.unity".
Folders specified in the path must already exist before calling the function.
If no path is specified, the path of the current open scene is used, except if it was never saved before, in which case a save dialog is shown.</para>
      </summary>
      <returns>
        <para>True if the save succeeded, otherwise false.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveCurrentSceneIfUserWantsTo">
      <summary>
        <para>Ask the user if he wants to save the open scene.</para>
        <para>You might want to call this before opening another scene or creating a new scene.
A return value of true indicates that you may continue.
A return value of false indicates that the user cancelled the operation and you should not Open another Scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.OpenProject(System.String,System.String[])">
      <summary>
        <para>Open another project.</para>
        <para>Note that this function will not exit immediately. It will open another project after executing function returns.</para>
      </summary>
      <param name="projectPath">The path of a project to open.</param>
      <param name="args">Arguments to pass to command line.</param>
    </member>
    <member name="M:UnityEditor.EditorApplication.SaveAssets">
      <summary>
        <para>Saves all serializable assets that have not yet been written to disk (eg. Materials).</para>
        <para>Also makes sure the asset database is written.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.Step">
      <summary>
        <para>Perform a single frame step.</para>
        <para>As if you pressed the Step button in the main toolbar.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.LockReloadAssemblies">
      <summary>
        <para>Prevents loading of assemblies when it is inconvenient.</para>
        <para>For example during drag operations you might want to prevent assembly reloading to not lose state during the drag.
Each LockReloadAssemblies must be matched by UnlockReloadAssemblies, otherwise scripts will never unload.
Unity automatically prevents reloading during mouse down.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.ExecuteMenuItem(System.String)">
      <summary>
        <para>Invokes the menu item in the specified path.</para>
        <para>This function also works with Editor Scripts.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.UnlockReloadAssemblies">
      <summary>
        <para>Must be called after LockReloadAssemblies, to reenable loading of assemblies.</para>
        <para>See Also: EditorApplication.LockReloadAssemblies.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.Exit(System.Int32)">
      <summary>
        <para>Exit the Unity editor application.</para>
        <para>Calling this function will exit right away, without asking to save changes, so you may lose data!
This function is mostly useful for exiting out of a commandline process with a specific error.
See Also: <see href="http://docs.unity3d.com/ScriptReference/../Manual/COMMANDLINEARGUMENTS.html">Commandline Arguments</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.RepaintProjectWindow">
      <summary>
        <para>Can be used to ensure repaint of the ProjectWindow.</para>
        <para>See Also: <see cref="EditorApplication.ProjectWindowItemCallback">EditorApplication.ProjectWindowItemCallback</see>, <see cref="EditorApplication-projectWindowItemOnGUI">EditorApplication.projectWindowItemOnGUI</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.RepaintAnimationWindow" />
    <member name="M:UnityEditor.EditorApplication.RepaintHierarchyWindow">
      <summary>
        <para>Can be used to ensure repaint of the HierarchyWindow.</para>
        <para>See Also: <see cref="EditorApplication.HierarchyWindowItemCallback">EditorApplication.HierarchyWindowItemCallback</see>, <see cref="EditorApplication-hierarchyWindowItemOnGUI">EditorApplication.hierarchyWindowItemOnGUI</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.DirtyHierarchyWindowSorting">
      <summary>
        <para>Set the hierarchy sorting method as dirty.</para>
        <para>Causes the hierarchy to reset the avaliable sorting methods.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorApplication.Beep">
      <summary>
        <para>Plays system beep sound.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.projectWindowItemOnGUI">
      <summary>
        <para>Delegate for OnGUI events for every visible list item in the ProjectWindow.</para>
        <para>See Also: <see cref="EditorApplication.ProjectWindowItemCallback">EditorApplication.ProjectWindowItemCallback</see>, <see cref="EditorApplication.RepaintProjectWindow">EditorApplication.RepaintProjectWindow</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.hierarchyWindowItemOnGUI">
      <summary>
        <para>Delegate for OnGUI events for every visible list item in the HierarchyWindow.</para>
        <para>See Also: <see cref="EditorApplication.HierarchyWindowItemCallback">EditorApplication.HierarchyWindowItemCallback</see>, <see cref="EditorApplication.RepaintHierarchyWindow">EditorApplication.RepaintHierarchyWindow</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.update">
      <summary>
        <para>Delegate for generic updates.</para>
        <para>Add your functions to this delegate to get an update callback at approximately 100 times per second.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.hierarchyWindowChanged">
      <summary>
        <para>Each time an object is (or a group of objects are) created, renamed, parented, unparented or destroyed this callback is raised.</para>
        <para>See Also: EditorWindow.OnHierarchyChange.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.projectWindowChanged">
      <summary>
        <para>Callback raised whenever the state of the Project window changes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.searchChanged">
      <summary>
        <para>Callback raised whenever the contents of a window's search box are changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.modifierKeysChanged">
      <summary>
        <para>Delegate for changed keyboard modifier keys.</para>
        <para>Add your functions to this delegate to get a callback whenever the keyboard modifier keys have changed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorApplication.playmodeStateChanged">
      <summary>
        <para>Delegate for play mode state changes.</para>
        <para>Add your functions to this delegate to get a callback whenever the playmode state changes (enter/exit play mode, pause).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.currentScene">
      <summary>
        <para>The path of the scene that the user has currently open (Will be an empty string if no scene is currently open). (Read Only)</para>
        <para>All paths are relative to the project folder. Like: "Assets/MyScenes/MyScene.unity".</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPlaying">
      <summary>
        <para>Is editor currently in play mode?</para>
        <para>Setting isPlaying delays the result until after all script code has completed for this frame.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPlayingOrWillChangePlaymode">
      <summary>
        <para>Is editor either currently in play mode, or about to switch to it? (Read Only)</para>
        <para>This will return true when editor will switch to play mode after finishing some tasks (e.g. after scripts
will be recompiled).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isPaused">
      <summary>
        <para>Is editor currently paused?</para>
        <para>Lets you change pause state programmatically, like pressing the Pause button in the main toolbar.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isCompiling">
      <summary>
        <para>Is editor currently compiling scripts? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.isUpdating">
      <summary>
        <para>Is editor currently updating? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.applicationContentsPath">
      <summary>
        <para>Path to the Unity editor contents folder. (Read Only)</para>
        <para>The contents folder contains several items internally required by the editor for building players.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.applicationPath">
      <summary>
        <para>Returns the path to the Unity editor application. (Read Only)</para>
        <para>See Also: <see cref="EditorApplication-applicationContentsPath">applicationContentsPath</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorApplication.timeSinceStartup">
      <summary>
        <para>The time since the editor was started. (Read Only)</para>
        <para>This property contains the time since the editor was started, in seconds. 
Unlike Time.realtimeSinceStartup, this is not reset when starting play mode.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorGUIUtility">
      <summary>
        <para>Miscellaneous helper stuff for <see cref="EditorGUI">EditorGUI</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.ShowObjectPicker``1(UnityEngine.Object,System.Boolean,System.String,System.Int32)">
      <summary>
        <para>Show the object picker from code.</para>
        <para>Once the user interacts with the Object Picker, it will respond by sending ExecuteCommand events back to the calling OnGUI that called this function. The messages are:</para>
      </summary>
      <param name="obj">The object to be selected by default.</param>
      <param name="allowSceneObjects">Is selection of scene objects allowed, or should it only show assets.</param>
      <param name="searchFilter">Default search filter to apply.</param>
      <param name="controlID">The id of the control to set. This is useful if you are showing more than one of these. You can get the value at a later time.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerObject">
      <summary>
        <para>The object currently selected in the object picker.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetObjectPickerControlID">
      <summary>
        <para>The controlID of the currently showing object picker.</para>
        <para>See <see cref="EditorGUIUtility.ShowObjectPicker">ShowObjectPicker</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IconContent(System.String)">
      <summary>
        <para>Fetch the GUIContent from the Unity builtin resources with the given name.</para>
      </summary>
      <param name="name">Content name.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.IconContent(System.String,System.String)">
      <summary>
        <para>Fetch the GUIContent from the Unity builtin resources with the given name.</para>
      </summary>
      <param name="name">Content name.</param>
      <param name="tooltip">Tooltip.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.ObjectContent(UnityEngine.Object,System.Type)">
      <summary>
        <para>Return a GUIContent object with the name and icon of an Object.</para>
        <para>If the object is null, the icon will be picked according to type.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.HasObjectThumbnail(System.Type)">
      <summary>
        <para>Does a given class have per-object thumbnails?</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.SetIconSize(UnityEngine.Vector2)">
      <summary>
        <para>Set icons rendered as part of <see cref="GUIContent">GUIContent</see> to be rendered at a specific size.</para>
        <para>Set the size to Vector2.zero to use the default behaviour where the size is determined by the available space.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetIconSize">
      <summary>
        <para>Get the size that has been set using <see cref="EditorGUIUtility.SetIconSize">SetIconSize</see>.</para>
        <para>The default size is Vector2.zero where the size is determined by the available space.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.FindTexture(System.String)">
      <summary>
        <para>Get a texture from its source filename.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.GetBuiltinSkin(UnityEditor.EditorSkin)">
      <summary>
        <para>Get one of the built-in GUI skins, which can be the game view, inspector or scene view skin as chosen by the parameter.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LoadRequired(System.String)">
      <summary>
        <para>Load a built-in resource that has to be there.</para>
        <para>This function will look in Assets/Editor Default Resources/whatever for the resource.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.Load(System.String)">
      <summary>
        <para>Load a built-in resource.</para>
        <para>This function will look in Assets/Editor Default Resources/ + path for the resource.
If not there, it will try the built-in editor resources by name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PingObject(UnityEngine.Object)">
      <summary>
        <para>Ping an object in a window like clicking it in an inspector.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.PingObject(System.Int32)">
      <summary>
        <para>Ping an object in a window like clicking it in an inspector.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.RenderGameViewCameras(UnityEngine.Rect,System.Boolean,System.Boolean)">
      <summary>
        <para>Render all ingame cameras.</para>
      </summary>
      <param name="cameraRect">The device coordinates to render all game cameras into.</param>
      <param name="gizmos">Show gizmos as well.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.QueueGameViewInputEvent(UnityEngine.Event)">
      <summary>
        <para>Send an input event into the game.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls(System.Single)">
      <summary>
        <para>Make all <see cref="EditorGUI">EditorGUI</see> look like regular controls.</para>
        <para>This will make the default styles used by</para>
      </summary>
      <param name="labelWidth">Width to use for prefixed labels.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls">
      <summary>
        <para>Make all <see cref="EditorGUI">EditorGUI</see> look like regular controls.</para>
        <para>This will make the default styles used by</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.LookLikeControls(System.Single,System.Single)">
      <summary>
        <para>Make all <see cref="EditorGUI">EditorGUI</see> look like regular controls.</para>
        <para>This will make the default styles used by</para>
      </summary>
      <param name="labelWidth">Width to use for prefixed labels.</param>
      <param name="fieldWidth">Width of text entries.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.CommandEvent(System.String)">
      <summary>
        <para>Creates an event.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawColorSwatch(UnityEngine.Rect,UnityEngine.Color)">
      <summary>
        <para>Draw a color swatch.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="color">The color to draw.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color)">
      <summary>
        <para>Draw a curve swatch.</para>
        <para>Pass in the curve to draw either with the curve parameter or with the property parameter.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="curve">The curve to draw.</param>
      <param name="property">The curve to draw as a SerializedProperty.</param>
      <param name="color">The color to draw the curve with.</param>
      <param name="bgColor">The color to draw the background with.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawCurveSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw a curve swatch.</para>
        <para>Pass in the curve to draw either with the curve parameter or with the property parameter.</para>
      </summary>
      <param name="position">The rectangle to draw the color swatch within.</param>
      <param name="curve">The curve to draw.</param>
      <param name="property">The curve to draw as a SerializedProperty.</param>
      <param name="color">The color to draw the curve with.</param>
      <param name="bgColor">The color to draw the background with.</param>
      <param name="curveRanges">Optional parameter to specify the range of the curve which should be included in swatch.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEditor.SerializedProperty,UnityEditor.SerializedProperty,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw swatch with a filled region between two SerializedProperty curves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.DrawRegionSwatch(UnityEngine.Rect,UnityEngine.AnimationCurve,UnityEngine.AnimationCurve,UnityEngine.Color,UnityEngine.Color,UnityEngine.Rect)">
      <summary>
        <para>Draw swatch with a filled region between two curves.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.RGBToHSV(UnityEngine.Color,System.Single@,System.Single@,System.Single@)">
      <summary>
        <para>Convert a color from RGB to HSV color space.</para>
        <para>All values are in the 0-1 range</para>
      </summary>
      <param name="rgbColor">The color to convert from.</param>
      <param name="H">The hue of the color is written to this variable.</param>
      <param name="S">The saturation of the color is written to this variable.</param>
      <param name="V">The value of the color is written to this variable.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.HSVToRGB(System.Single,System.Single,System.Single)">
      <summary>
        <para>Convert a set of HSV values to an RGB Color.</para>
        <para>All values are in the range 0 - 1.</para>
      </summary>
      <returns>
        <para>The RGB color calculated from the HSV values passed into the function. The alpha value of the color will be 1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor)">
      <summary>
        <para>Add a custom mouse pointer to a control.</para>
      </summary>
      <param name="position">The rectangle the control should be shown within.</param>
      <param name="mouse">The mouse cursor to use.</param>
    </member>
    <member name="M:UnityEditor.EditorGUIUtility.AddCursorRect(UnityEngine.Rect,UnityEditor.MouseCursor,System.Int32)">
      <summary>
        <para>Add a custom mouse pointer to a control.</para>
      </summary>
      <param name="position">The rectangle the control should be shown within.</param>
      <param name="mouse">The mouse cursor to use.</param>
      <param name="controlID">ID of a target control.</param>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.singleLineHeight">
      <summary>
        <para>Get the height used for a single Editor control such as a one-line EditorGUI.TextField or EditorGUI.Popup.</para>
        <para>When creating your own multi-line controls, such as controls for custom classes with multiple fields, you can use <see cref="EditorGUILayout.GetControlRect">EditorGUILayout.GetControlRect</see> and pass in a height value that is a multiple of <see cref="EditorGUIUtility-singleLineHeight">EditorGUIUtility.singleLineHeight</see>. This is advisable over hardcoding specific pixel values.
See Also: <see cref="EditorGUILayout.GetControlRect">EditorGUILayout.GetControlRect</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.standardVerticalSpacing">
      <summary>
        <para>Get the height used by default for vertical spacing between controls.</para>
        <para>When creating GUI without GUILayout, such as is for instance required by <see cref="PropertyDrawer">PropertyDrawer</see>s, and you need to place several controls under each other, you can use standardVerticalSpacing to ensure there's the proper standard spacing between the controls. This is advisable over hardcoding specific pixel values.
See Also: <see cref="EditorGUILayout.GetControlRect">EditorGUILayout.GetControlRect</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.isProSkin">
      <summary>
        <para>Is the user currently using the pro skin? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.whiteTexture">
      <summary>
        <para>Get a white texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.editingTextField">
      <summary>
        <para>Is a text field currently editing text?</para>
        <para>In Editor GUI, text fields can have focus without the text being edited. For example you may switch focus between text fields or other controls by using the up and down arrow keys. Once you click inside the text field, editing of the text itself begins and the arrow keys are then used to navigate the text content. <see cref="EditorGUIUtility-editingTextField">editingTextField</see> is true when a text field is in this text editing mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.hierarchyMode">
      <summary>
        <para>Is the Editor GUI is hierarchy mode?</para>
        <para>In hierarchy mode, <see cref="EditorGUI.Foldout">EditorGUI.Foldout</see> controls are positioned with the foldout triangle to the left of the specified <see cref="Rect">Rect</see> for the control, rather than being inside the Rect. This way, the label of the foldout is aligned together with labels of other Editor GUI controls.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.wideMode">
      <summary>
        <para>Is the Editor GUI currently in wide mode?</para>
        <para>Wide mode is a mode for Editor GUI where the controls for structs such as Vector3 and Rect are inlined so they take up less vertical space. For example, in wide mode a Vector3Field takes up one line height instead of two, and a RectField takes up two line heights instead of three.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.currentViewWidth">
      <summary>
        <para>The width of the GUI area for the current EditorWindow or other view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.labelWidth">
      <summary>
        <para>The width in pixels reserved for labels of Editor GUI controls.</para>
        <para>Editor GUI controls have a certain width allocated for labels. This width can be changed by setting labelWidth to a different value. Setting it to 0 will reset the label width to the default value. The default value can vary, for example depending on the width of the Inspector window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.fieldWidth">
      <summary>
        <para>The minimum width in pixels reserved for the fields of Editor GUI controls.</para>
        <para>Most Editor GUI controls consist of a label as well as the control field itself. The minimum width of the field is controlled by the fieldWidth value. Fields often appear wider than the minimum width, since Editor GUI controls are usually set to occupy a</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorGUIUtility.systemCopyBuffer">
      <summary>
        <para>The system copy buffer.</para>
        <para>Use this to make Copy and Paste work for your own stuff.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MessageType">
      <summary>
        <para>User message types.</para>
        <para>See Also: <see cref="EditorGUI.HelpBox">EditorGUI.HelpBox</see>, <see cref="EditorGUILayout.HelpBox">EditorGUILayout.HelpBox</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.None">
      <summary>
        <para>Neutral message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.Info">
      <summary>
        <para>Info message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.Warning">
      <summary>
        <para>Warning message.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MessageType.Error">
      <summary>
        <para>Error message.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorSkin">
      <summary>
        <para>Enum that selects which skin to return from EditorGUIUtility.GetBuiltinSkin.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Game">
      <summary>
        <para>The skin used for game views.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Inspector">
      <summary>
        <para>The skin used for inspectors.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorSkin.Scene">
      <summary>
        <para>The skin used for scene views.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MouseCursor">
      <summary>
        <para>Custom mouse cursor shapes used with EditorGUIUtility.AddCursorRect.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Arrow">
      <summary>
        <para>Normal pointer arrow.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Text">
      <summary>
        <para>Text cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeVertical">
      <summary>
        <para>Vertical resize arrows.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeHorizontal">
      <summary>
        <para>Horizontal resize arrows.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Link">
      <summary>
        <para>Arrow with a Link badge (for assigning pointers).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SlideArrow">
      <summary>
        <para>Arrow with small arrows for indicating sliding at number fields.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeUpRight">
      <summary>
        <para>Resize up-right for window edges.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ResizeUpLeft">
      <summary>
        <para>Resize up-Left for window edges.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.MoveArrow">
      <summary>
        <para>Arrow with the move symbol next to it for the sceneview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.RotateArrow">
      <summary>
        <para>Arrow with the rotate symbol next to it for the sceneview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ScaleArrow">
      <summary>
        <para>Arrow with the scale symbol next to it for the sceneview.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ArrowPlus">
      <summary>
        <para>Arrow with the plus symbol next to it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.ArrowMinus">
      <summary>
        <para>Arrow with the minus symbol next to it.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Pan">
      <summary>
        <para>Cursor with a dragging hand for pan.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Orbit">
      <summary>
        <para>Cursor with an eye for orbit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.Zoom">
      <summary>
        <para>Cursor with a magnifying glass for zoom.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.FPS">
      <summary>
        <para>Cursor with an eye and stylized arrow keys for FPS navigation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.CustomCursor">
      <summary>
        <para>The current user defined cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SplitResizeUpDown">
      <summary>
        <para>Up-Down resize arrows for window splitters.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MouseCursor.SplitResizeLeftRight">
      <summary>
        <para>Left-Right resize arrows for window splitters.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DrawCameraMode">
      <summary>
        <para>Drawing modes for Handles.DrawCamera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Normal">
      <summary>
        <para>Draw the camera like it would be drawn in-game. This uses the clear flags of the camera.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Textured">
      <summary>
        <para>Draw the camera textured with selection wireframe and no background clearing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.Wireframe">
      <summary>
        <para>Draw the camera in wireframe and no background clearing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.TexturedWire">
      <summary>
        <para>Draw the camera where all objects have a wireframe overlay. and no background clearing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.RenderPaths">
      <summary>
        <para>Draw color-coded render paths. Objects are colored Green for Deferred, Yellow for Forward and Red for VertexLit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DrawCameraMode.LightmapResolution">
      <summary>
        <para>Draw textured with overlaid lightmap resolution grid.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.HandleUtility">
      <summary>
        <para>Helper functions for Scene View style 3D GUI.</para>
        <para>These are mainly mathematical functions that assist in converting between the 3D scene space and the 2D GUI. The functions are used in the construction of the Unity editor itself and so using them is a good way to make your own Handle GUIs consistent with Unity's.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.CalcLineTranslation(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Map a mouse drag onto a movement along a line in 3D space.</para>
        <para>Certain types of Handles (such as arrows) involve movement along a line in 3D space. For example, the Transform's position arrows move the object along its local X, Y or Z axis as the mouse is dragged. The CalcLineTranslation function converts the movement of the mouse into constrained movement along a 3D line in the familiar way used by Unity's built-in tools.</para>
      </summary>
      <param name="src">The source point of the drag.</param>
      <param name="dest">The destination point of the drag.</param>
      <param name="srcPosition">The 3D position the dragged object had at <c>src</c> ray.</param>
      <param name="constraintDir">3D direction of constrained movement.</param>
      <returns>
        <para>The distance travelled along constraintDir.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.PointOnLineParameter(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Returns the parameter for the projection of the <c>point</c> on the given line.</para>
        <para>The return value can be negative if the projected point is in negative <c>lineDirection</c> relative to the <c>linePoint/</c>
See Also: <see cref="HandleUtility.ProjectPointLine">ProjectPointLine</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ProjectPointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Project <c>point</c> onto a line.</para>
        <para>See Also: <see cref="HandleUtility.DistancePointLine">DistancePointLine</see>.
See Also: <see cref="HandleUtility.PointOnLineParameter">PointOnLineParameter</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointLine(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Calculate distance between a point and a line.</para>
        <para>See Also: <see cref="HandleUtility.ProjectPointLine">ProjectPointLine</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointBezier(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Calculate distance between a point and a Bezier curve.</para>
        <para>See Also: Handles.DrawBezier function.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToLine(UnityEngine.Vector3,UnityEngine.Vector3)">
      <summary>
        <para>Pixel distance from mouse pointer to line.</para>
        <para>Calculates the screen space distance from the mouse pointer to the line between</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToCircle(UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to camera facing circle.</para>
        <para>Calculates the screen space distance from the mouse pointer to the circle at given world
space</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToRectangle(UnityEngine.Vector3,UnityEngine.Quaternion,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a rectangle on screen.</para>
        <para>Calculates the screen space distance from the mouse pointer to the rectangle.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointToLine(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Distance from a point <c>p</c> in 2d to a line defined by two points <c>a</c> and <c>b</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistancePointToLineSegment(UnityEngine.Vector2,UnityEngine.Vector2,UnityEngine.Vector2)">
      <summary>
        <para>Distance from a point <c>p</c> in 2d to a line segment defined by two points <c>a</c> and <c>b</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a 3D disc.</para>
        <para>Calculates the screen space distance from the mouse pointer to the disc (circle) at given world
space</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToDisc(UnityEngine.Vector3,UnityEngine.Vector3,System.Single)">
      <summary>
        <para>Get the point on an disc (in 3D space) which is closest to the current mouse position.</para>
        <para>This function takes the disc defined by its parameters and "flattens" it into screen space. The closest point between the flattened disc and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D disc. This is useful for Handle GUIs that involve rotation of an object around the center of the disc; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Pixel distance from mouse pointer to a 3D section of a disc.</para>
        <para>Calculates the screen space distance from the mouse pointer to the disc section at given world
space</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToArc(UnityEngine.Vector3,UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single)">
      <summary>
        <para>Get the point on an arc (in 3D space) which is closest to the current mouse position.</para>
        <para>This function takes the arc defined by its parameters and "flattens" it into screen space. The closest point between the flattened arc and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D arc. This is useful for Handle GUIs that involve rotation of an object around the center of the arc; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.DistanceToPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Pixel distance from mouse pointer to a polyline.</para>
        <para>Calculates the screen space distance from the mouse pointer to the multi segment line
that goes through the given world space points.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.ClosestPointToPolyLine(UnityEngine.Vector3[])">
      <summary>
        <para>Get the point on a polyline (in 3D space) which is closest to the current mouse position.</para>
        <para>A polyline is simply a zigzag line defined by a set of points connected in sequence. The ClosestPointToPolyLine function takes the polyline defined by a point array and "flattens" it into screen space. The closest point between the flattened line and the current mouse position (also in screen space) is then found and converted back into a 3D point on the original 3D polyline. This is useful for Handle GUIs that involve manipulating an arbitrary 3D shape using the mouse; the 2D mouse movements are converted into 3D space in the familiar way used by Unity's built-in tools. An example of where this might be used is a racetrack defined by a set of waypoints - a position along the track line could be selected via the mouse using ClosestPointToPolyLine.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.AddControl(System.Int32,System.Single)">
      <summary>
        <para>Record a distance measurement from a handle.</para>
        <para>All handles call this with their controlID during layout, then use nearestControl to check if they got the mouseDown.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.AddDefaultControl(System.Int32)">
      <summary>
        <para>Add the ID for a default control. This will be picked if nothing else is.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.GetHandleSize(UnityEngine.Vector3)">
      <summary>
        <para>Get world space size of a manipulator handle at given position.</para>
        <para>Uses the current camera to calculate suitable size.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.WorldToGUIPoint(UnityEngine.Vector3)">
      <summary>
        <para>Convert world space point to a 2D GUI position.</para>
        <para>Uses the current camera to calculate the projection.</para>
      </summary>
      <param name="world">Point in world space.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.GUIPointToWorldRay(UnityEngine.Vector2)">
      <summary>
        <para>Convert 2D GUI position to a world space ray.</para>
        <para>Uses the current camera to calculate the ray.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.WorldPointToSizedRect(UnityEngine.Vector3,UnityEngine.GUIContent,UnityEngine.GUIStyle)">
      <summary>
        <para>Calculate a rectangle to display a 2D GUI element near a projected point in 3D space.</para>
        <para>This function is useful when 3D objects need labels or other 2D controls that follow them around in 3D space as the camera moves.</para>
      </summary>
      <param name="position">The world-space position to use.</param>
      <param name="content">The content to make room for.</param>
      <param name="style">The style to use. The style's alignment.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickRectObjects(UnityEngine.Rect)">
      <summary>
        <para>Pick GameObjects that lie within a specified screen rectangle.</para>
        <para>This is useful for implementing multi-select tools that allow the user to drag a rectangle around the desired objects.</para>
      </summary>
      <param name="rect">An screen rectangle specified with pixel coordinates.</param>
    </member>
    <member name="M:UnityEditor.HandleUtility.PickGameObject(UnityEngine.Vector2,System.Boolean)">
      <summary>
        <para>Pick game object closest to specified position.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.PushCamera(UnityEngine.Camera)">
      <summary>
        <para>Store all camera settings.</para>
        <para>The camera settings will be added to a so-called "stack" list, where they will stay until retrieved by a call to <see cref="HandleUtility.PopCamera">PopCamera</see>. The settings will be stored in the reverse of the order in which they were added, so a call to PopCamera will retrieve the most recently stored Camera data and then remove it from the stack. A subsequent call to PopCamera will then retrieve the next most recently pushed data and so on.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.PopCamera(UnityEngine.Camera)">
      <summary>
        <para>Retrieve all camera settings.</para>
        <para>A call to PopCamera will retrieve the most recently stored Camera settings added to a "stack" structure by <see cref="HandleUtility.PushCamera">PushCamera</see>. This allows for easy saving and restoration of temporary camera changes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.HandleUtility.RaySnap(UnityEngine.Ray)">
      <summary>
        <para>Casts <c>ray</c> against the scene and report if an object lies in its path.</para>
      </summary>
      <returns>
        <para>A boxed RaycastHit, null if nothing hit it.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.HandleUtility.Repaint">
      <summary>
        <para>Repaint the current view.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.acceleration">
      <summary>
        <para>Get standard acceleration for dragging values (Read Only).</para>
        <para>Normal acceleration is 1.0. When Shift is pressed, it is 4.0; when Alt is pressed, acceleration is 0.25.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.niceMouseDelta">
      <summary>
        <para>Get nice mouse delta to use for dragging a float value (Read Only).</para>
        <para>This will autodetect the users preference for X / Y axis dragging and give you back
a float that is measured accordingly. This also handles modifier keys correctly, i.e.
the delta is already multiplied by</para>
      </summary>
    </member>
    <member name="P:UnityEditor.HandleUtility.niceMouseDeltaZoom">
      <summary>
        <para>Get nice mouse delta to use for zooming (Read Only).</para>
        <para>This will autodetect the users preference for X / Y axis dragging and give you back
a float that is measured accordingly. This also handles modifier keys correctly, i.e.
the delta is already multiplied by</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorBehaviorMode" />
    <member name="F:UnityEditor.EditorBehaviorMode.Mode3D" />
    <member name="F:UnityEditor.EditorBehaviorMode.Mode2D" />
    <member name="T:UnityEditor.SpritePackerMode">
      <summary>
        <para>Sprite Packer mode for the current project.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.Disabled">
      <summary>
        <para>Doesn't pack sprites.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.BuildTimeOnly">
      <summary>
        <para>Updates sprite atlas cache when building player/bundles.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpritePackerMode.AlwaysOn">
      <summary>
        <para>Always maintain an up-to-date sprite atlas cache.</para>
        <para>Updates sprite atlas cache when going into Play mode or building player/bundles.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorWindow">
      <summary>
        <para>Derive from this class to create an editor window.</para>
        <para>Create your own custom editor window that can float free or be docked as a tab, just like the native windows in the Unity interface.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.BeginWindows">
      <summary>
        <para>Mark the beginning area of all popup windows.</para>
        <para>GUI.Window behaves somewhat differently in the editor than inside your games. In games, GUI.Window pops up a window on your screen. In the editor, 
GUI.Window shows a subwindow inside one of your editor windows. Begin/EndWindows is used to determine where these can go.
You need to have all calls to</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.EndWindows">
      <summary>
        <para>Close a window group started with <see cref="EditorWindow.BeginWindows">EditorWindow.BeginWindows</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowNotification(UnityEngine.GUIContent)">
      <summary>
        <para>Show a notification message.</para>
        <para>Displays notification message on the window. Unlike message boxes or log messages notification will fade out automatically after some time. 
Call</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.RemoveNotification">
      <summary>
        <para>Stop showing notification message.</para>
        <para>Notification message fades away automatically after some time. This function will remove it immediately.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowTab" />
    <member name="M:UnityEditor.EditorWindow.Focus">
      <summary>
        <para>Moves keyboard focus to this EditorWindow.</para>
        <para>See Also:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowUtility">
      <summary>
        <para>Show the EditorWindow as a floating utility window.</para>
        <para>Utility windows will always be in front of normal windows, and will be hidden when user switches to another application.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowPopup">
      <summary>
        <para>Used for popup style windows.</para>
        <para>On mac this means light shadow and no titlebar</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowAsDropDown(UnityEngine.Rect,UnityEngine.Vector2)">
      <summary>
        <para>Show window with dropdown behaviour (e.g. window is closed when it loses focus) and having.</para>
        <para>Appearance as 'ShowMode.PopupMenu' (no frame). 
Note this function auto fits the window to screen while trying to place it first below then above.
So windowSize might change when fitting it to screen therefore make sure to get 'position' afterwards 
to check size was cropped.</para>
      </summary>
      <param name="buttonRect">Is used for positioning the window.</param>
      <param name="windowSize">Is used for setting up initial size of the window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.Show">
      <summary>
        <para>Show the EditorWindow.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Show(System.Boolean)">
      <summary>
        <para>Show the EditorWindow.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.ShowAuxWindow">
      <summary>
        <para>Show the editor window in the auxiliary window.</para>
        <para>The single auxiliary window can be re-used by different editor windows at different times.
Showing an editor window in the auxiliary window can be useful to avoid clutter of many small windows.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow(System.Type,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.
The created window will attempt to be docked next to the first founds specified window type.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.
The created window will attempt to be docked next to the first founds specified window type.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindow``1(System.String,System.Boolean,System.Type[])">
      <summary>
        <para>Returns the first EditorWindow of type <c>T</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window and returns the instance of it.
The created window will attempt to be docked next to the first founds specified window type.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
      <param name="desiredDockNextTo">An array of EditorWindow types that the window will attempt to dock onto.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen(System.Type)">
      <summary>
        <para>Focuses the first found EditorWindow of specified type if it is open.</para>
        <para>If there is no open window of such type, nothing happens.</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.FocusWindowIfItsOpen``1">
      <summary>
        <para>Focuses the first found EditorWindow of type <c>T</c> if it is open.</para>
        <para>If there is no open window of such type, nothing happens.</para>
      </summary>
      <typeparam name="T">The type of the window. Must derive from EditorWindow.</typeparam>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect(System.Type,UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position</para>
      </summary>
      <param name="t">The type of the window. Must derive from EditorWindow.</param>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean,System.String)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.GetWindowWithRect``1(UnityEngine.Rect,System.Boolean,System.String,System.Boolean)">
      <summary>
        <para>Returns the first EditorWindow of type <c>t</c> which is currently on the screen.</para>
        <para>If there is none, creates and shows new window at the position <c>rect</c> and returns the instance of it.</para>
      </summary>
      <param name="rect">The position on the screen where a newly created window will show.</param>
      <param name="utility">Set this to true, to create a floating utility window, false to create a normal window.</param>
      <param name="title">If GetWindow creates a new window, it will get this title. If this value is null, use the class name as title.</param>
    </member>
    <member name="M:UnityEditor.EditorWindow.Close">
      <summary>
        <para>Close the editor window.</para>
        <para>This will destroy the editor window</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.Repaint">
      <summary>
        <para>Make the window repaint.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorWindow.SendEvent(UnityEngine.Event)">
      <summary>
        <para>Sends an Event to a window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.wantsMouseMove">
      <summary>
        <para>Does the GUI in this editor window want MouseMove events?</para>
        <para>If set to true, the window recieves an OnGUI call whenever the mouse is moved over the window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.autoRepaintOnSceneChange">
      <summary>
        <para>Does the window automatically repaint whenever the scene has changed?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.maximized">
      <summary>
        <para>Is this window maximized.</para>
        <para>Set this value to maximize / unmaximize a window. If the window is undocked, this value will always be false and setting it will have no effect.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.focusedWindow">
      <summary>
        <para>The EditorWindow which currently has keyboard focus. (Read Only)</para>
        <para>/focusedWindow/ can be null if no window has focus.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.mouseOverWindow">
      <summary>
        <para>The EditorWindow currently under the mouse cursor. (Read Only)</para>
        <para>/mouseOverWindow/ can be null if there is no window under the cursor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.minSize">
      <summary>
        <para>The minimum size of this window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.maxSize">
      <summary>
        <para>The maximum size of this window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.title">
      <summary>
        <para>The title of this window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorWindow.depthBufferBits" />
    <member name="P:UnityEditor.EditorWindow.antiAlias" />
    <member name="P:UnityEditor.EditorWindow.position">
      <summary>
        <para>The position of the window in screen space.</para>
        <para>Setting this value will undock the window if it's docked</para>
      </summary>
    </member>
    <member name="T:UnityEditor.CustomEditor">
      <summary>
        <para>Tells an Editor class which run-time type it's an editor for.</para>
        <para>When you make a custom editor for a component, you need put this attribute on the editor class.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.CustomEditor.#ctor(System.Type)">
      <summary>
        <para>Defines which object type the custom editor class can edit.</para>
        <para>See Also: <see cref="Editor">Editor</see> class.</para>
      </summary>
      <param name="inspectedType">Type that this editor can edit.</param>
    </member>
    <member name="M:UnityEditor.CustomEditor.#ctor(System.Type,System.Boolean)">
      <summary>
        <para>Defines which object type the custom editor class can edit.</para>
        <para>See Also: <see cref="Editor">Editor</see> class.</para>
      </summary>
      <param name="inspectedType">Type that this editor can edit.</param>
      <param name="editorForChildClasses">If true, child classes of inspectedType will also show this editor. Defaults to false.</param>
    </member>
    <member name="T:UnityEditor.CanEditMultipleObjects">
      <summary>
        <para>Attribute used to make a custom editor support multi-object editing.</para>
        <para>When multiple objects are selected, Editors that don't have this attribute will show the message "Multi-object editing not supported".
See the</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ReplacePrefabOptions">
      <summary>
        <para>Flags for the PrefabUtility.ReplacePrefab function.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.Default">
      <summary>
        <para>Replaces prefabs by matching pre-existing connections to the prefab.</para>
        <para>If the game object hierarchy was not connected to the prefab before all game objects / components will be new
and thus overrides in prefab instances will be lost.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.ConnectToPrefab">
      <summary>
        <para>Connects the passed objects to the prefab after uploading the prefab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ReplacePrefabOptions.ReplaceNameBased">
      <summary>
        <para>Replaces the prefab using name based lookup in the transform hierarchy.</para>
        <para>This is internally used by the model importer and is useful for relating game object hierarchy built 
from scratch to an existing prefab without breaking connections.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PrefabType">
      <summary>
        <para>The type of a prefab object as returned by EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.None">
      <summary>
        <para>The object is not a prefab nor an instance of a prefab.</para>
        <para>See Also: EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.Prefab">
      <summary>
        <para>The object is a user created prefab asset.</para>
        <para>See Also: EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.ModelPrefab">
      <summary>
        <para>The object is an imported 3D model asset.</para>
        <para>See Also: EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.PrefabInstance">
      <summary>
        <para>The object is an instance of a user created prefab.</para>
        <para>See Also: EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.ModelPrefabInstance">
      <summary>
        <para>The object is an instance of an imported 3D model.</para>
        <para>See Also: EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.MissingPrefabInstance">
      <summary>
        <para>The object was an instance of a prefab, but the original prefab could not be found.</para>
        <para>See Also: EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.DisconnectedPrefabInstance">
      <summary>
        <para>The object is an instance of a user created prefab, but the connection is broken.</para>
        <para>For example, adding or removing a component from the instance breaks connection between the instance and the prefab.
See Also: EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabType.DisconnectedModelPrefabInstance">
      <summary>
        <para>The object is an instance of an imported 3D model, but the connection is broken.</para>
        <para>For example, adding or removing a component from the instance breaks connection between the instance and the prefab.
See Also: EditorUtility.GetPrefabType.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PropertyModification">
      <summary>
        <para>Defines a single modified property.</para>
        <para>Used by the prefab system to track any changes applied to an instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PropertyModification.#ctor" />
    <member name="F:UnityEditor.PropertyModification.target">
      <summary>
        <para>Object that will be modified.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.propertyPath">
      <summary>
        <para>Property path of the property being modified (Matches as SerializedProperty.propertyPath).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.value">
      <summary>
        <para>The value being applied.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PropertyModification.objectReference">
      <summary>
        <para>The value being applied when it is a object reference (which can not be represented as a string).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PrefabUtility">
      <summary>
        <para>Utility class for any prefab related operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabParent(UnityEngine.Object)">
      <summary>
        <para>Returns the GameObject parent of <c>source</c>, or null if it can't be found.</para>
        <para>This also returns the prefab parent if the prefab has become disconnected, which can then be used to reconnect the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabObject(UnityEngine.Object)">
      <summary>
        <para>Retrieves the enclosing prefab for any object contained within.</para>
      </summary>
      <param name="targetObject">An object contained within a prefab object.</param>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPropertyModifications(UnityEngine.Object)">
      <summary>
        <para>Extract all modifications that are applied to the prefab instance compared to the parent prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.SetPropertyModifications(UnityEngine.Object,UnityEditor.PropertyModification[])">
      <summary>
        <para>Assigns all modifications that are applied to the prefab instance compared to the parent prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiateAttachedAsset(UnityEngine.Object)">
      <summary>
        <para>Instantiate an asset that is referenced by a prefab and use it on the prefab instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.RecordPrefabInstancePropertyModifications(UnityEngine.Object)">
      <summary>
        <para>Force record property modifications by comparing against the parent prefab.</para>
        <para>This is done automatically and you will not have to call this function manually.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.MergeAllPrefabInstances(UnityEngine.Object)">
      <summary>
        <para>Force re-merging all prefab instances of this prefab.</para>
        <para>This is done automatically and you will not have to call this function manually.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.DisconnectPrefabInstance(UnityEngine.Object)">
      <summary>
        <para>Disconnects the prefab instance from its parent prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.InstantiatePrefab(UnityEngine.Object)">
      <summary>
        <para>Instantiates the given prefab.</para>
        <para>This is similar to Instantiate but creates a prefab connection to the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreateEmptyPrefab(System.String)">
      <summary>
        <para>Creates an empty prefab at given path.</para>
        <para>If a prefab at the path already exists it will be deleted and replaced with an empty prefab.
Returns a reference to the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject,UnityEditor.ReplacePrefabOptions)">
      <summary>
        <para>Creates a prefab from a game object hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.CreatePrefab(System.String,UnityEngine.GameObject)">
      <summary>
        <para>Creates a prefab from a game object hierarchy.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object,UnityEditor.ReplacePrefabOptions)">
      <summary>
        <para>Replaces the <c>targetPrefab</c> with a copy of the game object hierarchy <c>go</c>.</para>
        <para>Returns the prefab game object after it has been created.
If <c>connectToPrefab</c> is enabled <c>go</c> will be made an instance of the created prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReplacePrefab(UnityEngine.GameObject,UnityEngine.Object)">
      <summary>
        <para>Replaces the <c>targetPrefab</c> with a copy of the game object hierarchy <c>go</c>.</para>
        <para>Returns the prefab game object after it has been created.
If <c>connectToPrefab</c> is enabled <c>go</c> will be made an instance of the created prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindRootGameObjectWithSameParentPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Returns the topmost game object that has the same prefab parent as <c>target</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindValidUploadPrefabInstanceRoot(UnityEngine.GameObject)">
      <summary>
        <para>Returns root game object of the prefab instance if that root prefab instance is a parent of the prefab.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ReconnectToLastPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Connects the game object to the prefab that it was last connected to.</para>
        <para>Returns true if the game object has never been a prefab instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.ResetToPrefabState(UnityEngine.Object)">
      <summary>
        <para>Resets the properties of the component or game object to the parent prefab state.</para>
        <para>All overrides will be cleared. However the transform.position and rotation of a root game object in a prefab instance 
will never be cleared.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.IsComponentAddedToPrefabInstance(UnityEngine.Object)" />
    <member name="M:UnityEditor.PrefabUtility.RevertPrefabInstance(UnityEngine.GameObject)">
      <summary>
        <para>Resets the properties of all objects in the prefab, including child game objects and components that were added to the prefab instance.</para>
        <para>All overrides will be cleared. However the transform.position and rotation of a root game object in a prefab instance 
will never be cleared.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.GetPrefabType(UnityEngine.Object)">
      <summary>
        <para>Given an object, returns its prefab type (None, if it's not a prefab).</para>
        <para>See Also: The PrefabType enumeration for information on the possible return values.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PrefabUtility.FindPrefabRoot(UnityEngine.GameObject)">
      <summary>
        <para>Helper function to find the prefab root of an object (used for picking niceness).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PrefabUtility.prefabInstanceUpdated">
      <summary>
        <para>Called after prefab instances in the scene have been updated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Undo">
      <summary>
        <para>Lets you register undo operations on specific objects you are about to perform changes on.</para>
        <para>The Undo system stores delta changes in the undo stack. Undo operations are automatically combined together based on events Eg. mouse down events will split undo groups.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.#ctor" />
    <member name="M:UnityEditor.Undo.RegisterCompleteObjectUndo(UnityEngine.Object,System.String)" />
    <member name="M:UnityEditor.Undo.RegisterCompleteObjectUndo(UnityEngine.Object[],System.String)" />
    <member name="M:UnityEditor.Undo.SetTransformParent(UnityEngine.Transform,UnityEngine.Transform,System.String)">
      <summary>
        <para>Sets the parent of transform to the new parent and records an undo operation.</para>
        <para>This is equivalent to calling transform.parent = newParent, but it additionally records the undo operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.RegisterCreatedObjectUndo(UnityEngine.Object,System.String)">
      <summary>
        <para>Register an undo operations for a newly created object.</para>
        <para>When the undo is performed the object will be destroyed. All newly created objects that are part of undoable state should be registered with this function.</para>
      </summary>
      <param name="objectToUndo">The object that was created.</param>
      <param name="name">The name of the action to undo. Think "Undo ...." in the main menu.</param>
    </member>
    <member name="M:UnityEditor.Undo.DestroyObjectImmediate(UnityEngine.Object)">
      <summary>
        <para>Destroys the object and records an undo operation so that it can be recreated.</para>
        <para>Destroys the object with the same behaviour as DestroyImmediate (objectToUndo, true); Also stores all destroyed objects in the undo buffer so that they can be fully recreated.</para>
      </summary>
      <param name="objectToUndo">The object that will be destroyed.</param>
    </member>
    <member name="M:UnityEditor.Undo.AddComponent(UnityEngine.GameObject,System.Type)" />
    <member name="M:UnityEditor.Undo.AddComponent``1(UnityEngine.GameObject)" />
    <member name="M:UnityEditor.Undo.RegisterFullObjectHierarchyUndo(UnityEngine.Object,System.String)" />
    <member name="M:UnityEditor.Undo.RecordObject(UnityEngine.Object,System.String)">
      <summary>
        <para>Records any changes done on the object after the RecordObject function.</para>
        <para>Almost all property changes can be recorded with this function. The transform parent, AddComponent, object destruction  can not be recorded with this function, for that you should use the dedicated functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.RecordObjects(UnityEngine.Object[],System.String)">
      <summary>
        <para>Records multiple undoable objects in a single call. This is the same as calling Undo.RecordObject multiple times.</para>
        <para>See Also: Undo.RecordObject.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.ClearUndo(UnityEngine.Object)">
      <summary>
        <para>Removes aall Undo operation for the identifier object registered using Undo.RegisterCompleteObjectUndo from the undo stack.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.PerformUndo">
      <summary>
        <para>Perform an Redo operation.</para>
        <para>This performs a undo operation. It is the same as clicking on the Edit-&amp;gt;Undo menu.
See Also: <see cref="Undo.PerformRedo">PerformRedo</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.PerformRedo">
      <summary>
        <para>Perform an Redo operation.</para>
        <para>This performs a redo operation. It is the same as clicking on the Edit-&amp;gt;Redo menu.
See Also: <see cref="Undo.PerformUndo">PerformUndo</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.IncrementCurrentGroup">
      <summary>
        <para>Unity automatically groups undo operations by the current group index.</para>
        <para>The current group is automatically incremented based on events eg. mouse down events, executing a menu item increments the current group. But sometimes it is necessary to manually group undo operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.GetCurrentGroup">
      <summary>
        <para>Unity automatically groups undo operations by the current group index.</para>
        <para>The current group index is automatically increased on mouse down, clicking on menu items and other operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.RevertAllInCurrentGroup">
      <summary>
        <para>Performs the last undo operation but does not record a redo operation.</para>
        <para>This is useful when you want to simply revert the last performed action. In Unity the escape is commonly used to execute this function.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.RevertAllDownToGroup(System.Int32)">
      <summary>
        <para>Performs all undo operations up to the group index without storing a redo operation in the process.</para>
        <para>See Also: Undo.GetCurrentGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.CollapseUndoOperations(System.Int32)">
      <summary>
        <para>Collapses all undo operation up to group index together into one step.</para>
        <para>This is used by the color picked to combine all color modifications into a single step once the color picker is closed, while they are seperate operations when the color picker is still open.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Undo.FlushUndoRecordObjects">
      <summary>
        <para>Ensure objects recorded using <see cref="Undo.RecordObject">RecordObject</see> or ::ref:RecordObjects are registered as an undoable action. In most cases there is no reason to invoke <see cref="Undo.FlushUndoRecordObjects">FlushUndoRecordObjects</see> since it's automatically done right after mouse-up and certain other events that conventionally marks the end of an action.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Undo.undoRedoPerformed" />
    <member name="F:UnityEditor.Undo.willFlushUndoRecord">
      <summary>
        <para>Invoked before the Undo system performs a flush.</para>
        <para>See Also: <see cref="Undo.FLushUndoRecordObjects">FLushUndoRecordObjects</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Undo.postprocessModifications" />
    <member name="T:UnityEditor.UndoPropertyModification">
      <summary>
        <para>See Also: Undo.postprocessModifications.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UndoPropertyModification.propertyModification" />
    <member name="P:UnityEditor.UndoPropertyModification.keepPrefabOverride" />
    <member name="T:UnityEditor.ExportPackageOptions">
      <summary>
        <para>Export package option. Multiple options can be combined together using the | operator.</para>
        <para>See Also: AssetDatabase.ExportPackage.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Default">
      <summary>
        <para>Default mode. Will not include dependencies or subdirectories nor include Library assets unless specifically included in the asset list.</para>
        <para>The export process will happen synchronously, ie. the ExportPackage function will not return until the package is fully exported.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Interactive">
      <summary>
        <para>The export operation will be run asynchronously and reveal the exported package file in a file browser window after the export is finished.</para>
        <para>Note. When interactive mode is enabled, ExportPackage will return immediately before the package file has been created.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.Recurse">
      <summary>
        <para>Will recurse through any subdirectories listed and include all assets inside them.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.IncludeDependencies">
      <summary>
        <para>In addition to the assets paths listed, all dependent assets will be included as well.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ExportPackageOptions.IncludeLibraryAssets">
      <summary>
        <para>The exported package will include all library assets, ie. the project settings located in the Library folder of the project.</para>
        <para>This is useful for exporting an entire project in a single unitypackage:</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorMaterialUtility" />
    <member name="M:UnityEditor.EditorMaterialUtility.#ctor" />
    <member name="M:UnityEditor.EditorMaterialUtility.ResetDefaultTextures(UnityEngine.Material,System.Boolean)" />
    <member name="M:UnityEditor.EditorMaterialUtility.SetShaderDefaults(UnityEngine.Shader,System.String[],UnityEngine.Texture[])" />
    <member name="T:UnityEditor.PSP2BuildSubtarget">
      <summary>
        <para>Target PS Vita build type.</para>
        <para>See Also: EditorUserBuildSettings.psp2BuildSubtarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PSP2BuildSubtarget.PCHosted">
      <summary>
        <para>For general development, creates a build stored on the host PC which the Vita reads from.</para>
        <para>See Also: EditorUserBuildSettings.psp2BuildSubtarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PSP2BuildSubtarget.Package">
      <summary>
        <para>For building a PS Vita package that can be installed on a PS Vita memory card.</para>
        <para>See Also: EditorUserBuildSettings.psp2BuildSubtarget.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SCEBuildSubtarget">
      <summary>
        <para>Target PS3 or PS4 build type.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SCEBuildSubtarget.PCHosted">
      <summary>
        <para>Build package that it's hosted on the PC.</para>
        <para>See Also: EditorUserBuildSettings.sceBuildSubtarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SCEBuildSubtarget.HddTitle">
      <summary>
        <para>Build a package suited for DLC Submission.</para>
        <para>See Also: EditorUserBuildSettings.sceBuildSubtarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SCEBuildSubtarget.BluRayTitle">
      <summary>
        <para>Build a package suited for BluRay Submission.</para>
        <para>See Also: EditorUserBuildSettings.sceBuildSubtarget.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.XboxBuildSubtarget">
      <summary>
        <para>Target Xbox build type.</para>
        <para>See Also: EditorUserBuildSettings.xboxBuildSubtarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Development">
      <summary>
        <para>Development player.</para>
        <para>See Also: EditorUserBuildSettings.xboxBuildSubtarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Master">
      <summary>
        <para>Master player (submission-proof).</para>
        <para>See Also: EditorUserBuildSettings.xboxBuildSubtarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxBuildSubtarget.Debug">
      <summary>
        <para>Debug player (for building with source code).</para>
        <para>See Also: EditorUserBuildSettings.xboxBuildSubtarget.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.XboxRunMethod">
      <summary>
        <para>Xbox 360 run method.</para>
        <para>See Also: EditorUserBuildSettings.xboxRunMethod.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxRunMethod.HDD">
      <summary>
        <para>Copy to hard drive.</para>
        <para>See Also: EditorUserBuildSettings.xboxRunMethod.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxRunMethod.DiscEmuFast">
      <summary>
        <para>Disc emulation (Fast).</para>
        <para>See Also: EditorUserBuildSettings.xboxRunMethod.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxRunMethod.DiscEmuAccurate">
      <summary>
        <para>Disc emulation (Accurate).</para>
        <para>See Also: EditorUserBuildSettings.xboxRunMethod.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.XboxOneRunMethod">
      <summary>
        <para>Select Xbox One Run Method.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOneRunMethod.Push">
      <summary>
        <para>Run with project on Xbox One disk.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.XboxOneRunMethod.Pull">
      <summary>
        <para>Run with project on local disk.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidBuildSubtarget">
      <summary>
        <para>Target Android build platform.</para>
        <para>See Also: <see cref="EditorUserBuildSettings-androidBuildSubtarget">EditorUserBuildSettings.androidBuildSubtarget</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSubtarget.Generic">
      <summary>
        <para>Don't override texture compression.</para>
        <para>See Also: <see cref="EditorUserBuildSettings-androidBuildSubtarget">EditorUserBuildSettings.androidBuildSubtarget</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSubtarget.DXT">
      <summary>
        <para>S3 texture compression, nonspecific to DXT variant. Supported on devices running Nvidia Tegra2 platform, including Motorala Xoom, Motorola Atrix, Droid Bionic, and others.</para>
        <para>See Also: <see cref="EditorUserBuildSettings-androidBuildSubtarget">EditorUserBuildSettings.androidBuildSubtarget</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSubtarget.PVRTC">
      <summary>
        <para>PowerVR texture compression. Available in devices running PowerVR SGX530/540 GPU, such as Motorola DROID series; Samsung Galaxy S, Nexus S, and Galaxy Tab; and others.</para>
        <para>See Also: <see cref="EditorUserBuildSettings-androidBuildSubtarget">EditorUserBuildSettings.androidBuildSubtarget</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSubtarget.ATC">
      <summary>
        <para>ATI texture compression. Available on devices running Adreno GPU, including HTC Nexus One, Droid Incredible, EVO, and others.</para>
        <para>See Also: <see cref="EditorUserBuildSettings-androidBuildSubtarget">EditorUserBuildSettings.androidBuildSubtarget</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSubtarget.ETC">
      <summary>
        <para>ETC1 texture compression (or RGBA16 for textures with alpha), supported by all devices.</para>
        <para>See Also: <see cref="EditorUserBuildSettings-androidBuildSubtarget">EditorUserBuildSettings.androidBuildSubtarget</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidBuildSubtarget.ETC2" />
    <member name="F:UnityEditor.AndroidBuildSubtarget.ASTC" />
    <member name="T:UnityEditor.FlashBuildSubtarget">
      <summary>
        <para>Target Flash build player.</para>
        <para>See Also: EditorUserBuildSettings.flashBuildSubTarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot2">
      <summary>
        <para>FlashPlayer 11.2 SWF version 15.</para>
        <para>See Also: EditorUserBuildSettings.flashBuildSubTarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot3">
      <summary>
        <para>FlashPlayer 11.3 SWF version 16.</para>
        <para>See Also: EditorUserBuildSettings.flashBuildSubTarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot4">
      <summary>
        <para>FlashPlayer 11.4 SWF version 17.</para>
        <para>See Also: EditorUserBuildSettings.flashBuildSubTarget.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot5" />
    <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot6" />
    <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot7" />
    <member name="F:UnityEditor.FlashBuildSubtarget.Flash11dot8" />
    <member name="T:UnityEditor.BlackBerryBuildSubtarget">
      <summary>
        <para>Texture Compression Types.</para>
        <para>ETC1 can be used for universal BAR files or PVRTC and ATC can be used for targeting specific hardware.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BlackBerryBuildSubtarget.Generic">
      <summary>
        <para>Don't override texture compression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BlackBerryBuildSubtarget.PVRTC">
      <summary>
        <para>PowerVR texture compression. Available on BlackBerry devices running PowerVR GPU's.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BlackBerryBuildSubtarget.ATC">
      <summary>
        <para>ATI texture compression. Available on BlackBerry devices running Adreno GPU.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BlackBerryBuildSubtarget.ETC">
      <summary>
        <para>ETC1 texture compression (or RGBA16 for textures with alpha), supported by all devices.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.BlackBerryBuildType">
      <summary>
        <para>Build types available for BlackBerry.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BlackBerryBuildType.Debug">
      <summary>
        <para>Build type for local testing purposes.</para>
        <para>This BuildType requires a debug token to be imported in the editor and deployed to the device.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.BlackBerryBuildType.Submission">
      <summary>
        <para>Signed build used for submission to BlackBerry AppWorld.</para>
        <para>This build should only be used for final submission.  When using submission builds you will not have access to any log files.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorUserBuildSettings" />
    <member name="M:UnityEditor.EditorUserBuildSettings.SwitchActiveBuildTarget(UnityEditor.BuildTarget)">
      <summary>
        <para>Select a new build target to be active.</para>
        <para>
          <i>
            <em>Note:</em>
          </i> This method is not available when running the Editor in <see href="http://docs.unity3d.com/ScriptReference/../Manual/CommandLineArguments.html">batch mode</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.GetBuildLocation(UnityEditor.BuildTarget)">
      <summary>
        <para>Get the current location for the build.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUserBuildSettings.SetBuildLocation(UnityEditor.BuildTarget,System.String)">
      <summary>
        <para>Set a new location for the build.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.EditorUserBuildSettings.activeBuildTargetChanged">
      <summary>
        <para>Triggered in response to SwitchActiveBuildTarget.</para>
        <para>See Also: System.Action.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.selectedBuildTargetGroup">
      <summary>
        <para>The currently selected build target group.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.selectedStandaloneTarget">
      <summary>
        <para>The currently selected target for a standalone build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.flashBuildSubtarget" />
    <member name="P:UnityEditor.EditorUserBuildSettings.psp2BuildSubtarget">
      <summary>
        <para>PS Vita Build subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.sceBuildSubtarget">
      <summary>
        <para>SCE Build subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.explicitNullChecks">
      <summary>
        <para>Are null references actively checked?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.enableHeadlessMode" />
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxBuildSubtarget">
      <summary>
        <para>Xbox Build subtarget.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.xboxRunMethod">
      <summary>
        <para>Selected Xbox Run Method.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.androidBuildSubtarget">
      <summary>
        <para>Android platform options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.selectedMetroTarget" />
    <member name="P:UnityEditor.EditorUserBuildSettings.metroSDK" />
    <member name="P:UnityEditor.EditorUserBuildSettings.metroGenerateReferenceProjects">
      <summary>
        <para>Generate and reference C# projects from your main solution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.blackberryBuildSubtarget">
      <summary>
        <para>The texture compression type to be used when building.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.blackberryBuildType">
      <summary>
        <para>The build type to be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerStreamed">
      <summary>
        <para>Select the streaming option for a webplayer build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.webPlayerOfflineDeployment">
      <summary>
        <para>Build the webplayer along with the UnityObject.js file (so it doesn't need to be downloaded).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.activeBuildTarget">
      <summary>
        <para>The currently active build target.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.activeScriptCompilationDefines">
      <summary>
        <para>DEFINE directives for the compiler.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.development">
      <summary>
        <para>Enables a development build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.connectProfiler">
      <summary>
        <para>Start the player with a connection to the profiler.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.allowDebugging">
      <summary>
        <para>Enable source-level debuggers to connect.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.appendProject">
      <summary>
        <para>Append (rather than replace) the build of an iOS Xcode project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.symlinkLibraries">
      <summary>
        <para>Symlink runtime libraries with an iOS Xcode project.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.EditorUserBuildSettings.installInBuildFolder">
      <summary>
        <para>Place the built player in the build folder.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.IconDrawStyle" />
    <member name="F:UnityEditor.IconDrawStyle.NonTexture" />
    <member name="F:UnityEditor.IconDrawStyle.Texture" />
    <member name="T:UnityEditor.AssetMoveResult" />
    <member name="F:UnityEditor.AssetMoveResult.DidNotMove">
      <summary>
        <para>Tells the internal implementation that the asset was not moved physically on disk by the script.</para>
        <para>This means that it is safe for the internal implementation to move the asset.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.FailedMove">
      <summary>
        <para>Tells the internal implementation that the script could not move the assets.</para>
        <para>Unity should not attempt to move the asset nor should it update its internal representation of the assets position on disk.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetMoveResult.DidMove">
      <summary>
        <para>Tells the internal implementation that the script moved the asset physically on disk.</para>
        <para>The internal implementation will not try to move the asset on disk, but will move it in the internal database to keep consistency.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetDeleteResult" />
    <member name="F:UnityEditor.AssetDeleteResult.DidNotDelete">
      <summary>
        <para>Tells the internal implementation that the callback did not delete the asset. The asset will be delete by the internal implementation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.FailedDelete">
      <summary>
        <para>Tells Unity that the file cannot be deleted and Unity should leave it alone.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AssetDeleteResult.DidDelete">
      <summary>
        <para>Tells Unity that the asset was deleted by the callback. Unity will not try to delete the asset, but will delete the cached version and preview file.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MonoImporter" />
    <member name="M:UnityEditor.MonoImporter.#ctor" />
    <member name="M:UnityEditor.MonoImporter.SetDefaultReferences(System.String[],UnityEngine.Object[])" />
    <member name="M:UnityEditor.MonoImporter.GetAllRuntimeMonoScripts" />
    <member name="M:UnityEditor.MonoImporter.SetExecutionOrder(UnityEditor.MonoScript,System.Int32)" />
    <member name="M:UnityEditor.MonoImporter.GetExecutionOrder(UnityEditor.MonoScript)" />
    <member name="M:UnityEditor.MonoImporter.GetScript" />
    <member name="M:UnityEditor.MonoImporter.GetDefaultReference(System.String)" />
    <member name="T:UnityEditor.ClipAnimationMaskType">
      <summary>
        <para>AnimationClip mask options for <see cref="ModelImporterClipAnimation">ModelImporterClipAnimation</see>.</para>
        <para>Mask can be used to specify which transforms animation should be imported when generating the clip.
See Also: ModelImporterClipAnimation.maskType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.CreateFromThisModel">
      <summary>
        <para>A mask containing all the transform in the file will be created internally.</para>
        <para>For Humanoid rig, unity will convert all the transforms animation into muscle animation, these transforms cannot be edited in the mask.
See Also: ModelImporterClipAnimation.maskType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ClipAnimationMaskType.CopyFromOther">
      <summary>
        <para>Use a mask from your project to specify which transforms animation should be imported.</para>
        <para>See Also: ModelImporterClipAnimation.maskType.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterClipAnimation">
      <summary>
        <para>Animation clips to split animation into.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.takeName">
      <summary>
        <para>Take name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.name">
      <summary>
        <para>Clip name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.firstFrame">
      <summary>
        <para>First frame of the clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lastFrame">
      <summary>
        <para>Last frame of the clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.wrapMode">
      <summary>
        <para>The wrap mode of the animation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loop">
      <summary>
        <para>Is the clip a looping animation?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.rotationOffset">
      <summary>
        <para>Offset in degrees to the root rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.heightOffset">
      <summary>
        <para>Offset to the vertical root position.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.cycleOffset">
      <summary>
        <para>Offset to the cycle of a looping animation, if a different time in it is desired to be the start.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loopTime">
      <summary>
        <para>Enable to make the clip loop.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.loopPose">
      <summary>
        <para>Enable to make the motion loop seamlessly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootRotation">
      <summary>
        <para>Enable to make root rotation be baked into the movement of the bones. Disable to make root rotation be stored as root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootHeightY">
      <summary>
        <para>Enable to make vertical root motion be baked into the movement of the bones. Disable to make vertical root motion be stored as root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.lockRootPositionXZ">
      <summary>
        <para>Enable to make horizontal root motion be baked into the movement of the bones. Disable to make horizontal root motion be stored as root motion.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalOrientation">
      <summary>
        <para>Keeps the vertical position as it is authored in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionY">
      <summary>
        <para>Keeps the vertical position as it is authored in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.keepOriginalPositionXZ">
      <summary>
        <para>Keeps the vertical position as it is authored in the source file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.heightFromFeet">
      <summary>
        <para>Keeps the feet aligned with the root transform position.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.mirror">
      <summary>
        <para>Mirror left and right in this clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskType">
      <summary>
        <para>Define mask type.</para>
        <para>A mask can be used to discard transform when importing a clip to reduce memory footprint for this clip.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporterClipAnimation.maskSource">
      <summary>
        <para>The AvatarMask used to mask transforms during the import process.</para>
        <para>A mask can be used to discard transform when importing a clip to reduce memory footprint for this clip. A source mask is only needed if ModelImporterClipAnimation.maskType is set to ClipAnimationMaskType.CopyFromOther
See Also: <see cref="ClipAnimationMaskType">ClipAnimationMaskType</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMaterialName">
      <summary>
        <para>Material naming options for <see cref="ModelImporter">ModelImporter</see>.</para>
        <para>See Also: ModelImporter.materialName.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnTextureName">
      <summary>
        <para>Use material names in the form &amp;lt;textureName&amp;gt;.mat.</para>
        <para>Material names will be accepted in the form</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnMaterialName">
      <summary>
        <para>Use a material name of the form <i>&amp;lt;materialName&amp;gt;.mat</i>.</para>
        <para>Material names will be accepted in the form</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialName.BasedOnModelNameAndMaterialName">
      <summary>
        <para>Use material names in the form <i>&amp;lt;modelFileName&amp;gt;-&amp;lt;materialName&amp;gt;.mat</i>.</para>
        <para>Material names will be accepted in the form</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMaterialSearch">
      <summary>
        <para>Material search options for <see cref="ModelImporter">ModelImporter</see>.</para>
        <para>See Also: ModelImporter.materialSearch.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.Local">
      <summary>
        <para>Searh in local Materials forlder.</para>
        <para>Unity will try to locate the material in local Materials folder, i.e. in path modelFilePath/Materials.
For example: if model is Assets/Model/MyModel.fbx, then it will try to locate the material in Assets/Model/Materials folder.
See Also: ModelImporter.materialSearch.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.RecursiveUp">
      <summary>
        <para>Recursive-up search in Materials forlders.</para>
        <para>Unity will perform a recursive-up search for the material in all Materials folders up to the Assets folder.
For example: if model is Assets/Model/MyModel.fbx, then it will try to locate the material in these folders in this order:
Assets/Model/Materials, Assets/Materials.
See Also: ModelImporter.materialSearch.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMaterialSearch.Everywhere">
      <summary>
        <para>Searh in all project.</para>
        <para>Unity will search for the material in all folders of Unity project.
See Also: ModelImporter.materialSearch.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterTangentSpaceMode">
      <summary>
        <para>Animation generation options for <see cref="ModelImporter">ModelImporter</see>.</para>
        <para>See Also: <see cref="ModelImporter-normalImportMode">ModelImporter.normalImportMode</see>, <see cref="ModelImporter-tangentImportMode">ModelImporter.tangentImportMode</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangentSpaceMode.Import">
      <summary>
        <para>Import normals/tangents from file.</para>
        <para>See Also: <see cref="ModelImporter-normalImportMode">ModelImporter.normalImportMode</see>, <see cref="ModelImporter-tangentImportMode">ModelImporter.tangentImportMode</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangentSpaceMode.Calculate">
      <summary>
        <para>Calculate normals/tangents.</para>
        <para>It is recommended to use Import mode as long as you can - use Calculate
only if you don't have normals/tangents in your file.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterTangentSpaceMode.None">
      <summary>
        <para>Strip normals/tangents.</para>
        <para>If normals/tangents are not needed by all shaders, this can be a simple
way to reduce build size a little.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterMeshCompression">
      <summary>
        <para>Mesh compression options for <see cref="ModelImporter">ModelImporter</see>.</para>
        <para>Compressing meshes saves space in the built game, but more compression
introduces more artifacts in vertex data.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Off">
      <summary>
        <para>No mesh compression (default).</para>
        <para>See Also: ModelImporter.meshCompression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Low">
      <summary>
        <para>Low amount of mesh compression.</para>
        <para>Vertex positions, normals/tangents and UVs will be quantized to
respectively 20, 8, 16 bits per component. Skinning information
will be compressed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.Medium">
      <summary>
        <para>Medium amount of mesh compression.</para>
        <para>Vertex positions, normals/tangents and UVs will be quantized to
respectively 16, 8, 10 bits per component. Skinning information
will be compressed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterMeshCompression.High">
      <summary>
        <para>High amount of mesh compression.</para>
        <para>Vertex positions, normals/tangents and UVs will be quantized to
respectively 10, 6, 8 bits per component. Skinning information
will be compressed.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterAnimationCompression">
      <summary>
        <para>Animation compression options for <see cref="ModelImporter">ModelImporter</see>.</para>
        <para>Compressing animations saves space in the built game, but more compression
introduces more artifacts in the animations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.Off">
      <summary>
        <para>No animation compression.</para>
        <para>See Also: ModelImporter.animationCompression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReduction">
      <summary>
        <para>Perform keyframe reduction (default).</para>
        <para>See Also: ModelImporter.animationCompression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.KeyframeReductionAndCompression">
      <summary>
        <para>Perform keyframe reduction and compression.</para>
        <para>See Also: ModelImporter.animationCompression.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationCompression.Optimal" />
    <member name="T:UnityEditor.ModelImporterGenerateAnimations">
      <summary>
        <para>Animation generation options for <see cref="ModelImporter">ModelImporter</see>. These options relate to the legacy Animation system, they should only be used when ModelImporter.animationType==ModelImporterAnimationType.Legacy.</para>
        <para>See Also: ModelImporter.generateAnimations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.None">
      <summary>
        <para>Do not generate animations.</para>
        <para>See Also: ModelImporter.generateAnimations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.GenerateAnimations">
      <summary>
        <para>Default animation import mode (All animations are stored in the root object).</para>
        <para>See Also: ModelImporter.generateAnimations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InRoot">
      <summary>
        <para>Generate animations in the transform root objects.</para>
        <para>See Also: ModelImporter.generateAnimations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InOriginalRoots">
      <summary>
        <para>Generate animations in the root objects of the animation package.</para>
        <para>See Also: ModelImporter.generateAnimations.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterGenerateAnimations.InNodes">
      <summary>
        <para>Generate animations in the objects that animate.</para>
        <para>See Also: ModelImporter.generateAnimations.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporterAnimationType">
      <summary>
        <para>Animation mode for <see cref="ModelImporter">ModelImporter</see>.</para>
        <para>See Also: ModelImporter.animationType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.None">
      <summary>
        <para>Generate no animation data.</para>
        <para>See Also: ModelImporter.animationType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Legacy">
      <summary>
        <para>Generate a legacy animation type.</para>
        <para>See Also: ModelImporter.animationType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Generic">
      <summary>
        <para>Generate a generic animator.</para>
        <para>See Also: ModelImporter.animationType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ModelImporterAnimationType.Human">
      <summary>
        <para>Generate a human animator.</para>
        <para>See Also: ModelImporter.animationType.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ModelImporter">
      <summary>
        <para>Model importer lets you modify <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Mesh.html">model</see> import settings from editor scripts.</para>
        <para>Settings of this class match the ones exposed in <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-Mesh.html">Mesh Import Settings</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importMaterials">
      <summary>
        <para>Import materials from file.</para>
        <para>When set to false ModelImporter will use default material (Default-Diffuse.mat) instead of imported materials,
otherwise it will find existing or create new materials based on <see cref="ModelImporter-materialName">materialName</see> and <see cref="ModelImporter-materialSearch">materialSearch</see> options.
See Also: <see cref="ModelImporter-materialName">materialName</see>, <see cref="ModelImporter-materialSearch">materialSearch</see> options.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.materialName">
      <summary>
        <para>Material naming setting.</para>
        <para>When importing new model Unity will generate material name based on this setting and then it will try to locate
existing material with such name, if no such material exists Unity will create a new material by that name.
See Also: <see cref="ModelImporterMaterialName">ModelImporterMaterialName</see>, <see cref="ModelImporter-materialSearch">materialSearch</see>, <see cref="ModelImporter-importMaterials">importMaterials</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.materialSearch">
      <summary>
        <para>Existing material search setting.</para>
        <para>When importing new model Unity will try to find existing materials in a set of folders based on this setting.
See Also: <see cref="ModelImporterMaterialSearch">ModelImporterMaterialSearch</see>, <see cref="ModelImporter-materialName">materialName</see>, <see cref="ModelImporter-importMaterials">importMaterials</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.globalScale">
      <summary>
        <para>Global scale factor for importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isUseFileUnitsSupported">
      <summary>
        <para>Is useFileUnits supported for this asset.</para>
        <para>UseFileUnits is supported only on .max files.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.useFileUnits">
      <summary>
        <para>Detect file units and import as 1FileUnit=1UnityUnit, otherwise it will import as 1cm=1UnityUnit.</para>
        <para>This setting is used only for .max files. It was introduced for backwards compatibility:
there is a bug in some FBX 2011 plugins - they fail to pick up file units and export everything
as 1unit=1cm. We fixed that problem by setting the units manually, but that breaks
projects which were built with FBX 2011 plugins already, so useFileUnits was introduced as a
solution. Set it to false if you want to default to centimeters in FBX exporter.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importBlendShapes">
      <summary>
        <para>Controls import of BlendShapes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.addCollider">
      <summary>
        <para>Add <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-MeshCollider.html">mesh colliders</see> to imported meshes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.normalSmoothingAngle">
      <summary>
        <para>Smoothing angle for calculating normals.</para>
        <para>How sharp the edge has to be to be turned into a hard edge when calculating normals.
This setting is only used when normalImportMode is set to Calculate.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.splitTangentsAcrossSeams">
      <summary>
        <para>Should tangents be split across UV seams.</para>
        <para>This setting is only used when tangentImportMode is set to Calculate.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.swapUVChannels">
      <summary>
        <para>Swap primary and secondary UV channels when importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateSecondaryUV">
      <summary>
        <para>Generate secondary UV set for lightmapping.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVAngleDistortion">
      <summary>
        <para>Threshold for angle distortion when generating secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVAreaDistortion">
      <summary>
        <para>Threshold for area distortion when generating secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVHardAngle">
      <summary>
        <para>Hard angle for generating secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.secondaryUVPackMargin">
      <summary>
        <para>Margin to be left between charts when packing secondary UV.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.generateAnimations">
      <summary>
        <para>Animation generation options.</para>
        <para>See Also: <see cref="ModelImporterGenerateAnimations">ModelImporterGenerateAnimations</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.transformPaths">
      <summary>
        <para>Generates the list of all imported Transforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.referencedClips">
      <summary>
        <para>Generates the list of all imported Animations.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isReadable">
      <summary>
        <para>Are mesh vertices and indices accessible from script?</para>
        <para>Making a mesh readable will keep two copies of it in memory, one for rendering and one
in system memory for script access. Setting isReadable to false therefore saves memory.
Scaling a mesh with different amounts along the three axes (i.e. non-uniform scaling)
requires the mesh to be readable for correct lighting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.optimizeMesh">
      <summary>
        <para>Vertex optimization setting.</para>
        <para>The vertices and indices will be reordered for better GPU performance.
Techniques that require strict vertex ordering like mesh morphing or special particle mesh emitter effects should have this option disabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.normalImportMode">
      <summary>
        <para>Normals import mode.</para>
        <para>See Also: <see cref="ModelImporterTangentSpaceMode">ModelImporterTangentSpaceMode</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.tangentImportMode">
      <summary>
        <para>Tangents import mode.</para>
        <para>See Also: <see cref="ModelImporterTangentSpaceMode">ModelImporterTangentSpaceMode</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.bakeIK">
      <summary>
        <para>Bake Inverse Kinematics (IK) when importing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isBakeIKSupported">
      <summary>
        <para>Is Bake Inverse Kinematics (IK) supported by this importer.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.isTangentImportSupported">
      <summary>
        <para>Is import of tangents supported by this importer.</para>
        <para>See Also: <see cref="ModelImporter-tangentImportMode">tangentImportMode</see>, <see cref="ModelImporterTangentSpaceMode">ModelImporterTangentSpaceMode</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.meshCompression">
      <summary>
        <para>Mesh compression setting.</para>
        <para>Compressing meshes saves space in the built game, but more compression
introduces more artifacts in vertex data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.importAnimation">
      <summary>
        <para>Import animation from file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.optimizeGameObjects">
      <summary>
        <para>Animation optimization setting.</para>
        <para>In the GameObjects hierarchy of a character, the GameObjects which only contain Transform component, will be optimized out unless they are specified in <see cref="ModelImporter-extraExposedTransformPaths">extraExposedTransformPaths</see> for better CPU performance. The remaining GameObjects hierarchy will be flattened.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.extraExposedTransformPaths">
      <summary>
        <para>Animation optimization setting.</para>
        <para>Specify the paths of the Transforms which are not supposed to be optimized out when <see cref="ModelImporter-optimizeGameObjects">optimizeGameObjects</see> is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationCompression">
      <summary>
        <para>Animation compression setting.</para>
        <para>Compressing animations saves space in the built game, but more compression
introduces more artifacts in the animation data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationRotationError">
      <summary>
        <para>Allowed error of animation rotation compression.</para>
        <para>Allowed error is defined in angle (in degrees) between compressed and
original quaternions on a curve. This settings used only when animation keyframe
reduction is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationPositionError">
      <summary>
        <para>Allowed error of animation position compression.</para>
        <para>Allowed error is defined in distance (in percents) between compressed and
original positions on a curve. This settings used only when animation keyframe
reduction is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationScaleError">
      <summary>
        <para>Allowed error of animation scale compression.</para>
        <para>Allowed error is defined in distance (in percents) between compressed and
original scale on a curve. This settings used only when animation keyframe
reduction is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationWrapMode">
      <summary>
        <para>The default wrap mode for the generated animation clips.</para>
        <para>See Also: <see cref="WrapMode">WrapMode</see>, <see cref="AnimationClip-wrapMode">AnimationClip.wrapMode</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.animationType">
      <summary>
        <para>Animator generation mode.</para>
        <para>See Also: <see cref="ModelImporterAnimationType">ModelImporterAnimationType</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ModelImporter.clipAnimations">
      <summary>
        <para>Animation clips to split animation into.</para>
        <para>See Also: <see cref="ModelImporterClipAnimation">ModelImporterClipAnimation</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterFormat">
      <summary>
        <para>Imported texture format for <see cref="TextureImporter">TextureImporter</see>.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticCompressed">
      <summary>
        <para>Choose a compressed format automatically.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.Automatic16bit">
      <summary>
        <para>Choose a 16 bit format automatically.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.AutomaticTruecolor">
      <summary>
        <para>Choose a Truecolor format automatically.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT1">
      <summary>
        <para>DXT1 compresed texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.DXT5">
      <summary>
        <para>DXT5 compresed texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGB16">
      <summary>
        <para>RGB 16 bit texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGB24">
      <summary>
        <para>RGB 24 bit texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.Alpha8">
      <summary>
        <para>Alpha 8 bit texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ARGB16">
      <summary>
        <para>RGBA 16 bit texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBA32">
      <summary>
        <para>RGBA 32 bit texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ARGB32">
      <summary>
        <para>ARGB 32 bit texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.RGBA16">
      <summary>
        <para>RGBA 16 bit (4444) texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB2">
      <summary>
        <para>PowerVR (iPhone) 2 bits/pixel compressed color texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA2">
      <summary>
        <para>PowerVR (iPhone) 2 bits/pixel compressed with alpha channel texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGB4">
      <summary>
        <para>PowerVR (iPhone) 4 bits/pixel compressed color texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.PVRTC_RGBA4">
      <summary>
        <para>PowerVR (iPhone) 4 bits/pixel compressed with alpha channel texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC_RGB4">
      <summary>
        <para>ETC (GLES2.0) 4 bits/pixel compressed RGB texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATC_RGB4">
      <summary>
        <para>ATC (Android) 4 bits/pixel compressed RGB texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATC_RGBA8">
      <summary>
        <para>ATC (Android) 8 bits/pixel compressed RGBA texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATF_RGB_DXT1">
      <summary>
        <para>Flash-specific RGB DXT1 compressed color texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATF_RGBA_JPG">
      <summary>
        <para>Flash-specific RGBA JPG-compressed color texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ATF_RGB_JPG">
      <summary>
        <para>Flash-specific RGB JPG-compressed color texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_R">
      <summary>
        <para>ETC2/EAC compressed 4 bits / pixel unsigned R texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_R_SIGNED">
      <summary>
        <para>ETC2/EAC compressed 4 bits / pixel signed R texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_RG">
      <summary>
        <para>ETC2/EAC compressed 8 bits / pixel unsigned RG texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.EAC_RG_SIGNED">
      <summary>
        <para>ETC2/EAC compressed 4 bits / pixel signed RG texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4">
      <summary>
        <para>ETC2 compressed 4 bits / pixel RGB texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGB4_PUNCHTHROUGH_ALPHA">
      <summary>
        <para>ETC2 compressed 4 bits / pixel RGB + 1-bit alpha texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ETC2_RGBA8">
      <summary>
        <para>ETC2 compressed 8 bits / pixel RGBA texture format.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_4x4">
      <summary>
        <para>ASTC compressed RGB texture format, 4x4 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_5x5">
      <summary>
        <para>ASTC compressed RGB texture format, 5x5 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_6x6">
      <summary>
        <para>ASTC compressed RGB texture format, 6x6 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_8x8">
      <summary>
        <para>ASTC compressed RGB texture format, 8x8 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_10x10">
      <summary>
        <para>ASTC compressed RGB texture format, 10x10 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGB_12x12">
      <summary>
        <para>ASTC compressed RGB texture format, 12x12 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_4x4">
      <summary>
        <para>ASTC compressed RGBA texture format, 4x4 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_5x5">
      <summary>
        <para>ASTC compressed RGBA texture format, 5x5 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_6x6">
      <summary>
        <para>ASTC compressed RGBA texture format, 6x6 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_8x8">
      <summary>
        <para>ASTC compressed RGBA texture format, 8x8 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_10x10">
      <summary>
        <para>ASTC compressed RGBA texture format, 10x10 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterFormat.ASTC_RGBA_12x12">
      <summary>
        <para>ASTC compressed RGBA texture format, 12x12 block size.</para>
        <para>See Also: TextureImporter.textureFormat.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterMipFilter">
      <summary>
        <para>Mip map filter for <see cref="TextureImporter">TextureImporter</see>.</para>
        <para>See Also: TextureImporter.mipmapFilter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterMipFilter.BoxFilter">
      <summary>
        <para>Box mipmap filter.</para>
        <para>See Also: TextureImporter.mipmapFilter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterMipFilter.KaiserFilter">
      <summary>
        <para>Kaiser mipmap filter.</para>
        <para>See Also: TextureImporter.mipmapFilter.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterGenerateCubemap">
      <summary>
        <para>Cubemap generation mode for <see cref="TextureImporter">TextureImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.None">
      <summary>
        <para>Do not generate cubemap (default).</para>
        <para>See Also: TextureImporter.generateCubemap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.Spheremap">
      <summary>
        <para>Generate cubemap from spheremap texture.</para>
        <para>See Also: TextureImporter.generateCubemap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.Cylindrical">
      <summary>
        <para>Generate cubemap from cylindrical texture.</para>
        <para>See Also: TextureImporter.generateCubemap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.SimpleSpheremap">
      <summary>
        <para>Generate cubemap from spheremap texture.</para>
        <para>See Also: TextureImporter.generateCubemap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.NiceSpheremap">
      <summary>
        <para>Generate cubemap from spheremap texture.</para>
        <para>See Also: TextureImporter.generateCubemap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterGenerateCubemap.FullCubemap">
      <summary>
        <para>Generate cubemap from vertical or horizontal cross texture.</para>
        <para>See Also: TextureImporter.generateCubemap.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterNPOTScale">
      <summary>
        <para>Scaling mode for non power of two textures in <see cref="TextureImporter">TextureImporter</see>.</para>
        <para>See Also: TextureImporter.npotScale.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.None">
      <summary>
        <para>Keep non power of two textures as is.</para>
        <para>See Also: TextureImporter.npotScale.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToNearest">
      <summary>
        <para>Scale to nearest power of two.</para>
        <para>See Also: TextureImporter.npotScale.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToLarger">
      <summary>
        <para>Scale to larger power of two.</para>
        <para>See Also: TextureImporter.npotScale.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNPOTScale.ToSmaller">
      <summary>
        <para>Scale to smaller power of two.</para>
        <para>See Also: TextureImporter.npotScale.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterNormalFilter">
      <summary>
        <para>Normal map filtering mode for <see cref="TextureImporter">TextureImporter</see>.</para>
        <para>See Also: TextureImporter.normalmapFilter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNormalFilter.Standard">
      <summary>
        <para>Standard normal map filter.</para>
        <para>See Also: TextureImporter.normalmapFilter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterNormalFilter.Sobel">
      <summary>
        <para>Sobel normal map filter.</para>
        <para>See Also: TextureImporter.normalmapFilter.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterType">
      <summary>
        <para>Select this to set basic parameters depending on the purpose of your texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Image">
      <summary>
        <para>This is the most common setting used for all the textures in general.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Bump">
      <summary>
        <para>Select this to turn the color channels into a format suitable for real-time normal mapping.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.GUI">
      <summary>
        <para>Use this if your texture is going to be used on any HUD/GUI Controls.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Sprite">
      <summary>
        <para>Select this if you will be using your texture for Sprite graphics.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Cursor">
      <summary>
        <para>Use this if your texture is going to be used as a cursor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Reflection">
      <summary>
        <para>Also known as Cube Maps, used to create reflections on textures.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Cookie">
      <summary>
        <para>This sets up your texture with the basic parameters used for the Cookies of your lights.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Lightmap">
      <summary>
        <para>This sets up your texture with the parameters used by the lightmap.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TextureImporterType.Advanced">
      <summary>
        <para>Select this when you want to have specific parameters on your texture and you want to have total control over your texture.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SpriteImportMode">
      <summary>
        <para>Texture importer modes for Sprite import.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.None">
      <summary>
        <para>Graphic is not a Sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.Single">
      <summary>
        <para>Sprite is a single image section extracted automatically from the texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteImportMode.Multiple" />
    <member name="T:UnityEditor.SpriteMetaData">
      <summary>
        <para>Editor data used in producing a Sprite.</para>
        <para>See Also: <see cref="TextureImporter-spritesheet">TextureImporter.spritesheet</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.name">
      <summary>
        <para>Name of the Sprite.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.rect">
      <summary>
        <para>Bounding rectangle of the sprite's graphic within the atlas image.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.alignment">
      <summary>
        <para>Edge-relative alignment of the sprite graphic.</para>
        <para>The possible values relate to the SpriteAlignment enum as follows:</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.pivot">
      <summary>
        <para>Pivot point of the Sprite relative to its bounding rectangle.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SpriteMetaData.border">
      <summary>
        <para>Edge border size for a sprite (in pixels).</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporter">
      <summary>
        <para>Texture importer lets you modify <see cref="Texture2D">Texture2D</see> import settings from editor scripts.</para>
        <para>Settings of this class match the ones exposed in <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-TextureImporter.html">Texture Import Settings</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.#ctor" />
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32@,UnityEditor.TextureImporterFormat@,System.Int32@)">
      <summary>
        <para>Get platform specific texture settings.</para>
        <para>The values for the chosen platform are returned in the "out" parameters. The options for the platform string are "Web", "Standalone", "iPhone", "Android" and "FlashPlayer".</para>
      </summary>
      <param name="platform">The platform whose settings are required (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format of the texture.</param>
      <param name="compressionQuality">Value from 0..100, equivalent to the standard JPEG quality setting.</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.GetPlatformTextureSettings(System.String,System.Int32@,UnityEditor.TextureImporterFormat@)">
      <summary>
        <para>Get platform specific texture settings.</para>
        <para>The values for the chosen platform are returned in the "out" parameters. The options for the platform string are "Web", "Standalone", "iPhone", "Android" and "FlashPlayer".</para>
      </summary>
      <param name="platform">The platform whose settings are required (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format of the texture.</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat,System.Int32)">
      <summary>
        <para>Set specific target platform settings.</para>
        <para>The options for the platform string are "Web", "Standalone", "iPhone", "Android" and "FlashPlayer".</para>
      </summary>
      <param name="platform">The platforms whose settings are to be changed (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format for the texture.</param>
      <param name="compressionQuality">Value from 0..100, equivalent to the standard JPEG quality setting.</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetPlatformTextureSettings(System.String,System.Int32,UnityEditor.TextureImporterFormat)">
      <summary>
        <para>Set specific target platform settings.</para>
        <para>The options for the platform string are "Web", "Standalone", "iPhone", "Android" and "FlashPlayer".</para>
      </summary>
      <param name="platform">The platforms whose settings are to be changed (see below).</param>
      <param name="maxTextureSize">Maximum texture width/height in pixels.</param>
      <param name="textureFormat">Data format for the texture.</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.ClearPlatformTextureSettings(System.String)">
      <summary>
        <para>Clear specific target platform settings.</para>
        <para>The options for the platform string are "Web", "Standalone", "iPhone", "Android" and "FlashPlayer".</para>
      </summary>
      <param name="platform">The platform whose settings are to be cleared (see below).</param>
    </member>
    <member name="M:UnityEditor.TextureImporter.DoesSourceTextureHaveAlpha">
      <summary>
        <para>Does textures source image have alpha channel.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.DoesSourceTextureHaveColor">
      <summary>
        <para>Does textures source image have RGB channels.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.ReadTextureSettings(UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Read texture settings into <see cref="TextureImporterSettings">TextureImporterSettings</see> class.</para>
        <para>See Also: TextureImporterSettings.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporter.SetTextureSettings(UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Set texture importers settings from <see cref="TextureImporterSettings">TextureImporterSettings</see> class.</para>
        <para>See Also: TextureImporterSettings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureFormat">
      <summary>
        <para>Format of imported texture.</para>
        <para>See Also: <see cref="TextureImporterFormat">TextureImporterFormat</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.maxTextureSize">
      <summary>
        <para>Maximum texture size.</para>
        <para>Larger textures will be scaled down to this size at import time.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.compressionQuality">
      <summary>
        <para>Quality of Texture Compression in the range [0..100].</para>
        <para>See Also: <see cref="TextureCompressionQuality">TextureCompressionQuality</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.grayscaleToAlpha">
      <summary>
        <para>Generate alpha channel from intensity?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.generateCubemap">
      <summary>
        <para>Cubemap generation mode.</para>
        <para>See Also: <see cref="TextureImporterGenerateCubemap">TextureImporterGenerateCubemap</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.npotScale">
      <summary>
        <para>Scaling mode for non power of two textures.</para>
        <para>See Also: <see cref="TextureImporterNPOTScale">TextureImporterNPOTScale</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.isReadable">
      <summary>
        <para>Is texture data readable from scripts.</para>
        <para>Texture has to be set as "readable" in order for Texture2D.GetPixel, Texture2D.GetPixels and similar functions
to work. Textures are</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapEnabled">
      <summary>
        <para>Generate mip maps for the texture?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.borderMipmap">
      <summary>
        <para>Keep texture borders the same when generating mipmaps?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.linearTexture">
      <summary>
        <para>When in linear rendering should this texture be sampled with hardware gamma correction (sRGB) or without (linear)?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFilter">
      <summary>
        <para>Mipmap filtering mode.</para>
        <para>See Also: <see cref="TextureImporterMipFilter">TextureImporterMipFilter</see>, <see cref="TextureImporter-mipmapEnabled">mipmapEnabled</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.fadeout">
      <summary>
        <para>Fade out mip levels to gray color?</para>
        <para>See Also: <see cref="TextureImporter-mipmapEnabled">mipmapEnabled</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceStart">
      <summary>
        <para>Mip level where texture begins to fade out.</para>
        <para>See Also: <see cref="TextureImporter-mipmapEnabled">mipmapEnabled</see>, <see cref="TextureImporter-fadeout">fadeout</see>, <see cref="TextureImporter-mipmapFadeDistanceEnd">mipmapFadeDistanceEnd</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipmapFadeDistanceEnd">
      <summary>
        <para>Mip level where texture is faded out completely.</para>
        <para>See Also: <see cref="TextureImporter-mipmapEnabled">mipmapEnabled</see>, <see cref="TextureImporter-fadeout">fadeout</see>, <see cref="TextureImporter-mipmapFadeDistanceStart">mipmapFadeDistanceStart</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.generateMipsInLinearSpace">
      <summary>
        <para>Should mip maps be generated with gamma correction?</para>
        <para>See Also: <see cref="TextureImporter-mipmapEnabled">mipmapEnabled</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.convertToNormalmap">
      <summary>
        <para>Convert heightmap to normal map?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.normalmap">
      <summary>
        <para>Is this texture a normal map?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.normalmapFilter">
      <summary>
        <para>Normal map filtering mode.</para>
        <para>See Also: <see cref="TextureImporterNormalFilter">TextureImporterNormalFilter</see>, <see cref="TextureImporter-convertToNormalmap">convertToNormalmap</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.heightmapScale">
      <summary>
        <para>Amount of bumpyness in the heightmap.</para>
        <para>See Also: <see cref="TextureImporter-convertToNormalmap">convertToNormalmap</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.lightmap">
      <summary>
        <para>Is this texture a lightmap?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.anisoLevel">
      <summary>
        <para>Anisotropic filtering level of the texture.</para>
        <para>See Also: <see cref="Texture-anisoLevel">Texture.anisoLevel</see>, <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-TextureImporter.html">texture assets</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.filterMode">
      <summary>
        <para>Filtering mode of the texture.</para>
        <para>See Also: <see cref="Texture-filterMode">Texture.filterMode</see>, <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-TextureImporter.html">texture assets</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.wrapMode">
      <summary>
        <para>Wrap mode (Repeat or Clamp) of the texture.</para>
        <para>See Also: <see cref="Texture-wrapMode">Texture.wrapMode</see>, <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-TextureImporter.html">texture assets</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.mipMapBias">
      <summary>
        <para>Mip map bias of the texture.</para>
        <para>See Also: <see cref="Texture-mipMapBias">Texture.mipMapBias</see>, <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-TextureImporter.html">texture assets</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.alphaIsTransparency" />
    <member name="P:UnityEditor.TextureImporter.qualifiesForSpritePacking">
      <summary>
        <para>Returns true if this <see cref="TextureImporter">TextureImporter</see> is setup for Sprite packing.</para>
        <para>If it returns true, texture is imported uncompressed for Sprite packing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spriteImportMode">
      <summary>
        <para>Selects Single or Manual import mode for Sprite textures.</para>
        <para>See Also: <see cref="SpriteImportMode">SpriteImportMode</see> enum.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritesheet">
      <summary>
        <para>Array representing the sections of the atlas corresponding to individual sprite graphics.</para>
        <para>See Also: <see cref="SpriteMetaData">SpriteMetaData</see> class.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePackingTag">
      <summary>
        <para>Selects the <see cref="Sprite">Sprite</see> packing tag.</para>
        <para>Sprites with compatible tags are packed into atlases.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePixelsPerUnit">
      <summary>
        <para>The number of pixels in the sprite that correspond to one unit in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spritePivot">
      <summary>
        <para>The point in the Sprite object's coordinate space where the graphic is located.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.spriteBorder">
      <summary>
        <para>Border sizes of the generated sprites.</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporter.textureType">
      <summary>
        <para>Which type of texture are we dealing with here.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImporterSettings">
      <summary>
        <para>Stores settings of a <see cref="TextureImporter">TextureImporter</see>.</para>
        <para>See Also: TextureImporter.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.#ctor" />
    <member name="M:UnityEditor.TextureImporterSettings.Equal(UnityEditor.TextureImporterSettings,UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Test texture importer settings for equality.</para>
        <para>Objects are reported equal if either the references or the values are equal.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.CopyTo(UnityEditor.TextureImporterSettings)">
      <summary>
        <para>Copy parameters into another TextureImporterSettings object.</para>
      </summary>
      <param name="target">TextureImporterSettings object to copy settings to.</param>
    </member>
    <member name="M:UnityEditor.TextureImporterSettings.ApplyTextureType(UnityEditor.TextureImporterType,System.Boolean)">
      <summary>
        <para>Configure parameters to import a texture for a purpose of <i>type</i>, as described <see cref="TextureImporterType">here</see>.</para>
      </summary>
      <param name="type">Texture type. See <see cref="TextureImporterType">TextureImporterType</see>.</param>
      <param name="applyAll">If <c>false</c>, change only specific properties. Exactly which, depends on <i>type</i>.</param>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.mipmapFilter" />
    <member name="P:UnityEditor.TextureImporterSettings.mipmapEnabled" />
    <member name="P:UnityEditor.TextureImporterSettings.generateMipsInLinearSpace" />
    <member name="P:UnityEditor.TextureImporterSettings.linearTexture" />
    <member name="P:UnityEditor.TextureImporterSettings.fadeOut" />
    <member name="P:UnityEditor.TextureImporterSettings.borderMipmap" />
    <member name="P:UnityEditor.TextureImporterSettings.mipmapFadeDistanceStart" />
    <member name="P:UnityEditor.TextureImporterSettings.mipmapFadeDistanceEnd" />
    <member name="P:UnityEditor.TextureImporterSettings.convertToNormalMap" />
    <member name="P:UnityEditor.TextureImporterSettings.normalMap" />
    <member name="P:UnityEditor.TextureImporterSettings.heightmapScale" />
    <member name="P:UnityEditor.TextureImporterSettings.normalMapFilter" />
    <member name="P:UnityEditor.TextureImporterSettings.grayscaleToAlpha" />
    <member name="P:UnityEditor.TextureImporterSettings.readable" />
    <member name="P:UnityEditor.TextureImporterSettings.textureFormat" />
    <member name="P:UnityEditor.TextureImporterSettings.maxTextureSize" />
    <member name="P:UnityEditor.TextureImporterSettings.npotScale" />
    <member name="P:UnityEditor.TextureImporterSettings.lightmap" />
    <member name="P:UnityEditor.TextureImporterSettings.generateCubemap" />
    <member name="P:UnityEditor.TextureImporterSettings.seamlessCubemap" />
    <member name="P:UnityEditor.TextureImporterSettings.filterMode" />
    <member name="P:UnityEditor.TextureImporterSettings.aniso" />
    <member name="P:UnityEditor.TextureImporterSettings.mipmapBias" />
    <member name="P:UnityEditor.TextureImporterSettings.wrapMode" />
    <member name="P:UnityEditor.TextureImporterSettings.compressionQuality" />
    <member name="P:UnityEditor.TextureImporterSettings.alphaIsTransparency" />
    <member name="P:UnityEditor.TextureImporterSettings.spriteMode">
      <summary>
        <para>Sprite texture import mode.</para>
        <para>This value corresponds to the SpriteImportMode enum as follows:</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePixelsPerUnit">
      <summary>
        <para>The number of pixels in the sprite that correspond to one unit in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteExtrude">
      <summary>
        <para>The number of blank pixels to leave between the edge of the graphic and the mesh.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteMeshType" />
    <member name="P:UnityEditor.TextureImporterSettings.spriteAlignment">
      <summary>
        <para>Edge-relative alignment of the sprite graphic.</para>
        <para>The possible values relate to the SpriteAlignment enum as follows:</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spritePivot">
      <summary>
        <para>Pivot point of the Sprite relative to its graphic's rectangle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TextureImporterSettings.spriteBorder">
      <summary>
        <para>Border sizes of the generated sprites.</para>
        <para>X=left, Y=bottom, Z=right, W=top.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TextureImportInstructions" />
    <member name="M:UnityEditor.TextureImportInstructions.#ctor" />
    <member name="F:UnityEditor.TextureImportInstructions.compressedFormat" />
    <member name="F:UnityEditor.TextureImportInstructions.uncompressedFormat" />
    <member name="F:UnityEditor.TextureImportInstructions.recommendedFormat" />
    <member name="F:UnityEditor.TextureImportInstructions.desiredFormat" />
    <member name="F:UnityEditor.TextureImportInstructions.usageMode" />
    <member name="F:UnityEditor.TextureImportInstructions.colorSpace" />
    <member name="F:UnityEditor.TextureImportInstructions.width" />
    <member name="F:UnityEditor.TextureImportInstructions.height" />
    <member name="F:UnityEditor.TextureImportInstructions.compressionQuality" />
    <member name="T:UnityEditor.AudioImporterFormat">
      <summary>
        <para>Imported audio format for <see cref="AudioImporter">AudioImporter</see>.</para>
        <para>See Also: AudioImporter.format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterFormat.Native">
      <summary>
        <para>Native format.</para>
        <para>See Also: AudioImporter.format.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterFormat.Compressed">
      <summary>
        <para>Ogg compressed audio.</para>
        <para>See Also: AudioImporter.format.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AudioImporterLoadType">
      <summary>
        <para>The way we load audio assets <see cref="AudioImporter">AudioImporter</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterLoadType.DecompressOnLoad">
      <summary>
        <para>Decompress audio data on load.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterLoadType.CompressedInMemory">
      <summary>
        <para>Keep audio compressed in memory.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AudioImporterLoadType.StreamFromDisc">
      <summary>
        <para>Stream audio from disc.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ShaderImporter" />
    <member name="M:UnityEditor.ShaderImporter.#ctor" />
    <member name="M:UnityEditor.ShaderImporter.GetShader" />
    <member name="M:UnityEditor.ShaderImporter.SetDefaultTextures(System.String[],UnityEngine.Texture[])" />
    <member name="M:UnityEditor.ShaderImporter.GetDefaultTexture(System.String)" />
    <member name="T:UnityEditor.AudioImporter">
      <summary>
        <para>Audio importer lets you modify <see cref="AudioClip">AudioClip</see> import settings from editor scripts.</para>
        <para>Settings of this class match the ones exposed in <see href="http://docs.unity3d.com/ScriptReference/../Manual/class-AudioClip.html">Audio Import Settings</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.format">
      <summary>
        <para>Format of imported audio.</para>
        <para>See Also: <see cref="AudioImporterFormat">AudioImporterFormat</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.compressionBitrate">
      <summary>
        <para>Compression bitrate.</para>
        <para>This value is in bits/second, e.g. 128000 would be 128 kbps.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.threeD">
      <summary>
        <para>Is this clip a 2D or 3D sound?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.forceToMono">
      <summary>
        <para>Force this clip to mono?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.hardware">
      <summary>
        <para>Use hardware voice/decoder if available.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.loadType">
      <summary>
        <para>Set/get the way Unity is loading the Audio data.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AudioImporter.loopable">
      <summary>
        <para>Is this clip loopable?</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MovieImporter">
      <summary>
        <para>AssetImporter for importing MovieTextures.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MovieImporter.#ctor" />
    <member name="P:UnityEditor.MovieImporter.quality">
      <summary>
        <para>Quality setting to use when importing the movie. This is a float value from 0 to 1.</para>
        <para>0 uses strongest compression for small download sizes.
1 uses best quality resulting in larger files.
This corresponds directly to the slider in the MovieImporter inspector. The default value is 0.5.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.linearTexture">
      <summary>
        <para>Is this a linear texture or an sRGB texture (Only used when performing linear rendering).</para>
        <para>The default value is sRGB.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.MovieImporter.duration">
      <summary>
        <para>Duration of the Movie to be imported in seconds.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.FontTextureCase">
      <summary>
        <para>Texture case constants for TrueTypeFontImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.Dynamic">
      <summary>
        <para>Render characters into font texture at runtime as needed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.Unicode">
      <summary>
        <para>Import a set of Unicode characters common for latin scripts.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCII">
      <summary>
        <para>Import basic ASCII character set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCIIUpperCase">
      <summary>
        <para>Only import upper case ASCII character set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.ASCIILowerCase">
      <summary>
        <para>Only import lower case ASCII character set.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontTextureCase.CustomSet">
      <summary>
        <para>Custom set of characters.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.FontRenderingMode">
      <summary>
        <para>Font rendering mode constants for TrueTypeFontImporter.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.Smooth">
      <summary>
        <para>Use Anti-Aliased Font rendering. When using dynamic fonts, this is the mode which is fastest in rendering font textures.</para>
        <para>This mode looks very similar to the font rendering on Mac OS X.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.HintedSmooth">
      <summary>
        <para>Use Anti-Aliased Font rendering with hinting. This forces character lines to run along pixel boundaries, and generally produces.</para>
        <para>A crisper output then <see cref="FontRenderingMode.Smooth">FontRenderingMode.Smooth</see>, more similar to the font rendering used on Windows. It is slower to render
textures then when using smooth mode, but may be easier to read for small font sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.HintedRaster">
      <summary>
        <para>Use hinted font rendering without anti-aliasing. This is the crispest font rendering option, and may be most readable for small.</para>
        <para>Font sizes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.FontRenderingMode.OSDefault">
      <summary>
        <para>Use the OS default font rendering mode. This selects either <see cref="FontRenderingMode.HintedSmooth">FontRenderingMode.HintedSmooth</see> or.</para>
        <para>
          <see cref="FontRenderingMode.HintedRaster">FontRenderingMode.HintedRaster</see> on Windows, and either <see cref="FontRenderingMode.Smooth">FontRenderingMode.Smooth</see> or
<see cref="FontRenderingMode.HintedRaster">FontRenderingMode.HintedRaster</see> on Mac OS X, depending on the system preferences. This mode
is only available for dynamic fonts, as static fonts are generated at build time.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TrueTypeFontImporter">
      <summary>
        <para>AssetImporter for importing Fonts.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.TrueTypeFontImporter.#ctor" />
    <member name="M:UnityEditor.TrueTypeFontImporter.GenerateEditableFont(System.String)">
      <summary>
        <para>Create an editable copy of the font asset at <c>path</c>.</para>
        <para>Use this function if you want to modify the font generated by the TrueTypeFontImporter, with a custom texture
or otherwise. It will create a copy of the font asset at <c>path</c> with an accompanying png Texture file and a
Material, which you can all modify to meet your needs. A reference to the newly created editable Font is
returned.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontSize">
      <summary>
        <para>Font size to use for importing the characters.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontTextureCase">
      <summary>
        <para>Use this to adjust which characters should be imported.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.includeFontData">
      <summary>
        <para>If this is enabled, the actual font will be embedded into the asset for Dynamic fonts.</para>
        <para>When you disable this, the user must have the font installed in his system to use it.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontNames">
      <summary>
        <para>An array of font names, to be used when includeFontData is set to false.</para>
        <para>The first font in the array available on the OS will be used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.customCharacters">
      <summary>
        <para>A custom set of characters to be included in the Font Texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontTTFName">
      <summary>
        <para>The internal font name of the TTF file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.characterSpacing">
      <summary>
        <para>Spacing between character images in the generated texture in pixels. This is useful if you want to render text using a shader which samples pixels outside of the character area (like an outline shader).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.characterPadding">
      <summary>
        <para>Border pixels added to character images for padding. This is useful if you want to render text using a shader which needs to render outside of the character area (like an outline shader).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.TrueTypeFontImporter.fontRenderingMode">
      <summary>
        <para>Font rendering mode to use for this font.</para>
        <para>S.A. <see cref="FontRenderingMode">FontRenderingMode</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MeshUtility">
      <summary>
        <para>Various utilities for mesh manipulation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MeshUtility.SetPerTriangleUV2(UnityEngine.Mesh,UnityEngine.Vector2[])">
      <summary>
        <para>Will insert per-triangle uv2 in mesh and handle vertex splitting etc.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MeshUtility.SetMeshCompression(UnityEngine.Mesh,UnityEditor.ModelImporterMeshCompression)">
      <summary>
        <para>Change the mesh compression setting for a mesh.</para>
        <para>This allows you to enable mesh compression for meshes created from scripting, which have not been generated by the ModelImporter. That way you can generate compressed mesh assets from code.</para>
      </summary>
      <param name="mesh">The mesh to set the compression mode for.</param>
      <param name="compression">The compression mode to set.</param>
    </member>
    <member name="M:UnityEditor.MeshUtility.GetMeshCompression(UnityEngine.Mesh)">
      <summary>
        <para>Returns the mesh compression setting for a Mesh.</para>
      </summary>
      <param name="mesh">The mesh to get information on.</param>
    </member>
    <member name="M:UnityEditor.MeshUtility.Optimize(UnityEngine.Mesh)">
      <summary>
        <para>Optimizes the mesh for GPU access.</para>
        <para>This operation might take a while but will make the geometry displayed be faster.
You should use it if you generate a mesh from scratch procedurally and you want to trade better runtime performance against higher load time. 
Internally it converts the mesh to triangle list and optimizes the triangles and vertices for both pre and post transform cache locality.
For imported models you should never call this as the import pipeline already does it for you.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ArrayUtility">
      <summary>
        <para>Helpers for builtin arrays ...</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ArrayUtility.#ctor" />
    <member name="M:UnityEditor.ArrayUtility.ArrayEquals``1(``0[],``0[])">
      <summary>
        <para>Compares two arrays.</para>
      </summary>
      <returns>
        <para>True if both have the same number of elements and the contents are equal.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.FindAll``1(``0[],System.Predicate{``0})" />
    <member name="M:UnityEditor.ArrayUtility.Find``1(``0[],System.Predicate{``0})" />
    <member name="M:UnityEditor.ArrayUtility.FindIndex``1(``0[],System.Predicate{``0})">
      <summary>
        <para>Find the index of the first element that satisfies the predicate.</para>
      </summary>
      <returns>
        <para>The zero-based index of the first occurrence of the element, if found; otherwise, �1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.IndexOf``1(``0[],``0)">
      <summary>
        <para>Index of first element with value <i>value</i>.</para>
      </summary>
      <returns>
        <para>The zero-based index of the element, if found; otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.LastIndexOf``1(``0[],``0)">
      <summary>
        <para>Index of the last element with value <i>value</i>.</para>
      </summary>
      <returns>
        <para>The zero-based index of the element, if found; otherwise -1.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ArrayUtility.Contains``1(``0[],``0)">
      <summary>
        <para>Determines if the array contains the item.</para>
      </summary>
      <returns>
        <para>True if <i>item</i> is in <i>array</i>, false otherwise.</para>
      </returns>
    </member>
    <member name="T:UnityEditor.UnwrapParam">
      <summary>
        <para>Unwrapping settings.</para>
        <para>Use them only if you fully understand what they mean.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.UnwrapParam.SetDefaults(UnityEditor.UnwrapParam@)">
      <summary>
        <para>Will set default values for params.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.angleError">
      <summary>
        <para>Maximum allowed angle distortion (0..1).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.areaError">
      <summary>
        <para>Maximum allowed area distortion (0..1).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.hardAngle">
      <summary>
        <para>This angle (or greater) between triangles will cause seam to be created.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UnwrapParam.packMargin">
      <summary>
        <para>How much uv-islands will be padded.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Unwrapping">
      <summary>
        <para>This class holds everything you may need in regard to uv-unwrapping.</para>
        <para>WARNING: preliminary interface, will be changed in future versions
e.g. in future it will contain possibility to pack your uvs optimally etc.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.#ctor" />
    <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh)">
      <summary>
        <para>Will generate per-triangle uv (3 uv pairs for each triangle) with default settings.</para>
        <para>You'll need to merge them yourself.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GeneratePerTriangleUV(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
      <summary>
        <para>Will generate per-triangle uv (3 uv pairs for each triangle) with provided settings.</para>
        <para>You'll need to merge them yourself.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh)">
      <summary>
        <para>Will auto generate uv2 with default settings for provided mesh, and fill them in.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Unwrapping.GenerateSecondaryUVSet(UnityEngine.Mesh,UnityEditor.UnwrapParam)">
      <summary>
        <para>Will auto generate uv2 with provided settings for provided mesh, and fill them in.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Lightmapping">
      <summary>
        <para>Allows to control the lightmapping job.</para>
        <para>Before starting the job the bake settings can be set via</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeAsync">
      <summary>
        <para>Starts an asynchronous bake job.</para>
        <para>The progress can be monitored via <see cref="Lightmapping-isRunning">isRunning</see> property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Bake">
      <summary>
        <para>Stars a synchronous bake job.</para>
        <para>Returns when the lightmapping has finished.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeSelectedAsync">
      <summary>
        <para>Starts an asynchronous bake job for the selected objects.</para>
        <para>The progress can be monitored via <see cref="Lightmapping-isRunning">isRunning</see> property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeSelected">
      <summary>
        <para>Stars a synchronous bake job for the selected objects.</para>
        <para>Returns when the lightmapping has finished.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeLightProbesOnlyAsync">
      <summary>
        <para>Starts an asynchronous bake job, but only bakes light probes.</para>
        <para>The progress can be monitored via <see cref="Lightmapping-isRunning">isRunning</see> property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.BakeLightProbesOnly">
      <summary>
        <para>Starts a synchronous bake job, but only bakes light probes.</para>
        <para>Returns when the lightmapping has finished.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Cancel">
      <summary>
        <para>Cancels the currently running asynchronous bake job.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Lightmapping.Clear">
      <summary>
        <para>Deletes all lightmap assets and makes all lights behave as if they weren't baked yet.</para>
        <para>Only those assets are deleted that are in the folder with the same name as the scene name
AND their name follows the pattern LightmapFar-#.exr or LightmapNear-#.exr.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Lightmapping.isRunning">
      <summary>
        <para>Returns true when the bake job is running, false otherwise (Read Only).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapBakeQuality">
      <summary>
        <para>Bake quality setting for <see cref="LightmapEditorSettings">LightmapEditorSettings</see>.</para>
        <para>See Also: LightmapEditorSettings.quality.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapBakeQuality.High">
      <summary>
        <para>High quality bake for final renderings.</para>
        <para>See Also: LightmapEditorSettings.quality.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.LightmapBakeQuality.Low">
      <summary>
        <para>Low quality bake for preview renderings.</para>
        <para>See Also: LightmapEditorSettings.quality.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.LightmapEditorSettings">
      <summary>
        <para>Various settings for the bake.</para>
        <para>The bake can be started via</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.bounceBoost">
      <summary>
        <para>Boosts indirect light (Beast's diffuseBoost property, pow(colorComponent, (1.0 / diffuseBoost))).</para>
        <para>It can be used to increase the amount of bounced light within a scene
and it's cheaper than setting the number of bounces to high values.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.bounceIntensity">
      <summary>
        <para>Indirect light intensity multiplier.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasWidth">
      <summary>
        <para>The maximum width of an individual lightmap texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.maxAtlasHeight">
      <summary>
        <para>The maximum height of an individual lightmap texture.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.resolution">
      <summary>
        <para>Lightmap resolution in texels per world unit.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.lastUsedResolution">
      <summary>
        <para>Last used lightmap resolution (i.e. resolution of the lightmaps currently in the scene) in texels per world unit.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.skyLightColor">
      <summary>
        <para>Sky light color.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.skyLightIntensity">
      <summary>
        <para>Sky light intensity.</para>
        <para>Sky light can give very good results in outdoor scenes but
also significantly increases bake time. Value of 0 disables sky light.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.quality">
      <summary>
        <para>Quality of the bake.</para>
        <para>Controls Beast's final gather and anti-aliasing settings
(some of which are also exposed in Unity).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.textureCompression">
      <summary>
        <para>Whether to use DXT1 compression on the generated lightmaps.</para>
        <para>Compression is recommended to improve lightmap rendering performance
and lower the memory footprint, but might introduce visible artifacts
in scenes without high-detail texturing that would mask-out the issues.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.bounces">
      <summary>
        <para>Number of light bounces in the global illumination computation (with 0 meaning direct light only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.finalGatherRays">
      <summary>
        <para>Number of rays used in the final gather integrator.</para>
        <para>Since lower number of rays leads to creating points of higher variance
(so a higher contrast difference), you will probably need a higher setting
for <see cref="LightmapEditorSettings-finalGatherContrastThreshold">finalGatherContrastThreshold</see> to prevent points from clumping together.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.finalGatherContrastThreshold">
      <summary>
        <para>Contrast threshold between neighbouring surface points.</para>
        <para>Above that value new final gather sample points will be created - it tells the algorithm
to place points where they are really needed, so in areas where the
light changes quickly.
In other words, it adaptively controls the number of points.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.finalGatherGradientThreshold">
      <summary>
        <para>Controls how the irradiance gradient is used in the interpolation.</para>
        <para>Each point stores it�s irradiance gradient which can be used to improve the interpolation.
However in some situations using the gradient can result in white �halos� and other artifacts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.finalGatherInterpolationPoints">
      <summary>
        <para>The number of final gather points to interpolate between.</para>
        <para>Higher values give smoother results, but can also smooth out details in the lighting.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.aoAmount">
      <summary>
        <para>Controls how much Ambient Occlusion to blend into the Final Gather solution.</para>
        <para>Can be used to get more contrast in your lighting.
Set to a value greater than 0 for AO to be calculated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.aoMaxDistance">
      <summary>
        <para>Beyond this distance a ray is considered to be unoccluded.</para>
        <para>Can be used to avoid full occlusion in closed scenes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.aoContrast">
      <summary>
        <para>Controls the look of the transition from black to white.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.lockAtlas">
      <summary>
        <para>If enabled, Beast atlasing won't be run and lightmap indices, tiling and offset won't be modified on Mesh Renderers.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.LightmapEditorSettings.padding">
      <summary>
        <para>Texel separation between shapes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StaticOcclusionCulling">
      <summary>
        <para>StaticOcclusionCulling lets you perform static occlusion culling operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.#ctor" />
    <member name="M:UnityEditor.StaticOcclusionCulling.GenerateInBackground">
      <summary>
        <para>Used to compute static occlusion culling data asynchronously.</para>
        <para>The memory limit (specified in bytes) is a hint to the PVS baking system about the likely memory requirements.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.Cancel">
      <summary>
        <para>Used to cancel asynchronous generation of static occlusion culling data.</para>
        <para>See Also: <see cref="StaticOcclusionCulling.GenerateInBackground">StaticOcclusionCulling.GenerateInBackground</see>, <see cref="StaticOcclusionCulling-isRunning">isRunning</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.Clear">
      <summary>
        <para>Clears the PVS of the opened scene.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCulling.SetDefaultOcclusionBakeSettings" />
    <member name="P:UnityEditor.StaticOcclusionCulling.isRunning">
      <summary>
        <para>Used to check if asynchronous generation of static occlusion culling data is still running.</para>
        <para>See Also: <see cref="StaticOcclusionCulling.GenerateInBackground">StaticOcclusionCulling.GenerateInBackground</see>, <see cref="StaticOcclusionCulling.Cancel">StaticOcclusionCulling.Cancel</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.smallestOccluder" />
    <member name="P:UnityEditor.StaticOcclusionCulling.smallestHole" />
    <member name="P:UnityEditor.StaticOcclusionCulling.backfaceThreshold" />
    <member name="P:UnityEditor.StaticOcclusionCulling.doesSceneHaveManualPortals">
      <summary>
        <para>Does the scene contain any occlusion portals that were added manually rather than automatically?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCulling.umbraDataSize">
      <summary>
        <para>Returns the size in bytes that the PVS data is currently taking up in this scene on disk.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StaticOcclusionCullingVisualization">
      <summary>
        <para>Used to visualize static occlusion culling at development time in scene view.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.StaticOcclusionCullingVisualization.#ctor" />
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showOcclusionCulling">
      <summary>
        <para>If set to true, visualization of target volumes is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPreVisualization">
      <summary>
        <para>If set to true, the visualization lines of the PVS volumes will show all cells rather than cells after culling.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showViewVolumes">
      <summary>
        <para>If set to true, visualization of view volumes is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showDynamicObjectBounds" />
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showPortals">
      <summary>
        <para>If set to true, visualization of portals is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showVisibilityLines">
      <summary>
        <para>If set to true, visualization of portals is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.showGeometryCulling">
      <summary>
        <para>If set to true, culling of geometry is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.isPreviewOcclusionCullingCameraInPVS" />
    <member name="P:UnityEditor.StaticOcclusionCullingVisualization.previewOcclusionCamera" />
    <member name="T:UnityEditor.ShaderUtil">
      <summary>
        <para>Utility functions to assist with working with shaders from the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ShaderUtil.#ctor" />
    <member name="M:UnityEditor.ShaderUtil.GetPropertyCount(UnityEngine.Shader)">
      <summary>
        <para>Get the number of properties in Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyDescription(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Get the description of the shader propery at index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyName(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Get the name of the shader propery at index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetPropertyType(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Get the ShaderProperyType of the shader propery at index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetRangeLimits(UnityEngine.Shader,System.Int32,System.Int32)">
      <summary>
        <para>Get Limits for a range property at index propertyIdx of Shader s.</para>
      </summary>
      <param name="defminmax">Which value to get: 0 = default, 1 = min, 2 = max.</param>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.GetTexDim(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Gets the ShaderPropertyTexDim of the texture at property index propertyIdx of Shader s.</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.IsShaderPropertyHidden(UnityEngine.Shader,System.Int32)">
      <summary>
        <para>Is the shader propery at index propertyIdx of Shader s hidden?</para>
      </summary>
      <param name="s">The shader to check against.</param>
      <param name="propertyIdx">The property index to use.</param>
    </member>
    <member name="M:UnityEditor.ShaderUtil.CreateShaderAsset(System.String)" />
    <member name="M:UnityEditor.ShaderUtil.UpdateShaderAsset(UnityEngine.Shader,System.String)" />
    <member name="P:UnityEditor.ShaderUtil.hardwareSupportsRectRenderTexture">
      <summary>
        <para>Does the current hardware support render textues.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ShaderUtil+ShaderPropertyType">
      <summary>
        <para>Type of a given texture property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Color">
      <summary>
        <para>Color Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Vector">
      <summary>
        <para>Vector Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Float">
      <summary>
        <para>Float Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.Range">
      <summary>
        <para>Range Property.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyType.TexEnv">
      <summary>
        <para>Texture Property.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ShaderUtil+ShaderPropertyTexDim">
      <summary>
        <para>Representation of the texture dimensions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimUnknown">
      <summary>
        <para>Unknown Texture dimension.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimNone" />
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimDeprecated1D" />
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDim2D">
      <summary>
        <para>2D Texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDim3D">
      <summary>
        <para>3D Texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimCUBE">
      <summary>
        <para>Texure Cube (Cubemap).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimAny">
      <summary>
        <para>Any texture dimension (catch all).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ShaderUtil+ShaderPropertyTexDim.TexDimRECT">
      <summary>
        <para>Texture Rect.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.NavMeshBuilder">
      <summary>
        <para>Navigation mesh builder interface.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.NavMeshBuilder.BuildNavMesh">
      <summary>
        <para>Build the Navmesh.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.NavMeshBuilder.BuildNavMeshAsync">
      <summary>
        <para>Build the Navmesh Asyncronously.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.NavMeshBuilder.ClearAllNavMeshes">
      <summary>
        <para>Clear all Navmeshes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.NavMeshBuilder.Cancel">
      <summary>
        <para>Cancel Navmesh construction.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.NavMeshBuilder.isRunning">
      <summary>
        <para>Returns true if an asynchronous build is still running.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ResolutionDialogSetting">
      <summary>
        <para>Resolution dialog setting.</para>
        <para>This enum is used when setting the behaviour of the resolution dialog in PlayerSettings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.Disabled">
      <summary>
        <para>Never show the resolutions dialog.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.Enabled">
      <summary>
        <para>Show the resolutions dialog on first launch.</para>
        <para>A setting in the dialog lets the user enable hiding of it. The user is able to have it show again by holding the option/alt key when on application launch.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ResolutionDialogSetting.HiddenByDefault">
      <summary>
        <para>Hide the resolutions dialog on first launch.</para>
        <para>The user is able to have it show again by holding the option/alt key when on application launch.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptingImplementation">
      <summary>
        <para>Scripting implementation (backend).</para>
        <para>Certain platforms might offer multiple scripting backends.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.Mono2x">
      <summary>
        <para>The standard Mono 2.6 runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.IL2CPP">
      <summary>
        <para>Unity's .NET runtime.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptingImplementation.WinRTDotNET">
      <summary>
        <para>Microsoft's .NET runtime.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iPhoneArchitecture">
      <summary>
        <para>Architecture used for iOS builds.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iPhoneArchitecture.ARMv7">
      <summary>
        <para>ARMv7.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iPhoneArchitecture.ARM64">
      <summary>
        <para>ARM 64-bit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iPhoneArchitecture.Universal">
      <summary>
        <para>Universal binary (containing both ARM64 and ARMv7 code).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AspectRatio">
      <summary>
        <para>Aspect ratio.</para>
        <para>This enum is used when modifying and inspecting supported aspect ratios in PlayerSettings.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.AspectOthers">
      <summary>
        <para>Undefined aspect ratios.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect4by3">
      <summary>
        <para>4:3 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect5by4">
      <summary>
        <para>5:4 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect16by10">
      <summary>
        <para>16:10 aspect ratio.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AspectRatio.Aspect16by9">
      <summary>
        <para>16:9 aspect ratio.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MacFullscreenMode">
      <summary>
        <para>Mac fullscreen mode.</para>
        <para>This defines how fullscreen mode is handled in Mac OS X standalone builds.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.CaptureDisplay">
      <summary>
        <para>Capture the display.</para>
        <para>In this mode Unity will capture the display and change the hardware resolution to the requested mode.
No other UI content can appear, and it is not possible to switch to other applications while in fullscreen mode.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
        <para>In this mode, Unity will create a window which is covering the whole screen. It will always run at desktop
resolution, and other requested resolutions will be scaled up. OS UI will correctly show on top of the fullscreen
window (such as IME input windows, GameCenter or Mac App Store UI, Battery warnings, etc). On OS X 10.7 and newer,
it is possible to switch to other Applications using trackpad swipes or Cmd-Tab.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MacFullscreenMode.FullscreenWindowWithDockAndMenuBar">
      <summary>
        <para>Fullscreen window with Dock and Menu bar.</para>
        <para>Same as Fullscreen window mode, but Unity will also show the Menu bar and Dock if the cursor moves to the 
edges of the screen, like other OS X fullscreen Apps. It is possible to switch between fullscreen and windowed 
modes using the fullscreen button in the window title bar (or in the menu bar in fullscreen mode).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.D3D9FullscreenMode">
      <summary>
        <para>Direct3D 9 fullscreen mode.</para>
        <para>This defines how fullscreen mode is handled in Windows standalone builds when using Direct3D 9.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D9FullscreenMode.ExclusiveMode">
      <summary>
        <para>Exclusive mode.</para>
        <para>In this mode Unity will change the monitor resolution and claim exclusive use of the target display.
Note that monitor selection is not available from the startup dialog when using exclusive mode. Also, run in background is not supported when the player is minimized.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.D3D9FullscreenMode.FullscreenWindow">
      <summary>
        <para>Fullscreen window.</para>
        <para>In this mode, Unity will create a window which is covering the whole screen. It will always run at desktop resolution, and other requested resolutions will be scaled up. OS UI will correctly show on top of the fullscreen window (such as IME input windows).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.StrippingLevel">
      <summary>
        <para>Managed code stripping level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.Disabled">
      <summary>
        <para>Managed code stripping is disabled.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.StripAssemblies">
      <summary>
        <para>Unused parts of managed code are stripped away.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.StripByteCode">
      <summary>
        <para>Managed method bodies are stripped away. AOT platforms only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.StrippingLevel.UseMicroMSCorlib">
      <summary>
        <para>Lightweight mscorlib version will be used at expense of limited compatibility.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptCallOptimizationLevel">
      <summary>
        <para>Script call optimization level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptCallOptimizationLevel.SlowAndSafe">
      <summary>
        <para>Default setting.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ScriptCallOptimizationLevel.FastButNoExceptions">
      <summary>
        <para>Script method call overhead decreased at the expense of limited compatibility.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSSdkVersion">
      <summary>
        <para>Supported iOS SDK versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSSdkVersion.DeviceSDK">
      <summary>
        <para>Device SDK.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSSdkVersion.SimulatorSDK">
      <summary>
        <para>Simulator SDK.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSTargetOSVersion">
      <summary>
        <para>Supported iOS deployment versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_0">
      <summary>
        <para>iOS 4.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_1">
      <summary>
        <para>iOS 4.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_2">
      <summary>
        <para>iOS 4.2.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_4_3">
      <summary>
        <para>iOS 4.3.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_5_0">
      <summary>
        <para>iOS 5.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_5_1">
      <summary>
        <para>iOS 5.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_6_0">
      <summary>
        <para>iOS 6.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_7_0">
      <summary>
        <para>iOS 7.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_7_1">
      <summary>
        <para>iOS 7.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_8_0">
      <summary>
        <para>iOS 8.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.iOS_8_1">
      <summary>
        <para>iOS 8.1.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetOSVersion.Unknown">
      <summary>
        <para>Unknown iOS version, managed by user.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSTargetDevice">
      <summary>
        <para>Target iOS device.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPhoneOnly">
      <summary>
        <para>iPhone/iPod Only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPadOnly">
      <summary>
        <para>iPad Only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetDevice.iPhoneAndiPad">
      <summary>
        <para>Universal : iPhone/iPod + iPad.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSShowActivityIndicatorOnLoading">
      <summary>
        <para>Activity Indicator on loading.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.WhiteLarge">
      <summary>
        <para>White Large.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.White">
      <summary>
        <para>White.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.Gray">
      <summary>
        <para>Gray.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSShowActivityIndicatorOnLoading.DontShow">
      <summary>
        <para>Don't Show.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidTargetDevice">
      <summary>
        <para>Target Android device architecture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.FAT">
      <summary>
        <para>All supported architectures.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.ARMv7">
      <summary>
        <para>ARMv7 only.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidTargetDevice.x86">
      <summary>
        <para>Intel only.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidSdkVersions">
      <summary>
        <para>Supported Android SDK versions.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel9">
      <summary>
        <para>Android 2.3.1, "Gingerbread", API level 9.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel10">
      <summary>
        <para>Android 2.3.3, "Gingerbread", API level 10.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel11">
      <summary>
        <para>Android 3.0, "Honeycomb", API level 11.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel12">
      <summary>
        <para>Android 3.1, "Honeycomb", API level 12.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel13">
      <summary>
        <para>Android 3.2, "Honeycomb", API level 13.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel14">
      <summary>
        <para>Android 4.0, "Ice Cream Sandwich", API level 14.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel15">
      <summary>
        <para>Android 4.0.3, "Ice Cream Sandwich", API level 15.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel16">
      <summary>
        <para>Android 4.1, "Jelly Bean", API level 16.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel17">
      <summary>
        <para>Android 4.2, "Jelly Bean", API level 17.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel18">
      <summary>
        <para>Android 4.3, "Jelly Bean", API level 18.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSdkVersions.AndroidApiLevel19">
      <summary>
        <para>Android 4.4, "KitKat", API level 19.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidPreferredInstallLocation">
      <summary>
        <para>Preferred application install location.</para>
        <para>See Also: <see cref="PlayerSettings.Android.preferredInstallLocation">PlayerSettings.Android.preferredInstallLocation</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.Auto">
      <summary>
        <para>Let the OS decide, app doesn't have any preferences.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.PreferExternal">
      <summary>
        <para>Prefer external, if possible. Install to internal otherwise.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidPreferredInstallLocation.ForceInternal">
      <summary>
        <para>Force installation into internal memory. Needed for things like Live Wallpapers.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidShowActivityIndicatorOnLoading">
      <summary>
        <para>Application should show ActivityIndicator when loading.</para>
        <para>See Also: <see cref="PlayerSettings.Android.showActivityIndicatorOnLoading">PlayerSettings.Android.showActivityIndicatorOnLoading</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Large">
      <summary>
        <para>Large.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedLarge">
      <summary>
        <para>Inversed Large.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.Small">
      <summary>
        <para>Small.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.InversedSmall">
      <summary>
        <para>Inversed Small.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidShowActivityIndicatorOnLoading.DontShow">
      <summary>
        <para>Don't Show.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.TargetGlesGraphics">
      <summary>
        <para>Target GLES graphics.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TargetGlesGraphics.OpenGLES_2_0">
      <summary>
        <para>Use OpenGL ES 2.0.</para>
        <para>Always choose OpenGL ES 2.0, even if newer API versions are available.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TargetGlesGraphics.OpenGLES_3_0">
      <summary>
        <para>Use OpenGL ES 3.0.</para>
        <para>Always try to use OpenGL ES 3.0. On Android, the APK will be marked with "Requires GL ES 3.0" in the application manifest (but only if targeting Android version 4.3 or greater). Note that the application will still attempt to fall back to OpenGL ES 2.0 if 3.0 is not available for some reason.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.TargetGlesGraphics.Automatic">
      <summary>
        <para>Automatically select the graphics API level.</para>
        <para>Select the best graphics API based on the device capabilities. In most cases this means first attempting to create OpenGL ES 3.0 context and on failure automatically fall back to OpenGL 2.0. The developer should make sure the application works in both OpenGL ES 2.0 and 3.0 modes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSTargetResolution">
      <summary>
        <para>Deployment target iOS device resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.Native">
      <summary>
        <para>Native device resolution.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.ResolutionAutoPerformance">
      <summary>
        <para>Auto (Best Performane).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.ResolutionAutoQuality">
      <summary>
        <para>Auto (Best Quality).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.Resolution320p">
      <summary>
        <para>320p (iPhone).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.Resolution640p">
      <summary>
        <para>640p (iPhone Retina Display).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSTargetResolution.Resolution768p">
      <summary>
        <para>768p (iPad).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.UIOrientation">
      <summary>
        <para>Default mobile device orientation.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.Portrait">
      <summary>
        <para>Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.PortraitUpsideDown">
      <summary>
        <para>Portrait upside down.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.LandscapeRight">
      <summary>
        <para>Landscape: clockwise from Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.LandscapeLeft">
      <summary>
        <para>Landscape : counter-clockwise from Portrait.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.UIOrientation.AutoRotation">
      <summary>
        <para>Auto Rotation Enabled.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.iOSStatusBarStyle">
      <summary>
        <para>iOS status bar style.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.Default">
      <summary>
        <para>Default.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.BlackTranslucent">
      <summary>
        <para>Black translucent.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.iOSStatusBarStyle.BlackOpaque">
      <summary>
        <para>Black opaque.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AndroidSplashScreenScale">
      <summary>
        <para>Android splash screen scale modes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.Center">
      <summary>
        <para>Center.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFit">
      <summary>
        <para>Scale to fit.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.AndroidSplashScreenScale.ScaleToFill">
      <summary>
        <para>Scale to fill.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ApiCompatibilityLevel">
      <summary>
        <para>.NET API compatibility level.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0">
      <summary>
        <para>.NET 2.0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ApiCompatibilityLevel.NET_2_0_Subset">
      <summary>
        <para>.NET 2.0 Subset.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings">
      <summary>
        <para>Player Settings is where you define various parameters for the final game that you will build in Unity. Some of these values are used in the Resolution Dialog that launches when you open a standalone game.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Get user-specified symbols for script compilation for the given build target group.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetScriptingDefineSymbolsForGroup(UnityEditor.BuildTargetGroup,System.String)">
      <summary>
        <para>Set user-specified symbols for script compilation for the given build target group.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.HasAspectRatio(UnityEditor.AspectRatio)">
      <summary>
        <para>Returns whether or not the specified aspect ratio is enabled.</para>
        <para>Aspect Ratios selectable in the Resolution Dialog will be monitor-supported resolutions of enabled items from this list.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetAspectRatio(UnityEditor.AspectRatio,System.Boolean)">
      <summary>
        <para>Enables the specified aspect ratio.</para>
        <para>Aspect Ratios selectable in the Resolution Dialog will be monitor-supported resolutions of enabled items from this list.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetIconsForTargetGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns the list of assigned icons for the specified platform.</para>
        <para>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform.
Each texture in the returned array correspond to the corresponding entry in the list of icon sizes returned by GetIconSizesForTargetGroup.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.SetIconsForTargetGroup(UnityEditor.BuildTargetGroup,UnityEngine.Texture2D[])">
      <summary>
        <para>Assign a list of icons for the specified platform.</para>
        <para>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform.
The list will only be assigned if it has the same length as the list of icon sizes returned by GetIconSizesForTargetGroup
and if the specified platform is supported in this editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PlayerSettings.GetIconSizesForTargetGroup(UnityEditor.BuildTargetGroup)">
      <summary>
        <para>Returns a list of icon sizes for the specified platform.</para>
        <para>Most platforms support viewing icons in multiple sizes so Unity lets you specify multiple icon textures for each platform.
Use this function to get the sizes to use for the specified platform, where each size specifies both the width and height in pixels.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.companyName">
      <summary>
        <para>The name of your company.</para>
        <para>This is used to locate the preferences file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.productName">
      <summary>
        <para>The name of your product.</para>
        <para>This will appear on the menu bar when your game is running and is used to locate the preferences file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.productGUID" />
    <member name="P:UnityEditor.PlayerSettings.colorSpace">
      <summary>
        <para>Set the color space for the current project.</para>
        <para>This is a slow process and may cause a reimport of some assets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultScreenWidth">
      <summary>
        <para>Default horizontal dimension of stand-alone player window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultScreenHeight">
      <summary>
        <para>Default vertical dimension of stand-alone player window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultWebScreenWidth">
      <summary>
        <para>Default horizontal dimension of web player window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultWebScreenHeight">
      <summary>
        <para>Default vertical dimension of web player window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.displayResolutionDialog">
      <summary>
        <para>Defines the behaviour of the Resolution Dialog on product launch.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultIsFullScreen">
      <summary>
        <para>If enabled, the game will default to fullscreen mode.</para>
        <para>The</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultIsNativeResolution" />
    <member name="P:UnityEditor.PlayerSettings.runInBackground">
      <summary>
        <para>If enabled, your game will continue to run after lost focus.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.captureSingleScreen">
      <summary>
        <para>Defines if fullscreen games should darken secondary displays.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.usePlayerLog">
      <summary>
        <para>Write a log file with debugging information.</para>
        <para>This is useful to find out what happened if there are problems with your game.
When publishing games for Apple's Mac App Store, it is recommended to turn this off,
because Apple may reject your submission otherwise.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.resizableWindow">
      <summary>
        <para>Use resizable window in standalone player builds.</para>
        <para>By default standalone Windows, Mac and Linux builds use a non-resizable
game window. Enabling this makes the window resizable.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stripPhysics">
      <summary>
        <para>Remove Physics code from player to save build size (Flash only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useMacAppStoreValidation">
      <summary>
        <para>Enable receipt validation for the Mac App Store.</para>
        <para>This enables receipt validation for the Mac App Store. If this is enabled, your game will
only run when it contains a valid receipt from the Mac App Store. Use this when submitting
games to Apple for publishing on the App Store. This prevents people from running the game
on any computer then the one it was purchased on.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.macFullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in Mac OS X standalones.</para>
        <para>Set this to change how fullscreen mode is handled in Mac OS X standalone builds. See MacFullscreenMode for descriptions of the possible modes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.d3d9FullscreenMode">
      <summary>
        <para>Define how to handle fullscreen mode in Windows standalones (Direct3D 9 mode).</para>
        <para>Set this to change how fullscreen mode is handled in Windows standalone builds with Direct3D 9. See D3D9FullscreenMode for descriptions of the possible modes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.d3d11ForceExclusiveMode">
      <summary>
        <para>Force exclusive mode in DirectX 11.</para>
        <para>Only recommended to fix Oculus vsync.  There are known issues with alt-tab.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.visibleInBackground">
      <summary>
        <para>On Windows, show the application in the background if Fullscreen Windowed mode is used.</para>
        <para>This setting is used with the Fullscreen Windowed mode. If this setting is false and you Alt-Tab out of the application, it will minimize. If this setting is true, the application will not minimize and remain visible behind other windows.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.forceSingleInstance">
      <summary>
        <para>Restrict standalone players to a single concurrent running instance.</para>
        <para>This detects at startup whether another instance of the same player is already running,
and aborts with an error message if so.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.firstStreamedLevelWithResources">
      <summary>
        <para>First level to have access to all Resources.Load assets in Streamed Web Players.</para>
        <para>Use this variable to specify the index of the first level that will have access to all Resources.Load assets.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.resolutionDialogBanner">
      <summary>
        <para>The image to display in the Resolution Dialog window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.locationUsageDescription">
      <summary>
        <para>Describes the reason for access to the user's location data.</para>
        <para>When the OS prompts the user to allow access to the location data, this text is displayed as part of the dialog box.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.iPhoneBundleIdentifier">
      <summary>
        <para>The bundle identifier of the iPhone application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.keystorePass">
      <summary>
        <para>Password used for interacting with the Android Keystore.</para>
        <para>This is the password for retrieving and updating the keys inside a particular keystore (known as [-storepass &amp;lt;storepass&amp;gt;] on the keytool/jarsigner command line).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.keyaliasPass">
      <summary>
        <para>Password for the key used for signing an Android application.</para>
        <para>This is the password for signing an application with a particular key (known as [-keypass &amp;lt;keypass&amp;gt;] on the keytool/jarsigner command line).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxTitleId">
      <summary>
        <para>Xbox 360 title id.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxImageXexFilePath">
      <summary>
        <para>Xbox 360 ImageXex override configuration file path.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxSpaFilePath">
      <summary>
        <para>Xbox 360 SPA file path.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxGenerateSpa">
      <summary>
        <para>Xbox 360 auto-generation of _SPAConfig.cs.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableGuest" />
    <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectResources">
      <summary>
        <para>Xbox 360 Kinect resource file deployment.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectHeadOrientation">
      <summary>
        <para>Xbox 360 Kinect Head Orientation file deployment.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxDeployKinectHeadPosition">
      <summary>
        <para>Xbox 360 Kinect Head Position file deployment.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxSplashScreen">
      <summary>
        <para>Xbox 360 splash screen.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxAdditionalTitleMemorySize" />
    <member name="P:UnityEditor.PlayerSettings.xboxEnableKinect">
      <summary>
        <para>Xbox 360 Kinect title flag - if false, the Kinect APIs are inactive.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableKinectAutoTracking">
      <summary>
        <para>Xbox 360 Kinect automatic skeleton tracking.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxEnableSpeech">
      <summary>
        <para>Xbox 360 Kinect Enable Speech Engine.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxSpeechDB">
      <summary>
        <para>Xbox 360 Kinect Speech DB.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.gpuSkinning">
      <summary>
        <para>Enable GPU skinning on capable platforms.</para>
        <para>DX11, OpenGL ES 3.0 and Xbox 360 can do mesh skinning on the GPU.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.xboxPIXTextureCapture" />
    <member name="P:UnityEditor.PlayerSettings.xboxEnableAvatar">
      <summary>
        <para>Xbox 360 Avatars.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3TitleConfigPath">
      <summary>
        <para>PS3 Title Config file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3DLCConfigPath">
      <summary>
        <para>PS3 DLC Config file.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3ThumbnailPath">
      <summary>
        <para>PS3 Thumbnail Image.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3BackgroundPath">
      <summary>
        <para>PS3 Background Image.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3SoundPath">
      <summary>
        <para>PS3 Background Sound.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3TrophyCommId">
      <summary>
        <para>PS3 Trophy Communication ID.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3NpCommunicationPassphrase">
      <summary>
        <para>The Np Comminication passphrase to use when connecting to Playstation®Network.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3TrophyCommSig">
      <summary>
        <para>PS3 Trophy Communication Signature.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3TrophyPackagePath">
      <summary>
        <para>PS3 Trophy Package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3BootCheckMaxSaveGameSizeKB">
      <summary>
        <para>PS3 Bootcheck maximum savegame size ( as per TRC R224 ). This should include the total estimated size for the savegames (including icon sizes).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3TrialMode">
      <summary>
        <para>PS3 Title is Trial.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.ps3SaveGameSlots">
      <summary>
        <para>PS3 Save Game slots.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2NPTrophyPackPath">
      <summary>
        <para>Path specifying wher to copy a trophy pack from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2NPCommsID">
      <summary>
        <para>PS Vita NP Communications ID.</para>
        <para>Deprecated, the communcations ID is now taken from the package parameters filer (param.sfx).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2NPCommsPassphrase">
      <summary>
        <para>PS Vita NP Passphrase.</para>
        <para>Required if your application connects to the Playstation®Network.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2NPCommsSig">
      <summary>
        <para>PS Vita NP Signature.</para>
        <para>Required if your application connects to the Playstation®Network.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2ParamSfxPath">
      <summary>
        <para>Path specifying where to copy the package parameter file (param.sfx) from.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2PackagePassword">
      <summary>
        <para>32 character password for use if you want to access the contents of a package.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2DLCConfigPath">
      <summary>
        <para>Deprecated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2ThumbnailPath">
      <summary>
        <para>Deprecated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2BackgroundPath">
      <summary>
        <para>Deprecated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2SoundPath">
      <summary>
        <para>Deprecated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2TrophyCommId">
      <summary>
        <para>Deprecated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.psp2TrophyPackagePath">
      <summary>
        <para>Deprecated.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bundleIdentifier">
      <summary>
        <para>Application bundle identifier shared between iOS &amp;amp; Android platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.bundleVersion">
      <summary>
        <para>Application bundle version shared between iOS &amp;amp; Android platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.statusBarHidden">
      <summary>
        <para>Should status bar be hidden. Shared between iOS &amp;amp; Android platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.strippingLevel">
      <summary>
        <para>Managed code stripping level.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.defaultInterfaceOrientation">
      <summary>
        <para>Default screen orientation for mobiles.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortrait">
      <summary>
        <para>Is auto-rotation to portrait supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToPortraitUpsideDown">
      <summary>
        <para>Is auto-rotation to portrait upside-down supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeRight">
      <summary>
        <para>Is auto-rotation to landscape right supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.allowedAutorotateToLandscapeLeft">
      <summary>
        <para>Is auto-rotation to landscape left supported?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.useAnimatedAutorotation">
      <summary>
        <para>Let the OS autorotate the screen as the device orientation changes.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.use32BitDisplayBuffer">
      <summary>
        <para>32-bit Display Buffer is used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.targetGlesGraphics" />
    <member name="P:UnityEditor.PlayerSettings.apiCompatibilityLevel">
      <summary>
        <para>.NET API compatibility level.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stripUnusedMeshComponents">
      <summary>
        <para>Should unused <see cref="Mesh">Mesh</see> components be excluded from game build?</para>
        <para>When this setting is on, Mesh components (e.g. tangent vectors, vertex colors etc.)
that are not in use will be removed. This is good for game data size and runtime performance.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.advancedLicense">
      <summary>
        <para>Is the advanced version being used?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.aotOptions">
      <summary>
        <para>Additional AOT compilation options. Shared by AOT platforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.accelerometerFrequency">
      <summary>
        <para>Accelerometer update frequency.</para>
        <para>Note: build-time option. Has no effect if changed when application is already running.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.MTRendering">
      <summary>
        <para>Is multi-threaded rendering enabled?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.mobileMTRendering" />
    <member name="P:UnityEditor.PlayerSettings.renderingPath">
      <summary>
        <para>Which rendering path is enabled?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.mobileRenderingPath" />
    <member name="P:UnityEditor.PlayerSettings.useDirect3D11">
      <summary>
        <para>Should Direct3D 11 be used when available?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings.stereoscopic3D">
      <summary>
        <para>Should player render in stereoscopic 3d on supported hardware?</para>
        <para>This means player will attempt to use Direct3D 11.1 stereoscopic rendering feature and split the main camera into two virtual eyes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+Android">
      <summary>
        <para>Android specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.use24BitDepthBuffer">
      <summary>
        <para>24-bit Depth Buffer is used.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.bundleVersionCode">
      <summary>
        <para>Android bundle version code.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.minSdkVersion">
      <summary>
        <para>Minimal Android SDK version.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.preferredInstallLocation">
      <summary>
        <para>Preferred application install location.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.forceInternetPermission">
      <summary>
        <para>Force internet permission flag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.forceSDCardPermission">
      <summary>
        <para>Force SD card permission.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.targetDevice">
      <summary>
        <para>Android target device.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.splashScreenScale">
      <summary>
        <para>Android splash screen scale mode.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.keystoreName">
      <summary>
        <para>Android keystore name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.keystorePass">
      <summary>
        <para>Android keystore password.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.keyaliasName">
      <summary>
        <para>Android key alias name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.keyaliasPass">
      <summary>
        <para>Android key alias password.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.licenseVerification">
      <summary>
        <para>License verification flag.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.useAPKExpansionFiles">
      <summary>
        <para>Use APK Expansion Files.</para>
        <para>When enabled the player executable and data will be split up, with a generated .apk consisting only of the executable (Java and Native) code (~10MB), and the data for the first scene.
The application data will be serialized separately to an APK Expansion File (.obb).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+Android.showActivityIndicatorOnLoading">
      <summary>
        <para>Application should show ActivityIndicator when loading.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+iOS">
      <summary>
        <para>iOS specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.applicationDisplayName">
      <summary>
        <para>iOS application display name.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.scriptCallOptimization">
      <summary>
        <para>Script calling optimization.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.sdkVersion">
      <summary>
        <para>Active iOS SDK version used for build.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.targetOSVersion">
      <summary>
        <para>Deployment minimal version of iOS.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.targetDevice">
      <summary>
        <para>Targeted device.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.targetResolution">
      <summary>
        <para>Targeted resolution.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.prerenderedIcon">
      <summary>
        <para>Icon is prerendered.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.requiresPersistentWiFi">
      <summary>
        <para>Application requires persistent WiFi.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.statusBarStyle">
      <summary>
        <para>Status bar style.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.exitOnSuspend">
      <summary>
        <para>Application should exit when suspended to background.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+iOS.showActivityIndicatorOnLoading">
      <summary>
        <para>Application should show ActivityIndicator when loading.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+MetroCompilationOverrides" />
    <member name="F:UnityEditor.PlayerSettings+MetroCompilationOverrides.None" />
    <member name="F:UnityEditor.PlayerSettings+MetroCompilationOverrides.UseNetCore" />
    <member name="F:UnityEditor.PlayerSettings+MetroCompilationOverrides.UseNetCorePartially" />
    <member name="T:UnityEditor.PlayerSettings+WP8">
      <summary>
        <para>Windows Phone 8 specific player setttings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+WP8.unprocessedPlugins">
      <summary>
        <para>Array of plugin file names that should not be processed by Unity's internal tools.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+BlackBerry">
      <summary>
        <para>BlackBerry specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.deviceAddress">
      <summary>
        <para>The address used when accessing the device.</para>
        <para>The device address can be found on the device by accessing: Settings/About/Network
Either the USB or WiFi address can be used (USB recommended).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.devicePassword">
      <summary>
        <para>The password used when accessing the device.</para>
        <para>The device password is needed when performing following actions:
-Uploading a Debug Token
-Deploying an application to the device
-Retrieving a log from the device.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenPath">
      <summary>
        <para>File system path to the debug token that the editor is currently sourcing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenExpires">
      <summary>
        <para>The date in which the debug token is set to expire.</para>
        <para>The debug token can be renewed by pressing 'Renew' in the Publishing Section.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.tokenAuthor">
      <summary>
        <para>The plaintext name of the author that is associated with the application.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.authorId">
      <summary>
        <para>Unique developer identification assigned by BlackBerry.</para>
        <para>The AuthorID is a unique identifier used whenever creating debug tokens or submission bar files.  This ID is unique to each vendor using AppWorld.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.cskPassword">
      <summary>
        <para>The keystore password used when communicating with BlackBerry.</para>
        <para>This is used for encrypting communications with the RIM Signing Authority. It is required only when signing applications or when creating debug tokens.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+BlackBerry.saveLogPath">
      <summary>
        <para>The file system path that the device log will be saved to when it is downloaded.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+PS3">
      <summary>
        <para>PS3 specific player settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+PS3.videoMemoryForVertexBuffers">
      <summary>
        <para>The amount of video memory (in MB) that is set aside for vertex data allocations. Allocations which do not fit into the area are allocated from system memory.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PlayerSettings+SamsungTV">
      <summary>
        <para>Samsung Smart TV specific Player Settings.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.PlayerSettings+SamsungTV.deviceAddress">
      <summary>
        <para>The address used when accessing the device.</para>
        <para>The device address can be found when running Unity Launcher on the main screen.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PreferenceItem">
      <summary>
        <para>The PreferenceItem attribute allows you to add preferences sections to the Preferences Window.</para>
        <para>The PreferenceItem attribute turns any static function into an OnGUI callback. Only static functions can use the PreferenceItem attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.PreferenceItem.#ctor(System.String)">
      <summary>
        <para>Creates a section in the Preferences Window called <c>name</c> and invokes the static function following it for the section's GUI.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ScriptableWizard">
      <summary>
        <para>Derive from this class to create an editor wizard.</para>
        <para>Editor wizards are typically opened using a menu item.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.#ctor" />
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button</para>
      </summary>
      <typeparam name="T">The class implementing the wizard. It has to derive from <see cref="ScriptableWizard">ScriptableWizard</see>.</typeparam>
      <param name="title">The title shown at the top of the wizard window.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button <see cref="ScriptableWizard.OnWizardCreate">OnWizardCreate</see> function will be called.
DisplayWizard will only show one wizard for every wizard class.</para>
      </summary>
      <typeparam name="T">The class implementing the wizard. It has to derive from <see cref="ScriptableWizard">ScriptableWizard</see>.</typeparam>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard``1(System.String,System.String,System.String)">
      <summary>
        <para>Creates a wizard.</para>
        <para>When the user hits the Create button <see cref="ScriptableWizard.OnWizardCreate">OnWizardCreate</see> function will be called.
DisplayWizard will only show one wizard for every wizard class.</para>
      </summary>
      <typeparam name="T">The class implementing the wizard. It has to derive from <see cref="ScriptableWizard">ScriptableWizard</see>.</typeparam>
      <param name="title">The title shown at the top of the wizard window.</param>
      <param name="createButtonName">The text shown on the create button.</param>
      <param name="otherButtonName">The text shown on the optional other button. Leave this parameter out to leave the button out.</param>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type,System.String)">
      <summary>
        <para>TODO.</para>
      </summary>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type)">
      <summary>
        <para>TODO.</para>
      </summary>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="M:UnityEditor.ScriptableWizard.DisplayWizard(System.String,System.Type,System.String,System.String)">
      <summary>
        <para>TODO.</para>
      </summary>
      <returns>
        <para>The wizard.</para>
      </returns>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.helpString">
      <summary>
        <para>Allows you to set the help text of the wizard.</para>
        <para>See Also: ScriptableWizard.OnWizardUpdate</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.errorString">
      <summary>
        <para>Allows you to set the error text of the wizard.</para>
        <para>See Also: ScriptableWizard.OnWizardUpdate</para>
      </summary>
    </member>
    <member name="P:UnityEditor.ScriptableWizard.isValid">
      <summary>
        <para>Allows you to enable and disable the wizard create button, so that the user can not click it.</para>
        <para>See Also: ScriptableWizard.OnWizardUpdate</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedPropertyType">
      <summary>
        <para>Type of a <see cref="SerializedProperty">SerializedProperty</see>.</para>
        <para>See Also: SerializedProperty.propertyType.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Integer">
      <summary>
        <para>Integer property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-intValue">SerializedProperty.intValue</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Boolean">
      <summary>
        <para>Boolean property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-boolValue">SerializedProperty.boolValue</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Float">
      <summary>
        <para>Float property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-floatValue">SerializedProperty.floatValue</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.String">
      <summary>
        <para>String property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-stringValue">SerializedProperty.stringValue</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Color">
      <summary>
        <para>Color property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-colorValue">SerializedProperty.colorValue</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.ObjectReference">
      <summary>
        <para>Reference to another object.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-objectReferenceValue">SerializedProperty.objectReferenceValue</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.LayerMask">
      <summary>
        <para>
          <see cref="LayerMask">LayerMask</see> property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Enum">
      <summary>
        <para>Enumeration property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector2">
      <summary>
        <para>2D vector property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-vector2Value">SerializedProperty.vector2Value</see>, <see cref="Vector2">Vector2</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector3">
      <summary>
        <para>3D vector property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-vector3Value">SerializedProperty.vector3Value</see>, <see cref="Vector3">Vector3</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Vector4">
      <summary>
        <para>4D vector property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-vector4Value">SerializedProperty.vector4Value</see>, <see cref="Vector4">Vector4</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Rect">
      <summary>
        <para>Rectangle property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="SerializedProperty-rectValue">SerializedProperty.rectValue</see>, <see cref="Rect">Rect</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.ArraySize">
      <summary>
        <para>Array size property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Character">
      <summary>
        <para>Character property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.AnimationCurve">
      <summary>
        <para>AnimationCurve property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Bounds">
      <summary>
        <para>Bounds property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="Bounds">Bounds</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Gradient">
      <summary>
        <para>Gradient property.</para>
        <para>See Also: <see cref="SerializedProperty">SerializedProperty</see>, <see cref="Gradient">Gradient</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SerializedPropertyType.Quaternion" />
    <member name="T:UnityEditor.SerializedObject">
      <summary>
        <para>SerializedObject and <see cref="SerializedProperty">SerializedProperty</see> are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</para>
        <para>SerializedObject is used in conjunction with</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object)">
      <summary>
        <para>Create SerializedObject for inspected object.</para>
        <para>See Also: <see cref="SerializedObject.Update">Update</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.#ctor(UnityEngine.Object[])">
      <summary>
        <para>Create SerializedObject for inspected object.</para>
        <para>See Also: <see cref="SerializedObject.Update">Update</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.Update">
      <summary>
        <para>Update serialized object's representation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.SetIsDifferentCacheDirty">
      <summary>
        <para>Update <c>hasMultipleDifferentValues</c> cache on the next /Update()/ call.</para>
        <para>Normally, you should not need to call this, as the SerializedProperty setters take care of this.
However, when you change an object bypassing the SerializedProperty class, you will need to manually call this
to force the difference cache to be updated.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.UpdateIfDirtyOrScript">
      <summary>
        <para>Update serialized object's representation, only if the object has been modified since the last call to Update or if it is a script.</para>
        <para>In which case it is not safe to assume that SetDirty has been called.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.GetIterator">
      <summary>
        <para>Get the first serialized property.</para>
        <para>You can use this to go over all properties of the target object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.FindProperty(System.String)">
      <summary>
        <para>Find serialized property by name.</para>
        <para>You can use this to find a specific property in the target object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.ApplyModifiedProperties">
      <summary>
        <para>Apply property modifications.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedObject.CopyFromSerializedProperty(UnityEditor.SerializedProperty)">
      <summary>
        <para>Copies a value from a SerializedProperty to the same serialized property on this serialized object.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.targetObject">
      <summary>
        <para>The inspected object (Read Only).</para>
        <para>When multi-object editing, the targetObject property will just return the first of the edited objects.
To get all the objects, use the <see cref="SerializedObject-targetObjects">targetObjects</see> property instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.targetObjects">
      <summary>
        <para>The inspected objects (Read Only).</para>
        <para>The serialized object can represent multiple objects simultaneously when multi-object editing.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedObject.isEditingMultipleObjects">
      <summary>
        <para>Does the serialized object represents multiple objects due to multi-object editing? (Read Only)</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SerializedProperty">
      <summary>
        <para>SerializedProperty and <see cref="SerializedObject">SerializedObject</see> are classes for editing properties on objects in a completely generic way that automatically handles undo and styling UI for prefabs.</para>
        <para>SerializedProperty is used in conjunction with <see cref="SerializedObject">SerializedObject</see> and <see cref="Editor">Editor</see> classes.
See Also: <see cref="SerializedObject">SerializedObject</see> class, <see cref="Editor">Editor</see> class.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Returns the element at the specified index in the array.</para>
        <para>See Also: <see cref="SerializedProperty-isArray">isArray</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.InsertArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Insert an empty element at the specified index in the array.</para>
        <para>The value of the inserted element is undefined and should be explicitly set after calling this function.
See Also: <see cref="SerializedProperty-isArray">isArray</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DeleteArrayElementAtIndex(System.Int32)">
      <summary>
        <para>Delete the element at the specified index in the array.</para>
        <para>See Also: <see cref="SerializedProperty-isArray">isArray</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.ClearArray">
      <summary>
        <para>Remove all elements from the array.</para>
        <para>See Also: <see cref="SerializedProperty-isArray">isArray</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.MoveArrayElement(System.Int32,System.Int32)">
      <summary>
        <para>Move an array element from srcIndex to dstIndex.</para>
        <para>The SerializedProperty must be pointed to an array.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Dispose" />
    <member name="M:UnityEditor.SerializedProperty.EqualContents(UnityEditor.SerializedProperty,UnityEditor.SerializedProperty)">
      <summary>
        <para>See if contained serialized properties are equal.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Next(System.Boolean)">
      <summary>
        <para>Move to next property.</para>
        <para>See Also: <see cref="SerializedProperty.NextVisible">NextVisible</see>, <see cref="SerializedProperty.Reset">Reset</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.NextVisible(System.Boolean)">
      <summary>
        <para>Move to next visible property.</para>
        <para>See Also: <see cref="SerializedProperty.Next">Next</see>, <see cref="SerializedProperty.Reset">Reset</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Reset">
      <summary>
        <para>Move to first property of the object.</para>
        <para>See Also: <see cref="SerializedProperty.Next">Next</see>, <see cref="SerializedProperty.NextVisible">NextVisible</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.CountRemaining">
      <summary>
        <para>Count remaining visible properties.</para>
        <para>This is useful for allocating height for drawing this property and all the following ones.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.CountInProperty">
      <summary>
        <para>Count visible children of this property, including this property itself.</para>
        <para>This is useful for allocating height for drawing this property including its children.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.Copy">
      <summary>
        <para>Returns a copy of the SerializedProperty iterator in its current state. This is useful if you want to keep a reference to the current property but continue with the iteration.</para>
        <para>Note that if you keep a reference to an array property and that array is subsequently resized then the stored reference is no longer reliable and should not be used.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DuplicateCommand">
      <summary>
        <para>Duplicates the serialized property.</para>
        <para>The serialized property can't be used anymore after calling this function. A new iterator must be created in that case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.DeleteCommand">
      <summary>
        <para>Deletes the serialized property.</para>
        <para>The serialized property can't be used anymore after calling this function. A new iterator must be created in that case.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.FindPropertyRelative(System.String)">
      <summary>
        <para>Retrieves the SerializedProperty at a relative path to the current property.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEndProperty">
      <summary>
        <para>Retrieves the SerializedProperty that defines the end range of this property.</para>
        <para>It's the first property that's not a child or grandchild of this property.
The end property can be used to iterate over all children of a property by using <see cref="SerializedProperty.EqualContents">EqualContents</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEndProperty(System.Boolean)">
      <summary>
        <para>Retrieves the SerializedProperty that defines the end range of this property.</para>
        <para>It's the first property that's not a child or grandchild of this property.
The end property can be used to iterate over all children of a property by using <see cref="SerializedProperty.EqualContents">EqualContents</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SerializedProperty.GetEnumerator">
      <summary>
        <para>Retrieves an iterator that allows you to iterator over the current nexting of a serialized property.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.serializedObject">
      <summary>
        <para>
          <see cref="SerializedObject">SerializedObject</see> this property belongs to (Read Only).</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasMultipleDifferentValues">
      <summary>
        <para>Does this property represent multiple different values due to multi-object editing? (Read Only)</para>
        <para>See Also: SerializedObject.SetIsDifferentCacheDirty.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.displayName">
      <summary>
        <para>Nice display name of the property. (Read Only)</para>
        <para>See Also: <see cref="SerializedProperty-name">name</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.name">
      <summary>
        <para>Name of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.type">
      <summary>
        <para>Type name of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.tooltip">
      <summary>
        <para>Tooltip of the property. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.depth">
      <summary>
        <para>Nesting depth of the property. (Read Only)</para>
        <para>See Also: <see cref="SerializedProperty-propertyPath">propertyPath</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.propertyPath">
      <summary>
        <para>Full path of the property. (Read Only)</para>
        <para>See Also: <see cref="SerializedProperty-name">name</see>, <see cref="SerializedProperty-depth">depth</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.editable">
      <summary>
        <para>Is this property editable? (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isAnimated" />
    <member name="P:UnityEditor.SerializedProperty.isExpanded">
      <summary>
        <para>Is this property expanded in the inspector?</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasChildren">
      <summary>
        <para>Does it have child properties? (Read Only)</para>
        <para>See Also: <see cref="SerializedProperty-hasVisibleChildren">hasVisibleChildren</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.hasVisibleChildren">
      <summary>
        <para>Does it have visible child properties? (Read Only)</para>
        <para>See Also: <see cref="SerializedProperty-hasChildren">hasChildren</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isInstantiatedPrefab">
      <summary>
        <para>Is property part of a prefab instance? (Read Only)</para>
        <para>See Also: <see cref="SerializedProperty-prefabOverride">prefabOverride</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.prefabOverride">
      <summary>
        <para>Is property's value different from the prefab it belongs to?</para>
        <para>See Also: <see cref="SerializedProperty-isInstantiatedPrefab">isInstantiatedPrefab</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.propertyType">
      <summary>
        <para>Type of this property (Read Only).</para>
        <para>Property type determines which of the "value" variable accessors are valid.
For example, only</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.intValue">
      <summary>
        <para>Value of an integer property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Integer">SerializedPropertyType.Integer</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.boolValue">
      <summary>
        <para>Value of a boolean property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Boolean">SerializedPropertyType.Boolean</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.floatValue">
      <summary>
        <para>Value of a float property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Float">SerializedPropertyType.Float</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.stringValue">
      <summary>
        <para>Value of a string property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.String">SerializedPropertyType.String</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.colorValue">
      <summary>
        <para>Value of a color property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Color">SerializedPropertyType.Color</see>, <see cref="Color">Color</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.animationCurveValue">
      <summary>
        <para>Value of a animation curve property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.AnimationCurve">SerializedPropertyType.AnimationCurve</see>, <see cref="AnimationCurve">AnimationCurve</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.objectReferenceValue">
      <summary>
        <para>Value of an object reference property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.ObjectReference">SerializedPropertyType.ObjectReference</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.objectReferenceInstanceIDValue" />
    <member name="P:UnityEditor.SerializedProperty.enumValueIndex">
      <summary>
        <para>Enum index of an enum property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Enum">SerializedPropertyType.Enum</see>, <see cref="SerializedProperty-enumNames">enumNames</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumNames">
      <summary>
        <para>Names of enumeration of an enum property.</para>
        <para>See Also: <see cref="SerializedProperty-enumDisplayNames">enumDisplayNames</see>, <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Enum">SerializedPropertyType.Enum</see>, <see cref="SerializedProperty-enumValueIndex">enumValueIndex</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.enumDisplayNames">
      <summary>
        <para>Display-friendly names of enumeration of an enum property.</para>
        <para>Similar to enumNames, but formatted with spaces and capitalization.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector2Value">
      <summary>
        <para>Value of a 2D vector property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Vector2">SerializedPropertyType.Vector2</see>, <see cref="Vector2">Vector2</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector3Value">
      <summary>
        <para>Value of a 3D vector property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Vector3">SerializedPropertyType.Vector3</see>, <see cref="Vector3">Vector3</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.vector4Value">
      <summary>
        <para>Value of a 4D vector property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Vector4">SerializedPropertyType.Vector4</see>, <see cref="Vector4">Vector4</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.quaternionValue">
      <summary>
        <para>Value of a quaternion property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Quaternion">SerializedPropertyType.Quaternion</see>, <see cref="Quaternion">Quaternion</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.rectValue">
      <summary>
        <para>Value of a rectangle property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Rect">SerializedPropertyType.Rect</see>, <see cref="Rect">Rect</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.boundsValue">
      <summary>
        <para>Value of bounds property.</para>
        <para>See Also: <see cref="SerializedProperty-propertyType">propertyType</see>, <see cref="SerializedPropertyType.Bounds">SerializedPropertyType.Bounds</see>, <see cref="Bounds">Bounds</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.isArray">
      <summary>
        <para>Is this property an array? (Read Only)</para>
        <para>See Also: <see cref="SerializedProperty-arraySize">arraySize</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.SerializedProperty.arraySize">
      <summary>
        <para>The number of elements in the array. If the SerializedObject contains multiple objects it will return the smallest number of elements. So it is always possible to iterate through the SerializedObject and only get properties found in all objects.</para>
        <para>See Also: <see cref="SerializedProperty-isArray">isArray</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SubstanceImporter">
      <summary>
        <para>The SubstanceImporter class lets you access the imported ProceduralMaterial instances.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.#ctor" />
    <member name="M:UnityEditor.SubstanceImporter.GetPrototypeNames">
      <summary>
        <para>Get a list of the names of the ProceduralMaterial prototypes in the package.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialCount">
      <summary>
        <para>Get the number of ProceduralMaterial instances.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterials">
      <summary>
        <para>Get an array with the ProceduralMaterial instances.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.CloneMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Clone an existing ProceduralMaterial instance.</para>
        <para>NOTE: This requires a re-import to actually create the new instance !</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.InstantiateMaterial(System.String)">
      <summary>
        <para>Instantiate a new ProceduralMaterial instance from a prototype.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.DestroyMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Destroy an existing ProceduralMaterial instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.ResetMaterial(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Reset the ProceduralMaterial to its default values.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.RenameMaterial(UnityEngine.ProceduralMaterial,System.String)">
      <summary>
        <para>Rename an existing ProceduralMaterial instance.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.OnShaderModified(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>After modifying the shader of a ProceduralMaterial, call this function to apply the changes to the importer.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialOffset(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Get the material offset, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetMaterialOffset(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
      <summary>
        <para>Set the material offset, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetMaterialScale(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Get the material scale, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetMaterialScale(UnityEngine.ProceduralMaterial,UnityEngine.Vector2)">
      <summary>
        <para>Set the material scale, which is used for all the textures that are part of this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetGenerateAllOutputs(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Check if the ProceduralMaterial needs to force generation of all its outputs.</para>
        <para>If enabled, the ProceduralMaterial will generate all its outputs.
If disabled, the ProceduralMaterial will generate only the outputs required by the shader.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetGenerateAllOutputs(UnityEngine.ProceduralMaterial,System.Boolean)">
      <summary>
        <para>Specify if the ProceduralMaterial needs to force generation of all its outputs.</para>
        <para>If enabled, the ProceduralMaterial will generate all its outputs.
If disabled, the ProceduralMaterial will generate only the outputs required by the shader.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetAnimationUpdateRate(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Get the ProceduralMaterial animation update rate in millisecond.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetAnimationUpdateRate(UnityEngine.ProceduralMaterial,System.Int32)">
      <summary>
        <para>Set the ProceduralMaterial animation update rate in millisecond.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetGenerateMipMaps(UnityEngine.ProceduralMaterial)">
      <summary>
        <para>Return true if the mipmaps are generated for this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetGenerateMipMaps(UnityEngine.ProceduralMaterial,System.Boolean)">
      <summary>
        <para>Force the generation of mipmaps for this ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String)">
      <summary>
        <para>Get the alpha source of the given texture in the ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetTextureAlphaSource(UnityEngine.ProceduralMaterial,System.String,UnityEngine.ProceduralOutputType)">
      <summary>
        <para>Set the alpha source of the given texture in the ProceduralMaterial.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.GetPlatformTextureSettings(System.String,System.String,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>
        <para>Get the import settings for a given ProceduralMaterial for a given platform (width and height, RAW/Compressed format, loading behavior).</para>
        <para>Returns a default set of settings (512x512, compressed outputs, "Generate at load" behavior) if no settings are found for the input materialName or for the input platform.</para>
      </summary>
      <param name="materialName">The name of the ProceduralMaterial.</param>
      <param name="platform">The name of the platform (can be empty).</param>
      <param name="maxTextureWidth">The maximum texture width for this ProceduralMaterial (output value).</param>
      <param name="maxTextureHeight">The maximum texture height for this ProceduralMaterial (output value).</param>
      <param name="textureFormat">The texture format (0=Compressed, 1=RAW) for this ProceduralMaterial (output value).</param>
      <param name="loadBehavior">The load behavior for this ProceduralMaterial (output value).
Values match the ProceduralMaterial::ProceduralLoadingBehavior enum.</param>
    </member>
    <member name="M:UnityEditor.SubstanceImporter.SetPlatformTextureSettings(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>
        <para>Set the import settings for the input ProceduralMaterial for the input platform (width and height, RAW/Compressed format, loading behavior).</para>
      </summary>
      <param name="materialName">The name of the Procedural Material.</param>
      <param name="platform">The name of the platform (can be empty).</param>
      <param name="maxTextureWidth">The maximum texture width for this Procedural Material.</param>
      <param name="maxTextureHeight">The maximum texture height for this Procedural Material.</param>
      <param name="textureFormat">The texture format (0=Compressed, 1=RAW) for this Procedural Material.</param>
      <param name="loadBehavior">The load behavior for this Procedural Material.
Values match the ProceduralMaterial::ProceduralLoadingBehavior enum.</param>
    </member>
    <member name="T:UnityEditor.SubstanceArchive">
      <summary>
        <para>Class for Substance Archive handling.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.SubstanceArchive.#ctor" />
    <member name="T:UnityEditor.SelectionMode">
      <summary>
        <para>SelectionMode can be used to tweak the selection returned by Selection.GetTransforms.</para>
        <para>The default transform selection mode is: SelectionMode.TopLevel | SelectionMode.ExcludePrefab | SelectionMode.Editable.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Unfiltered">
      <summary>
        <para>Return the whole selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.TopLevel">
      <summary>
        <para>Only return the topmost selected transform. A selected child of another selected transform will be filtered out.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Deep">
      <summary>
        <para>Return the selection and all child transforms of the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.ExcludePrefab">
      <summary>
        <para>Excludes any prefabs from the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Editable">
      <summary>
        <para>Excludes any objects which shall not be modified.</para>
        <para>This will filter generated prefabs from an imported fbx file but not user created prefabs.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.Assets">
      <summary>
        <para>Only return objects that are assets in the Asset directory.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.SelectionMode.DeepAssets">
      <summary>
        <para>If the selection contains folders, also include all assets and subfolders within that folder in the file hierarchy.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Selection">
      <summary>
        <para>Access to the selection in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Selection.#ctor" />
    <member name="M:UnityEditor.Selection.Contains(System.Int32)">
      <summary>
        <para>Returns whether an object is contained in the current selection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Selection.Contains(UnityEngine.Object)">
      <summary>
        <para>Returns whether an object is contained in the current selection.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Selection.GetTransforms(UnityEditor.SelectionMode)">
      <summary>
        <para>Allows for fine grained control of the selection type using the <see cref="SelectionMode">SelectionMode</see> bitmask.</para>
      </summary>
      <param name="mode">Options for refining the selection.</param>
    </member>
    <member name="M:UnityEditor.Selection.GetFiltered(System.Type,UnityEditor.SelectionMode)">
      <summary>
        <para>Returns the current selection filtered by type and mode.</para>
        <para>For a selected GameObject that has multiple Components of <c>type</c>, only the first one will be included in the results. 

if <c>type</c> is a subclass of <see cref="Component">Component</see> or <see cref="GameObject">GameObject</see> the full SelectionMode is supported. 

if <c>type</c> does not subclass from <see cref="Component">Component</see> or <see cref="GameObject">GameObject</see> (eg. <see cref="Mesh">Mesh</see> or <see cref="ScriptableObject">ScriptableObject</see>) only SelectionMode.ExcludePrefab and SelectionMode.Editable are supported.</para>
      </summary>
      <param name="type">Only objects of this type will be retrieved.</param>
      <param name="mode">Further options to refine the selection.</param>
    </member>
    <member name="P:UnityEditor.Selection.transforms">
      <summary>
        <para>Returns the top level selection, excluding prefabs.</para>
        <para>This is the most common selection type when working with scene objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeTransform">
      <summary>
        <para>Returns the active transform. (The one shown in the inspector).</para>
        <para>This will never return prefabs or non-modifyable objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.gameObjects">
      <summary>
        <para>Returns the actual game object selection. Includes prefabs, non-modifyable objects.</para>
        <para>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.transforms instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeGameObject">
      <summary>
        <para>Returns the active game object. (The one shown in the inspector).</para>
        <para>It will also return game objects that might be prefabs or non-modifyable objects.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeObject">
      <summary>
        <para>Returns the actual object selection. Includes prefabs, non-modifyable objects.</para>
        <para>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.activeTransform instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.activeInstanceID">
      <summary>
        <para>Returns the instanceID of the actual object selection. Includes prefabs, non-modifyable objects.</para>
        <para>When working with objects that are primarily in a scene, it is strongly recommended to use Selection.activeTransform instead.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.objects">
      <summary>
        <para>The actual unfiltered selection from the Scene.</para>
        <para>Only objects from the Scene or Hierarchy will be returned, not from the Project View. You can also assign objects to the selection.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.instanceIDs">
      <summary>
        <para>The actual unfiltered selection from the Scene returned as instance ids instead of <see cref="Selection-objects">objects</see>.</para>
        <para>Only objects from the Scene or Hierarchy will be returned, not from the Project View. You can also assign objects to the selection.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Selection.assetGUIDs">
      <summary>
        <para>Returns the guids of the selected assets.</para>
        <para>When working with asset selection it is recommended to use this property since it also handles if folders were selected in the first column in the Project Browser (in Two Column Mode).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorUtility">
      <summary>
        <para>Editor utility functions.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.RevealInFinder(System.String)" />
    <member name="M:UnityEditor.EditorUtility.SetDirty(UnityEngine.Object)">
      <summary>
        <para>Marks <c>target</c> object as dirty.</para>
        <para>Unity internally uses the dirty flag to find out when assets have changed and need to be saved to disk.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.IsPersistent(UnityEngine.Object)">
      <summary>
        <para>Determines if an object is stored on disk.</para>
        <para>Typically assets like prefabs, textures, audio clips, animation clips, materials are stored on disk.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog.</para>
        <para>Use it for displaying message boxes in the editor.</para>
      </summary>
      <param name="title">The title of the message box.</param>
      <param name="message">The text of the message.</param>
      <param name="ok">Label displayed on the OK dialog button.</param>
      <param name="cancel">Label displayed on the Cancel dialog button.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialog(System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog.</para>
        <para>Use it for displaying message boxes in the editor.</para>
      </summary>
      <param name="title">The title of the message box.</param>
      <param name="message">The text of the message.</param>
      <param name="ok">Label displayed on the OK dialog button.</param>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayDialogComplex(System.String,System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays a modal dialog with three buttons.</para>
        <para>Use it for displaying message boxes in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFilePanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "open file" dialog and returns the selected path name.</para>
        <para>See Also:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFilePanel(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save file" dialog and returns the selected path name.</para>
        <para>See Also:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.NaturalCompare(System.String,System.String)">
      <summary>
        <para>Human-like sorting.</para>
        <para>Sorts strings alphabetically, but with numbers in strings numerically, so "xx11" comes after "xx2".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.OpenFolderPanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "open folder" dialog and returns the selected path name.</para>
        <para>See Also:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFolderPanel(System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save folder" dialog and returns the selected path name.</para>
        <para>See Also:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SaveFilePanelInProject(System.String,System.String,System.String,System.String)">
      <summary>
        <para>Displays the "save file" dialog in the Assets folder of the project and returns the selected path name.</para>
        <para>See Also:</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.InstanceIDToObject(System.Int32)">
      <summary>
        <para>Translates an instance ID to a reference to an object.</para>
        <para>If the object is not loaded from disk, loads it from disk.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,System.Int32)">
      <summary>
        <para>Compress a texture.</para>
        <para>Use this function to explicitly compress a texture into specified format.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CompressTexture(UnityEngine.Texture2D,UnityEngine.TextureFormat,UnityEngine.TextureCompressionQuality)">
      <summary>
        <para>Compress a texture.</para>
        <para>Use this function to explicitly compress a texture into specified format.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CopySerialized(UnityEngine.Object,UnityEngine.Object)">
      <summary>
        <para>Copy all settings of a Unity <see cref="Object">Object</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CollectDependencies(UnityEngine.Object[])">
      <summary>
        <para>Calculates and returns a list of all assets the assets listed in <c>roots</c> depend on.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CollectDeepHierarchy(UnityEngine.Object[])">
      <summary>
        <para>Collect all objects in the hierarchy rooted at each of the given objects. This is most useful for linearizing entire GameObject hierarchies including all their components.</para>
        <para>Note that the traversal will not include assets referenced from within the hierarchy. For example, having a MeshFilter component in the hierarchy will not cause the referenced Mesh to be included in the resulting list.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.UnloadUnusedAssets">
      <summary>
        <para>Unloads assets that are not used.</para>
        <para>An asset is deemed to be unused if it isn't reached after walking the whole game object hierarchy, including script components. Static variables are also examined.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.UnloadUnusedAssetsIgnoreManagedReferences">
      <summary>
        <para>Unloads assets that are not used, including the ones that are referenced only from scripts.</para>
        <para>Similarly to UnloadUnusedAssets it will unload unused assets, but additionally it will also unload assets that are
referenced only by the script properties or static variables. The unloaded assets will be loaded again on the first use.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayPopupMenu(UnityEngine.Rect,System.String,UnityEditor.MenuCommand)">
      <summary>
        <para>Displays a popup menu.</para>
        <para>Menu is shown at position <c>pos</c>, generated from a submenu specified by <c>menuItemPath</c> using a
<see cref="MenuCommand">MenuCommand</see> as menu context.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.FocusProjectWindow">
      <summary>
        <para>Brings the project window to the front and focuses it.</para>
        <para>This is commonly called after a menu item that creates and selects an asset is invoked.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.FormatBytes(System.Int32)">
      <summary>
        <para>Returns a text for a number of bytes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayProgressBar(System.String,System.String,System.Single)">
      <summary>
        <para>Displays or updates a progress bar.</para>
        <para>The window title will be set to</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.DisplayCancelableProgressBar(System.String,System.String,System.Single)">
      <summary>
        <para>Displays or updates a progress bar that has a cancel button.</para>
        <para>The window title will be set to</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.ClearProgressBar">
      <summary>
        <para>Removes progress bar.</para>
        <para>Will remove any progress bar previously shown using EditorUtility.DisplayProgressBar.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.GetObjectEnabled(UnityEngine.Object)">
      <summary>
        <para>Is the object enabled (0 disabled, 1 enabled, -1 has no enabled button).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetObjectEnabled(UnityEngine.Object,System.Boolean)">
      <summary>
        <para>Set the enabled state of the object.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.SetSelectedWireframeHidden(UnityEngine.Renderer,System.Boolean)">
      <summary>
        <para>Set whether the renderer's wireframe will be hidden when the renderer's gameobject is selected.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.ExtractOggFile(UnityEngine.Object,System.String)">
      <summary>
        <para>Saves an AudioClip or MovieTexture to a file.</para>
        <para>Will save an Ogg Vorbis or Ogg Theora file at the specified path.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorUtility.CreateGameObjectWithHideFlags(System.String,UnityEngine.HideFlags,System.Type[])">
      <summary>
        <para>Creates a game object with <see cref="HideFlags">HideFlags</see> and specified components.</para>
        <para>This is very similar to creating a</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MenuItem">
      <summary>
        <para>The MenuItem attribute allows you to add menu items to the main menu and inspector context menus.</para>
        <para>The MenuItem attribute turns any static function into a menu command. Only static functions can use the MenuItem attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
        <para>The <c>itemName</c> is the menu item represented like a pathname. Eg. "GameObject/Do Something".</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String,System.Boolean)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
        <para>The <c>itemName</c> is the menu item represented like a pathname. Eg. "GameObject/Do Something"
If <c>isValidateFunction</c> is true, this is a validation function and will be called before invoking the menu function with the same name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuItem.#ctor(System.String,System.Boolean,System.Int32)">
      <summary>
        <para>Creates a menu item and invokes the static function following it, when the menu item is selected.</para>
        <para>The <c>itemName</c> is the menu item represented like a pathname. Eg. "GameObject/Do Something"
If <c>isValidateFunction</c> is true, this is a validation function and will be called before invoking the menu function with the same name.
/Priority/ defines the order by which menu items are displayed in the menu bar.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MenuCommand">
      <summary>
        <para>Used to extract the context for a <see cref="MenuItem">MenuItem</see>. MenuCommand objects are passed to custom menu item functions defined using the <see cref="MenuItem">MenuItem</see> attribute.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuCommand.#ctor(UnityEngine.Object,System.Int32)">
      <summary>
        <para>Creates a new MenuCommand object.</para>
        <para>Context and userData will be initialized to inContext and inUserdata respectively.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MenuCommand.#ctor(UnityEngine.Object)">
      <summary>
        <para>Creates a new MenuCommand object.</para>
        <para>Context will be initialized to inContext and userdata will be set to 0.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MenuCommand.context">
      <summary>
        <para>Context is the object that is the target of a menu command.</para>
        <para>Usually the context is the current selection or the item under
the mouse when invoking a context menu.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.MenuCommand.userData">
      <summary>
        <para>An integer for passing custom information to a menu item.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GizmoType">
      <summary>
        <para>Determines how a gizmo is drawn or picked in the Unity editor.</para>
        <para>The types can be combined together with an OR operator.
See Also: <see cref="DrawGizmo">DrawGizmo</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Active">
      <summary>
        <para>Draw the gizmo if it is active (shown in the inspector).</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.SelectedOrChild">
      <summary>
        <para>Draw the gizmo if it is selected or a child of the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.NotSelected">
      <summary>
        <para>Draw the gizmo if it is not selected and also no parent/ancestor object is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Selected">
      <summary>
        <para>Draw the gizmo if it is selected.</para>
        <para>It is recommended to always use GizmoType.SelectedOrChild instead.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.GizmoType.Pickable">
      <summary>
        <para>The gizmo can be picked in the editor.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DrawGizmo">
      <summary>
        <para>The DrawGizmo attribute allows you to supply a gizmo renderer for any <see cref="Component">Component</see>.</para>
        <para>The renderer function must be static, and take two parameters: the object for which the gizmo is being drawn, and a</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DrawGizmo.#ctor(UnityEditor.GizmoType)">
      <summary>
        <para>Defines when the gizmo should be invoked for drawing.</para>
        <para>See Also: <see cref="GizmoType">GizmoType</see>.</para>
      </summary>
      <param name="gizmo">Flags to denote when the gizmo should be drawn.</param>
    </member>
    <member name="M:UnityEditor.DrawGizmo.#ctor(UnityEditor.GizmoType,System.Type)">
      <summary>
        <para>Same as above. <c>drawnGizmoType</c> determines of what type the object we are drawing the gizmo of has to be.</para>
        <para>If drawnGizmoType is null, the type will be determined from the first parameter of the draw gizmo method.
If drawnGizmoType is not null, it must be the same type as, or a subtype of, the type of the first parameter.</para>
      </summary>
      <param name="gizmo">Flags to denote when the gizmo should be drawn.</param>
      <param name="drawnGizmoType">Type of object for which the gizmo should be drawn.</param>
    </member>
    <member name="T:UnityEditor.EditorPrefs">
      <summary>
        <para>Stores and accesses Unity editor preferences.</para>
        <para>On Mac OS X, EditorPrefs are stored in</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetInt(System.String,System.Int32)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetInt(System.String,System.Int32)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetInt(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetFloat(System.String,System.Single)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String,System.Single)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetFloat(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return <c>defaultValue</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetString(System.String,System.String)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetString(System.String,System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetString(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.SetBool(System.String,System.Boolean)">
      <summary>
        <para>Sets the value of the preference identified by <c>key</c>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetBool(System.String,System.Boolean)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.GetBool(System.String)">
      <summary>
        <para>Returns the value corresponding to <c>key</c> in the preference file if it exists.</para>
        <para>If it doesn't exist, it will return</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.HasKey(System.String)">
      <summary>
        <para>Returns true if <c>key</c> exists in the preferences.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.DeleteKey(System.String)">
      <summary>
        <para>Removes <c>key</c> and its corresponding value from the preferences.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.EditorPrefs.DeleteAll">
      <summary>
        <para>Removes all keys and values from the preferences. Use with caution.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Help">
      <summary>
        <para>Helper class to access Unity documentation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.HasHelpForObject(UnityEngine.Object)">
      <summary>
        <para>Is there a help page for this object?</para>
        <para>See Also: Help.ShowHelpForObject.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.ShowHelpForObject(UnityEngine.Object)">
      <summary>
        <para>Show help page for this object.</para>
        <para>See Also: Help.HasHelpForObject.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.ShowHelpPage(System.String)">
      <summary>
        <para>Show a help page.</para>
        <para>
          <c>page</c> should be the URL of the help page, usually beginning with <c>file://</c>. If <c>page</c> starts
with <c>file:///unity/</c>, then it points to Unity help.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Help.BrowseURL(System.String)">
      <summary>
        <para>Open <c>url</c> in the default web browser.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ObjectNames">
      <summary>
        <para>Helper class for constructing displayable names for objects.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.#ctor" />
    <member name="M:UnityEditor.ObjectNames.NicifyVariableName(System.String)">
      <summary>
        <para>Make a displayable name for a variable.</para>
        <para>This function will insert spaces before capital letters and remove optional <c>m_</c>, <c>_</c>
or <c>k</c> followed by uppercase letter in front of the name.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetInspectorTitle(UnityEngine.Object)">
      <summary>
        <para>Inspector title for an object.</para>
        <para>If an object is a script, this will return "</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetClassName(UnityEngine.Object)">
      <summary>
        <para>Class name of an object.</para>
        <para>See Also: ObjectNames.GetInspectorTitle.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.GetDragAndDropTitle(UnityEngine.Object)">
      <summary>
        <para>Drag and drop title for an object.</para>
        <para>See Also: <see cref="ObjectNames.GetInspectorTitle">ObjectNames.GetInspectorTitle</see>, <see cref="ObjectNames.GetClassName">ObjectNames.GetClassName</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.ObjectNames.SetNameSmart(UnityEngine.Object,System.String)">
      <summary>
        <para>Sets the name of an Object.</para>
        <para>If the object is an Asset, renames the asset and file names to match the object.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DragAndDropVisualMode">
      <summary>
        <para>Visual indication mode for Drag &amp;amp; Drop operation.</para>
        <para>See Also: <see cref="DragAndDrop">DragAndDrop</see> class.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.None">
      <summary>
        <para>No indication (drag should not be performed).</para>
        <para>See Also: <see cref="DragAndDrop">DragAndDrop</see> class.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Copy">
      <summary>
        <para>Copy dragged objects.</para>
        <para>See Also: <see cref="DragAndDrop">DragAndDrop</see> class.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Link">
      <summary>
        <para>Link dragged objects to target.</para>
        <para>See Also: <see cref="DragAndDrop">DragAndDrop</see> class.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Move">
      <summary>
        <para>Move dragged objects.</para>
        <para>See Also: <see cref="DragAndDrop">DragAndDrop</see> class.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Generic">
      <summary>
        <para>Generic drag operation.</para>
        <para>See Also: <see cref="DragAndDrop">DragAndDrop</see> class.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.DragAndDropVisualMode.Rejected">
      <summary>
        <para>Rejected drag operation.</para>
        <para>See Also: <see cref="DragAndDrop">DragAndDrop</see> class.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.DragAndDrop">
      <summary>
        <para>Editor drag &amp;amp; drop operations.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.PrepareStartDrag">
      <summary>
        <para>Clears drag &amp;amp; drop data.</para>
        <para>Clears everything stored in the drag &amp;amp; drop object and prepares it so you can write into it for initiating a drag operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.StartDrag(System.String)">
      <summary>
        <para>Start a drag operation.</para>
        <para>Initiates a drag operation with the current drag object state. Use</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.AcceptDrag">
      <summary>
        <para>Accept a drag operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.GetGenericData(System.String)">
      <summary>
        <para>Get data associated with current drag and drop operation.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.DragAndDrop.SetGenericData(System.String,System.Object)">
      <summary>
        <para>Set data associated with current drag and drop operation.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.objectReferences">
      <summary>
        <para>References to <see cref="Object">objects</see> being dragged.</para>
        <para>Never returns null. If no object references are available returns an empty array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.paths">
      <summary>
        <para>The file names being dragged.</para>
        <para>Never returns null. If no paths are available returns an empty array.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.visualMode">
      <summary>
        <para>The visual indication of the drag.</para>
        <para>Default is DragAndDropVisualMode.Link.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.DragAndDrop.activeControlID">
      <summary>
        <para>Get or set ID of currently active drag and drop control.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MonoScript">
      <summary>
        <para>Representation of Script assets.</para>
        <para>This class represents C#, JavaScript and Boo files stored in the project.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MonoScript.GetClass">
      <summary>
        <para>Returns the System.Type object of the class implemented by this script.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.MonoScript.FromMonoBehaviour(UnityEngine.MonoBehaviour)">
      <summary>
        <para>Returns the MonoScript object containing specified MonoBehaviour.</para>
      </summary>
      <param name="behaviour">The MonoBehaviour whose MonoScript should be returned.</param>
    </member>
    <member name="M:UnityEditor.MonoScript.FromScriptableObject(UnityEngine.ScriptableObject)">
      <summary>
        <para>Returns the MonoScript object containing specified ScriptableObject.</para>
      </summary>
      <param name="scriptableObject">The ScriptableObject whose MonoScript should be returned.</param>
    </member>
    <member name="T:UnityEditor.GenericMenu">
      <summary>
        <para>The GenericMenu lets you create a custom context and dropdown menus.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu.MenuFunction)">
      <summary>
        <para>Add an item to the menu.</para>
        <para>See Also: <see cref="GenericMenu.AddDisabledItem">GenericMenu.AddDisabledItem</see>, <see cref="GenericMenu.AddSeparator">GenericMenu.AddSeparator</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddItem(UnityEngine.GUIContent,System.Boolean,UnityEditor.GenericMenu.MenuFunction2,System.Object)">
      <summary>
        <para>Add an item to the menu.</para>
        <para>See Also: <see cref="GenericMenu.AddDisabledItem">GenericMenu.AddDisabledItem</see>, <see cref="GenericMenu.AddSeparator">GenericMenu.AddSeparator</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddDisabledItem(UnityEngine.GUIContent)">
      <summary>
        <para>Add a disabled item to the menu.</para>
        <para>See Also: <see cref="GenericMenu.AddItem">GenericMenu.AddItem</see>, <see cref="GenericMenu.AddSeparator">GenericMenu.AddSeparator</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.AddSeparator(System.String)">
      <summary>
        <para>Add a seperator item to the menu.</para>
        <para>See Also: <see cref="GenericMenu.AddItem">GenericMenu.AddItem</see>, <see cref="GenericMenu.AddDisabledItem">GenericMenu.AddDisabledItem</see>.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.GetItemCount">
      <summary>
        <para>Get number of items in the menu.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.ShowAsContext">
      <summary>
        <para>Show the menu under the mouse.</para>
        <para>See Also: GenericMenu.DropDown.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.GenericMenu.DropDown(UnityEngine.Rect)">
      <summary>
        <para>Show the menu at the given screen rect.</para>
        <para>See Also: GenericMenu.ShowAsContext.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.ViewTool">
      <summary>
        <para>Enum for Tools.viewTool.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.None">
      <summary>
        <para>View tool is not selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Orbit">
      <summary>
        <para>The orbit tool is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Pan">
      <summary>
        <para>The pan tool is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.Zoom">
      <summary>
        <para>The zoom tool is selected.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.ViewTool.FPS">
      <summary>
        <para>The FPS tool is selected.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PivotMode">
      <summary>
        <para>Where is the tool handle placed.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotMode.Center">
      <summary>
        <para>The tool handle is at the graphical center of the selection.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotMode.Pivot">
      <summary>
        <para>The tool handle is on the pivot point of the active object.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PivotRotation">
      <summary>
        <para>How is the tool handle oriented.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotRotation.Local">
      <summary>
        <para>The tool handle is oriented from the active object.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.PivotRotation.Global">
      <summary>
        <para>The tool handle is aligned along the global axes.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Tool">
      <summary>
        <para>Which tool is active in the editor.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.View">
      <summary>
        <para>The view tool is active - Use <see cref="Tools-viewTool">Tools.viewTool</see> to find out which view tool we're talking about.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Move">
      <summary>
        <para>The move tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Rotate">
      <summary>
        <para>The rotate tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Scale">
      <summary>
        <para>The scale tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.Rect">
      <summary>
        <para>The rect tool is active.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Tool.None">
      <summary>
        <para>No tool is active. Set this to implement your own in-inspector toolbar (like the terrain editor does).</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Tools">
      <summary>
        <para>Class used to manipulate the tools used in Unity's Scene View.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Tools.#ctor" />
    <member name="P:UnityEditor.Tools.current">
      <summary>
        <para>The tool that is currently selected for the Scene View.</para>
        <para>This refers to the View, Move, Rotate and Scale tools available in the toolbar for the main editor window.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.viewTool">
      <summary>
        <para>The option that is currently active for the View tool in the Scene view.</para>
        <para>The View tool has options for Orbit, Pan, Zoom and FPS, depending on which combination mouse buttons and modifier keys is used. This property reports which option is currently active.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handlePosition">
      <summary>
        <para>The position of the tool handle in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRect">
      <summary>
        <para>The rectangle used for the rect tool.</para>
        <para>The rectangle is relative to the <see cref="Tools-handlePosition">handlePosition</see> and is rotated around the <see cref="Tools-handleRectRotation">handleRectRotation</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRectRotation">
      <summary>
        <para>The rotation of the rect tool handle in world space.</para>
        <para>This rotation can change based on the current Scene View camera angle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.pivotMode">
      <summary>
        <para>Are we in Center or Pivot mode.</para>
        <para>See Also: handlePosition.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.rectBlueprintMode">
      <summary>
        <para>Is the rect handle in blueprint mode?</para>
        <para>In blueprint mode the rect handle for RectTransforms ignored local rotation and scale. This can make it easier to work with layouts for RectTransforms.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.handleRotation">
      <summary>
        <para>The rotation of the tool handle in world space.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.pivotRotation">
      <summary>
        <para>What's the rotation of the tool handle.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.hidden">
      <summary>
        <para>Hides the Tools(Move, Rotate, Resize) on the Scene view.</para>
        <para>This will hide the default Move, Rotate and Resize Tools for the curently selected GameObjects, it will not interfere with custom gizmos or handles added by Scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.visibleLayers">
      <summary>
        <para>Which layers are visible in the scene view.</para>
        <para>This is a bitfield.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.Tools.lockedLayers" />
    <member name="T:UnityEditor.LODUtility">
      <summary>
        <para>LOD Utility Helpers.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.LODUtility.CalculateLODGroupBoundingBox(UnityEngine.LODGroup)">
      <summary>
        <para>Recalculate the bounding region for the given LODGroup.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.CompletionAction">
      <summary>
        <para>Different actions a version control task can do upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.UpdatePendingWindow">
      <summary>
        <para>Update the list of pending changes when a task completes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeContentsPendingWindow">
      <summary>
        <para>Update the content of a pending changeset with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnIncomingPendingWindow">
      <summary>
        <para>Update incoming changes window with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnChangeSetsPendingWindow">
      <summary>
        <para>Update the pending changesets with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnGotLatestPendingWindow">
      <summary>
        <para>Refreshes the incoming and pensing changes window upon task completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnSubmittedChangeWindow">
      <summary>
        <para>Refresh the submit window with the result of the task upon completion.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.VersionControl.CompletionAction.OnAddedChangeWindow">
      <summary>
        <para>Refresh windows upon task completion.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.SubmitResult" />
    <member name="F:UnityEditor.VersionControl.SubmitResult.OK" />
    <member name="F:UnityEditor.VersionControl.SubmitResult.Error" />
    <member name="F:UnityEditor.VersionControl.SubmitResult.ConflictingFiles" />
    <member name="F:UnityEditor.VersionControl.SubmitResult.UnaddedFiles" />
    <member name="T:UnityEditor.VersionControl.ConfigField">
      <summary>
        <para>This class describes the.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.name">
      <summary>
        <para>Name of the configuration field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.label">
      <summary>
        <para>Label that is displayed next to the configuration field in the editor.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.description">
      <summary>
        <para>Descrition of the configuration field.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.isRequired">
      <summary>
        <para>This is true if the configuration field is required for the version control plugin to function correctly.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.VersionControl.ConfigField.isPassword">
      <summary>
        <para>This is true if the configuration field is a password field.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.VersionControl.Plugin">
      <summary>
        <para>The plugin class describes a version control plugin and which configuratin options it has.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.VersionControl.Plugin.#ctor" />
    <member name="M:UnityEditor.VersionControl.Plugin.Dispose" />
    <member name="P:UnityEditor.VersionControl.Plugin.availablePlugins" />
    <member name="P:UnityEditor.VersionControl.Plugin.name" />
    <member name="P:UnityEditor.VersionControl.Plugin.configFields">
      <summary>
        <para>Configuration fields of the plugin.</para>
      </summary>
    </member>
    <member name="T:AssetModificationProcessor">
      <summary>
        <para>AssetModificationProcessor lets you hook into saving of serialized assets and scenes which are edited inside Unity.</para>
        <para>This lets you prevent writing of assets by Unity for integration with VCS solutions like Perforce which require
locking of files.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetModificationProcessor">
      <summary>
        <para>AssetModificationProcessor lets you hook into saving of serialized assets and scenes which are edited inside Unity.</para>
        <para>This lets you prevent writing of assets by Unity for integration with VCS solutions like Perforce which require
locking of files.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetPostprocessor">
      <summary>
        <para>AssetPostprocessor lets you hook into the import pipeline and run scripts prior or after importing assets.</para>
        <para>In a production pipeline AssetPostprocessors should always be placed in pre-built dll's in the project instead of in scripts.
AssetPostprocessors change the output of imported assets, thus a compile error in one of the scripts will lead to assets being imported differently.
This can be a severe issue when working in a production pipeline. By using dll's for AssetPostprocessors you ensure that they can always be executed even if the scripts have compile errors.
This way you can override default values in the import settings or modify the imported data like textures or meshes.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String)">
      <summary>
        <para>Logs an import warning to the console.</para>
        <para>Pass an asset as the second argument to link the warning to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogWarning(System.String,UnityEngine.Object)">
      <summary>
        <para>Logs an import warning to the console.</para>
        <para>Pass an asset as the second argument to link the warning to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String)">
      <summary>
        <para>Logs an import error message to the console.</para>
        <para>Pass an asset as the second argument to link the error to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.LogError(System.String,UnityEngine.Object)">
      <summary>
        <para>Logs an import error message to the console.</para>
        <para>Pass an asset as the second argument to link the error to the asset in the editor.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.GetVersion">
      <summary>
        <para>Returns the version of the asset postprocessor.</para>
        <para>When the script is recompiled, if a version change is detected, the assets associated with this asset postprocessor will be reimported.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPostprocessor.GetPostprocessOrder">
      <summary>
        <para>Override the order in which importers are processed.</para>
        <para>By overriding GetImportOrder you can sort in which order postprocessors are executed.
Smaller priorities will be imported first.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetPostprocessor.assetPath">
      <summary>
        <para>The path name of the asset being imported.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetPostprocessor.assetImporter">
      <summary>
        <para>Reference to the asset importer.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetImporter">
      <summary>
        <para>Base class from which asset importers for specific asset types derive.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetImporter.GetAtPath(System.String)">
      <summary>
        <para>Retrieves the asset importer for the asset at <c>path</c>.</para>
        <para>See Also: <see cref="ModelImporter">ModelImporter</see>, <see cref="TextureImporter">TextureImporter</see>, <see cref="AudioImporter">AudioImporter</see>.</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.assetPath">
      <summary>
        <para>The path name of the asset for this importer. (Read Only)</para>
      </summary>
    </member>
    <member name="P:UnityEditor.AssetImporter.userData">
      <summary>
        <para>Get or set any user data.</para>
        <para>This can be usefull during asset post processing if you want to associate eg. a model with an auxillary xml file to control some parts of the importing or you can put your xml data directly in to the userData field.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.AssetPreview" />
    <member name="M:UnityEditor.AssetPreview.GetAssetPreview(UnityEngine.Object)">
      <summary>
        <para>Returns a preview texture for an asset.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreview(System.Int32)" />
    <member name="M:UnityEditor.AssetPreview.IsLoadingAssetPreviews" />
    <member name="M:UnityEditor.AssetPreview.GetMiniThumbnail(UnityEngine.Object)">
      <summary>
        <para>Returns the thumbnail for an object (like the ones you see in the project view).</para>
      </summary>
    </member>
    <member name="M:UnityEditor.AssetPreview.GetMiniTypeThumbnail(System.Type)">
      <summary>
        <para>Returns the thumbnail for the type.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.AtlasSettings">
      <summary>
        <para>Describes the final atlas texture.</para>
        <para>Note that if not all Sprites can be fit to an area defined by maxWidth and maxHeight, multiple atlas pages will be generated.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.format">
      <summary>
        <para>The format of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.usageMode" />
    <member name="F:UnityEditor.Sprites.AtlasSettings.colorSpace">
      <summary>
        <para>Desired color space.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.compressionQuality">
      <summary>
        <para>Quality of atlas texture compression in the range [0..100].</para>
        <para>See Also: <see cref="TextureCompressionQuality">TextureCompressionQuality</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.filterMode">
      <summary>
        <para>Filtering mode of the atlas texture.</para>
        <para>See Also: <see cref="Texture-filterMode">Texture.filterMode</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.maxWidth">
      <summary>
        <para>Maximum width of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.maxHeight">
      <summary>
        <para>Maximum height of the atlas texture.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.paddingPower">
      <summary>
        <para>The amount of extra padding between packed sprites.</para>
        <para>Expressed as the power of 2 minus 1 (i.e. paddingPower of 0 enforces a 2 pixel gap between, paddingPower of 1 - 4 pixel gap, paddingPower of 2 - 8 pixel gap, etc.). This can be used to prevent sprites from bleeding into each other in lower mip levels.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.anisoLevel">
      <summary>
        <para>Anisotropic filtering level of the atlas texture.</para>
        <para>See Also: <see cref="Texture-anisoLevel">Texture.anisoLevel</see>.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.Sprites.AtlasSettings.generateMipMaps">
      <summary>
        <para>Should sprite atlas textures generate mip maps?</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.PackerJob">
      <summary>
        <para>Current Sprite Packer job definition.</para>
        <para>To be used in IPackerPolicy.OnGroupAtlases.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.PackerJob.AddAtlas(System.String,UnityEditor.Sprites.AtlasSettings)">
      <summary>
        <para>Registers a new atlas.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.PackerJob.AssignToAtlas(System.String,UnityEngine.Sprite,UnityEngine.SpritePackingMode,UnityEngine.SpritePackingRotation)">
      <summary>
        <para>Assigns a Sprite to an already registered atlas.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Sprites.DataUtility">
      <summary>
        <para>Helper utilities for accessing <see cref="Sprite">Sprite</see> data.</para>
      </summary>
    </member>
    <member name="M:UnityEditor.Sprites.DataUtility.GetSpriteTexture(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated <see cref="Sprite">Sprite</see> texture. If <see cref="Sprite">Sprite</see> is packed, it is possible to query for both source and atlas textures.</para>
        <para>Note that the sprite atlas cache must be up to date for this API to return valid data.</para>
      </summary>
      <param name="getAtlasData">If <see cref="Sprite">Sprite</see> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="M:UnityEditor.Sprites.DataUtility.GetSpriteMesh(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated <see cref="Sprite">Sprite</see> mesh positions.</para>
      </summary>
      <param name="getAtlasData">If <see cref="Sprite">Sprite</see> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="M:UnityEditor.Sprites.DataUtility.GetSpriteUVs(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated <see cref="Sprite">Sprite</see> mesh uvs.</para>
      </summary>
      <param name="sprite">If <see cref="Sprite">Sprite</see> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="M:UnityEditor.Sprites.DataUtility.GetSpriteIndices(UnityEngine.Sprite,System.Boolean)">
      <summary>
        <para>Returns the generated <see cref="Sprite">Sprite</see> mesh indices.</para>
      </summary>
      <param name="sprite">If <see cref="Sprite">Sprite</see> is packed, it is possible to access data as if it was on the atlas texture.</param>
    </member>
    <member name="T:UnityEditor.HighlightSearchMode">
      <summary>
        <para>Used to specify how to find a given element in the editor to highlight.</para>
        <para>Let's consider various approaches to highlighting the Scale control in the Transform component.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.None">
      <summary>
        <para>Highlights nothing.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Auto">
      <summary>
        <para>Highlights the first element found using any of the search modes.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Identifier">
      <summary>
        <para>Highlights an element with a given identifier text.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.PrefixLabel">
      <summary>
        <para>Highlights an entire editor control using its label text as identifier.</para>
      </summary>
    </member>
    <member name="F:UnityEditor.HighlightSearchMode.Content">
      <summary>
        <para>Highlights an element containing text using the text as identifier.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.MaterialProperty+ApplyPropertyCallback" />
    <member name="T:UnityEditor.Handles+DrawCapFunction">
      <summary>
        <para>The function to use for drawing the handle e.g. Handles.RectangleCap.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.SceneView+OnSceneFunc" />
    <member name="T:UnityEditor.AnimationUtility+OnCurveWasModified" />
    <member name="T:UnityEditor.EditorApplication+ProjectWindowItemCallback">
      <summary>
        <para>Delegate to be called for every visible list item in the ProjectWindow on every OnGUI event.</para>
        <para>See Also: EditorApplication.projectWindowItemOnGUI.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication+HierarchyWindowItemCallback">
      <summary>
        <para>Delegate to be called for every visible list item in the HierarchyWindow on every OnGUI event.</para>
        <para>See Also: EditorApplication.hierarchyWindowItemOnGUI.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.EditorApplication+CallbackFunction">
      <summary>
        <para>Delegate to be called from <see cref="EditorApplication">EditorApplication</see> callbacks.</para>
        <para>CallbackFunction is used by EditorApplication.update, EditorApplication.modifierKeysChanged, EditorApplication.playmodeStateChanged, and
EditorApplication.hierarchyWindowChanged.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.PrefabUtility+PrefabInstanceUpdated">
      <summary>
        <para>Delegate for method that is called after prefab instances in the scene have been updated.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Undo+UndoRedoCallback" />
    <member name="T:UnityEditor.Undo+WillFlushUndoRecord">
      <summary>
        <para>Delegate used for <see cref="Undo-willFlushUndoRecord">willFlushUndoRecord</see>.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.Undo+PostprocessModifications" />
    <member name="T:UnityEditor.GenericMenu+MenuFunction">
      <summary>
        <para>Callback function, called when a menu item is selected.</para>
        <para>See Also: GenericMenu.MenuFunction2.</para>
      </summary>
    </member>
    <member name="T:UnityEditor.GenericMenu+MenuFunction2">
      <summary>
        <para>Callback function with user data, called when a menu item is selected.</para>
        <para>See Also: GenericMenu.MenuFunction.</para>
      </summary>
    </member>
  </members>
</doc>